import {
  esm_default,
  esm_exports,
  getFromWindow,
  getRpcUrl,
  init_esm,
  init_esm2,
  init_esm3,
  parsePersonalSign,
  payloadId,
  signingMethods
} from "./chunk-B7MHWCQD.js";
import {
  LOGIN_PROVIDER,
  init_openlogin_esm
} from "./chunk-YBUVKRRV.js";
import {
  Description,
  ErrorCode,
  Logger,
  checkProperties,
  deepCopy,
  defineReadOnly,
  getStatic,
  init_lib,
  init_lib2,
  require_dist,
  require_immutable,
  require_runtime,
  require_safe_event_emitter,
  resolveProperties,
  shallowCopy
} from "./chunk-WSSW5QEX.js";
import {
  require_dist as require_dist3
} from "./chunk-PMYOGYNA.js";
import {
  esm_browser_exports,
  init_esm_browser,
  require_eventemitter3
} from "./chunk-WYOYCXAS.js";
import {
  require_sha3
} from "./chunk-VG2MP6HV.js";
import {
  require_bn,
  require_ethereumjs_abi,
  require_lib
} from "./chunk-FWQTTRC5.js";
import {
  require_json_rpc_random_id
} from "./chunk-N4XIP4TA.js";
import {
  require_assert,
  require_browser,
  require_dist as require_dist2,
  require_json_stable_stringify,
  require_keccak,
  require_secp256k1
} from "./chunk-HJ4FI4XZ.js";
import {
  buffer_exports,
  init_buffer,
  require_elliptic,
  require_hash,
  require_lodash,
  require_loglevel
} from "./chunk-LZLTGSPD.js";
import {
  crypto_exports,
  init_crypto
} from "./chunk-MDAVZMLP.js";
import {
  ADAPTER_CATEGORY,
  ADAPTER_EVENTS,
  ADAPTER_NAMESPACES,
  ADAPTER_STATUS,
  CHAIN_NAMESPACES,
  EVM_ADAPTERS,
  SOLANA_ADAPTERS,
  SafeEventEmitter,
  WALLET_ADAPTERS,
  WalletInitializationError,
  WalletLoginError,
  _defineProperty,
  getChainConfig,
  init_base_esm,
  init_defineProperty,
  init_openloginJrpc_esm,
  require_buffer,
  require_events,
  require_fast_safe_stringify,
  require_safe_buffer,
  require_util,
  storageAvailable
} from "./chunk-7JKCMCQN.js";
import {
  require_prop_types
} from "./chunk-6NWQTCY7.js";
import {
  require_react_dom
} from "./chunk-XZZLWB6X.js";
import {
  require_react
} from "./chunk-75U2LY4C.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __spreadValues,
  __toCommonJS,
  __toESM
} from "./chunk-JGDUASYK.js";

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init2(payload));
                } catch (x4) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x4) {
                var match = x4.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x4) {
                  control = x4;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x4) {
                  control = x4;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x4) {
                control = x4;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s4 = sampleLines.length - 1;
              var c4 = controlLines.length - 1;
              while (s4 >= 1 && c4 >= 0 && sampleLines[s4] !== controlLines[c4]) {
                c4--;
              }
              for (; s4 >= 1 && c4 >= 0; s4--, c4--) {
                if (sampleLines[s4] !== controlLines[c4]) {
                  if (s4 !== 1 || c4 !== 1) {
                    do {
                      s4--;
                      c4--;
                      if (c4 < 0 || sampleLines[s4] !== controlLines[c4]) {
                        var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s4 >= 1 && c4 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init2 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                } catch (x4) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a4) {
          return isArrayImpl(a4);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e3) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key2, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key: key2,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key2 = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key2 = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key2 = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key2 || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key2) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key2, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name2 = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name2) {
                return "\n\nCheck the render method of `" + name2 + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i4 = 0; i4 < node.length; i4++) {
                var child = node[i4];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name2 = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name2, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i4 = 0; i4 < keys.length; i4++) {
              var key2 = keys[i4];
              if (key2 !== "children" && key2 !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key2, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key2, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i4 = 0; i4 < children.length; i4++) {
                      validateChildKeys(children[i4], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key2) {
          {
            return jsxWithValidation(type, props, key2, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key2) {
          {
            return jsxWithValidation(type, props, key2, false);
          }
        }
        var jsx3 = jsxWithValidationDynamic;
        var jsxs3 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx3;
        exports.jsxs = jsxs3;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/core-js-pure/internals/global.js
var require_global = __commonJS({
  "node_modules/core-js-pure/internals/global.js"(exports, module) {
    var check = function(it) {
      return it && it.Math == Math && it;
    };
    module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
      return this;
    }() || Function("return this")();
  }
});

// node_modules/core-js-pure/internals/fails.js
var require_fails = __commonJS({
  "node_modules/core-js-pure/internals/fails.js"(exports, module) {
    module.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/core-js-pure/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-native.js"(exports, module) {
    var fails = require_fails();
    module.exports = !fails(function() {
      var test = function() {
      }.bind();
      return typeof test != "function" || test.hasOwnProperty("prototype");
    });
  }
});

// node_modules/core-js-pure/internals/function-apply.js
var require_function_apply = __commonJS({
  "node_modules/core-js-pure/internals/function-apply.js"(exports, module) {
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var apply = FunctionPrototype.apply;
    var call = FunctionPrototype.call;
    module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
      return call.apply(apply, arguments);
    });
  }
});

// node_modules/core-js-pure/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/core-js-pure/internals/function-uncurry-this.js"(exports, module) {
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var bind = FunctionPrototype.bind;
    var call = FunctionPrototype.call;
    var uncurryThis = NATIVE_BIND && bind.bind(call, call);
    module.exports = NATIVE_BIND ? function(fn2) {
      return fn2 && uncurryThis(fn2);
    } : function(fn2) {
      return fn2 && function() {
        return call.apply(fn2, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/core-js-pure/internals/is-callable.js"(exports, module) {
    module.exports = function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/core-js-pure/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/core-js-pure/internals/descriptors.js"(exports, module) {
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] != 7;
    });
  }
});

// node_modules/core-js-pure/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/core-js-pure/internals/function-call.js"(exports, module) {
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/core-js-pure/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/core-js-pure/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V2) {
      var descriptor = getOwnPropertyDescriptor(this, V2);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/core-js-pure/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/create-property-descriptor.js"(exports, module) {
    module.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/core-js-pure/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/core-js-pure/internals/classof-raw.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var toString2 = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module.exports = function(it) {
      return stringSlice(toString2(it), 8, -1);
    };
  }
});

// node_modules/core-js-pure/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/indexed-object.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var $Object = Object;
    var split = uncurryThis("".split);
    module.exports = fails(function() {
      return !$Object("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) == "String" ? split(it, "") : $Object(it);
    } : $Object;
  }
});

// node_modules/core-js-pure/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/core-js-pure/internals/require-object-coercible.js"(exports, module) {
    var $TypeError = TypeError;
    module.exports = function(it) {
      if (it == void 0)
        throw $TypeError("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/to-indexed-object.js"(exports, module) {
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/core-js-pure/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/core-js-pure/internals/is-object.js"(exports, module) {
    var isCallable = require_is_callable();
    module.exports = function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/core-js-pure/internals/path.js
var require_path = __commonJS({
  "node_modules/core-js-pure/internals/path.js"(exports, module) {
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/core-js-pure/internals/get-built-in.js"(exports, module) {
    var path = require_path();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var aFunction = function(variable) {
      return isCallable(variable) ? variable : void 0;
    };
    module.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
    };
  }
});

// node_modules/core-js-pure/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-is-prototype-of.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/core-js-pure/internals/engine-user-agent.js
var require_engine_user_agent = __commonJS({
  "node_modules/core-js-pure/internals/engine-user-agent.js"(exports, module) {
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("navigator", "userAgent") || "";
  }
});

// node_modules/core-js-pure/internals/engine-v8-version.js
var require_engine_v8_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-v8-version.js"(exports, module) {
    var global2 = require_global();
    var userAgent = require_engine_user_agent();
    var process2 = global2.process;
    var Deno2 = global2.Deno;
    var versions = process2 && process2.versions || Deno2 && Deno2.version;
    var v8 = versions && versions.v8;
    var match;
    var version25;
    if (v8) {
      match = v8.split(".");
      version25 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    if (!version25 && userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match)
          version25 = +match[1];
      }
    }
    module.exports = version25;
  }
});

// node_modules/core-js-pure/internals/native-symbol.js
var require_native_symbol = __commonJS({
  "node_modules/core-js-pure/internals/native-symbol.js"(exports, module) {
    var V8_VERSION = require_engine_v8_version();
    var fails = require_fails();
    module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol();
      return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/core-js-pure/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/core-js-pure/internals/use-symbol-as-uid.js"(exports, module) {
    var NATIVE_SYMBOL = require_native_symbol();
    module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/core-js-pure/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/core-js-pure/internals/is-symbol.js"(exports, module) {
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var $Object = Object;
    module.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
    };
  }
});

// node_modules/core-js-pure/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/core-js-pure/internals/try-to-string.js"(exports, module) {
    var $String = String;
    module.exports = function(argument) {
      try {
        return $String(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/core-js-pure/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/core-js-pure/internals/a-callable.js"(exports, module) {
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isCallable(argument))
        return argument;
      throw $TypeError(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/core-js-pure/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/core-js-pure/internals/get-method.js"(exports, module) {
    var aCallable = require_a_callable();
    module.exports = function(V2, P4) {
      var func = V2[P4];
      return func == null ? void 0 : aCallable(func);
    };
  }
});

// node_modules/core-js-pure/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/ordinary-to-primitive.js"(exports, module) {
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var $TypeError = TypeError;
    module.exports = function(input, pref) {
      var fn2, val;
      if (pref === "string" && isCallable(fn2 = input.toString) && !isObject(val = call(fn2, input)))
        return val;
      if (isCallable(fn2 = input.valueOf) && !isObject(val = call(fn2, input)))
        return val;
      if (pref !== "string" && isCallable(fn2 = input.toString) && !isObject(val = call(fn2, input)))
        return val;
      throw $TypeError("Can't convert object to primitive value");
    };
  }
});

// node_modules/core-js-pure/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/core-js-pure/internals/is-pure.js"(exports, module) {
    module.exports = true;
  }
});

// node_modules/core-js-pure/internals/define-global-property.js
var require_define_global_property = __commonJS({
  "node_modules/core-js-pure/internals/define-global-property.js"(exports, module) {
    var global2 = require_global();
    var defineProperty = Object.defineProperty;
    module.exports = function(key2, value) {
      try {
        defineProperty(global2, key2, { value, configurable: true, writable: true });
      } catch (error) {
        global2[key2] = value;
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/core-js-pure/internals/shared-store.js"(exports, module) {
    var global2 = require_global();
    var defineGlobalProperty = require_define_global_property();
    var SHARED = "__core-js_shared__";
    var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
    module.exports = store;
  }
});

// node_modules/core-js-pure/internals/shared.js
var require_shared = __commonJS({
  "node_modules/core-js-pure/internals/shared.js"(exports, module) {
    var IS_PURE = require_is_pure();
    var store = require_shared_store();
    (module.exports = function(key2, value) {
      return store[key2] || (store[key2] = value !== void 0 ? value : {});
    })("versions", []).push({
      version: "3.23.3",
      mode: IS_PURE ? "pure" : "global",
      copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.23.3/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/core-js-pure/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/core-js-pure/internals/to-object.js"(exports, module) {
    var requireObjectCoercible = require_require_object_coercible();
    var $Object = Object;
    module.exports = function(argument) {
      return $Object(requireObjectCoercible(argument));
    };
  }
});

// node_modules/core-js-pure/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/core-js-pure/internals/has-own-property.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty = uncurryThis({}.hasOwnProperty);
    module.exports = Object.hasOwn || function hasOwn(it, key2) {
      return hasOwnProperty(toObject(it), key2);
    };
  }
});

// node_modules/core-js-pure/internals/uid.js
var require_uid = __commonJS({
  "node_modules/core-js-pure/internals/uid.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var id2 = 0;
    var postfix = Math.random();
    var toString2 = uncurryThis(1 .toString);
    module.exports = function(key2) {
      return "Symbol(" + (key2 === void 0 ? "" : key2) + ")_" + toString2(++id2 + postfix, 36);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol.js"(exports, module) {
    var global2 = require_global();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_native_symbol();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var WellKnownSymbolsStore = shared("wks");
    var Symbol2 = global2.Symbol;
    var symbolFor = Symbol2 && Symbol2["for"];
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module.exports = function(name2) {
      if (!hasOwn(WellKnownSymbolsStore, name2) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name2] == "string")) {
        var description = "Symbol." + name2;
        if (NATIVE_SYMBOL && hasOwn(Symbol2, name2)) {
          WellKnownSymbolsStore[name2] = Symbol2[name2];
        } else if (USE_SYMBOL_AS_UID && symbolFor) {
          WellKnownSymbolsStore[name2] = symbolFor(description);
        } else {
          WellKnownSymbolsStore[name2] = createWellKnownSymbol(description);
        }
      }
      return WellKnownSymbolsStore[name2];
    };
  }
});

// node_modules/core-js-pure/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/to-primitive.js"(exports, module) {
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var $TypeError = TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input))
        return input;
      var exoticToPrim = getMethod(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0)
          pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result))
          return result;
        throw $TypeError("Can't convert object to primitive value");
      }
      if (pref === void 0)
        pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/core-js-pure/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/core-js-pure/internals/to-property-key.js"(exports, module) {
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module.exports = function(argument) {
      var key2 = toPrimitive(argument, "string");
      return isSymbol(key2) ? key2 : key2 + "";
    };
  }
});

// node_modules/core-js-pure/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/core-js-pure/internals/document-create-element.js"(exports, module) {
    var global2 = require_global();
    var isObject = require_is_object();
    var document2 = global2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/core-js-pure/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/core-js-pure/internals/ie8-dom-define.js"(exports, module) {
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement = require_document_create_element();
    module.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement("div"), "a", {
        get: function() {
          return 7;
        }
      }).a != 7;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-descriptor.js"(exports) {
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O3, P4) {
      O3 = toIndexedObject(O3);
      P4 = toPropertyKey(P4);
      if (IE8_DOM_DEFINE)
        try {
          return $getOwnPropertyDescriptor(O3, P4);
        } catch (error) {
        }
      if (hasOwn(O3, P4))
        return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O3, P4), O3[P4]);
    };
  }
});

// node_modules/core-js-pure/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/core-js-pure/internals/is-forced.js"(exports, module) {
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
      return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module.exports = isForced;
  }
});

// node_modules/core-js-pure/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-context.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module.exports = function(fn2, that) {
      aCallable(fn2);
      return that === void 0 ? fn2 : NATIVE_BIND ? bind(fn2, that) : function() {
        return fn2.apply(that, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/core-js-pure/internals/v8-prototype-define-bug.js"(exports, module) {
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype != 42;
    });
  }
});

// node_modules/core-js-pure/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/core-js-pure/internals/an-object.js"(exports, module) {
    var isObject = require_is_object();
    var $String = String;
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isObject(argument))
        return argument;
      throw $TypeError($String(argument) + " is not an object");
    };
  }
});

// node_modules/core-js-pure/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/core-js-pure/internals/object-define-property.js"(exports) {
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var $TypeError = TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O3, P4, Attributes) {
      anObject(O3);
      P4 = toPropertyKey(P4);
      anObject(Attributes);
      if (typeof O3 === "function" && P4 === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O3, P4);
        if (current && current[WRITABLE]) {
          O3[P4] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O3, P4, Attributes);
    } : $defineProperty : function defineProperty(O3, P4, Attributes) {
      anObject(O3);
      P4 = toPropertyKey(P4);
      anObject(Attributes);
      if (IE8_DOM_DEFINE)
        try {
          return $defineProperty(O3, P4, Attributes);
        } catch (error) {
        }
      if ("get" in Attributes || "set" in Attributes)
        throw $TypeError("Accessors not supported");
      if ("value" in Attributes)
        O3[P4] = Attributes.value;
      return O3;
    };
  }
});

// node_modules/core-js-pure/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/core-js-pure/internals/create-non-enumerable-property.js"(exports, module) {
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = DESCRIPTORS ? function(object, key2, value) {
      return definePropertyModule.f(object, key2, createPropertyDescriptor(1, value));
    } : function(object, key2, value) {
      object[key2] = value;
      return object;
    };
  }
});

// node_modules/core-js-pure/internals/export.js
var require_export = __commonJS({
  "node_modules/core-js-pure/internals/export.js"(exports, module) {
    "use strict";
    var global2 = require_global();
    var apply = require_function_apply();
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var isForced = require_is_forced();
    var path = require_path();
    var bind = require_function_bind_context();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var wrapConstructor = function(NativeConstructor) {
      var Wrapper = function(a4, b3, c4) {
        if (this instanceof Wrapper) {
          switch (arguments.length) {
            case 0:
              return new NativeConstructor();
            case 1:
              return new NativeConstructor(a4);
            case 2:
              return new NativeConstructor(a4, b3);
          }
          return new NativeConstructor(a4, b3, c4);
        }
        return apply(NativeConstructor, this, arguments);
      };
      Wrapper.prototype = NativeConstructor.prototype;
      return Wrapper;
    };
    module.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var PROTO = options.proto;
      var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
      var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
      var targetPrototype = target.prototype;
      var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
      var key2, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
      for (key2 in source) {
        FORCED = isForced(GLOBAL ? key2 : TARGET + (STATIC ? "." : "#") + key2, options.forced);
        USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key2);
        targetProperty = target[key2];
        if (USE_NATIVE)
          if (options.dontCallGetSet) {
            descriptor = getOwnPropertyDescriptor(nativeSource, key2);
            nativeProperty = descriptor && descriptor.value;
          } else
            nativeProperty = nativeSource[key2];
        sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key2];
        if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
          continue;
        if (options.bind && USE_NATIVE)
          resultProperty = bind(sourceProperty, global2);
        else if (options.wrap && USE_NATIVE)
          resultProperty = wrapConstructor(sourceProperty);
        else if (PROTO && isCallable(sourceProperty))
          resultProperty = uncurryThis(sourceProperty);
        else
          resultProperty = sourceProperty;
        if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(resultProperty, "sham", true);
        }
        createNonEnumerableProperty(target, key2, resultProperty);
        if (PROTO) {
          VIRTUAL_PROTOTYPE = TARGET + "Prototype";
          if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
            createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
          }
          createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key2, sourceProperty);
          if (options.real && targetPrototype && !targetPrototype[key2]) {
            createNonEnumerableProperty(targetPrototype, key2, sourceProperty);
          }
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/is-array.js
var require_is_array = __commonJS({
  "node_modules/core-js-pure/internals/is-array.js"(exports, module) {
    var classof = require_classof_raw();
    module.exports = Array.isArray || function isArray(argument) {
      return classof(argument) == "Array";
    };
  }
});

// node_modules/core-js-pure/internals/math-trunc.js
var require_math_trunc = __commonJS({
  "node_modules/core-js-pure/internals/math-trunc.js"(exports, module) {
    var ceil = Math.ceil;
    var floor = Math.floor;
    module.exports = Math.trunc || function trunc(x4) {
      var n3 = +x4;
      return (n3 > 0 ? floor : ceil)(n3);
    };
  }
});

// node_modules/core-js-pure/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/core-js-pure/internals/to-integer-or-infinity.js"(exports, module) {
    var trunc = require_math_trunc();
    module.exports = function(argument) {
      var number = +argument;
      return number !== number || number === 0 ? 0 : trunc(number);
    };
  }
});

// node_modules/core-js-pure/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/core-js-pure/internals/to-length.js"(exports, module) {
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min = Math.min;
    module.exports = function(argument) {
      return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
    };
  }
});

// node_modules/core-js-pure/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/core-js-pure/internals/length-of-array-like.js"(exports, module) {
    var toLength = require_to_length();
    module.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js
var require_does_not_exceed_safe_integer = __commonJS({
  "node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js"(exports, module) {
    var $TypeError = TypeError;
    var MAX_SAFE_INTEGER2 = 9007199254740991;
    module.exports = function(it) {
      if (it > MAX_SAFE_INTEGER2)
        throw $TypeError("Maximum allowed index exceeded");
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/create-property.js
var require_create_property = __commonJS({
  "node_modules/core-js-pure/internals/create-property.js"(exports, module) {
    "use strict";
    var toPropertyKey = require_to_property_key();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = function(object, key2, value) {
      var propertyKey = toPropertyKey(key2);
      if (propertyKey in object)
        definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
      else
        object[propertyKey] = value;
    };
  }
});

// node_modules/core-js-pure/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/core-js-pure/internals/to-string-tag-support.js"(exports, module) {
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test = {};
    test[TO_STRING_TAG] = "z";
    module.exports = String(test) === "[object z]";
  }
});

// node_modules/core-js-pure/internals/classof.js
var require_classof = __commonJS({
  "node_modules/core-js-pure/internals/classof.js"(exports, module) {
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $Object = Object;
    var CORRECT_ARGUMENTS = classofRaw(function() {
      return arguments;
    }()) == "Arguments";
    var tryGet = function(it, key2) {
      try {
        return it[key2];
      } catch (error) {
      }
    };
    module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O3, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O3 = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O3) : (result = classofRaw(O3)) == "Object" && isCallable(O3.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/core-js-pure/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/core-js-pure/internals/inspect-source.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store.inspectSource)) {
      store.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module.exports = store.inspectSource;
  }
});

// node_modules/core-js-pure/internals/is-constructor.js
var require_is_constructor = __commonJS({
  "node_modules/core-js-pure/internals/is-constructor.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var classof = require_classof();
    var getBuiltIn = require_get_built_in();
    var inspectSource = require_inspect_source();
    var noop = function() {
    };
    var empty = [];
    var construct = getBuiltIn("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec = uncurryThis(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      try {
        construct(noop, empty, argument);
        return true;
      } catch (error) {
        return false;
      }
    };
    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      switch (classof(argument)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
      } catch (error) {
        return true;
      }
    };
    isConstructorLegacy.sham = true;
    module.exports = !construct || fails(function() {
      var called;
      return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
      }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
  }
});

// node_modules/core-js-pure/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/array-species-constructor.js"(exports, module) {
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    var $Array = Array;
    module.exports = function(originalArray) {
      var C3;
      if (isArray(originalArray)) {
        C3 = originalArray.constructor;
        if (isConstructor(C3) && (C3 === $Array || isArray(C3.prototype)))
          C3 = void 0;
        else if (isObject(C3)) {
          C3 = C3[SPECIES];
          if (C3 === null)
            C3 = void 0;
        }
      }
      return C3 === void 0 ? $Array : C3;
    };
  }
});

// node_modules/core-js-pure/internals/array-species-create.js
var require_array_species_create = __commonJS({
  "node_modules/core-js-pure/internals/array-species-create.js"(exports, module) {
    var arraySpeciesConstructor = require_array_species_constructor();
    module.exports = function(originalArray, length) {
      return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
  }
});

// node_modules/core-js-pure/internals/array-method-has-species-support.js
var require_array_method_has_species_support = __commonJS({
  "node_modules/core-js-pure/internals/array-method-has-species-support.js"(exports, module) {
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(METHOD_NAME) {
      return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {};
        constructor[SPECIES] = function() {
          return { foo: 1 };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
      });
    };
  }
});

// node_modules/core-js-pure/modules/es.array.concat.js
var require_es_array_concat = __commonJS({
  "node_modules/core-js-pure/modules/es.array.concat.js"() {
    "use strict";
    var $3 = require_export();
    var fails = require_fails();
    var isArray = require_is_array();
    var isObject = require_is_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var createProperty = require_create_property();
    var arraySpeciesCreate = require_array_species_create();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
      var array = [];
      array[IS_CONCAT_SPREADABLE] = false;
      return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
    var isConcatSpreadable = function(O3) {
      if (!isObject(O3))
        return false;
      var spreadable = O3[IS_CONCAT_SPREADABLE];
      return spreadable !== void 0 ? !!spreadable : isArray(O3);
    };
    var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
    $3({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
      concat: function concat2(arg) {
        var O3 = toObject(this);
        var A5 = arraySpeciesCreate(O3, 0);
        var n3 = 0;
        var i4, k4, length, len, E5;
        for (i4 = -1, length = arguments.length; i4 < length; i4++) {
          E5 = i4 === -1 ? O3 : arguments[i4];
          if (isConcatSpreadable(E5)) {
            len = lengthOfArrayLike(E5);
            doesNotExceedSafeInteger(n3 + len);
            for (k4 = 0; k4 < len; k4++, n3++)
              if (k4 in E5)
                createProperty(A5, n3, E5[k4]);
          } else {
            doesNotExceedSafeInteger(n3 + 1);
            createProperty(A5, n3++, E5);
          }
        }
        A5.length = n3;
        return A5;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.object.to-string.js
var require_es_object_to_string = __commonJS({
  "node_modules/core-js-pure/modules/es.object.to-string.js"() {
  }
});

// node_modules/core-js-pure/internals/to-string.js
var require_to_string = __commonJS({
  "node_modules/core-js-pure/internals/to-string.js"(exports, module) {
    var classof = require_classof();
    var $String = String;
    module.exports = function(argument) {
      if (classof(argument) === "Symbol")
        throw TypeError("Cannot convert a Symbol value to a string");
      return $String(argument);
    };
  }
});

// node_modules/core-js-pure/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/core-js-pure/internals/to-absolute-index.js"(exports, module) {
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max = Math.max;
    var min = Math.min;
    module.exports = function(index, length) {
      var integer = toIntegerOrInfinity(index);
      return integer < 0 ? max(integer + length, 0) : min(integer, length);
    };
  }
});

// node_modules/core-js-pure/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/core-js-pure/internals/array-includes.js"(exports, module) {
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O3 = toIndexedObject($this);
        var length = lengthOfArrayLike(O3);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        if (IS_INCLUDES && el != el)
          while (length > index) {
            value = O3[index++];
            if (value != value)
              return true;
          }
        else
          for (; length > index; index++) {
            if ((IS_INCLUDES || index in O3) && O3[index] === el)
              return IS_INCLUDES || index || 0;
          }
        return !IS_INCLUDES && -1;
      };
    };
    module.exports = {
      includes: createMethod(true),
      indexOf: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/core-js-pure/internals/hidden-keys.js"(exports, module) {
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/core-js-pure/internals/object-keys-internal.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module.exports = function(object, names2) {
      var O3 = toIndexedObject(object);
      var i4 = 0;
      var result = [];
      var key2;
      for (key2 in O3)
        !hasOwn(hiddenKeys, key2) && hasOwn(O3, key2) && push(result, key2);
      while (names2.length > i4)
        if (hasOwn(O3, key2 = names2[i4++])) {
          ~indexOf(result, key2) || push(result, key2);
        }
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/core-js-pure/internals/enum-bug-keys.js"(exports, module) {
    module.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/core-js-pure/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/core-js-pure/internals/object-keys.js"(exports, module) {
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module.exports = Object.keys || function keys(O3) {
      return internalObjectKeys(O3, enumBugKeys);
    };
  }
});

// node_modules/core-js-pure/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/core-js-pure/internals/object-define-properties.js"(exports) {
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O3, Properties) {
      anObject(O3);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key2;
      while (length > index)
        definePropertyModule.f(O3, key2 = keys[index++], props[key2]);
      return O3;
    };
  }
});

// node_modules/core-js-pure/internals/html.js
var require_html = __commonJS({
  "node_modules/core-js-pure/internals/html.js"(exports, module) {
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/core-js-pure/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/core-js-pure/internals/shared-key.js"(exports, module) {
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module.exports = function(key2) {
      return keys[key2] || (keys[key2] = uid(key2));
    };
  }
});

// node_modules/core-js-pure/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/core-js-pure/internals/object-create.js"(exports, module) {
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length = enumBugKeys.length;
      while (length--)
        delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module.exports = Object.create || function create(O3, Properties) {
      var result;
      if (O3 !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O3);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O3;
      } else
        result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names.js"(exports) {
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O3) {
      return internalObjectKeys(O3, hiddenKeys);
    };
  }
});

// node_modules/core-js-pure/internals/array-slice-simple.js
var require_array_slice_simple = __commonJS({
  "node_modules/core-js-pure/internals/array-slice-simple.js"(exports, module) {
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var $Array = Array;
    var max = Math.max;
    module.exports = function(O3, start, end) {
      var length = lengthOfArrayLike(O3);
      var k4 = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
      var result = $Array(max(fin - k4, 0));
      for (var n3 = 0; k4 < fin; k4++, n3++)
        createProperty(result, n3, O3[k4]);
      result.length = n3;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names-external.js"(exports, module) {
    var classof = require_classof_raw();
    var toIndexedObject = require_to_indexed_object();
    var $getOwnPropertyNames = require_object_get_own_property_names().f;
    var arraySlice = require_array_slice_simple();
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
      try {
        return $getOwnPropertyNames(it);
      } catch (error) {
        return arraySlice(windowNames);
      }
    };
    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-symbols.js"(exports) {
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/internals/define-built-in.js
var require_define_built_in = __commonJS({
  "node_modules/core-js-pure/internals/define-built-in.js"(exports, module) {
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module.exports = function(target, key2, value, options) {
      if (options && options.enumerable)
        target[key2] = value;
      else
        createNonEnumerableProperty(target, key2, value);
      return target;
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
var require_well_known_symbol_wrapped = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol-wrapped.js"(exports) {
    var wellKnownSymbol = require_well_known_symbol();
    exports.f = wellKnownSymbol;
  }
});

// node_modules/core-js-pure/internals/define-well-known-symbol.js
var require_define_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/define-well-known-symbol.js"(exports, module) {
    var path = require_path();
    var hasOwn = require_has_own_property();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineProperty = require_object_define_property().f;
    module.exports = function(NAME) {
      var Symbol2 = path.Symbol || (path.Symbol = {});
      if (!hasOwn(Symbol2, NAME))
        defineProperty(Symbol2, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
    };
  }
});

// node_modules/core-js-pure/internals/symbol-define-to-primitive.js
var require_symbol_define_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/symbol-define-to-primitive.js"(exports, module) {
    var call = require_function_call();
    var getBuiltIn = require_get_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var defineBuiltIn = require_define_built_in();
    module.exports = function() {
      var Symbol2 = getBuiltIn("Symbol");
      var SymbolPrototype = Symbol2 && Symbol2.prototype;
      var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
        defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function(hint) {
          return call(valueOf, this);
        }, { arity: 1 });
      }
    };
  }
});

// node_modules/core-js-pure/internals/object-to-string.js
var require_object_to_string = __commonJS({
  "node_modules/core-js-pure/internals/object-to-string.js"(exports, module) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var classof = require_classof();
    module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString2() {
      return "[object " + classof(this) + "]";
    };
  }
});

// node_modules/core-js-pure/internals/set-to-string-tag.js
var require_set_to_string_tag = __commonJS({
  "node_modules/core-js-pure/internals/set-to-string-tag.js"(exports, module) {
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var defineProperty = require_object_define_property().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var toString2 = require_object_to_string();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    module.exports = function(it, TAG, STATIC, SET_METHOD) {
      if (it) {
        var target = STATIC ? it : it.prototype;
        if (!hasOwn(target, TO_STRING_TAG)) {
          defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
        }
        if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
          createNonEnumerableProperty(target, "toString", toString2);
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/native-weak-map.js
var require_native_weak_map = __commonJS({
  "node_modules/core-js-pure/internals/native-weak-map.js"(exports, module) {
    var global2 = require_global();
    var isCallable = require_is_callable();
    var inspectSource = require_inspect_source();
    var WeakMap2 = global2.WeakMap;
    module.exports = isCallable(WeakMap2) && /native code/.test(inspectSource(WeakMap2));
  }
});

// node_modules/core-js-pure/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/core-js-pure/internals/internal-state.js"(exports, module) {
    var NATIVE_WEAK_MAP = require_native_weak_map();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = global2.TypeError;
    var WeakMap2 = global2.WeakMap;
    var set;
    var get;
    var has;
    var enforce = function(it) {
      return has(it) ? get(it) : set(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store = shared.state || (shared.state = new WeakMap2());
      wmget = uncurryThis(store.get);
      wmhas = uncurryThis(store.has);
      wmset = uncurryThis(store.set);
      set = function(it, metadata) {
        if (wmhas(store, it))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        wmset(store, it, metadata);
        return metadata;
      };
      get = function(it) {
        return wmget(store, it) || {};
      };
      has = function(it) {
        return wmhas(store, it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set = function(it, metadata) {
        if (hasOwn(it, STATE))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store;
    var wmget;
    var wmhas;
    var wmset;
    var STATE;
    module.exports = {
      set,
      get,
      has,
      enforce,
      getterFor
    };
  }
});

// node_modules/core-js-pure/internals/array-iteration.js
var require_array_iteration = __commonJS({
  "node_modules/core-js-pure/internals/array-iteration.js"(exports, module) {
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var IndexedObject = require_indexed_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var arraySpeciesCreate = require_array_species_create();
    var push = uncurryThis([].push);
    var createMethod = function(TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var IS_FILTER_REJECT = TYPE == 7;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that, specificCreate) {
        var O3 = toObject($this);
        var self2 = IndexedObject(O3);
        var boundFunction = bind(callbackfn, that);
        var length = lengthOfArrayLike(self2);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
        var value, result;
        for (; length > index; index++)
          if (NO_HOLES || index in self2) {
            value = self2[index];
            result = boundFunction(value, index, O3);
            if (TYPE) {
              if (IS_MAP)
                target[index] = result;
              else if (result)
                switch (TYPE) {
                  case 3:
                    return true;
                  case 5:
                    return value;
                  case 6:
                    return index;
                  case 2:
                    push(target, value);
                }
              else
                switch (TYPE) {
                  case 4:
                    return false;
                  case 7:
                    push(target, value);
                }
            }
          }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };
    module.exports = {
      forEach: createMethod(0),
      map: createMethod(1),
      filter: createMethod(2),
      some: createMethod(3),
      every: createMethod(4),
      find: createMethod(5),
      findIndex: createMethod(6),
      filterReject: createMethod(7)
    };
  }
});

// node_modules/core-js-pure/modules/es.symbol.constructor.js
var require_es_symbol_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.constructor.js"() {
    "use strict";
    var $3 = require_export();
    var global2 = require_global();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var NATIVE_SYMBOL = require_native_symbol();
    var fails = require_fails();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var $toString = require_to_string();
    var createPropertyDescriptor = require_create_property_descriptor();
    var nativeObjectCreate = require_object_create();
    var objectKeys = require_object_keys();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    var definePropertiesModule = require_object_define_properties();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var defineBuiltIn = require_define_built_in();
    var shared = require_shared();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var uid = require_uid();
    var wellKnownSymbol = require_well_known_symbol();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    var defineSymbolToPrimitive = require_symbol_define_to_primitive();
    var setToStringTag = require_set_to_string_tag();
    var InternalStateModule = require_internal_state();
    var $forEach = require_array_iteration().forEach;
    var HIDDEN = sharedKey("hidden");
    var SYMBOL = "Symbol";
    var PROTOTYPE = "prototype";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global2.Symbol;
    var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
    var TypeError2 = global2.TypeError;
    var QObject = global2.QObject;
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    var push = uncurryThis([].push);
    var AllSymbols = shared("symbols");
    var ObjectPrototypeSymbols = shared("op-symbols");
    var WellKnownSymbolsStore = shared("wks");
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    var setSymbolDescriptor = DESCRIPTORS && fails(function() {
      return nativeObjectCreate(nativeDefineProperty({}, "a", {
        get: function() {
          return nativeDefineProperty(this, "a", { value: 7 }).a;
        }
      })).a != 7;
    }) ? function(O3, P4, Attributes) {
      var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P4);
      if (ObjectPrototypeDescriptor)
        delete ObjectPrototype[P4];
      nativeDefineProperty(O3, P4, Attributes);
      if (ObjectPrototypeDescriptor && O3 !== ObjectPrototype) {
        nativeDefineProperty(ObjectPrototype, P4, ObjectPrototypeDescriptor);
      }
    } : nativeDefineProperty;
    var wrap = function(tag, description) {
      var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
      setInternalState(symbol, {
        type: SYMBOL,
        tag,
        description
      });
      if (!DESCRIPTORS)
        symbol.description = description;
      return symbol;
    };
    var $defineProperty = function defineProperty(O3, P4, Attributes) {
      if (O3 === ObjectPrototype)
        $defineProperty(ObjectPrototypeSymbols, P4, Attributes);
      anObject(O3);
      var key2 = toPropertyKey(P4);
      anObject(Attributes);
      if (hasOwn(AllSymbols, key2)) {
        if (!Attributes.enumerable) {
          if (!hasOwn(O3, HIDDEN))
            nativeDefineProperty(O3, HIDDEN, createPropertyDescriptor(1, {}));
          O3[HIDDEN][key2] = true;
        } else {
          if (hasOwn(O3, HIDDEN) && O3[HIDDEN][key2])
            O3[HIDDEN][key2] = false;
          Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
        }
        return setSymbolDescriptor(O3, key2, Attributes);
      }
      return nativeDefineProperty(O3, key2, Attributes);
    };
    var $defineProperties = function defineProperties(O3, Properties) {
      anObject(O3);
      var properties = toIndexedObject(Properties);
      var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
      $forEach(keys, function(key2) {
        if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key2))
          $defineProperty(O3, key2, properties[key2]);
      });
      return O3;
    };
    var $create = function create(O3, Properties) {
      return Properties === void 0 ? nativeObjectCreate(O3) : $defineProperties(nativeObjectCreate(O3), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(V2) {
      var P4 = toPropertyKey(V2);
      var enumerable = call(nativePropertyIsEnumerable, this, P4);
      if (this === ObjectPrototype && hasOwn(AllSymbols, P4) && !hasOwn(ObjectPrototypeSymbols, P4))
        return false;
      return enumerable || !hasOwn(this, P4) || !hasOwn(AllSymbols, P4) || hasOwn(this, HIDDEN) && this[HIDDEN][P4] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O3, P4) {
      var it = toIndexedObject(O3);
      var key2 = toPropertyKey(P4);
      if (it === ObjectPrototype && hasOwn(AllSymbols, key2) && !hasOwn(ObjectPrototypeSymbols, key2))
        return;
      var descriptor = nativeGetOwnPropertyDescriptor(it, key2);
      if (descriptor && hasOwn(AllSymbols, key2) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key2])) {
        descriptor.enumerable = true;
      }
      return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O3) {
      var names2 = nativeGetOwnPropertyNames(toIndexedObject(O3));
      var result = [];
      $forEach(names2, function(key2) {
        if (!hasOwn(AllSymbols, key2) && !hasOwn(hiddenKeys, key2))
          push(result, key2);
      });
      return result;
    };
    var $getOwnPropertySymbols = function(O3) {
      var IS_OBJECT_PROTOTYPE = O3 === ObjectPrototype;
      var names2 = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O3));
      var result = [];
      $forEach(names2, function(key2) {
        if (hasOwn(AllSymbols, key2) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key2))) {
          push(result, AllSymbols[key2]);
        }
      });
      return result;
    };
    if (!NATIVE_SYMBOL) {
      $Symbol = function Symbol2() {
        if (isPrototypeOf(SymbolPrototype, this))
          throw TypeError2("Symbol is not a constructor");
        var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
          if (this === ObjectPrototype)
            call(setter, ObjectPrototypeSymbols, value);
          if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
            this[HIDDEN][tag] = false;
          setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER)
          setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
        return wrap(tag, description);
      };
      SymbolPrototype = $Symbol[PROTOTYPE];
      defineBuiltIn(SymbolPrototype, "toString", function toString2() {
        return getInternalState(this).tag;
      });
      defineBuiltIn($Symbol, "withoutSetter", function(description) {
        return wrap(uid(description), description);
      });
      propertyIsEnumerableModule.f = $propertyIsEnumerable;
      definePropertyModule.f = $defineProperty;
      definePropertiesModule.f = $defineProperties;
      getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
      getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
      getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
      wrappedWellKnownSymbolModule.f = function(name2) {
        return wrap(wellKnownSymbol(name2), name2);
      };
      if (DESCRIPTORS) {
        nativeDefineProperty(SymbolPrototype, "description", {
          configurable: true,
          get: function description() {
            return getInternalState(this).description;
          }
        });
        if (!IS_PURE) {
          defineBuiltIn(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
        }
      }
    }
    $3({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
      Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore), function(name2) {
      defineWellKnownSymbol(name2);
    });
    $3({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
      useSetter: function() {
        USE_SETTER = true;
      },
      useSimple: function() {
        USE_SETTER = false;
      }
    });
    $3({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
      create: $create,
      defineProperty: $defineProperty,
      defineProperties: $defineProperties,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $3({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
      getOwnPropertyNames: $getOwnPropertyNames
    });
    defineSymbolToPrimitive();
    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
  }
});

// node_modules/core-js-pure/internals/native-symbol-registry.js
var require_native_symbol_registry = __commonJS({
  "node_modules/core-js-pure/internals/native-symbol-registry.js"(exports, module) {
    var NATIVE_SYMBOL = require_native_symbol();
    module.exports = NATIVE_SYMBOL && !!Symbol["for"] && !!Symbol.keyFor;
  }
});

// node_modules/core-js-pure/modules/es.symbol.for.js
var require_es_symbol_for = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.for.js"() {
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var hasOwn = require_has_own_property();
    var toString2 = require_to_string();
    var shared = require_shared();
    var NATIVE_SYMBOL_REGISTRY = require_native_symbol_registry();
    var StringToSymbolRegistry = shared("string-to-symbol-registry");
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    $3({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
      "for": function(key2) {
        var string = toString2(key2);
        if (hasOwn(StringToSymbolRegistry, string))
          return StringToSymbolRegistry[string];
        var symbol = getBuiltIn("Symbol")(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.symbol.key-for.js
var require_es_symbol_key_for = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.key-for.js"() {
    var $3 = require_export();
    var hasOwn = require_has_own_property();
    var isSymbol = require_is_symbol();
    var tryToString = require_try_to_string();
    var shared = require_shared();
    var NATIVE_SYMBOL_REGISTRY = require_native_symbol_registry();
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    $3({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym))
          throw TypeError(tryToString(sym) + " is not a symbol");
        if (hasOwn(SymbolToStringRegistry, sym))
          return SymbolToStringRegistry[sym];
      }
    });
  }
});

// node_modules/core-js-pure/internals/array-slice.js
var require_array_slice = __commonJS({
  "node_modules/core-js-pure/internals/array-slice.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis([].slice);
  }
});

// node_modules/core-js-pure/modules/es.json.stringify.js
var require_es_json_stringify = __commonJS({
  "node_modules/core-js-pure/modules/es.json.stringify.js"() {
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isArray = require_is_array();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var arraySlice = require_array_slice();
    var NATIVE_SYMBOL = require_native_symbol();
    var $stringify = getBuiltIn("JSON", "stringify");
    var exec = uncurryThis(/./.exec);
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var replace = uncurryThis("".replace);
    var numberToString = uncurryThis(1 .toString);
    var tester = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function() {
      var symbol = getBuiltIn("Symbol")();
      return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
    });
    var ILL_FORMED_UNICODE = fails(function() {
      return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
    });
    var stringifyWithSymbolsFix = function(it, replacer) {
      var args = arraySlice(arguments);
      var $replacer = replacer;
      if (!isObject(replacer) && it === void 0 || isSymbol(it))
        return;
      if (!isArray(replacer))
        replacer = function(key2, value) {
          if (isCallable($replacer))
            value = call($replacer, this, key2, value);
          if (!isSymbol(value))
            return value;
        };
      args[1] = replacer;
      return apply($stringify, null, args);
    };
    var fixIllFormed = function(match, offset, string) {
      var prev = charAt(string, offset - 1);
      var next = charAt(string, offset + 1);
      if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
        return "\\u" + numberToString(charCodeAt(match, 0), 16);
      }
      return match;
    };
    if ($stringify) {
      $3({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
        stringify: function stringify(it, replacer, space) {
          var args = arraySlice(arguments);
          var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
          return ILL_FORMED_UNICODE && typeof result == "string" ? replace(result, tester, fixIllFormed) : result;
        }
      });
    }
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js
var require_es_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js"() {
    var $3 = require_export();
    var NATIVE_SYMBOL = require_native_symbol();
    var fails = require_fails();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var toObject = require_to_object();
    var FORCED = !NATIVE_SYMBOL || fails(function() {
      getOwnPropertySymbolsModule.f(1);
    });
    $3({ target: "Object", stat: true, forced: FORCED }, {
      getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.symbol.js
var require_es_symbol = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.js"() {
    require_es_symbol_constructor();
    require_es_symbol_for();
    require_es_symbol_key_for();
    require_es_json_stringify();
    require_es_object_get_own_property_symbols();
  }
});

// node_modules/core-js-pure/modules/es.symbol.async-iterator.js
var require_es_symbol_async_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.async-iterator.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("asyncIterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.description.js
var require_es_symbol_description = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.description.js"() {
  }
});

// node_modules/core-js-pure/modules/es.symbol.has-instance.js
var require_es_symbol_has_instance = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.has-instance.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("hasInstance");
  }
});

// node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
var require_es_symbol_is_concat_spreadable = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("isConcatSpreadable");
  }
});

// node_modules/core-js-pure/modules/es.symbol.iterator.js
var require_es_symbol_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.iterator.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("iterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match.js
var require_es_symbol_match = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("match");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match-all.js
var require_es_symbol_match_all = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match-all.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("matchAll");
  }
});

// node_modules/core-js-pure/modules/es.symbol.replace.js
var require_es_symbol_replace = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.replace.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("replace");
  }
});

// node_modules/core-js-pure/modules/es.symbol.search.js
var require_es_symbol_search = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.search.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("search");
  }
});

// node_modules/core-js-pure/modules/es.symbol.species.js
var require_es_symbol_species = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.species.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("species");
  }
});

// node_modules/core-js-pure/modules/es.symbol.split.js
var require_es_symbol_split = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.split.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("split");
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-primitive.js
var require_es_symbol_to_primitive = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-primitive.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    var defineSymbolToPrimitive = require_symbol_define_to_primitive();
    defineWellKnownSymbol("toPrimitive");
    defineSymbolToPrimitive();
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
var require_es_symbol_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-string-tag.js"() {
    var getBuiltIn = require_get_built_in();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    var setToStringTag = require_set_to_string_tag();
    defineWellKnownSymbol("toStringTag");
    setToStringTag(getBuiltIn("Symbol"), "Symbol");
  }
});

// node_modules/core-js-pure/modules/es.symbol.unscopables.js
var require_es_symbol_unscopables = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.unscopables.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("unscopables");
  }
});

// node_modules/core-js-pure/modules/es.json.to-string-tag.js
var require_es_json_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.json.to-string-tag.js"() {
    var global2 = require_global();
    var setToStringTag = require_set_to_string_tag();
    setToStringTag(global2.JSON, "JSON", true);
  }
});

// node_modules/core-js-pure/modules/es.math.to-string-tag.js
var require_es_math_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.math.to-string-tag.js"() {
  }
});

// node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
var require_es_reflect_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.to-string-tag.js"() {
  }
});

// node_modules/core-js-pure/es/symbol/index.js
var require_symbol = __commonJS({
  "node_modules/core-js-pure/es/symbol/index.js"(exports, module) {
    require_es_array_concat();
    require_es_object_to_string();
    require_es_symbol();
    require_es_symbol_async_iterator();
    require_es_symbol_description();
    require_es_symbol_has_instance();
    require_es_symbol_is_concat_spreadable();
    require_es_symbol_iterator();
    require_es_symbol_match();
    require_es_symbol_match_all();
    require_es_symbol_replace();
    require_es_symbol_search();
    require_es_symbol_species();
    require_es_symbol_split();
    require_es_symbol_to_primitive();
    require_es_symbol_to_string_tag();
    require_es_symbol_unscopables();
    require_es_json_to_string_tag();
    require_es_math_to_string_tag();
    require_es_reflect_to_string_tag();
    var path = require_path();
    module.exports = path.Symbol;
  }
});

// node_modules/core-js-pure/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS({
  "node_modules/core-js-pure/internals/add-to-unscopables.js"(exports, module) {
    module.exports = function() {
    };
  }
});

// node_modules/core-js-pure/internals/iterators.js
var require_iterators = __commonJS({
  "node_modules/core-js-pure/internals/iterators.js"(exports, module) {
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/core-js-pure/internals/function-name.js"(exports, module) {
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && function something() {
    }.name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/core-js-pure/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS({
  "node_modules/core-js-pure/internals/correct-prototype-getter.js"(exports, module) {
    var fails = require_fails();
    module.exports = !fails(function() {
      function F4() {
      }
      F4.prototype.constructor = null;
      return Object.getPrototypeOf(new F4()) !== F4.prototype;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-get-prototype-of.js"(exports, module) {
    var hasOwn = require_has_own_property();
    var isCallable = require_is_callable();
    var toObject = require_to_object();
    var sharedKey = require_shared_key();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var IE_PROTO = sharedKey("IE_PROTO");
    var $Object = Object;
    var ObjectPrototype = $Object.prototype;
    module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O3) {
      var object = toObject(O3);
      if (hasOwn(object, IE_PROTO))
        return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable(constructor) && object instanceof constructor) {
        return constructor.prototype;
      }
      return object instanceof $Object ? ObjectPrototype : null;
    };
  }
});

// node_modules/core-js-pure/internals/iterators-core.js
var require_iterators_core = __commonJS({
  "node_modules/core-js-pure/internals/iterators-core.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var create = require_object_create();
    var getPrototypeOf = require_object_get_prototype_of();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    var BUGGY_SAFARI_ITERATORS = false;
    var IteratorPrototype;
    var PrototypeOfArrayIteratorPrototype;
    var arrayIterator;
    if ([].keys) {
      arrayIterator = [].keys();
      if (!("next" in arrayIterator))
        BUGGY_SAFARI_ITERATORS = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
          IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }
    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
      var test = {};
      return IteratorPrototype[ITERATOR].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE)
      IteratorPrototype = {};
    else if (IS_PURE)
      IteratorPrototype = create(IteratorPrototype);
    if (!isCallable(IteratorPrototype[ITERATOR])) {
      defineBuiltIn(IteratorPrototype, ITERATOR, function() {
        return this;
      });
    }
    module.exports = {
      IteratorPrototype,
      BUGGY_SAFARI_ITERATORS
    };
  }
});

// node_modules/core-js-pure/internals/create-iterator-constructor.js
var require_create_iterator_constructor = __commonJS({
  "node_modules/core-js-pure/internals/create-iterator-constructor.js"(exports, module) {
    "use strict";
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var setToStringTag = require_set_to_string_tag();
    var Iterators = require_iterators();
    var returnThis = function() {
      return this;
    };
    module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
      var TO_STRING_TAG = NAME + " Iterator";
      IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
      setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
      Iterators[TO_STRING_TAG] = returnThis;
      return IteratorConstructor;
    };
  }
});

// node_modules/core-js-pure/internals/a-possible-prototype.js
var require_a_possible_prototype = __commonJS({
  "node_modules/core-js-pure/internals/a-possible-prototype.js"(exports, module) {
    var isCallable = require_is_callable();
    var $String = String;
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (typeof argument == "object" || isCallable(argument))
        return argument;
      throw $TypeError("Can't set " + $String(argument) + " as a prototype");
    };
  }
});

// node_modules/core-js-pure/internals/object-set-prototype-of.js
var require_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-set-prototype-of.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var anObject = require_an_object();
    var aPossiblePrototype = require_a_possible_prototype();
    module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;
      try {
        setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) {
      }
      return function setPrototypeOf(O3, proto) {
        anObject(O3);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER)
          setter(O3, proto);
        else
          O3.__proto__ = proto;
        return O3;
      };
    }() : void 0);
  }
});

// node_modules/core-js-pure/internals/define-iterator.js
var require_define_iterator = __commonJS({
  "node_modules/core-js-pure/internals/define-iterator.js"(exports, module) {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var IS_PURE = require_is_pure();
    var FunctionName = require_function_name();
    var isCallable = require_is_callable();
    var createIteratorConstructor = require_create_iterator_constructor();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var IteratorsCore = require_iterators_core();
    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
      return this;
    };
    module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor(IteratorConstructor, NAME, next);
      var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator)
          return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
          return IterablePrototype[KIND];
        switch (KIND) {
          case KEYS:
            return function keys() {
              return new IteratorConstructor(this, KIND);
            };
          case VALUES:
            return function values() {
              return new IteratorConstructor(this, KIND);
            };
          case ENTRIES:
            return function entries() {
              return new IteratorConstructor(this, KIND);
            };
        }
        return function() {
          return new IteratorConstructor(this);
        };
      };
      var TO_STRING_TAG = NAME + " Iterator";
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY;
      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf) {
              setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
            } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
              defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
          }
          setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
          if (IS_PURE)
            Iterators[TO_STRING_TAG] = returnThis;
        }
      }
      if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
          createNonEnumerableProperty(IterablePrototype, "name", VALUES);
        } else {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() {
            return call(nativeIterator, this);
          };
        }
      }
      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED)
          for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
            }
          }
        else
          $3({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
      }
      if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
        defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
      }
      Iterators[NAME] = defaultIterator;
      return methods;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.iterator.js
var require_es_array_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.array.iterator.js"(exports, module) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var addToUnscopables = require_add_to_unscopables();
    var Iterators = require_iterators();
    var InternalStateModule = require_internal_state();
    var defineProperty = require_object_define_property().f;
    var defineIterator = require_define_iterator();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
    module.exports = defineIterator(Array, "Array", function(iterated, kind) {
      setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        index: 0,
        kind
      });
    }, function() {
      var state = getInternalState(this);
      var target = state.target;
      var kind = state.kind;
      var index = state.index++;
      if (!target || index >= target.length) {
        state.target = void 0;
        return { value: void 0, done: true };
      }
      if (kind == "keys")
        return { value: index, done: false };
      if (kind == "values")
        return { value: target[index], done: false };
      return { value: [index, target[index]], done: false };
    }, "values");
    var values = Iterators.Arguments = Iterators.Array;
    addToUnscopables("keys");
    addToUnscopables("values");
    addToUnscopables("entries");
    if (!IS_PURE && DESCRIPTORS && values.name !== "values")
      try {
        defineProperty(values, "name", { value: "values" });
      } catch (error) {
      }
  }
});

// node_modules/core-js-pure/internals/dom-iterables.js
var require_dom_iterables = __commonJS({
  "node_modules/core-js-pure/internals/dom-iterables.js"(exports, module) {
    module.exports = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };
  }
});

// node_modules/core-js-pure/modules/web.dom-collections.iterator.js
var require_web_dom_collections_iterator = __commonJS({
  "node_modules/core-js-pure/modules/web.dom-collections.iterator.js"() {
    require_es_array_iterator();
    var DOMIterables = require_dom_iterables();
    var global2 = require_global();
    var classof = require_classof();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    for (COLLECTION_NAME in DOMIterables) {
      Collection = global2[COLLECTION_NAME];
      CollectionPrototype = Collection && Collection.prototype;
      if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
      }
      Iterators[COLLECTION_NAME] = Iterators.Array;
    }
    var Collection;
    var CollectionPrototype;
    var COLLECTION_NAME;
  }
});

// node_modules/core-js-pure/stable/symbol/index.js
var require_symbol2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/index.js"(exports, module) {
    var parent = require_symbol();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/symbol/index.js
var require_symbol3 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/index.js"(exports, module) {
    var parent = require_symbol2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
var require_esnext_symbol_async_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("asyncDispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.dispose.js
var require_esnext_symbol_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.dispose.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("dispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.matcher.js
var require_esnext_symbol_matcher = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.matcher.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("matcher");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js
var require_esnext_symbol_metadata_key = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("metadataKey");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.observable.js
var require_esnext_symbol_observable = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.observable.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("observable");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata.js
var require_esnext_symbol_metadata = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.metadata.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("metadata");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
var require_esnext_symbol_pattern_match = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("patternMatch");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
var require_esnext_symbol_replace_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.replace-all.js"() {
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("replaceAll");
  }
});

// node_modules/core-js-pure/full/symbol/index.js
var require_symbol4 = __commonJS({
  "node_modules/core-js-pure/full/symbol/index.js"(exports, module) {
    var parent = require_symbol3();
    require_esnext_symbol_async_dispose();
    require_esnext_symbol_dispose();
    require_esnext_symbol_matcher();
    require_esnext_symbol_metadata_key();
    require_esnext_symbol_observable();
    require_esnext_symbol_metadata();
    require_esnext_symbol_pattern_match();
    require_esnext_symbol_replace_all();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/symbol/index.js
var require_symbol5 = __commonJS({
  "node_modules/core-js-pure/features/symbol/index.js"(exports, module) {
    module.exports = require_symbol4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/symbol.js
var require_symbol6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/symbol.js"(exports, module) {
    module.exports = require_symbol5();
  }
});

// node_modules/core-js-pure/internals/string-multibyte.js
var require_string_multibyte = __commonJS({
  "node_modules/core-js-pure/internals/string-multibyte.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString2 = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var stringSlice = uncurryThis("".slice);
    var createMethod = function(CONVERT_TO_STRING) {
      return function($this, pos) {
        var S3 = toString2(requireObjectCoercible($this));
        var position = toIntegerOrInfinity(pos);
        var size = S3.length;
        var first, second;
        if (position < 0 || position >= size)
          return CONVERT_TO_STRING ? "" : void 0;
        first = charCodeAt(S3, position);
        return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S3, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S3, position) : first : CONVERT_TO_STRING ? stringSlice(S3, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
      };
    };
    module.exports = {
      codeAt: createMethod(false),
      charAt: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/modules/es.string.iterator.js
var require_es_string_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.string.iterator.js"() {
    "use strict";
    var charAt = require_string_multibyte().charAt;
    var toString2 = require_to_string();
    var InternalStateModule = require_internal_state();
    var defineIterator = require_define_iterator();
    var STRING_ITERATOR = "String Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
    defineIterator(String, "String", function(iterated) {
      setInternalState(this, {
        type: STRING_ITERATOR,
        string: toString2(iterated),
        index: 0
      });
    }, function next() {
      var state = getInternalState(this);
      var string = state.string;
      var index = state.index;
      var point3;
      if (index >= string.length)
        return { value: void 0, done: true };
      point3 = charAt(string, index);
      state.index += point3.length;
      return { value: point3, done: false };
    });
  }
});

// node_modules/core-js-pure/es/symbol/iterator.js
var require_iterator = __commonJS({
  "node_modules/core-js-pure/es/symbol/iterator.js"(exports, module) {
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_string_iterator();
    require_es_symbol_iterator();
    var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    module.exports = WrappedWellKnownSymbolModule.f("iterator");
  }
});

// node_modules/core-js-pure/stable/symbol/iterator.js
var require_iterator2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/iterator.js"(exports, module) {
    var parent = require_iterator();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/symbol/iterator.js
var require_iterator3 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/iterator.js"(exports, module) {
    var parent = require_iterator2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/symbol/iterator.js
var require_iterator4 = __commonJS({
  "node_modules/core-js-pure/full/symbol/iterator.js"(exports, module) {
    var parent = require_iterator3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/symbol/iterator.js
var require_iterator5 = __commonJS({
  "node_modules/core-js-pure/features/symbol/iterator.js"(exports, module) {
    module.exports = require_iterator4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js
var require_iterator6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js"(exports, module) {
    module.exports = require_iterator5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/typeof.js"(exports, module) {
    var _Symbol = require_symbol6();
    var _Symbol$iterator = require_iterator6();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = typeof _Symbol == "function" && typeof _Symbol$iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof _Symbol == "function" && obj2.constructor === _Symbol && obj2 !== _Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/function-bind.js
var require_function_bind = __commonJS({
  "node_modules/core-js-pure/internals/function-bind.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var arraySlice = require_array_slice();
    var NATIVE_BIND = require_function_bind_native();
    var $Function = Function;
    var concat2 = uncurryThis([].concat);
    var join = uncurryThis([].join);
    var factories = {};
    var construct = function(C3, argsLength, args) {
      if (!hasOwn(factories, argsLength)) {
        for (var list = [], i4 = 0; i4 < argsLength; i4++)
          list[i4] = "a[" + i4 + "]";
        factories[argsLength] = $Function("C,a", "return new C(" + join(list, ",") + ")");
      }
      return factories[argsLength](C3, args);
    };
    module.exports = NATIVE_BIND ? $Function.bind : function bind(that) {
      var F4 = aCallable(this);
      var Prototype = F4.prototype;
      var partArgs = arraySlice(arguments, 1);
      var boundFunction = function bound() {
        var args = concat2(partArgs, arraySlice(arguments));
        return this instanceof boundFunction ? construct(F4, args.length, args) : F4.apply(that, args);
      };
      if (isObject(Prototype))
        boundFunction.prototype = Prototype;
      return boundFunction;
    };
  }
});

// node_modules/core-js-pure/internals/a-constructor.js
var require_a_constructor = __commonJS({
  "node_modules/core-js-pure/internals/a-constructor.js"(exports, module) {
    var isConstructor = require_is_constructor();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isConstructor(argument))
        return argument;
      throw $TypeError(tryToString(argument) + " is not a constructor");
    };
  }
});

// node_modules/core-js-pure/modules/es.reflect.construct.js
var require_es_reflect_construct = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.construct.js"() {
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var bind = require_function_bind();
    var aConstructor = require_a_constructor();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var create = require_object_create();
    var fails = require_fails();
    var nativeConstruct = getBuiltIn("Reflect", "construct");
    var ObjectPrototype = Object.prototype;
    var push = [].push;
    var NEW_TARGET_BUG = fails(function() {
      function F4() {
      }
      return !(nativeConstruct(function() {
      }, [], F4) instanceof F4);
    });
    var ARGS_BUG = !fails(function() {
      nativeConstruct(function() {
      });
    });
    var FORCED = NEW_TARGET_BUG || ARGS_BUG;
    $3({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
      construct: function construct(Target, args) {
        aConstructor(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG)
          return nativeConstruct(Target, args, newTarget);
        if (Target == newTarget) {
          switch (args.length) {
            case 0:
              return new Target();
            case 1:
              return new Target(args[0]);
            case 2:
              return new Target(args[0], args[1]);
            case 3:
              return new Target(args[0], args[1], args[2]);
            case 4:
              return new Target(args[0], args[1], args[2], args[3]);
          }
          var $args = [null];
          apply(push, $args, args);
          return new (apply(bind, Target, $args))();
        }
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : ObjectPrototype);
        var result = apply(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
  }
});

// node_modules/core-js-pure/es/reflect/construct.js
var require_construct = __commonJS({
  "node_modules/core-js-pure/es/reflect/construct.js"(exports, module) {
    require_es_reflect_construct();
    var path = require_path();
    module.exports = path.Reflect.construct;
  }
});

// node_modules/core-js-pure/stable/reflect/construct.js
var require_construct2 = __commonJS({
  "node_modules/core-js-pure/stable/reflect/construct.js"(exports, module) {
    var parent = require_construct();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js
var require_construct3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js"(exports, module) {
    module.exports = require_construct2();
  }
});

// node_modules/core-js-pure/internals/define-built-ins.js
var require_define_built_ins = __commonJS({
  "node_modules/core-js-pure/internals/define-built-ins.js"(exports, module) {
    var defineBuiltIn = require_define_built_in();
    module.exports = function(target, src, options) {
      for (var key2 in src) {
        if (options && options.unsafe && target[key2])
          target[key2] = src[key2];
        else
          defineBuiltIn(target, key2, src[key2], options);
      }
      return target;
    };
  }
});

// node_modules/core-js-pure/internals/array-buffer-non-extensible.js
var require_array_buffer_non_extensible = __commonJS({
  "node_modules/core-js-pure/internals/array-buffer-non-extensible.js"(exports, module) {
    var fails = require_fails();
    module.exports = fails(function() {
      if (typeof ArrayBuffer == "function") {
        var buffer = new ArrayBuffer(8);
        if (Object.isExtensible(buffer))
          Object.defineProperty(buffer, "a", { value: 8 });
      }
    });
  }
});

// node_modules/core-js-pure/internals/object-is-extensible.js
var require_object_is_extensible = __commonJS({
  "node_modules/core-js-pure/internals/object-is-extensible.js"(exports, module) {
    var fails = require_fails();
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
    var $isExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $isExtensible(1);
    });
    module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
      if (!isObject(it))
        return false;
      if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
        return false;
      return $isExtensible ? $isExtensible(it) : true;
    } : $isExtensible;
  }
});

// node_modules/core-js-pure/internals/freezing.js
var require_freezing = __commonJS({
  "node_modules/core-js-pure/internals/freezing.js"(exports, module) {
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.isExtensible(Object.preventExtensions({}));
    });
  }
});

// node_modules/core-js-pure/internals/internal-metadata.js
var require_internal_metadata = __commonJS({
  "node_modules/core-js-pure/internals/internal-metadata.js"(exports, module) {
    var $3 = require_export();
    var uncurryThis = require_function_uncurry_this();
    var hiddenKeys = require_hidden_keys();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var defineProperty = require_object_define_property().f;
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
    var isExtensible = require_object_is_extensible();
    var uid = require_uid();
    var FREEZING = require_freezing();
    var REQUIRED = false;
    var METADATA = uid("meta");
    var id2 = 0;
    var setMetadata = function(it) {
      defineProperty(it, METADATA, { value: {
        objectID: "O" + id2++,
        weakData: {}
      } });
    };
    var fastKey = function(it, create) {
      if (!isObject(it))
        return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it))
          return "F";
        if (!create)
          return "E";
        setMetadata(it);
      }
      return it[METADATA].objectID;
    };
    var getWeakData = function(it, create) {
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it))
          return true;
        if (!create)
          return false;
        setMetadata(it);
      }
      return it[METADATA].weakData;
    };
    var onFreeze = function(it) {
      if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA))
        setMetadata(it);
      return it;
    };
    var enable = function() {
      meta.enable = function() {
      };
      REQUIRED = true;
      var getOwnPropertyNames = getOwnPropertyNamesModule.f;
      var splice = uncurryThis([].splice);
      var test = {};
      test[METADATA] = 1;
      if (getOwnPropertyNames(test).length) {
        getOwnPropertyNamesModule.f = function(it) {
          var result = getOwnPropertyNames(it);
          for (var i4 = 0, length = result.length; i4 < length; i4++) {
            if (result[i4] === METADATA) {
              splice(result, i4, 1);
              break;
            }
          }
          return result;
        };
        $3({ target: "Object", stat: true, forced: true }, {
          getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
        });
      }
    };
    var meta = module.exports = {
      enable,
      fastKey,
      getWeakData,
      onFreeze
    };
    hiddenKeys[METADATA] = true;
  }
});

// node_modules/core-js-pure/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/is-array-iterator-method.js"(exports, module) {
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator-method.js"(exports, module) {
    var classof = require_classof();
    var getMethod = require_get_method();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = function(it) {
      if (it != void 0)
        return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator.js
var require_get_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator.js"(exports, module) {
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var getIteratorMethod = require_get_iterator_method();
    var $TypeError = TypeError;
    module.exports = function(argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
      if (aCallable(iteratorMethod))
        return anObject(call(iteratorMethod, argument));
      throw $TypeError(tryToString(argument) + " is not iterable");
    };
  }
});

// node_modules/core-js-pure/internals/iterator-close.js
var require_iterator_close = __commonJS({
  "node_modules/core-js-pure/internals/iterator-close.js"(exports, module) {
    var call = require_function_call();
    var anObject = require_an_object();
    var getMethod = require_get_method();
    module.exports = function(iterator, kind, value) {
      var innerResult, innerError;
      anObject(iterator);
      try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
          if (kind === "throw")
            throw value;
          return value;
        }
        innerResult = call(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === "throw")
        throw value;
      if (innerError)
        throw innerResult;
      anObject(innerResult);
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/iterate.js
var require_iterate = __commonJS({
  "node_modules/core-js-pure/internals/iterate.js"(exports, module) {
    var bind = require_function_bind_context();
    var call = require_function_call();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var lengthOfArrayLike = require_length_of_array_like();
    var isPrototypeOf = require_object_is_prototype_of();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var iteratorClose = require_iterator_close();
    var $TypeError = TypeError;
    var Result = function(stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };
    var ResultPrototype = Result.prototype;
    module.exports = function(iterable, unboundFunction, options) {
      var that = options && options.that;
      var AS_ENTRIES = !!(options && options.AS_ENTRIES);
      var IS_ITERATOR = !!(options && options.IS_ITERATOR);
      var INTERRUPTED = !!(options && options.INTERRUPTED);
      var fn2 = bind(unboundFunction, that);
      var iterator, iterFn, index, length, result, next, step;
      var stop = function(condition) {
        if (iterator)
          iteratorClose(iterator, "normal", condition);
        return new Result(true, condition);
      };
      var callFn = function(value) {
        if (AS_ENTRIES) {
          anObject(value);
          return INTERRUPTED ? fn2(value[0], value[1], stop) : fn2(value[0], value[1]);
        }
        return INTERRUPTED ? fn2(value, stop) : fn2(value);
      };
      if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod(iterable);
        if (!iterFn)
          throw $TypeError(tryToString(iterable) + " is not iterable");
        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
            result = callFn(iterable[index]);
            if (result && isPrototypeOf(ResultPrototype, result))
              return result;
          }
          return new Result(false);
        }
        iterator = getIterator(iterable, iterFn);
      }
      next = iterator.next;
      while (!(step = call(next, iterator)).done) {
        try {
          result = callFn(step.value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
        if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
          return result;
      }
      return new Result(false);
    };
  }
});

// node_modules/core-js-pure/internals/an-instance.js
var require_an_instance = __commonJS({
  "node_modules/core-js-pure/internals/an-instance.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var $TypeError = TypeError;
    module.exports = function(it, Prototype) {
      if (isPrototypeOf(Prototype, it))
        return it;
      throw $TypeError("Incorrect invocation");
    };
  }
});

// node_modules/core-js-pure/internals/collection.js
var require_collection = __commonJS({
  "node_modules/core-js-pure/internals/collection.js"(exports, module) {
    "use strict";
    var $3 = require_export();
    var global2 = require_global();
    var InternalMetadataModule = require_internal_metadata();
    var fails = require_fails();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var iterate = require_iterate();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var setToStringTag = require_set_to_string_tag();
    var defineProperty = require_object_define_property().f;
    var forEach = require_array_iteration().forEach;
    var DESCRIPTORS = require_descriptors();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
      var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
      var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
      var ADDER = IS_MAP ? "set" : "add";
      var NativeConstructor = global2[CONSTRUCTOR_NAME];
      var NativePrototype = NativeConstructor && NativeConstructor.prototype;
      var exported = {};
      var Constructor;
      if (!DESCRIPTORS || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
        new NativeConstructor().entries().next();
      }))) {
        Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
        InternalMetadataModule.enable();
      } else {
        Constructor = wrapper(function(target, iterable) {
          setInternalState(anInstance(target, Prototype), {
            type: CONSTRUCTOR_NAME,
            collection: new NativeConstructor()
          });
          if (iterable != void 0)
            iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        forEach(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
          var IS_ADDER = KEY == "add" || KEY == "set";
          if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
            createNonEnumerableProperty(Prototype, KEY, function(a4, b3) {
              var collection = getInternalState(this).collection;
              if (!IS_ADDER && IS_WEAK && !isObject(a4))
                return KEY == "get" ? void 0 : false;
              var result = collection[KEY](a4 === 0 ? 0 : a4, b3);
              return IS_ADDER ? this : result;
            });
          }
        });
        IS_WEAK || defineProperty(Prototype, "size", {
          configurable: true,
          get: function() {
            return getInternalState(this).collection.size;
          }
        });
      }
      setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
      exported[CONSTRUCTOR_NAME] = Constructor;
      $3({ global: true, forced: true }, exported);
      if (!IS_WEAK)
        common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
      return Constructor;
    };
  }
});

// node_modules/core-js-pure/internals/collection-weak.js
var require_collection_weak = __commonJS({
  "node_modules/core-js-pure/internals/collection-weak.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var defineBuiltIns = require_define_built_ins();
    var getWeakData = require_internal_metadata().getWeakData;
    var anObject = require_an_object();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var iterate = require_iterate();
    var ArrayIterationModule = require_array_iteration();
    var hasOwn = require_has_own_property();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    var find = ArrayIterationModule.find;
    var findIndex = ArrayIterationModule.findIndex;
    var splice = uncurryThis([].splice);
    var id2 = 0;
    var uncaughtFrozenStore = function(store) {
      return store.frozen || (store.frozen = new UncaughtFrozenStore());
    };
    var UncaughtFrozenStore = function() {
      this.entries = [];
    };
    var findUncaughtFrozen = function(store, key2) {
      return find(store.entries, function(it) {
        return it[0] === key2;
      });
    };
    UncaughtFrozenStore.prototype = {
      get: function(key2) {
        var entry = findUncaughtFrozen(this, key2);
        if (entry)
          return entry[1];
      },
      has: function(key2) {
        return !!findUncaughtFrozen(this, key2);
      },
      set: function(key2, value) {
        var entry = findUncaughtFrozen(this, key2);
        if (entry)
          entry[1] = value;
        else
          this.entries.push([key2, value]);
      },
      "delete": function(key2) {
        var index = findIndex(this.entries, function(it) {
          return it[0] === key2;
        });
        if (~index)
          splice(this.entries, index, 1);
        return !!~index;
      }
    };
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            id: id2++,
            frozen: void 0
          });
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define2 = function(that, key2, value) {
          var state = getInternalState(that);
          var data = getWeakData(anObject(key2), true);
          if (data === true)
            uncaughtFrozenStore(state).set(key2, value);
          else
            data[state.id] = value;
          return that;
        };
        defineBuiltIns(Prototype, {
          "delete": function(key2) {
            var state = getInternalState(this);
            if (!isObject(key2))
              return false;
            var data = getWeakData(key2);
            if (data === true)
              return uncaughtFrozenStore(state)["delete"](key2);
            return data && hasOwn(data, state.id) && delete data[state.id];
          },
          has: function has(key2) {
            var state = getInternalState(this);
            if (!isObject(key2))
              return false;
            var data = getWeakData(key2);
            if (data === true)
              return uncaughtFrozenStore(state).has(key2);
            return data && hasOwn(data, state.id);
          }
        });
        defineBuiltIns(Prototype, IS_MAP ? {
          get: function get(key2) {
            var state = getInternalState(this);
            if (isObject(key2)) {
              var data = getWeakData(key2);
              if (data === true)
                return uncaughtFrozenStore(state).get(key2);
              return data ? data[state.id] : void 0;
            }
          },
          set: function set(key2, value) {
            return define2(this, key2, value);
          }
        } : {
          add: function add3(value) {
            return define2(this, value, true);
          }
        });
        return Constructor;
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.weak-map.constructor.js
var require_es_weak_map_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.weak-map.constructor.js"() {
    "use strict";
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var defineBuiltIns = require_define_built_ins();
    var InternalMetadataModule = require_internal_metadata();
    var collection = require_collection();
    var collectionWeak = require_collection_weak();
    var isObject = require_is_object();
    var isExtensible = require_object_is_extensible();
    var enforceInternalState = require_internal_state().enforce;
    var NATIVE_WEAK_MAP = require_native_weak_map();
    var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
    var InternalWeakMap;
    var wrapper = function(init2) {
      return function WeakMap2() {
        return init2(this, arguments.length ? arguments[0] : void 0);
      };
    };
    var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
    if (NATIVE_WEAK_MAP && IS_IE11) {
      InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
      InternalMetadataModule.enable();
      WeakMapPrototype = $WeakMap.prototype;
      nativeDelete = uncurryThis(WeakMapPrototype["delete"]);
      nativeHas = uncurryThis(WeakMapPrototype.has);
      nativeGet = uncurryThis(WeakMapPrototype.get);
      nativeSet = uncurryThis(WeakMapPrototype.set);
      defineBuiltIns(WeakMapPrototype, {
        "delete": function(key2) {
          if (isObject(key2) && !isExtensible(key2)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeDelete(this, key2) || state.frozen["delete"](key2);
          }
          return nativeDelete(this, key2);
        },
        has: function has(key2) {
          if (isObject(key2) && !isExtensible(key2)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeHas(this, key2) || state.frozen.has(key2);
          }
          return nativeHas(this, key2);
        },
        get: function get(key2) {
          if (isObject(key2) && !isExtensible(key2)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeHas(this, key2) ? nativeGet(this, key2) : state.frozen.get(key2);
          }
          return nativeGet(this, key2);
        },
        set: function set(key2, value) {
          if (isObject(key2) && !isExtensible(key2)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            nativeHas(this, key2) ? nativeSet(this, key2, value) : state.frozen.set(key2, value);
          } else
            nativeSet(this, key2, value);
          return this;
        }
      });
    }
    var WeakMapPrototype;
    var nativeDelete;
    var nativeHas;
    var nativeGet;
    var nativeSet;
  }
});

// node_modules/core-js-pure/modules/es.weak-map.js
var require_es_weak_map = __commonJS({
  "node_modules/core-js-pure/modules/es.weak-map.js"() {
    require_es_weak_map_constructor();
  }
});

// node_modules/core-js-pure/es/weak-map/index.js
var require_weak_map = __commonJS({
  "node_modules/core-js-pure/es/weak-map/index.js"(exports, module) {
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_weak_map();
    var path = require_path();
    module.exports = path.WeakMap;
  }
});

// node_modules/core-js-pure/stable/weak-map/index.js
var require_weak_map2 = __commonJS({
  "node_modules/core-js-pure/stable/weak-map/index.js"(exports, module) {
    var parent = require_weak_map();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/weak-map.js
var require_weak_map3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/weak-map.js"(exports, module) {
    module.exports = require_weak_map2();
  }
});

// node_modules/core-js-pure/modules/es.object.define-property.js
var require_es_object_define_property = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-property.js"() {
    var $3 = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperty = require_object_define_property().f;
    $3({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
      defineProperty
    });
  }
});

// node_modules/core-js-pure/es/object/define-property.js
var require_define_property = __commonJS({
  "node_modules/core-js-pure/es/object/define-property.js"(exports, module) {
    require_es_object_define_property();
    var path = require_path();
    var Object2 = path.Object;
    var defineProperty = module.exports = function defineProperty2(it, key2, desc) {
      return Object2.defineProperty(it, key2, desc);
    };
    if (Object2.defineProperty.sham)
      defineProperty.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-property.js
var require_define_property2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-property.js"(exports, module) {
    var parent = require_define_property();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
var require_define_property3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js"(exports, module) {
    module.exports = require_define_property2();
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js
var require_es_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js"() {
    var $3 = require_export();
    var fails = require_fails();
    var toIndexedObject = require_to_indexed_object();
    var nativeGetOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var DESCRIPTORS = require_descriptors();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeGetOwnPropertyDescriptor(1);
    });
    var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
    $3({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key2) {
        return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key2);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-own-property-descriptor.js
var require_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-descriptor.js"(exports, module) {
    require_es_object_get_own_property_descriptor();
    var path = require_path();
    var Object2 = path.Object;
    var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor2(it, key2) {
      return Object2.getOwnPropertyDescriptor(it, key2);
    };
    if (Object2.getOwnPropertyDescriptor.sham)
      getOwnPropertyDescriptor.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-descriptor.js"(exports, module) {
    var parent = require_get_own_property_descriptor();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js"(exports, module) {
    module.exports = require_get_own_property_descriptor2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/own-keys.js
var require_own_keys = __commonJS({
  "node_modules/core-js-pure/internals/own-keys.js"(exports, module) {
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var anObject = require_an_object();
    var concat2 = uncurryThis([].concat);
    module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys4(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? concat2(keys, getOwnPropertySymbols(it)) : keys;
    };
  }
});

// node_modules/core-js-pure/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({
  "node_modules/core-js-pure/internals/copy-constructor-properties.js"(exports, module) {
    var hasOwn = require_has_own_property();
    var ownKeys4 = require_own_keys();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    module.exports = function(target, source, exceptions) {
      var keys = ownKeys4(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      for (var i4 = 0; i4 < keys.length; i4++) {
        var key2 = keys[i4];
        if (!hasOwn(target, key2) && !(exceptions && hasOwn(exceptions, key2))) {
          defineProperty(target, key2, getOwnPropertyDescriptor(source, key2));
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/clear-error-stack.js
var require_clear_error_stack = __commonJS({
  "node_modules/core-js-pure/internals/clear-error-stack.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var $Error = Error;
    var replace = uncurryThis("".replace);
    var TEST = function(arg) {
      return String($Error(arg).stack);
    }("zxcasd");
    var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
    var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
    module.exports = function(stack, dropEntries) {
      if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string" && !$Error.prepareStackTrace) {
        while (dropEntries--)
          stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
      }
      return stack;
    };
  }
});

// node_modules/core-js-pure/internals/install-error-cause.js
var require_install_error_cause = __commonJS({
  "node_modules/core-js-pure/internals/install-error-cause.js"(exports, module) {
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module.exports = function(O3, options) {
      if (isObject(options) && "cause" in options) {
        createNonEnumerableProperty(O3, "cause", options.cause);
      }
    };
  }
});

// node_modules/core-js-pure/internals/normalize-string-argument.js
var require_normalize_string_argument = __commonJS({
  "node_modules/core-js-pure/internals/normalize-string-argument.js"(exports, module) {
    var toString2 = require_to_string();
    module.exports = function(argument, $default) {
      return argument === void 0 ? arguments.length < 2 ? "" : $default : toString2(argument);
    };
  }
});

// node_modules/core-js-pure/internals/error-stack-installable.js
var require_error_stack_installable = __commonJS({
  "node_modules/core-js-pure/internals/error-stack-installable.js"(exports, module) {
    var fails = require_fails();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = !fails(function() {
      var error = Error("a");
      if (!("stack" in error))
        return true;
      Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
      return error.stack !== 7;
    });
  }
});

// node_modules/core-js-pure/modules/es.aggregate-error.constructor.js
var require_es_aggregate_error_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.aggregate-error.constructor.js"() {
    "use strict";
    var $3 = require_export();
    var isPrototypeOf = require_object_is_prototype_of();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var copyConstructorProperties = require_copy_constructor_properties();
    var create = require_object_create();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    var clearErrorStack = require_clear_error_stack();
    var installErrorCause = require_install_error_cause();
    var iterate = require_iterate();
    var normalizeStringArgument = require_normalize_string_argument();
    var wellKnownSymbol = require_well_known_symbol();
    var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $Error = Error;
    var push = [].push;
    var $AggregateError = function AggregateError(errors, message) {
      var options = arguments.length > 2 ? arguments[2] : void 0;
      var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
      var that;
      if (setPrototypeOf) {
        that = setPrototypeOf(new $Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
      } else {
        that = isInstance ? this : create(AggregateErrorPrototype);
        createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
      }
      if (message !== void 0)
        createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
      if (ERROR_STACK_INSTALLABLE)
        createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
      installErrorCause(that, options);
      var errorsArray = [];
      iterate(errors, push, { that: errorsArray });
      createNonEnumerableProperty(that, "errors", errorsArray);
      return that;
    };
    if (setPrototypeOf)
      setPrototypeOf($AggregateError, $Error);
    else
      copyConstructorProperties($AggregateError, $Error, { name: true });
    var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
      constructor: createPropertyDescriptor(1, $AggregateError),
      message: createPropertyDescriptor(1, ""),
      name: createPropertyDescriptor(1, "AggregateError")
    });
    $3({ global: true, constructor: true, arity: 2 }, {
      AggregateError: $AggregateError
    });
  }
});

// node_modules/core-js-pure/modules/es.aggregate-error.js
var require_es_aggregate_error = __commonJS({
  "node_modules/core-js-pure/modules/es.aggregate-error.js"() {
    require_es_aggregate_error_constructor();
  }
});

// node_modules/core-js-pure/internals/engine-is-node.js
var require_engine_is_node = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-node.js"(exports, module) {
    var classof = require_classof_raw();
    var global2 = require_global();
    module.exports = classof(global2.process) == "process";
  }
});

// node_modules/core-js-pure/internals/set-species.js
var require_set_species = __commonJS({
  "node_modules/core-js-pure/internals/set-species.js"(exports, module) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var definePropertyModule = require_object_define_property();
    var wellKnownSymbol = require_well_known_symbol();
    var DESCRIPTORS = require_descriptors();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(CONSTRUCTOR_NAME) {
      var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
      var defineProperty = definePropertyModule.f;
      if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
        defineProperty(Constructor, SPECIES, {
          configurable: true,
          get: function() {
            return this;
          }
        });
      }
    };
  }
});

// node_modules/core-js-pure/internals/species-constructor.js
var require_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/species-constructor.js"(exports, module) {
    var anObject = require_an_object();
    var aConstructor = require_a_constructor();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(O3, defaultConstructor) {
      var C3 = anObject(O3).constructor;
      var S3;
      return C3 === void 0 || (S3 = anObject(C3)[SPECIES]) == void 0 ? defaultConstructor : aConstructor(S3);
    };
  }
});

// node_modules/core-js-pure/internals/validate-arguments-length.js
var require_validate_arguments_length = __commonJS({
  "node_modules/core-js-pure/internals/validate-arguments-length.js"(exports, module) {
    var $TypeError = TypeError;
    module.exports = function(passed, required) {
      if (passed < required)
        throw $TypeError("Not enough arguments");
      return passed;
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-ios.js
var require_engine_is_ios = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ios.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
  }
});

// node_modules/core-js-pure/internals/task.js
var require_task = __commonJS({
  "node_modules/core-js-pure/internals/task.js"(exports, module) {
    var global2 = require_global();
    var apply = require_function_apply();
    var bind = require_function_bind_context();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var fails = require_fails();
    var html = require_html();
    var arraySlice = require_array_slice();
    var createElement = require_document_create_element();
    var validateArgumentsLength = require_validate_arguments_length();
    var IS_IOS = require_engine_is_ios();
    var IS_NODE = require_engine_is_node();
    var set = global2.setImmediate;
    var clear = global2.clearImmediate;
    var process2 = global2.process;
    var Dispatch = global2.Dispatch;
    var Function2 = global2.Function;
    var MessageChannel = global2.MessageChannel;
    var String2 = global2.String;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = "onreadystatechange";
    var location;
    var defer;
    var channel;
    var port;
    try {
      location = global2.location;
    } catch (error) {
    }
    var run = function(id2) {
      if (hasOwn(queue, id2)) {
        var fn2 = queue[id2];
        delete queue[id2];
        fn2();
      }
    };
    var runner = function(id2) {
      return function() {
        run(id2);
      };
    };
    var listener = function(event) {
      run(event.data);
    };
    var post = function(id2) {
      global2.postMessage(String2(id2), location.protocol + "//" + location.host);
    };
    if (!set || !clear) {
      set = function setImmediate2(handler) {
        validateArgumentsLength(arguments.length, 1);
        var fn2 = isCallable(handler) ? handler : Function2(handler);
        var args = arraySlice(arguments, 1);
        queue[++counter] = function() {
          apply(fn2, void 0, args);
        };
        defer(counter);
        return counter;
      };
      clear = function clearImmediate(id2) {
        delete queue[id2];
      };
      if (IS_NODE) {
        defer = function(id2) {
          process2.nextTick(runner(id2));
        };
      } else if (Dispatch && Dispatch.now) {
        defer = function(id2) {
          Dispatch.now(runner(id2));
        };
      } else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind(port.postMessage, port);
      } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && location && location.protocol !== "file:" && !fails(post)) {
        defer = post;
        global2.addEventListener("message", listener, false);
      } else if (ONREADYSTATECHANGE in createElement("script")) {
        defer = function(id2) {
          html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id2);
          };
        };
      } else {
        defer = function(id2) {
          setTimeout(runner(id2), 0);
        };
      }
    }
    module.exports = {
      set,
      clear
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-ios-pebble.js
var require_engine_is_ios_pebble = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ios-pebble.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    var global2 = require_global();
    module.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
  }
});

// node_modules/core-js-pure/internals/engine-is-webos-webkit.js
var require_engine_is_webos_webkit = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-webos-webkit.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    module.exports = /web0s(?!.*chrome)/i.test(userAgent);
  }
});

// node_modules/core-js-pure/internals/microtask.js
var require_microtask = __commonJS({
  "node_modules/core-js-pure/internals/microtask.js"(exports, module) {
    var global2 = require_global();
    var bind = require_function_bind_context();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var macrotask = require_task().set;
    var IS_IOS = require_engine_is_ios();
    var IS_IOS_PEBBLE = require_engine_is_ios_pebble();
    var IS_WEBOS_WEBKIT = require_engine_is_webos_webkit();
    var IS_NODE = require_engine_is_node();
    var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
    var document2 = global2.document;
    var process2 = global2.process;
    var Promise2 = global2.Promise;
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
    var flush;
    var head;
    var last;
    var notify;
    var toggle;
    var node;
    var promise;
    var then;
    if (!queueMicrotask) {
      flush = function() {
        var parent, fn2;
        if (IS_NODE && (parent = process2.domain))
          parent.exit();
        while (head) {
          fn2 = head.fn;
          head = head.next;
          try {
            fn2();
          } catch (error) {
            if (head)
              notify();
            else
              last = void 0;
            throw error;
          }
        }
        last = void 0;
        if (parent)
          parent.enter();
      };
      if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
        toggle = true;
        node = document2.createTextNode("");
        new MutationObserver(flush).observe(node, { characterData: true });
        notify = function() {
          node.data = toggle = !toggle;
        };
      } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
        promise = Promise2.resolve(void 0);
        promise.constructor = Promise2;
        then = bind(promise.then, promise);
        notify = function() {
          then(flush);
        };
      } else if (IS_NODE) {
        notify = function() {
          process2.nextTick(flush);
        };
      } else {
        macrotask = bind(macrotask, global2);
        notify = function() {
          macrotask(flush);
        };
      }
    }
    module.exports = queueMicrotask || function(fn2) {
      var task = { fn: fn2, next: void 0 };
      if (last)
        last.next = task;
      if (!head) {
        head = task;
        notify();
      }
      last = task;
    };
  }
});

// node_modules/core-js-pure/internals/host-report-errors.js
var require_host_report_errors = __commonJS({
  "node_modules/core-js-pure/internals/host-report-errors.js"(exports, module) {
    var global2 = require_global();
    module.exports = function(a4, b3) {
      var console2 = global2.console;
      if (console2 && console2.error) {
        arguments.length == 1 ? console2.error(a4) : console2.error(a4, b3);
      }
    };
  }
});

// node_modules/core-js-pure/internals/perform.js
var require_perform = __commonJS({
  "node_modules/core-js-pure/internals/perform.js"(exports, module) {
    module.exports = function(exec) {
      try {
        return { error: false, value: exec() };
      } catch (error) {
        return { error: true, value: error };
      }
    };
  }
});

// node_modules/core-js-pure/internals/queue.js
var require_queue = __commonJS({
  "node_modules/core-js-pure/internals/queue.js"(exports, module) {
    var Queue = function() {
      this.head = null;
      this.tail = null;
    };
    Queue.prototype = {
      add: function(item) {
        var entry = { item, next: null };
        if (this.head)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
      },
      get: function() {
        var entry = this.head;
        if (entry) {
          this.head = entry.next;
          if (this.tail === entry)
            this.tail = null;
          return entry.item;
        }
      }
    };
    module.exports = Queue;
  }
});

// node_modules/core-js-pure/internals/promise-native-constructor.js
var require_promise_native_constructor = __commonJS({
  "node_modules/core-js-pure/internals/promise-native-constructor.js"(exports, module) {
    var global2 = require_global();
    module.exports = global2.Promise;
  }
});

// node_modules/core-js-pure/internals/engine-is-browser.js
var require_engine_is_browser = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-browser.js"(exports, module) {
    module.exports = typeof window == "object" && typeof Deno != "object";
  }
});

// node_modules/core-js-pure/internals/promise-constructor-detection.js
var require_promise_constructor_detection = __commonJS({
  "node_modules/core-js-pure/internals/promise-constructor-detection.js"(exports, module) {
    var global2 = require_global();
    var NativePromiseConstructor = require_promise_native_constructor();
    var isCallable = require_is_callable();
    var isForced = require_is_forced();
    var inspectSource = require_inspect_source();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_BROWSER = require_engine_is_browser();
    var IS_PURE = require_is_pure();
    var V8_VERSION = require_engine_v8_version();
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    var SPECIES = wellKnownSymbol("species");
    var SUBCLASSING = false;
    var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
    var FORCED_PROMISE_CONSTRUCTOR = isForced("Promise", function() {
      var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
      var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
      if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
        return true;
      if (IS_PURE && !(NativePromisePrototype["catch"] && NativePromisePrototype["finally"]))
        return true;
      if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE))
        return false;
      var promise = new NativePromiseConstructor(function(resolve) {
        resolve(1);
      });
      var FakePromise = function(exec) {
        exec(function() {
        }, function() {
        });
      };
      var constructor = promise.constructor = {};
      constructor[SPECIES] = FakePromise;
      SUBCLASSING = promise.then(function() {
      }) instanceof FakePromise;
      if (!SUBCLASSING)
        return true;
      return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT;
    });
    module.exports = {
      CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
      REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
      SUBCLASSING
    };
  }
});

// node_modules/core-js-pure/internals/new-promise-capability.js
var require_new_promise_capability = __commonJS({
  "node_modules/core-js-pure/internals/new-promise-capability.js"(exports, module) {
    "use strict";
    var aCallable = require_a_callable();
    var PromiseCapability = function(C3) {
      var resolve, reject;
      this.promise = new C3(function($$resolve, $$reject) {
        if (resolve !== void 0 || reject !== void 0)
          throw TypeError("Bad Promise constructor");
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aCallable(resolve);
      this.reject = aCallable(reject);
    };
    module.exports.f = function(C3) {
      return new PromiseCapability(C3);
    };
  }
});

// node_modules/core-js-pure/modules/es.promise.constructor.js
var require_es_promise_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.constructor.js"() {
    "use strict";
    var $3 = require_export();
    var IS_PURE = require_is_pure();
    var IS_NODE = require_engine_is_node();
    var global2 = require_global();
    var call = require_function_call();
    var defineBuiltIn = require_define_built_in();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var setSpecies = require_set_species();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var speciesConstructor = require_species_constructor();
    var task = require_task().set;
    var microtask = require_microtask();
    var hostReportErrors = require_host_report_errors();
    var perform = require_perform();
    var Queue = require_queue();
    var InternalStateModule = require_internal_state();
    var NativePromiseConstructor = require_promise_native_constructor();
    var PromiseConstructorDetection = require_promise_constructor_detection();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var PROMISE = "Promise";
    var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
    var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
    var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
    var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
    var setInternalState = InternalStateModule.set;
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    var PromiseConstructor = NativePromiseConstructor;
    var PromisePrototype = NativePromisePrototype;
    var TypeError2 = global2.TypeError;
    var document2 = global2.document;
    var process2 = global2.process;
    var newPromiseCapability = newPromiseCapabilityModule.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
    var UNHANDLED_REJECTION = "unhandledrejection";
    var REJECTION_HANDLED = "rejectionhandled";
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var Internal;
    var OwnPromiseCapability;
    var PromiseWrapper;
    var nativeThen;
    var isThenable = function(it) {
      var then;
      return isObject(it) && isCallable(then = it.then) ? then : false;
    };
    var callReaction = function(reaction, state) {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED)
              onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true)
            result = value;
          else {
            if (domain)
              domain.enter();
            result = handler(value);
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError2("Promise-chain cycle"));
          } else if (then = isThenable(result)) {
            call(then, result, resolve, reject);
          } else
            resolve(result);
        } else
          reject(value);
      } catch (error) {
        if (domain && !exited)
          domain.exit();
        reject(error);
      }
    };
    var notify = function(state, isReject) {
      if (state.notified)
        return;
      state.notified = true;
      microtask(function() {
        var reactions = state.reactions;
        var reaction;
        while (reaction = reactions.get()) {
          callReaction(reaction, state);
        }
        state.notified = false;
        if (isReject && !state.rejection)
          onUnhandled(state);
      });
    };
    var dispatchEvent = function(name2, promise, reason) {
      var event, handler;
      if (DISPATCH_EVENT) {
        event = document2.createEvent("Event");
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name2, false, true);
        global2.dispatchEvent(event);
      } else
        event = { promise, reason };
      if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global2["on" + name2]))
        handler(event);
      else if (name2 === UNHANDLED_REJECTION)
        hostReportErrors("Unhandled promise rejection", reason);
    };
    var onUnhandled = function(state) {
      call(task, global2, function() {
        var promise = state.facade;
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;
        if (IS_UNHANDLED) {
          result = perform(function() {
            if (IS_NODE) {
              process2.emit("unhandledRejection", value, promise);
            } else
              dispatchEvent(UNHANDLED_REJECTION, promise, value);
          });
          state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
          if (result.error)
            throw result.value;
        }
      });
    };
    var isUnhandled = function(state) {
      return state.rejection !== HANDLED && !state.parent;
    };
    var onHandleUnhandled = function(state) {
      call(task, global2, function() {
        var promise = state.facade;
        if (IS_NODE) {
          process2.emit("rejectionHandled", promise);
        } else
          dispatchEvent(REJECTION_HANDLED, promise, state.value);
      });
    };
    var bind = function(fn2, state, unwrap) {
      return function(value) {
        fn2(state, value, unwrap);
      };
    };
    var internalReject = function(state, value, unwrap) {
      if (state.done)
        return;
      state.done = true;
      if (unwrap)
        state = unwrap;
      state.value = value;
      state.state = REJECTED;
      notify(state, true);
    };
    var internalResolve = function(state, value, unwrap) {
      if (state.done)
        return;
      state.done = true;
      if (unwrap)
        state = unwrap;
      try {
        if (state.facade === value)
          throw TypeError2("Promise can't be resolved itself");
        var then = isThenable(value);
        if (then) {
          microtask(function() {
            var wrapper = { done: false };
            try {
              call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
            } catch (error) {
              internalReject(wrapper, error, state);
            }
          });
        } else {
          state.value = value;
          state.state = FULFILLED;
          notify(state, false);
        }
      } catch (error) {
        internalReject({ done: false }, error, state);
      }
    };
    if (FORCED_PROMISE_CONSTRUCTOR) {
      PromiseConstructor = function Promise2(executor) {
        anInstance(this, PromisePrototype);
        aCallable(executor);
        call(Internal, this);
        var state = getInternalPromiseState(this);
        try {
          executor(bind(internalResolve, state), bind(internalReject, state));
        } catch (error) {
          internalReject(state, error);
        }
      };
      PromisePrototype = PromiseConstructor.prototype;
      Internal = function Promise2(executor) {
        setInternalState(this, {
          type: PROMISE,
          done: false,
          notified: false,
          parent: false,
          reactions: new Queue(),
          rejection: false,
          state: PENDING,
          value: void 0
        });
      };
      Internal.prototype = defineBuiltIn(PromisePrototype, "then", function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
        state.parent = true;
        reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
        reaction.fail = isCallable(onRejected) && onRejected;
        reaction.domain = IS_NODE ? process2.domain : void 0;
        if (state.state == PENDING)
          state.reactions.add(reaction);
        else
          microtask(function() {
            callReaction(reaction, state);
          });
        return reaction.promise;
      });
      OwnPromiseCapability = function() {
        var promise = new Internal();
        var state = getInternalPromiseState(promise);
        this.promise = promise;
        this.resolve = bind(internalResolve, state);
        this.reject = bind(internalReject, state);
      };
      newPromiseCapabilityModule.f = newPromiseCapability = function(C3) {
        return C3 === PromiseConstructor || C3 === PromiseWrapper ? new OwnPromiseCapability(C3) : newGenericPromiseCapability(C3);
      };
      if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
        nativeThen = NativePromisePrototype.then;
        if (!NATIVE_PROMISE_SUBCLASSING) {
          defineBuiltIn(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function(resolve, reject) {
              call(nativeThen, that, resolve, reject);
            }).then(onFulfilled, onRejected);
          }, { unsafe: true });
        }
        try {
          delete NativePromisePrototype.constructor;
        } catch (error) {
        }
        if (setPrototypeOf) {
          setPrototypeOf(NativePromisePrototype, PromisePrototype);
        }
      }
    }
    $3({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
      Promise: PromiseConstructor
    });
    setToStringTag(PromiseConstructor, PROMISE, false, true);
    setSpecies(PROMISE);
  }
});

// node_modules/core-js-pure/internals/check-correctness-of-iteration.js
var require_check_correctness_of_iteration = __commonJS({
  "node_modules/core-js-pure/internals/check-correctness-of-iteration.js"(exports, module) {
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    var SAFE_CLOSING = false;
    try {
      called = 0;
      iteratorWithReturn = {
        next: function() {
          return { done: !!called++ };
        },
        "return": function() {
          SAFE_CLOSING = true;
        }
      };
      iteratorWithReturn[ITERATOR] = function() {
        return this;
      };
      Array.from(iteratorWithReturn, function() {
        throw 2;
      });
    } catch (error) {
    }
    var called;
    var iteratorWithReturn;
    module.exports = function(exec, SKIP_CLOSING) {
      if (!SKIP_CLOSING && !SAFE_CLOSING)
        return false;
      var ITERATION_SUPPORT = false;
      try {
        var object = {};
        object[ITERATOR] = function() {
          return {
            next: function() {
              return { done: ITERATION_SUPPORT = true };
            }
          };
        };
        exec(object);
      } catch (error) {
      }
      return ITERATION_SUPPORT;
    };
  }
});

// node_modules/core-js-pure/internals/promise-statics-incorrect-iteration.js
var require_promise_statics_incorrect_iteration = __commonJS({
  "node_modules/core-js-pure/internals/promise-statics-incorrect-iteration.js"(exports, module) {
    var NativePromiseConstructor = require_promise_native_constructor();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function(iterable) {
      NativePromiseConstructor.all(iterable).then(void 0, function() {
      });
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.all.js
var require_es_promise_all = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.all.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration();
    $3({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
      all: function all(iterable) {
        var C3 = this;
        var capability = newPromiseCapabilityModule.f(C3);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C3.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call($promiseResolve, C3, promise).then(function(value) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.catch.js
var require_es_promise_catch = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.catch.js"() {
    "use strict";
    var $3 = require_export();
    var IS_PURE = require_is_pure();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    var NativePromiseConstructor = require_promise_native_constructor();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var defineBuiltIn = require_define_built_in();
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    $3({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
      "catch": function(onRejected) {
        return this.then(void 0, onRejected);
      }
    });
    if (!IS_PURE && isCallable(NativePromiseConstructor)) {
      method = getBuiltIn("Promise").prototype["catch"];
      if (NativePromisePrototype["catch"] !== method) {
        defineBuiltIn(NativePromisePrototype, "catch", method, { unsafe: true });
      }
    }
    var method;
  }
});

// node_modules/core-js-pure/modules/es.promise.race.js
var require_es_promise_race = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.race.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration();
    $3({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
      race: function race(iterable) {
        var C3 = this;
        var capability = newPromiseCapabilityModule.f(C3);
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C3.resolve);
          iterate(iterable, function(promise) {
            call($promiseResolve, C3, promise).then(capability.resolve, reject);
          });
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.reject.js
var require_es_promise_reject = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.reject.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    $3({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
      reject: function reject(r4) {
        var capability = newPromiseCapabilityModule.f(this);
        call(capability.reject, void 0, r4);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/internals/promise-resolve.js
var require_promise_resolve = __commonJS({
  "node_modules/core-js-pure/internals/promise-resolve.js"(exports, module) {
    var anObject = require_an_object();
    var isObject = require_is_object();
    var newPromiseCapability = require_new_promise_capability();
    module.exports = function(C3, x4) {
      anObject(C3);
      if (isObject(x4) && x4.constructor === C3)
        return x4;
      var promiseCapability = newPromiseCapability.f(C3);
      var resolve = promiseCapability.resolve;
      resolve(x4);
      return promiseCapability.promise;
    };
  }
});

// node_modules/core-js-pure/modules/es.promise.resolve.js
var require_es_promise_resolve = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.resolve.js"() {
    "use strict";
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var IS_PURE = require_is_pure();
    var NativePromiseConstructor = require_promise_native_constructor();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    var promiseResolve = require_promise_resolve();
    var PromiseConstructorWrapper = getBuiltIn("Promise");
    var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;
    $3({ target: "Promise", stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
      resolve: function resolve(x4) {
        return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x4);
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.js
var require_es_promise = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.js"() {
    require_es_promise_constructor();
    require_es_promise_all();
    require_es_promise_catch();
    require_es_promise_race();
    require_es_promise_reject();
    require_es_promise_resolve();
  }
});

// node_modules/core-js-pure/modules/es.promise.all-settled.js
var require_es_promise_all_settled = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.all-settled.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    $3({ target: "Promise", stat: true }, {
      allSettled: function allSettled(iterable) {
        var C3 = this;
        var capability = newPromiseCapabilityModule.f(C3);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var promiseResolve = aCallable(C3.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call(promiseResolve, C3, promise).then(function(value) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = { status: "fulfilled", value };
              --remaining || resolve(values);
            }, function(error) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = { status: "rejected", reason: error };
              --remaining || resolve(values);
            });
          });
          --remaining || resolve(values);
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.any.js
var require_es_promise_any = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.any.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var getBuiltIn = require_get_built_in();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_ANY_ERROR = "No one promise resolved";
    $3({ target: "Promise", stat: true }, {
      any: function any(iterable) {
        var C3 = this;
        var AggregateError = getBuiltIn("AggregateError");
        var capability = newPromiseCapabilityModule.f(C3);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var promiseResolve = aCallable(C3.resolve);
          var errors = [];
          var counter = 0;
          var remaining = 1;
          var alreadyResolved = false;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyRejected = false;
            remaining++;
            call(promiseResolve, C3, promise).then(function(value) {
              if (alreadyRejected || alreadyResolved)
                return;
              alreadyResolved = true;
              resolve(value);
            }, function(error) {
              if (alreadyRejected || alreadyResolved)
                return;
              alreadyRejected = true;
              errors[index] = error;
              --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
            });
          });
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.finally.js
var require_es_promise_finally = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.finally.js"() {
    "use strict";
    var $3 = require_export();
    var IS_PURE = require_is_pure();
    var NativePromiseConstructor = require_promise_native_constructor();
    var fails = require_fails();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var speciesConstructor = require_species_constructor();
    var promiseResolve = require_promise_resolve();
    var defineBuiltIn = require_define_built_in();
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    var NON_GENERIC = !!NativePromiseConstructor && fails(function() {
      NativePromisePrototype["finally"].call({ then: function() {
      } }, function() {
      });
    });
    $3({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
      "finally": function(onFinally) {
        var C3 = speciesConstructor(this, getBuiltIn("Promise"));
        var isFunction = isCallable(onFinally);
        return this.then(isFunction ? function(x4) {
          return promiseResolve(C3, onFinally()).then(function() {
            return x4;
          });
        } : onFinally, isFunction ? function(e3) {
          return promiseResolve(C3, onFinally()).then(function() {
            throw e3;
          });
        } : onFinally);
      }
    });
    if (!IS_PURE && isCallable(NativePromiseConstructor)) {
      method = getBuiltIn("Promise").prototype["finally"];
      if (NativePromisePrototype["finally"] !== method) {
        defineBuiltIn(NativePromisePrototype, "finally", method, { unsafe: true });
      }
    }
    var method;
  }
});

// node_modules/core-js-pure/es/promise/index.js
var require_promise = __commonJS({
  "node_modules/core-js-pure/es/promise/index.js"(exports, module) {
    require_es_aggregate_error();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_promise();
    require_es_promise_all_settled();
    require_es_promise_any();
    require_es_promise_finally();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Promise;
  }
});

// node_modules/core-js-pure/stable/promise/index.js
var require_promise2 = __commonJS({
  "node_modules/core-js-pure/stable/promise/index.js"(exports, module) {
    var parent = require_promise();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/promise.js
var require_promise3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/promise.js"(exports, module) {
    module.exports = require_promise2();
  }
});

// node_modules/@babel/runtime-corejs3/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime-corejs3/regenerator/index.js"(exports, module) {
    module.exports = require_runtime();
  }
});

// node_modules/core-js-pure/actual/promise/index.js
var require_promise4 = __commonJS({
  "node_modules/core-js-pure/actual/promise/index.js"(exports, module) {
    var parent = require_promise2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/modules/esnext.aggregate-error.js
var require_esnext_aggregate_error = __commonJS({
  "node_modules/core-js-pure/modules/esnext.aggregate-error.js"() {
    require_es_aggregate_error();
  }
});

// node_modules/core-js-pure/modules/esnext.promise.all-settled.js
var require_esnext_promise_all_settled = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.all-settled.js"() {
    require_es_promise_all_settled();
  }
});

// node_modules/core-js-pure/modules/esnext.promise.try.js
var require_esnext_promise_try = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.try.js"() {
    "use strict";
    var $3 = require_export();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    $3({ target: "Promise", stat: true, forced: true }, {
      "try": function(callbackfn) {
        var promiseCapability = newPromiseCapabilityModule.f(this);
        var result = perform(callbackfn);
        (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
        return promiseCapability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.promise.any.js
var require_esnext_promise_any = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.any.js"() {
    require_es_promise_any();
  }
});

// node_modules/core-js-pure/full/promise/index.js
var require_promise5 = __commonJS({
  "node_modules/core-js-pure/full/promise/index.js"(exports, module) {
    var parent = require_promise4();
    require_esnext_aggregate_error();
    require_esnext_promise_all_settled();
    require_esnext_promise_try();
    require_esnext_promise_any();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/promise/index.js
var require_promise6 = __commonJS({
  "node_modules/core-js-pure/features/promise/index.js"(exports, module) {
    module.exports = require_promise5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/promise.js
var require_promise7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/promise.js"(exports, module) {
    module.exports = require_promise6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js"(exports, module) {
    var _Promise = require_promise7();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key2, arg) {
      try {
        var info = gen[key2](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        _Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn2) {
      return function() {
        var self2 = this, args = arguments;
        return new _Promise(function(resolve, reject) {
          var gen = fn2.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js"(exports, module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/object/define-property.js
var require_define_property4 = __commonJS({
  "node_modules/core-js-pure/actual/object/define-property.js"(exports, module) {
    var parent = require_define_property2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/object/define-property.js
var require_define_property5 = __commonJS({
  "node_modules/core-js-pure/full/object/define-property.js"(exports, module) {
    var parent = require_define_property4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/define-property.js
var require_define_property6 = __commonJS({
  "node_modules/core-js-pure/features/object/define-property.js"(exports, module) {
    module.exports = require_define_property5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/define-property.js
var require_define_property7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/define-property.js"(exports, module) {
    module.exports = require_define_property6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/createClass.js"(exports, module) {
    var _Object$defineProperty = require_define_property7();
    function _defineProperties(target, props) {
      for (var i4 = 0; i4 < props.length; i4++) {
        var descriptor = props[i4];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      _Object$defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.object.create.js
var require_es_object_create = __commonJS({
  "node_modules/core-js-pure/modules/es.object.create.js"() {
    var $3 = require_export();
    var DESCRIPTORS = require_descriptors();
    var create = require_object_create();
    $3({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      create
    });
  }
});

// node_modules/core-js-pure/es/object/create.js
var require_create = __commonJS({
  "node_modules/core-js-pure/es/object/create.js"(exports, module) {
    require_es_object_create();
    var path = require_path();
    var Object2 = path.Object;
    module.exports = function create(P4, D4) {
      return Object2.create(P4, D4);
    };
  }
});

// node_modules/core-js-pure/stable/object/create.js
var require_create2 = __commonJS({
  "node_modules/core-js-pure/stable/object/create.js"(exports, module) {
    var parent = require_create();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/create.js
var require_create3 = __commonJS({
  "node_modules/core-js-pure/actual/object/create.js"(exports, module) {
    var parent = require_create2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/object/create.js
var require_create4 = __commonJS({
  "node_modules/core-js-pure/full/object/create.js"(exports, module) {
    var parent = require_create3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/create.js
var require_create5 = __commonJS({
  "node_modules/core-js-pure/features/object/create.js"(exports, module) {
    module.exports = require_create4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/create.js
var require_create6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/create.js"(exports, module) {
    module.exports = require_create5();
  }
});

// node_modules/core-js-pure/modules/es.object.set-prototype-of.js
var require_es_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/modules/es.object.set-prototype-of.js"() {
    var $3 = require_export();
    var setPrototypeOf = require_object_set_prototype_of();
    $3({ target: "Object", stat: true }, {
      setPrototypeOf
    });
  }
});

// node_modules/core-js-pure/es/object/set-prototype-of.js
var require_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/es/object/set-prototype-of.js"(exports, module) {
    require_es_object_set_prototype_of();
    var path = require_path();
    module.exports = path.Object.setPrototypeOf;
  }
});

// node_modules/core-js-pure/stable/object/set-prototype-of.js
var require_set_prototype_of2 = __commonJS({
  "node_modules/core-js-pure/stable/object/set-prototype-of.js"(exports, module) {
    var parent = require_set_prototype_of();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/set-prototype-of.js
var require_set_prototype_of3 = __commonJS({
  "node_modules/core-js-pure/actual/object/set-prototype-of.js"(exports, module) {
    var parent = require_set_prototype_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/object/set-prototype-of.js
var require_set_prototype_of4 = __commonJS({
  "node_modules/core-js-pure/full/object/set-prototype-of.js"(exports, module) {
    var parent = require_set_prototype_of3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/set-prototype-of.js
var require_set_prototype_of5 = __commonJS({
  "node_modules/core-js-pure/features/object/set-prototype-of.js"(exports, module) {
    module.exports = require_set_prototype_of4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js
var require_set_prototype_of6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js"(exports, module) {
    module.exports = require_set_prototype_of5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js"(exports, module) {
    var _Object$setPrototypeOf = require_set_prototype_of6();
    function _setPrototypeOf(o4, p4) {
      module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf2(o5, p5) {
        o5.__proto__ = p5;
        return o5;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf(o4, p4);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/inherits.js"(exports, module) {
    var _Object$create = require_create6();
    var _Object$defineProperty = require_define_property7();
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = _Object$create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      _Object$defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        setPrototypeOf(subClass, superClass);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js"(exports, module) {
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return assertThisInitialized(self2);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.object.get-prototype-of.js
var require_es_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-prototype-of.js"() {
    var $3 = require_export();
    var fails = require_fails();
    var toObject = require_to_object();
    var nativeGetPrototypeOf = require_object_get_prototype_of();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeGetPrototypeOf(1);
    });
    $3({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
      getPrototypeOf: function getPrototypeOf(it) {
        return nativeGetPrototypeOf(toObject(it));
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-prototype-of.js
var require_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/es/object/get-prototype-of.js"(exports, module) {
    require_es_object_get_prototype_of();
    var path = require_path();
    module.exports = path.Object.getPrototypeOf;
  }
});

// node_modules/core-js-pure/stable/object/get-prototype-of.js
var require_get_prototype_of2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-prototype-of.js"(exports, module) {
    var parent = require_get_prototype_of();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/get-prototype-of.js
var require_get_prototype_of3 = __commonJS({
  "node_modules/core-js-pure/actual/object/get-prototype-of.js"(exports, module) {
    var parent = require_get_prototype_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/object/get-prototype-of.js
var require_get_prototype_of4 = __commonJS({
  "node_modules/core-js-pure/full/object/get-prototype-of.js"(exports, module) {
    var parent = require_get_prototype_of3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/get-prototype-of.js
var require_get_prototype_of5 = __commonJS({
  "node_modules/core-js-pure/features/object/get-prototype-of.js"(exports, module) {
    module.exports = require_get_prototype_of4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js
var require_get_prototype_of6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js"(exports, module) {
    module.exports = require_get_prototype_of5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js"(exports, module) {
    var _Object$setPrototypeOf = require_set_prototype_of6();
    var _Object$getPrototypeOf = require_get_prototype_of6();
    function _getPrototypeOf(o4) {
      module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf2(o5) {
        return o5.__proto__ || _Object$getPrototypeOf(o5);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf(o4);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.array.is-array.js
var require_es_array_is_array = __commonJS({
  "node_modules/core-js-pure/modules/es.array.is-array.js"() {
    var $3 = require_export();
    var isArray = require_is_array();
    $3({ target: "Array", stat: true }, {
      isArray
    });
  }
});

// node_modules/core-js-pure/es/array/is-array.js
var require_is_array2 = __commonJS({
  "node_modules/core-js-pure/es/array/is-array.js"(exports, module) {
    require_es_array_is_array();
    var path = require_path();
    module.exports = path.Array.isArray;
  }
});

// node_modules/core-js-pure/stable/array/is-array.js
var require_is_array3 = __commonJS({
  "node_modules/core-js-pure/stable/array/is-array.js"(exports, module) {
    var parent = require_is_array2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
var require_is_array4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js"(exports, module) {
    module.exports = require_is_array3();
  }
});

// node_modules/core-js-pure/internals/array-method-is-strict.js
var require_array_method_is_strict = __commonJS({
  "node_modules/core-js-pure/internals/array-method-is-strict.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = function(METHOD_NAME, argument) {
      var method = [][METHOD_NAME];
      return !!method && fails(function() {
        method.call(null, argument || function() {
          return 1;
        }, 1);
      });
    };
  }
});

// node_modules/core-js-pure/internals/array-for-each.js
var require_array_for_each = __commonJS({
  "node_modules/core-js-pure/internals/array-for-each.js"(exports, module) {
    "use strict";
    var $forEach = require_array_iteration().forEach;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("forEach");
    module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
      return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    } : [].forEach;
  }
});

// node_modules/core-js-pure/modules/es.array.for-each.js
var require_es_array_for_each = __commonJS({
  "node_modules/core-js-pure/modules/es.array.for-each.js"() {
    "use strict";
    var $3 = require_export();
    var forEach = require_array_for_each();
    $3({ target: "Array", proto: true, forced: [].forEach != forEach }, {
      forEach
    });
  }
});

// node_modules/core-js-pure/internals/entry-virtual.js
var require_entry_virtual = __commonJS({
  "node_modules/core-js-pure/internals/entry-virtual.js"(exports, module) {
    var path = require_path();
    module.exports = function(CONSTRUCTOR) {
      return path[CONSTRUCTOR + "Prototype"];
    };
  }
});

// node_modules/core-js-pure/es/array/virtual/for-each.js
var require_for_each = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/for-each.js"(exports, module) {
    require_es_array_for_each();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").forEach;
  }
});

// node_modules/core-js-pure/stable/array/virtual/for-each.js
var require_for_each2 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/for-each.js"(exports, module) {
    var parent = require_for_each();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/for-each.js
var require_for_each3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/for-each.js"(exports, module) {
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_for_each2();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.forEach;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js
var require_for_each4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js"(exports, module) {
    module.exports = require_for_each3();
  }
});

// node_modules/core-js-pure/modules/es.object.keys.js
var require_es_object_keys = __commonJS({
  "node_modules/core-js-pure/modules/es.object.keys.js"() {
    var $3 = require_export();
    var toObject = require_to_object();
    var nativeKeys = require_object_keys();
    var fails = require_fails();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeKeys(1);
    });
    $3({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
      keys: function keys(it) {
        return nativeKeys(toObject(it));
      }
    });
  }
});

// node_modules/core-js-pure/es/object/keys.js
var require_keys = __commonJS({
  "node_modules/core-js-pure/es/object/keys.js"(exports, module) {
    require_es_object_keys();
    var path = require_path();
    module.exports = path.Object.keys;
  }
});

// node_modules/core-js-pure/stable/object/keys.js
var require_keys2 = __commonJS({
  "node_modules/core-js-pure/stable/object/keys.js"(exports, module) {
    var parent = require_keys();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js
var require_keys3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js"(exports, module) {
    module.exports = require_keys2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/defineProperty.js"(exports, module) {
    var _Object$defineProperty = require_define_property7();
    function _defineProperty2(obj, key2, value) {
      if (key2 in obj) {
        _Object$defineProperty(obj, key2, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    module.exports = _defineProperty2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/is-data-descriptor.js
var require_is_data_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/is-data-descriptor.js"(exports, module) {
    var hasOwn = require_has_own_property();
    module.exports = function(descriptor) {
      return descriptor !== void 0 && (hasOwn(descriptor, "value") || hasOwn(descriptor, "writable"));
    };
  }
});

// node_modules/core-js-pure/modules/es.reflect.get.js
var require_es_reflect_get = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.get.js"() {
    var $3 = require_export();
    var call = require_function_call();
    var isObject = require_is_object();
    var anObject = require_an_object();
    var isDataDescriptor = require_is_data_descriptor();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var getPrototypeOf = require_object_get_prototype_of();
    function get(target, propertyKey) {
      var receiver = arguments.length < 3 ? target : arguments[2];
      var descriptor, prototype;
      if (anObject(target) === receiver)
        return target[propertyKey];
      descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
      if (descriptor)
        return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === void 0 ? void 0 : call(descriptor.get, receiver);
      if (isObject(prototype = getPrototypeOf(target)))
        return get(prototype, propertyKey, receiver);
    }
    $3({ target: "Reflect", stat: true }, {
      get
    });
  }
});

// node_modules/core-js-pure/es/reflect/get.js
var require_get = __commonJS({
  "node_modules/core-js-pure/es/reflect/get.js"(exports, module) {
    require_es_reflect_get();
    var path = require_path();
    module.exports = path.Reflect.get;
  }
});

// node_modules/core-js-pure/stable/reflect/get.js
var require_get2 = __commonJS({
  "node_modules/core-js-pure/stable/reflect/get.js"(exports, module) {
    var parent = require_get();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/reflect/get.js
var require_get3 = __commonJS({
  "node_modules/core-js-pure/actual/reflect/get.js"(exports, module) {
    var parent = require_get2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/reflect/get.js
var require_get4 = __commonJS({
  "node_modules/core-js-pure/full/reflect/get.js"(exports, module) {
    var parent = require_get3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/reflect/get.js
var require_get5 = __commonJS({
  "node_modules/core-js-pure/features/reflect/get.js"(exports, module) {
    module.exports = require_get4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/reflect/get.js
var require_get6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/reflect/get.js"(exports, module) {
    module.exports = require_get5();
  }
});

// node_modules/core-js-pure/actual/object/get-own-property-descriptor.js
var require_get_own_property_descriptor4 = __commonJS({
  "node_modules/core-js-pure/actual/object/get-own-property-descriptor.js"(exports, module) {
    var parent = require_get_own_property_descriptor2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/object/get-own-property-descriptor.js
var require_get_own_property_descriptor5 = __commonJS({
  "node_modules/core-js-pure/full/object/get-own-property-descriptor.js"(exports, module) {
    var parent = require_get_own_property_descriptor4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/get-own-property-descriptor.js
var require_get_own_property_descriptor6 = __commonJS({
  "node_modules/core-js-pure/features/object/get-own-property-descriptor.js"(exports, module) {
    module.exports = require_get_own_property_descriptor5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js
var require_get_own_property_descriptor7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js"(exports, module) {
    module.exports = require_get_own_property_descriptor6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/superPropBase.js
var require_superPropBase = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/superPropBase.js"(exports, module) {
    var getPrototypeOf = require_getPrototypeOf();
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/get.js
var require_get7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/get.js"(exports, module) {
    var _Reflect$get = require_get6();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor7();
    var superPropBase = require_superPropBase();
    function _get() {
      if (typeof Reflect !== "undefined" && _Reflect$get) {
        module.exports = _get = _Reflect$get, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _get = function _get2(target, property, receiver) {
          var base2 = superPropBase(target, property);
          if (!base2)
            return;
          var desc = _Object$getOwnPropertyDescriptor(base2, property);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _get.apply(this, arguments);
    }
    module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/es/array/virtual/concat.js
var require_concat = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/concat.js"(exports, module) {
    require_es_array_concat();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").concat;
  }
});

// node_modules/core-js-pure/es/instance/concat.js
var require_concat2 = __commonJS({
  "node_modules/core-js-pure/es/instance/concat.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_concat();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.concat;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/concat.js
var require_concat3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/concat.js"(exports, module) {
    var parent = require_concat2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
var require_concat4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js"(exports, module) {
    module.exports = require_concat3();
  }
});

// node_modules/core-js-pure/internals/collection-strong.js
var require_collection_strong = __commonJS({
  "node_modules/core-js-pure/internals/collection-strong.js"(exports, module) {
    "use strict";
    var defineProperty = require_object_define_property().f;
    var create = require_object_create();
    var defineBuiltIns = require_define_built_ins();
    var bind = require_function_bind_context();
    var anInstance = require_an_instance();
    var iterate = require_iterate();
    var defineIterator = require_define_iterator();
    var setSpecies = require_set_species();
    var DESCRIPTORS = require_descriptors();
    var fastKey = require_internal_metadata().fastKey;
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            index: create(null),
            first: void 0,
            last: void 0,
            size: 0
          });
          if (!DESCRIPTORS)
            that.size = 0;
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define2 = function(that, key2, value) {
          var state = getInternalState(that);
          var entry = getEntry(that, key2);
          var previous, index;
          if (entry) {
            entry.value = value;
          } else {
            state.last = entry = {
              index: index = fastKey(key2, true),
              key: key2,
              value,
              previous: previous = state.last,
              next: void 0,
              removed: false
            };
            if (!state.first)
              state.first = entry;
            if (previous)
              previous.next = entry;
            if (DESCRIPTORS)
              state.size++;
            else
              that.size++;
            if (index !== "F")
              state.index[index] = entry;
          }
          return that;
        };
        var getEntry = function(that, key2) {
          var state = getInternalState(that);
          var index = fastKey(key2);
          var entry;
          if (index !== "F")
            return state.index[index];
          for (entry = state.first; entry; entry = entry.next) {
            if (entry.key == key2)
              return entry;
          }
        };
        defineBuiltIns(Prototype, {
          clear: function clear() {
            var that = this;
            var state = getInternalState(that);
            var data = state.index;
            var entry = state.first;
            while (entry) {
              entry.removed = true;
              if (entry.previous)
                entry.previous = entry.previous.next = void 0;
              delete data[entry.index];
              entry = entry.next;
            }
            state.first = state.last = void 0;
            if (DESCRIPTORS)
              state.size = 0;
            else
              that.size = 0;
          },
          "delete": function(key2) {
            var that = this;
            var state = getInternalState(that);
            var entry = getEntry(that, key2);
            if (entry) {
              var next = entry.next;
              var prev = entry.previous;
              delete state.index[entry.index];
              entry.removed = true;
              if (prev)
                prev.next = next;
              if (next)
                next.previous = prev;
              if (state.first == entry)
                state.first = next;
              if (state.last == entry)
                state.last = prev;
              if (DESCRIPTORS)
                state.size--;
              else
                that.size--;
            }
            return !!entry;
          },
          forEach: function forEach(callbackfn) {
            var state = getInternalState(this);
            var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            var entry;
            while (entry = entry ? entry.next : state.first) {
              boundFunction(entry.value, entry.key, this);
              while (entry && entry.removed)
                entry = entry.previous;
            }
          },
          has: function has(key2) {
            return !!getEntry(this, key2);
          }
        });
        defineBuiltIns(Prototype, IS_MAP ? {
          get: function get(key2) {
            var entry = getEntry(this, key2);
            return entry && entry.value;
          },
          set: function set(key2, value) {
            return define2(this, key2 === 0 ? 0 : key2, value);
          }
        } : {
          add: function add3(value) {
            return define2(this, value = value === 0 ? 0 : value, value);
          }
        });
        if (DESCRIPTORS)
          defineProperty(Prototype, "size", {
            get: function() {
              return getInternalState(this).size;
            }
          });
        return Constructor;
      },
      setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
        var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
        defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
          setInternalState(this, {
            type: ITERATOR_NAME,
            target: iterated,
            state: getInternalCollectionState(iterated),
            kind,
            last: void 0
          });
        }, function() {
          var state = getInternalIteratorState(this);
          var kind = state.kind;
          var entry = state.last;
          while (entry && entry.removed)
            entry = entry.previous;
          if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
            state.target = void 0;
            return { value: void 0, done: true };
          }
          if (kind == "keys")
            return { value: entry.key, done: false };
          if (kind == "values")
            return { value: entry.value, done: false };
          return { value: [entry.key, entry.value], done: false };
        }, IS_MAP ? "entries" : "values", !IS_MAP, true);
        setSpecies(CONSTRUCTOR_NAME);
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.map.constructor.js
var require_es_map_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.map.constructor.js"() {
    "use strict";
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Map", function(init2) {
      return function Map2() {
        return init2(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js-pure/modules/es.map.js
var require_es_map = __commonJS({
  "node_modules/core-js-pure/modules/es.map.js"() {
    require_es_map_constructor();
  }
});

// node_modules/core-js-pure/es/map/index.js
var require_map = __commonJS({
  "node_modules/core-js-pure/es/map/index.js"(exports, module) {
    require_es_array_iterator();
    require_es_map();
    require_es_object_to_string();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Map;
  }
});

// node_modules/core-js-pure/stable/map/index.js
var require_map2 = __commonJS({
  "node_modules/core-js-pure/stable/map/index.js"(exports, module) {
    var parent = require_map();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/map/index.js
var require_map3 = __commonJS({
  "node_modules/core-js-pure/actual/map/index.js"(exports, module) {
    var parent = require_map2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/internals/collection-from.js
var require_collection_from = __commonJS({
  "node_modules/core-js-pure/internals/collection-from.js"(exports, module) {
    "use strict";
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var aConstructor = require_a_constructor();
    var iterate = require_iterate();
    var push = [].push;
    module.exports = function from(source) {
      var length = arguments.length;
      var mapFn = length > 1 ? arguments[1] : void 0;
      var mapping, array, n3, boundFunction;
      aConstructor(this);
      mapping = mapFn !== void 0;
      if (mapping)
        aCallable(mapFn);
      if (source == void 0)
        return new this();
      array = [];
      if (mapping) {
        n3 = 0;
        boundFunction = bind(mapFn, length > 2 ? arguments[2] : void 0);
        iterate(source, function(nextItem) {
          call(push, array, boundFunction(nextItem, n3++));
        });
      } else {
        iterate(source, push, { that: array });
      }
      return new this(array);
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.from.js
var require_esnext_map_from = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.from.js"() {
    var $3 = require_export();
    var from = require_collection_from();
    $3({ target: "Map", stat: true, forced: true }, {
      from
    });
  }
});

// node_modules/core-js-pure/internals/collection-of.js
var require_collection_of = __commonJS({
  "node_modules/core-js-pure/internals/collection-of.js"(exports, module) {
    "use strict";
    var arraySlice = require_array_slice();
    module.exports = function of() {
      return new this(arraySlice(arguments));
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.of.js
var require_esnext_map_of = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.of.js"() {
    var $3 = require_export();
    var of = require_collection_of();
    $3({ target: "Map", stat: true, forced: true }, {
      of
    });
  }
});

// node_modules/core-js-pure/internals/collection-delete-all.js
var require_collection_delete_all = __commonJS({
  "node_modules/core-js-pure/internals/collection-delete-all.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    module.exports = function deleteAll() {
      var collection = anObject(this);
      var remover = aCallable(collection["delete"]);
      var allDeleted = true;
      var wasDeleted;
      for (var k4 = 0, len = arguments.length; k4 < len; k4++) {
        wasDeleted = call(remover, collection, arguments[k4]);
        allDeleted = allDeleted && wasDeleted;
      }
      return !!allDeleted;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.delete-all.js
var require_esnext_map_delete_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.delete-all.js"() {
    "use strict";
    var $3 = require_export();
    var deleteAll = require_collection_delete_all();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      deleteAll
    });
  }
});

// node_modules/core-js-pure/internals/map-emplace.js
var require_map_emplace = __commonJS({
  "node_modules/core-js-pure/internals/map-emplace.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    module.exports = function emplace(key2, handler) {
      var map = anObject(this);
      var get = aCallable(map.get);
      var has = aCallable(map.has);
      var set = aCallable(map.set);
      var value = call(has, map, key2) && "update" in handler ? handler.update(call(get, map, key2), key2, map) : handler.insert(key2, map);
      call(set, map, key2, value);
      return value;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.emplace.js
var require_esnext_map_emplace = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.emplace.js"() {
    "use strict";
    var $3 = require_export();
    var emplace = require_map_emplace();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      emplace
    });
  }
});

// node_modules/core-js-pure/internals/get-map-iterator.js
var require_get_map_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-map-iterator.js"(exports, module) {
    var getIterator = require_get_iterator();
    module.exports = getIterator;
  }
});

// node_modules/core-js-pure/modules/esnext.map.every.js
var require_esnext_map_every = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.every.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      every: function every(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return !iterate(iterator, function(key2, value, stop) {
          if (!boundFunction(value, key2, map))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.filter.js
var require_esnext_map_filter = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.filter.js"() {
    "use strict";
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      filter: function filter(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key2, value) {
          if (boundFunction(value, key2, map))
            call(setter, newMap, key2, value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.find.js
var require_esnext_map_find = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.find.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      find: function find(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key2, value, stop) {
          if (boundFunction(value, key2, map))
            return stop(value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.find-key.js
var require_esnext_map_find_key = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.find-key.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      findKey: function findKey(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key2, value, stop) {
          if (boundFunction(value, key2, map))
            return stop(key2);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.group-by.js
var require_esnext_map_group_by = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.group-by.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var getIterator = require_get_iterator();
    var iterate = require_iterate();
    var push = uncurryThis([].push);
    $3({ target: "Map", stat: true, forced: true }, {
      groupBy: function groupBy(iterable, keyDerivative) {
        aCallable(keyDerivative);
        var iterator = getIterator(iterable);
        var newMap = new this();
        var has = aCallable(newMap.has);
        var get = aCallable(newMap.get);
        var set = aCallable(newMap.set);
        iterate(iterator, function(element) {
          var derivedKey = keyDerivative(element);
          if (!call(has, newMap, derivedKey))
            call(set, newMap, derivedKey, [element]);
          else
            push(call(get, newMap, derivedKey), element);
        }, { IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/internals/same-value-zero.js
var require_same_value_zero = __commonJS({
  "node_modules/core-js-pure/internals/same-value-zero.js"(exports, module) {
    module.exports = function(x4, y4) {
      return x4 === y4 || x4 != x4 && y4 != y4;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.includes.js
var require_esnext_map_includes = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.includes.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var getMapIterator = require_get_map_iterator();
    var sameValueZero = require_same_value_zero();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      includes: function includes(searchElement) {
        return iterate(getMapIterator(anObject(this)), function(key2, value, stop) {
          if (sameValueZero(value, searchElement))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.key-by.js
var require_esnext_map_key_by = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.key-by.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var iterate = require_iterate();
    var aCallable = require_a_callable();
    $3({ target: "Map", stat: true, forced: true }, {
      keyBy: function keyBy(iterable, keyDerivative) {
        var newMap = new this();
        aCallable(keyDerivative);
        var setter = aCallable(newMap.set);
        iterate(iterable, function(element) {
          call(setter, newMap, keyDerivative(element), element);
        });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.key-of.js
var require_esnext_map_key_of = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.key-of.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      keyOf: function keyOf(searchElement) {
        return iterate(getMapIterator(anObject(this)), function(key2, value, stop) {
          if (value === searchElement)
            return stop(key2);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.map-keys.js
var require_esnext_map_map_keys = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.map-keys.js"() {
    "use strict";
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      mapKeys: function mapKeys(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key2, value) {
          call(setter, newMap, boundFunction(value, key2, map), value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.map-values.js
var require_esnext_map_map_values = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.map-values.js"() {
    "use strict";
    var $3 = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      mapValues: function mapValues(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key2, value) {
          call(setter, newMap, key2, boundFunction(value, key2, map));
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.merge.js
var require_esnext_map_merge = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.merge.js"() {
    "use strict";
    var $3 = require_export();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, arity: 1, forced: true }, {
      merge: function merge(iterable) {
        var map = anObject(this);
        var setter = aCallable(map.set);
        var argumentsLength = arguments.length;
        var i4 = 0;
        while (i4 < argumentsLength) {
          iterate(arguments[i4++], setter, { that: map, AS_ENTRIES: true });
        }
        return map;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.reduce.js
var require_esnext_map_reduce = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.reduce.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var aCallable = require_a_callable();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    var $TypeError = TypeError;
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      reduce: function reduce(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var noInitial = arguments.length < 2;
        var accumulator = noInitial ? void 0 : arguments[1];
        aCallable(callbackfn);
        iterate(iterator, function(key2, value) {
          if (noInitial) {
            noInitial = false;
            accumulator = value;
          } else {
            accumulator = callbackfn(accumulator, value, key2, map);
          }
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        if (noInitial)
          throw $TypeError("Reduce of empty map with no initial value");
        return accumulator;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.some.js
var require_esnext_map_some = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.some.js"() {
    "use strict";
    var $3 = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      some: function some(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key2, value, stop) {
          if (boundFunction(value, key2, map))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.update.js
var require_esnext_map_update = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.update.js"() {
    "use strict";
    var $3 = require_export();
    var call = require_function_call();
    var anObject = require_an_object();
    var aCallable = require_a_callable();
    var $TypeError = TypeError;
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      update: function update2(key2, callback) {
        var map = anObject(this);
        var get = aCallable(map.get);
        var has = aCallable(map.has);
        var set = aCallable(map.set);
        var length = arguments.length;
        aCallable(callback);
        var isPresentInMap = call(has, map, key2);
        if (!isPresentInMap && length < 3) {
          throw $TypeError("Updating absent value");
        }
        var value = isPresentInMap ? call(get, map, key2) : aCallable(length > 2 ? arguments[2] : void 0)(key2, map);
        call(set, map, key2, callback(value, key2, map));
        return map;
      }
    });
  }
});

// node_modules/core-js-pure/internals/map-upsert.js
var require_map_upsert = __commonJS({
  "node_modules/core-js-pure/internals/map-upsert.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var anObject = require_an_object();
    var $TypeError = TypeError;
    module.exports = function upsert(key2, updateFn) {
      var map = anObject(this);
      var get = aCallable(map.get);
      var has = aCallable(map.has);
      var set = aCallable(map.set);
      var insertFn = arguments.length > 2 ? arguments[2] : void 0;
      var value;
      if (!isCallable(updateFn) && !isCallable(insertFn)) {
        throw $TypeError("At least one callback required");
      }
      if (call(has, map, key2)) {
        value = call(get, map, key2);
        if (isCallable(updateFn)) {
          value = updateFn(value);
          call(set, map, key2, value);
        }
      } else if (isCallable(insertFn)) {
        value = insertFn();
        call(set, map, key2, value);
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.upsert.js
var require_esnext_map_upsert = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.upsert.js"() {
    "use strict";
    var $3 = require_export();
    var upsert = require_map_upsert();
    $3({ target: "Map", proto: true, real: true, forced: true }, {
      upsert
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.update-or-insert.js
var require_esnext_map_update_or_insert = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.update-or-insert.js"() {
    "use strict";
    var $3 = require_export();
    var upsert = require_map_upsert();
    $3({ target: "Map", proto: true, real: true, name: "upsert", forced: true }, {
      updateOrInsert: upsert
    });
  }
});

// node_modules/core-js-pure/full/map/index.js
var require_map4 = __commonJS({
  "node_modules/core-js-pure/full/map/index.js"(exports, module) {
    var parent = require_map3();
    require_esnext_map_from();
    require_esnext_map_of();
    require_esnext_map_delete_all();
    require_esnext_map_emplace();
    require_esnext_map_every();
    require_esnext_map_filter();
    require_esnext_map_find();
    require_esnext_map_find_key();
    require_esnext_map_group_by();
    require_esnext_map_includes();
    require_esnext_map_key_by();
    require_esnext_map_key_of();
    require_esnext_map_map_keys();
    require_esnext_map_map_values();
    require_esnext_map_merge();
    require_esnext_map_reduce();
    require_esnext_map_some();
    require_esnext_map_update();
    require_esnext_map_upsert();
    require_esnext_map_update_or_insert();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/map/index.js
var require_map5 = __commonJS({
  "node_modules/core-js-pure/features/map/index.js"(exports, module) {
    module.exports = require_map4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/map.js
var require_map6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/map.js"(exports, module) {
    module.exports = require_map5();
  }
});

// node_modules/core-js-pure/modules/es.array.index-of.js
var require_es_array_index_of = __commonJS({
  "node_modules/core-js-pure/modules/es.array.index-of.js"() {
    "use strict";
    var $3 = require_export();
    var uncurryThis = require_function_uncurry_this();
    var $IndexOf = require_array_includes().indexOf;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var un$IndexOf = uncurryThis([].indexOf);
    var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
    var STRICT_METHOD = arrayMethodIsStrict("indexOf");
    $3({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
      indexOf: function indexOf(searchElement) {
        var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
        return NEGATIVE_ZERO ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/index-of.js
var require_index_of = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/index-of.js"(exports, module) {
    require_es_array_index_of();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").indexOf;
  }
});

// node_modules/core-js-pure/es/instance/index-of.js
var require_index_of2 = __commonJS({
  "node_modules/core-js-pure/es/instance/index-of.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_index_of();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.indexOf;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.indexOf ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/index-of.js
var require_index_of3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/index-of.js"(exports, module) {
    var parent = require_index_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/index-of.js
var require_index_of4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/index-of.js"(exports, module) {
    var parent = require_index_of3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/instance/index-of.js
var require_index_of5 = __commonJS({
  "node_modules/core-js-pure/full/instance/index-of.js"(exports, module) {
    var parent = require_index_of4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/index-of.js
var require_index_of6 = __commonJS({
  "node_modules/core-js-pure/features/instance/index-of.js"(exports, module) {
    module.exports = require_index_of5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/index-of.js
var require_index_of7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/index-of.js"(exports, module) {
    module.exports = require_index_of6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/isNativeFunction.js
var require_isNativeFunction = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/isNativeFunction.js"(exports, module) {
    var _indexOfInstanceProperty = require_index_of7();
    function _isNativeFunction(fn2) {
      var _context;
      return _indexOfInstanceProperty(_context = Function.toString.call(fn2)).call(_context, "[native code]") !== -1;
    }
    module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/reflect/construct.js
var require_construct4 = __commonJS({
  "node_modules/core-js-pure/actual/reflect/construct.js"(exports, module) {
    var parent = require_construct2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/reflect/construct.js
var require_construct5 = __commonJS({
  "node_modules/core-js-pure/full/reflect/construct.js"(exports, module) {
    var parent = require_construct4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/reflect/construct.js
var require_construct6 = __commonJS({
  "node_modules/core-js-pure/features/reflect/construct.js"(exports, module) {
    module.exports = require_construct5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/reflect/construct.js
var require_construct7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/reflect/construct.js"(exports, module) {
    module.exports = require_construct6();
  }
});

// node_modules/core-js-pure/modules/es.function.bind.js
var require_es_function_bind = __commonJS({
  "node_modules/core-js-pure/modules/es.function.bind.js"() {
    var $3 = require_export();
    var bind = require_function_bind();
    $3({ target: "Function", proto: true, forced: Function.bind !== bind }, {
      bind
    });
  }
});

// node_modules/core-js-pure/es/function/virtual/bind.js
var require_bind = __commonJS({
  "node_modules/core-js-pure/es/function/virtual/bind.js"(exports, module) {
    require_es_function_bind();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Function").bind;
  }
});

// node_modules/core-js-pure/es/instance/bind.js
var require_bind2 = __commonJS({
  "node_modules/core-js-pure/es/instance/bind.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_bind();
    var FunctionPrototype = Function.prototype;
    module.exports = function(it) {
      var own = it.bind;
      return it === FunctionPrototype || isPrototypeOf(FunctionPrototype, it) && own === FunctionPrototype.bind ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/bind.js
var require_bind3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/bind.js"(exports, module) {
    var parent = require_bind2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/bind.js
var require_bind4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/bind.js"(exports, module) {
    var parent = require_bind3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/instance/bind.js
var require_bind5 = __commonJS({
  "node_modules/core-js-pure/full/instance/bind.js"(exports, module) {
    var parent = require_bind4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/bind.js
var require_bind6 = __commonJS({
  "node_modules/core-js-pure/features/instance/bind.js"(exports, module) {
    module.exports = require_bind5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/bind.js
var require_bind7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/bind.js"(exports, module) {
    module.exports = require_bind6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/isNativeReflectConstruct.js"(exports, module) {
    var _Reflect$construct = require_construct7();
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/construct.js
var require_construct8 = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/construct.js"(exports, module) {
    var _Reflect$construct = require_construct7();
    var _bindInstanceProperty = require_bind7();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        module.exports = _construct = _Reflect$construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _construct = function _construct2(Parent2, args2, Class2) {
          var a4 = [null];
          a4.push.apply(a4, args2);
          var Constructor = _bindInstanceProperty(Function).apply(Parent2, a4);
          var instance = new Constructor();
          if (Class2)
            setPrototypeOf(instance, Class2.prototype);
          return instance;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _construct.apply(null, arguments);
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/wrapNativeSuper.js
var require_wrapNativeSuper = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/wrapNativeSuper.js"(exports, module) {
    var _Map = require_map6();
    var _Object$create = require_create6();
    var getPrototypeOf = require_getPrototypeOf();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeFunction = require_isNativeFunction();
    var construct = require_construct8();
    function _wrapNativeSuper(Class) {
      var _cache = typeof _Map === "function" ? new _Map() : void 0;
      module.exports = _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return construct(Class2, arguments, getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = _Object$create(Class2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return setPrototypeOf(Wrapper, Class2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _wrapNativeSuper(Class);
    }
    module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/moralis/lib/browser/ParseError.js
var require_ParseError = __commonJS({
  "node_modules/moralis/lib/browser/ParseError.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty2 = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_define_property3());
    var _concat = _interopRequireDefault(require_concat4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var ParseError = function(_Error) {
      (0, _inherits2.default)(ParseError2, _Error);
      var _super = _createSuper(ParseError2);
      function ParseError2(code, message) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseError2);
        _this = _super.call(this, message);
        _this.code = code;
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "message", {
          enumerable: true,
          value: message
        });
        return _this;
      }
      (0, _createClass2.default)(ParseError2, [{
        key: "toString",
        value: function() {
          var _context;
          return (0, _concat.default)(_context = "ParseError: ".concat(this.code, " ")).call(_context, this.message);
        }
      }]);
      return ParseError2;
    }((0, _wrapNativeSuper2.default)(Error));
    ParseError.OTHER_CAUSE = -1;
    ParseError.INTERNAL_SERVER_ERROR = 1;
    ParseError.CONNECTION_FAILED = 100;
    ParseError.OBJECT_NOT_FOUND = 101;
    ParseError.INVALID_QUERY = 102;
    ParseError.INVALID_CLASS_NAME = 103;
    ParseError.MISSING_OBJECT_ID = 104;
    ParseError.INVALID_KEY_NAME = 105;
    ParseError.INVALID_POINTER = 106;
    ParseError.INVALID_JSON = 107;
    ParseError.COMMAND_UNAVAILABLE = 108;
    ParseError.NOT_INITIALIZED = 109;
    ParseError.INCORRECT_TYPE = 111;
    ParseError.INVALID_CHANNEL_NAME = 112;
    ParseError.PUSH_MISCONFIGURED = 115;
    ParseError.OBJECT_TOO_LARGE = 116;
    ParseError.OPERATION_FORBIDDEN = 119;
    ParseError.CACHE_MISS = 120;
    ParseError.INVALID_NESTED_KEY = 121;
    ParseError.INVALID_FILE_NAME = 122;
    ParseError.INVALID_ACL = 123;
    ParseError.TIMEOUT = 124;
    ParseError.INVALID_EMAIL_ADDRESS = 125;
    ParseError.MISSING_CONTENT_TYPE = 126;
    ParseError.MISSING_CONTENT_LENGTH = 127;
    ParseError.INVALID_CONTENT_LENGTH = 128;
    ParseError.FILE_TOO_LARGE = 129;
    ParseError.FILE_SAVE_ERROR = 130;
    ParseError.DUPLICATE_VALUE = 137;
    ParseError.INVALID_ROLE_NAME = 139;
    ParseError.EXCEEDED_QUOTA = 140;
    ParseError.SCRIPT_FAILED = 141;
    ParseError.VALIDATION_ERROR = 142;
    ParseError.INVALID_IMAGE_DATA = 143;
    ParseError.UNSAVED_FILE_ERROR = 151;
    ParseError.INVALID_PUSH_TIME_ERROR = 152;
    ParseError.FILE_DELETE_ERROR = 153;
    ParseError.FILE_DELETE_UNNAMED_ERROR = 161;
    ParseError.REQUEST_LIMIT_EXCEEDED = 155;
    ParseError.DUPLICATE_REQUEST = 159;
    ParseError.INVALID_EVENT_NAME = 160;
    ParseError.USERNAME_MISSING = 200;
    ParseError.PASSWORD_MISSING = 201;
    ParseError.USERNAME_TAKEN = 202;
    ParseError.EMAIL_TAKEN = 203;
    ParseError.EMAIL_MISSING = 204;
    ParseError.EMAIL_NOT_FOUND = 205;
    ParseError.SESSION_MISSING = 206;
    ParseError.MUST_CREATE_USER_THROUGH_SIGNUP = 207;
    ParseError.ACCOUNT_ALREADY_LINKED = 208;
    ParseError.INVALID_SESSION_TOKEN = 209;
    ParseError.MFA_ERROR = 210;
    ParseError.MFA_TOKEN_REQUIRED = 211;
    ParseError.LINKED_ID_MISSING = 250;
    ParseError.INVALID_LINKED_SESSION = 251;
    ParseError.UNSUPPORTED_SERVICE = 252;
    ParseError.INVALID_SCHEMA_OPERATION = 255;
    ParseError.AGGREGATE_ERROR = 600;
    ParseError.FILE_READ_ERROR = 601;
    ParseError.X_DOMAIN_REQUEST = 602;
    var _default = ParseError;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/es/object/get-own-property-symbols.js
var require_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-symbols.js"(exports, module) {
    require_es_symbol();
    var path = require_path();
    module.exports = path.Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-symbols.js
var require_get_own_property_symbols2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-symbols.js"(exports, module) {
    var parent = require_get_own_property_symbols();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js
var require_get_own_property_symbols3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js"(exports, module) {
    module.exports = require_get_own_property_symbols2();
  }
});

// node_modules/core-js-pure/modules/es.array.filter.js
var require_es_array_filter = __commonJS({
  "node_modules/core-js-pure/modules/es.array.filter.js"() {
    "use strict";
    var $3 = require_export();
    var $filter = require_array_iteration().filter;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
    $3({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      filter: function filter(callbackfn) {
        return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/filter.js
var require_filter = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/filter.js"(exports, module) {
    require_es_array_filter();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").filter;
  }
});

// node_modules/core-js-pure/es/instance/filter.js
var require_filter2 = __commonJS({
  "node_modules/core-js-pure/es/instance/filter.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_filter();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.filter;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.filter ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/filter.js
var require_filter3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/filter.js"(exports, module) {
    var parent = require_filter2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js
var require_filter4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js"(exports, module) {
    module.exports = require_filter3();
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js
var require_es_object_get_own_property_descriptors = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js"() {
    var $3 = require_export();
    var DESCRIPTORS = require_descriptors();
    var ownKeys4 = require_own_keys();
    var toIndexedObject = require_to_indexed_object();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var createProperty = require_create_property();
    $3({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O3 = toIndexedObject(object);
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var keys = ownKeys4(O3);
        var result = {};
        var index = 0;
        var key2, descriptor;
        while (keys.length > index) {
          descriptor = getOwnPropertyDescriptor(O3, key2 = keys[index++]);
          if (descriptor !== void 0)
            createProperty(result, key2, descriptor);
        }
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-own-property-descriptors.js
var require_get_own_property_descriptors = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-descriptors.js"(exports, module) {
    require_es_object_get_own_property_descriptors();
    var path = require_path();
    module.exports = path.Object.getOwnPropertyDescriptors;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptors.js
var require_get_own_property_descriptors2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-descriptors.js"(exports, module) {
    var parent = require_get_own_property_descriptors();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors.js
var require_get_own_property_descriptors3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors.js"(exports, module) {
    module.exports = require_get_own_property_descriptors2();
  }
});

// node_modules/core-js-pure/modules/es.object.define-properties.js
var require_es_object_define_properties = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-properties.js"() {
    var $3 = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperties = require_object_define_properties().f;
    $3({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties, sham: !DESCRIPTORS }, {
      defineProperties
    });
  }
});

// node_modules/core-js-pure/es/object/define-properties.js
var require_define_properties = __commonJS({
  "node_modules/core-js-pure/es/object/define-properties.js"(exports, module) {
    require_es_object_define_properties();
    var path = require_path();
    var Object2 = path.Object;
    var defineProperties = module.exports = function defineProperties2(T4, D4) {
      return Object2.defineProperties(T4, D4);
    };
    if (Object2.defineProperties.sham)
      defineProperties.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-properties.js
var require_define_properties2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-properties.js"(exports, module) {
    var parent = require_define_properties();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js
var require_define_properties3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js"(exports, module) {
    module.exports = require_define_properties2();
  }
});

// node_modules/core-js-pure/modules/es.array.slice.js
var require_es_array_slice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.slice.js"() {
    "use strict";
    var $3 = require_export();
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var toIndexedObject = require_to_indexed_object();
    var createProperty = require_create_property();
    var wellKnownSymbol = require_well_known_symbol();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var un$Slice = require_array_slice();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
    var SPECIES = wellKnownSymbol("species");
    var $Array = Array;
    var max = Math.max;
    $3({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      slice: function slice(start, end) {
        var O3 = toIndexedObject(this);
        var length = lengthOfArrayLike(O3);
        var k4 = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var Constructor, result, n3;
        if (isArray(O3)) {
          Constructor = O3.constructor;
          if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
            Constructor = void 0;
          } else if (isObject(Constructor)) {
            Constructor = Constructor[SPECIES];
            if (Constructor === null)
              Constructor = void 0;
          }
          if (Constructor === $Array || Constructor === void 0) {
            return un$Slice(O3, k4, fin);
          }
        }
        result = new (Constructor === void 0 ? $Array : Constructor)(max(fin - k4, 0));
        for (n3 = 0; k4 < fin; k4++, n3++)
          if (k4 in O3)
            createProperty(result, n3, O3[k4]);
        result.length = n3;
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/slice.js
var require_slice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/slice.js"(exports, module) {
    require_es_array_slice();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").slice;
  }
});

// node_modules/core-js-pure/es/instance/slice.js
var require_slice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/slice.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_slice();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.slice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/slice.js
var require_slice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/slice.js"(exports, module) {
    var parent = require_slice2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js
var require_slice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js"(exports, module) {
    module.exports = require_slice3();
  }
});

// node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js
var require_call_with_safe_iteration_closing = __commonJS({
  "node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js"(exports, module) {
    var anObject = require_an_object();
    var iteratorClose = require_iterator_close();
    module.exports = function(iterator, fn2, value, ENTRIES) {
      try {
        return ENTRIES ? fn2(anObject(value)[0], value[1]) : fn2(value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
    };
  }
});

// node_modules/core-js-pure/internals/array-from.js
var require_array_from = __commonJS({
  "node_modules/core-js-pure/internals/array-from.js"(exports, module) {
    "use strict";
    var bind = require_function_bind_context();
    var call = require_function_call();
    var toObject = require_to_object();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var isConstructor = require_is_constructor();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var $Array = Array;
    module.exports = function from(arrayLike) {
      var O3 = toObject(arrayLike);
      var IS_CONSTRUCTOR = isConstructor(this);
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
      var mapping = mapfn !== void 0;
      if (mapping)
        mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
      var iteratorMethod = getIteratorMethod(O3);
      var index = 0;
      var length, result, step, iterator, next, value;
      if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
        iterator = getIterator(O3, iteratorMethod);
        next = iterator.next;
        result = IS_CONSTRUCTOR ? new this() : [];
        for (; !(step = call(next, iterator)).done; index++) {
          value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
          createProperty(result, index, value);
        }
      } else {
        length = lengthOfArrayLike(O3);
        result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
        for (; length > index; index++) {
          value = mapping ? mapfn(O3[index], index) : O3[index];
          createProperty(result, index, value);
        }
      }
      result.length = index;
      return result;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.from.js
var require_es_array_from = __commonJS({
  "node_modules/core-js-pure/modules/es.array.from.js"() {
    var $3 = require_export();
    var from = require_array_from();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
      Array.from(iterable);
    });
    $3({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
      from
    });
  }
});

// node_modules/core-js-pure/es/array/from.js
var require_from = __commonJS({
  "node_modules/core-js-pure/es/array/from.js"(exports, module) {
    require_es_string_iterator();
    require_es_array_from();
    var path = require_path();
    module.exports = path.Array.from;
  }
});

// node_modules/core-js-pure/stable/array/from.js
var require_from2 = __commonJS({
  "node_modules/core-js-pure/stable/array/from.js"(exports, module) {
    var parent = require_from();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js
var require_from3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js"(exports, module) {
    module.exports = require_from2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js
var require_symbol7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js"(exports, module) {
    module.exports = require_symbol2();
  }
});

// node_modules/core-js-pure/es/get-iterator-method.js
var require_get_iterator_method2 = __commonJS({
  "node_modules/core-js-pure/es/get-iterator-method.js"(exports, module) {
    require_es_array_iterator();
    require_es_string_iterator();
    var getIteratorMethod = require_get_iterator_method();
    module.exports = getIteratorMethod;
  }
});

// node_modules/core-js-pure/stable/get-iterator-method.js
var require_get_iterator_method3 = __commonJS({
  "node_modules/core-js-pure/stable/get-iterator-method.js"(exports, module) {
    var parent = require_get_iterator_method2();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/get-iterator-method.js
var require_get_iterator_method4 = __commonJS({
  "node_modules/core-js-pure/actual/get-iterator-method.js"(exports, module) {
    var parent = require_get_iterator_method3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/get-iterator-method.js
var require_get_iterator_method5 = __commonJS({
  "node_modules/core-js-pure/full/get-iterator-method.js"(exports, module) {
    var parent = require_get_iterator_method4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/get-iterator-method.js
var require_get_iterator_method6 = __commonJS({
  "node_modules/core-js-pure/features/get-iterator-method.js"(exports, module) {
    module.exports = require_get_iterator_method5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js
var require_get_iterator_method7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js"(exports, module) {
    module.exports = require_get_iterator_method6();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js
var require_index_of8 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js"(exports, module) {
    module.exports = require_index_of3();
  }
});

// node_modules/core-js-pure/modules/es.object.freeze.js
var require_es_object_freeze = __commonJS({
  "node_modules/core-js-pure/modules/es.object.freeze.js"() {
    var $3 = require_export();
    var FREEZING = require_freezing();
    var fails = require_fails();
    var isObject = require_is_object();
    var onFreeze = require_internal_metadata().onFreeze;
    var $freeze = Object.freeze;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $freeze(1);
    });
    $3({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
      freeze: function freeze(it) {
        return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
      }
    });
  }
});

// node_modules/core-js-pure/es/object/freeze.js
var require_freeze = __commonJS({
  "node_modules/core-js-pure/es/object/freeze.js"(exports, module) {
    require_es_object_freeze();
    var path = require_path();
    module.exports = path.Object.freeze;
  }
});

// node_modules/core-js-pure/stable/object/freeze.js
var require_freeze2 = __commonJS({
  "node_modules/core-js-pure/stable/object/freeze.js"(exports, module) {
    var parent = require_freeze();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js
var require_freeze3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js"(exports, module) {
    module.exports = require_freeze2();
  }
});

// node_modules/core-js-pure/es/json/stringify.js
var require_stringify = __commonJS({
  "node_modules/core-js-pure/es/json/stringify.js"(exports, module) {
    require_es_json_stringify();
    var path = require_path();
    var apply = require_function_apply();
    if (!path.JSON)
      path.JSON = { stringify: JSON.stringify };
    module.exports = function stringify(it, replacer, space) {
      return apply(path.JSON.stringify, null, arguments);
    };
  }
});

// node_modules/core-js-pure/stable/json/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/core-js-pure/stable/json/stringify.js"(exports, module) {
    var parent = require_stringify();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js
var require_stringify3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js"(exports, module) {
    module.exports = require_stringify2();
  }
});

// node_modules/core-js-pure/modules/es.array.includes.js
var require_es_array_includes = __commonJS({
  "node_modules/core-js-pure/modules/es.array.includes.js"() {
    "use strict";
    var $3 = require_export();
    var $includes = require_array_includes().includes;
    var fails = require_fails();
    var addToUnscopables = require_add_to_unscopables();
    var BROKEN_ON_SPARSE = fails(function() {
      return !Array(1).includes();
    });
    $3({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
      includes: function includes(el) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables("includes");
  }
});

// node_modules/core-js-pure/es/array/virtual/includes.js
var require_includes = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/includes.js"(exports, module) {
    require_es_array_includes();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").includes;
  }
});

// node_modules/core-js-pure/internals/is-regexp.js
var require_is_regexp = __commonJS({
  "node_modules/core-js-pure/internals/is-regexp.js"(exports, module) {
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
    };
  }
});

// node_modules/core-js-pure/internals/not-a-regexp.js
var require_not_a_regexp = __commonJS({
  "node_modules/core-js-pure/internals/not-a-regexp.js"(exports, module) {
    var isRegExp = require_is_regexp();
    var $TypeError = TypeError;
    module.exports = function(it) {
      if (isRegExp(it)) {
        throw $TypeError("The method doesn't accept regular expressions");
      }
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/correct-is-regexp-logic.js
var require_correct_is_regexp_logic = __commonJS({
  "node_modules/core-js-pure/internals/correct-is-regexp-logic.js"(exports, module) {
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(METHOD_NAME) {
      var regexp = /./;
      try {
        "/./"[METHOD_NAME](regexp);
      } catch (error1) {
        try {
          regexp[MATCH] = false;
          return "/./"[METHOD_NAME](regexp);
        } catch (error2) {
        }
      }
      return false;
    };
  }
});

// node_modules/core-js-pure/modules/es.string.includes.js
var require_es_string_includes = __commonJS({
  "node_modules/core-js-pure/modules/es.string.includes.js"() {
    "use strict";
    var $3 = require_export();
    var uncurryThis = require_function_uncurry_this();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var toString2 = require_to_string();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var stringIndexOf = uncurryThis("".indexOf);
    $3({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
      includes: function includes(searchString) {
        return !!~stringIndexOf(toString2(requireObjectCoercible(this)), toString2(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/includes.js
var require_includes2 = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/includes.js"(exports, module) {
    require_es_string_includes();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").includes;
  }
});

// node_modules/core-js-pure/es/instance/includes.js
var require_includes3 = __commonJS({
  "node_modules/core-js-pure/es/instance/includes.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var arrayMethod = require_includes();
    var stringMethod = require_includes2();
    var ArrayPrototype = Array.prototype;
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.includes;
      if (it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.includes)
        return arrayMethod;
      if (typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.includes) {
        return stringMethod;
      }
      return own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/includes.js
var require_includes4 = __commonJS({
  "node_modules/core-js-pure/stable/instance/includes.js"(exports, module) {
    var parent = require_includes3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js
var require_includes5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js"(exports, module) {
    module.exports = require_includes4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js
var require_get_prototype_of7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js"(exports, module) {
    module.exports = require_get_prototype_of2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js
var require_create7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js"(exports, module) {
    module.exports = require_create2();
  }
});

// node_modules/core-js-pure/modules/es.array.find.js
var require_es_array_find = __commonJS({
  "node_modules/core-js-pure/modules/es.array.find.js"() {
    "use strict";
    var $3 = require_export();
    var $find = require_array_iteration().find;
    var addToUnscopables = require_add_to_unscopables();
    var FIND = "find";
    var SKIPS_HOLES = true;
    if (FIND in [])
      Array(1)[FIND](function() {
        SKIPS_HOLES = false;
      });
    $3({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
      find: function find(callbackfn) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables(FIND);
  }
});

// node_modules/core-js-pure/es/array/virtual/find.js
var require_find = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/find.js"(exports, module) {
    require_es_array_find();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").find;
  }
});

// node_modules/core-js-pure/es/instance/find.js
var require_find2 = __commonJS({
  "node_modules/core-js-pure/es/instance/find.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_find();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.find;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.find ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/find.js
var require_find3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/find.js"(exports, module) {
    var parent = require_find2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js
var require_find4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js"(exports, module) {
    module.exports = require_find3();
  }
});

// node_modules/core-js-pure/modules/es.array.map.js
var require_es_array_map = __commonJS({
  "node_modules/core-js-pure/modules/es.array.map.js"() {
    "use strict";
    var $3 = require_export();
    var $map = require_array_iteration().map;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
    $3({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      map: function map(callbackfn) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/map.js
var require_map7 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/map.js"(exports, module) {
    require_es_array_map();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").map;
  }
});

// node_modules/core-js-pure/es/instance/map.js
var require_map8 = __commonJS({
  "node_modules/core-js-pure/es/instance/map.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_map7();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.map;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/map.js
var require_map9 = __commonJS({
  "node_modules/core-js-pure/stable/instance/map.js"(exports, module) {
    var parent = require_map8();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
var require_map10 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js"(exports, module) {
    module.exports = require_map9();
  }
});

// node_modules/moralis/lib/browser/CoreManager.js
var require_CoreManager = __commonJS({
  "node_modules/moralis/lib/browser/CoreManager.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var config = {
      IS_NODE: typeof process !== "undefined" && !!process.versions && !!process.versions.node && !process.versions.electron,
      REQUEST_ATTEMPT_LIMIT: 5,
      REQUEST_BATCH_SIZE: 20,
      REQUEST_HEADERS: {},
      SERVER_URL: "https://api.parse.com/1",
      SERVER_AUTH_TYPE: null,
      SERVER_AUTH_TOKEN: null,
      LIVEQUERY_SERVER_URL: null,
      ENCRYPTED_KEY: null,
      VERSION: "js".concat("1.8.0"),
      APPLICATION_ID: null,
      JAVASCRIPT_KEY: null,
      MASTER_KEY: null,
      USE_MASTER_KEY: false,
      PERFORM_USER_REWRITE: true,
      FORCE_REVOCABLE_SESSION: false,
      ENCRYPTED_USER: false,
      IDEMPOTENCY: false
    };
    function requireMethods(name2, methods, controller) {
      (0, _forEach.default)(methods).call(methods, function(func) {
        if (typeof controller[func] !== "function") {
          var _context;
          throw new Error((0, _concat.default)(_context = "".concat(name2, " must implement ")).call(_context, func, "()"));
        }
      });
    }
    module.exports = {
      get: function(key2) {
        if (config.hasOwnProperty(key2)) {
          return config[key2];
        }
        throw new Error("Configuration key not found: ".concat(key2));
      },
      set: function(key2, value) {
        config[key2] = value;
      },
      setAnalyticsController: function(controller) {
        requireMethods("AnalyticsController", ["track"], controller);
        config.AnalyticsController = controller;
      },
      getAnalyticsController: function() {
        return config.AnalyticsController;
      },
      setCloudController: function(controller) {
        requireMethods("CloudController", ["run", "getJobsData", "startJob"], controller);
        config.CloudController = controller;
      },
      getCloudController: function() {
        return config.CloudController;
      },
      setConfigController: function(controller) {
        requireMethods("ConfigController", ["current", "get", "save"], controller);
        config.ConfigController = controller;
      },
      getConfigController: function() {
        return config.ConfigController;
      },
      setCryptoController: function(controller) {
        requireMethods("CryptoController", ["encrypt", "decrypt"], controller);
        config.CryptoController = controller;
      },
      getCryptoController: function() {
        return config.CryptoController;
      },
      setFileController: function(controller) {
        requireMethods("FileController", ["saveFile", "saveBase64"], controller);
        config.FileController = controller;
      },
      getFileController: function() {
        return config.FileController;
      },
      setInstallationController: function(controller) {
        requireMethods("InstallationController", ["currentInstallationId"], controller);
        config.InstallationController = controller;
      },
      getInstallationController: function() {
        return config.InstallationController;
      },
      setObjectController: function(controller) {
        requireMethods("ObjectController", ["save", "fetch", "destroy"], controller);
        config.ObjectController = controller;
      },
      getObjectController: function() {
        return config.ObjectController;
      },
      setObjectStateController: function(controller) {
        requireMethods("ObjectStateController", ["getState", "initializeState", "removeState", "getServerData", "setServerData", "getPendingOps", "setPendingOp", "pushPendingState", "popPendingState", "mergeFirstPendingState", "getObjectCache", "estimateAttribute", "estimateAttributes", "commitServerChanges", "enqueueTask", "clearAllState"], controller);
        config.ObjectStateController = controller;
      },
      getObjectStateController: function() {
        return config.ObjectStateController;
      },
      setPushController: function(controller) {
        requireMethods("PushController", ["send"], controller);
        config.PushController = controller;
      },
      getPushController: function() {
        return config.PushController;
      },
      setQueryController: function(controller) {
        requireMethods("QueryController", ["find", "aggregate"], controller);
        config.QueryController = controller;
      },
      getQueryController: function() {
        return config.QueryController;
      },
      setRESTController: function(controller) {
        requireMethods("RESTController", ["request", "ajax"], controller);
        config.RESTController = controller;
      },
      getRESTController: function() {
        return config.RESTController;
      },
      setSchemaController: function(controller) {
        requireMethods("SchemaController", ["get", "create", "update", "delete", "send", "purge"], controller);
        config.SchemaController = controller;
      },
      getSchemaController: function() {
        return config.SchemaController;
      },
      setSessionController: function(controller) {
        requireMethods("SessionController", ["getSession"], controller);
        config.SessionController = controller;
      },
      getSessionController: function() {
        return config.SessionController;
      },
      setStorageController: function(controller) {
        if (controller.async) {
          requireMethods("An async StorageController", ["getItemAsync", "setItemAsync", "removeItemAsync", "getAllKeysAsync"], controller);
        } else {
          requireMethods("A synchronous StorageController", ["getItem", "setItem", "removeItem", "getAllKeys"], controller);
        }
        config.StorageController = controller;
      },
      setLocalDatastoreController: function(controller) {
        requireMethods("LocalDatastoreController", ["pinWithName", "fromPinWithName", "unPinWithName", "getAllContents", "clear"], controller);
        config.LocalDatastoreController = controller;
      },
      getLocalDatastoreController: function() {
        return config.LocalDatastoreController;
      },
      setLocalDatastore: function(store) {
        config.LocalDatastore = store;
      },
      getLocalDatastore: function() {
        return config.LocalDatastore;
      },
      getStorageController: function() {
        return config.StorageController;
      },
      setAsyncStorage: function(storage) {
        config.AsyncStorage = storage;
      },
      getAsyncStorage: function() {
        return config.AsyncStorage;
      },
      setWebSocketController: function(controller) {
        config.WebSocketController = controller;
      },
      getWebSocketController: function() {
        return config.WebSocketController;
      },
      setUserController: function(controller) {
        requireMethods("UserController", ["setCurrentUser", "currentUser", "currentUserAsync", "signUp", "logIn", "become", "logOut", "me", "requestPasswordReset", "upgradeToRevocableSession", "requestEmailVerification", "verifyPassword", "linkWith"], controller);
        config.UserController = controller;
      },
      getUserController: function() {
        return config.UserController;
      },
      setLiveQueryController: function(controller) {
        requireMethods("LiveQueryController", ["setDefaultLiveQueryClient", "getDefaultLiveQueryClient", "_clearCachedDefaultClient"], controller);
        config.LiveQueryController = controller;
      },
      getLiveQueryController: function() {
        return config.LiveQueryController;
      },
      setHooksController: function(controller) {
        requireMethods("HooksController", ["create", "get", "update", "remove"], controller);
        config.HooksController = controller;
      },
      getHooksController: function() {
        return config.HooksController;
      }
    };
  }
});

// node_modules/moralis/lib/browser/ParseFileEncode.js
var require_ParseFileEncode = __commonJS({
  "node_modules/moralis/lib/browser/ParseFileEncode.js"(exports, module) {
    "use strict";
    function b64Digit(number) {
      if (number < 26) {
        return String.fromCharCode(65 + number);
      }
      if (number < 52) {
        return String.fromCharCode(97 + (number - 26));
      }
      if (number < 62) {
        return String.fromCharCode(48 + (number - 52));
      }
      if (number === 62) {
        return "+";
      }
      if (number === 63) {
        return "/";
      }
      throw new TypeError("Tried to encode large digit ".concat(number, " in base64."));
    }
    function encodeBase64(bytes) {
      var chunks = [];
      chunks.length = Math.ceil(bytes.length / 3);
      for (var i4 = 0; i4 < chunks.length; i4++) {
        var b1 = bytes[i4 * 3];
        var b22 = bytes[i4 * 3 + 1] || 0;
        var b3 = bytes[i4 * 3 + 2] || 0;
        var has2 = i4 * 3 + 1 < bytes.length;
        var has3 = i4 * 3 + 2 < bytes.length;
        chunks[i4] = [b64Digit(b1 >> 2 & 63), b64Digit(b1 << 4 & 48 | b22 >> 4 & 15), has2 ? b64Digit(b22 << 2 & 60 | b3 >> 6 & 3) : "=", has3 ? b64Digit(b3 & 63) : "="].join("");
      }
      return chunks.join("");
    }
    module.exports = {
      encodeBase64,
      b64Digit
    };
  }
});

// node_modules/core-js-pure/actual/array/is-array.js
var require_is_array5 = __commonJS({
  "node_modules/core-js-pure/actual/array/is-array.js"(exports, module) {
    var parent = require_is_array3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/array/is-array.js
var require_is_array6 = __commonJS({
  "node_modules/core-js-pure/full/array/is-array.js"(exports, module) {
    var parent = require_is_array5();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/is-array.js
var require_is_array7 = __commonJS({
  "node_modules/core-js-pure/features/array/is-array.js"(exports, module) {
    module.exports = require_is_array6();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/array/is-array.js
var require_is_array8 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/array/is-array.js"(exports, module) {
    module.exports = require_is_array7();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js"(exports, module) {
    var _Array$isArray = require_is_array8();
    function _arrayWithHoles(arr) {
      if (_Array$isArray(arr))
        return arr;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js"(exports, module) {
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method7();
    function _iterableToArrayLimit(arr, i4) {
      var _i = arr == null ? null : typeof _Symbol !== "undefined" && _getIteratorMethod(arr) || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i4 && _arr.length === i4)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/instance/slice.js
var require_slice5 = __commonJS({
  "node_modules/core-js-pure/actual/instance/slice.js"(exports, module) {
    var parent = require_slice3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/instance/slice.js
var require_slice6 = __commonJS({
  "node_modules/core-js-pure/full/instance/slice.js"(exports, module) {
    var parent = require_slice5();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/slice.js
var require_slice7 = __commonJS({
  "node_modules/core-js-pure/features/instance/slice.js"(exports, module) {
    module.exports = require_slice6();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/slice.js
var require_slice8 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/slice.js"(exports, module) {
    module.exports = require_slice7();
  }
});

// node_modules/core-js-pure/actual/array/from.js
var require_from4 = __commonJS({
  "node_modules/core-js-pure/actual/array/from.js"(exports, module) {
    var parent = require_from2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/full/array/from.js
var require_from5 = __commonJS({
  "node_modules/core-js-pure/full/array/from.js"(exports, module) {
    var parent = require_from4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/from.js
var require_from6 = __commonJS({
  "node_modules/core-js-pure/features/array/from.js"(exports, module) {
    module.exports = require_from5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/array/from.js
var require_from7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/array/from.js"(exports, module) {
    module.exports = require_from6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js"(exports, module) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js"(exports, module) {
    var _sliceInstanceProperty = require_slice8();
    var _Array$from = require_from7();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(o4, minLen) {
      var _context;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty(_context = Object.prototype.toString.call(o4)).call(_context, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return arrayLikeToArray(o4, minLen);
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js"(exports, module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js"(exports, module) {
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(arr, i4) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i4) || unsupportedIterableToArray(arr, i4) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/moralis/lib/browser/ParseFileController.default.js
var require_ParseFileController_default = __commonJS({
  "node_modules/moralis/lib/browser/ParseFileController.default.js"(exports, module) {
    "use strict";
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseFileEncode = require_ParseFileEncode();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context2, _context3;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty(_context2 = ownKeys4(Object(source), true)).call(_context2, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys4(Object(source))).call(_context3, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    var XHR2 = null;
    if (typeof XMLHttpRequest !== "undefined") {
      XHR2 = XMLHttpRequest;
    }
    var DefaultController = {
      saveFile: function() {
        var _saveFile = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(name2, source, options) {
          var base64Data, _base64Data$split, _base64Data$split2, first, second, data, newSource;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(source.format !== "file")) {
                    _context.next = 2;
                    break;
                  }
                  throw new Error("saveFile can only be used with File-type sources.");
                case 2:
                  _context.next = 4;
                  return new _promise.default(function(res, rej) {
                    var reader = new FileReader();
                    reader.onload = function() {
                      return res(reader.result);
                    };
                    reader.onerror = function(error) {
                      return rej(error);
                    };
                    reader.readAsDataURL(source.file);
                  });
                case 4:
                  base64Data = _context.sent;
                  _base64Data$split = base64Data.split(","), _base64Data$split2 = (0, _slicedToArray2.default)(_base64Data$split, 2), first = _base64Data$split2[0], second = _base64Data$split2[1];
                  data = second ? second : first;
                  newSource = {
                    format: "base64",
                    base64: data,
                    type: source.type || (source.file ? source.file.type : null)
                  };
                  _context.next = 10;
                  return DefaultController.saveBase64(name2, newSource, options);
                case 10:
                  return _context.abrupt("return", _context.sent);
                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function() {
          return _saveFile.apply(this, arguments);
        };
      }(),
      saveBase64: function(name2, source, options) {
        if (source.format !== "base64") {
          throw new Error("saveBase64 can only be used with Base64-type sources.");
        }
        var data = {
          base64: source.base64,
          fileData: {
            ipfs: options.ipfs,
            metadata: _objectSpread4({}, options.metadata),
            tags: _objectSpread4({}, options.tags)
          }
        };
        delete options.metadata;
        delete options.tags;
        if (source.type) {
          data._ContentType = source.type;
        }
        var path = "files/".concat(name2);
        return _CoreManager.default.getRESTController().request("POST", path, data, options);
      },
      download: function(uri, options) {
        if (XHR2) {
          return this.downloadAjax(uri, options);
        }
        return _promise.default.reject("Cannot make a request: No definition of XMLHttpRequest was found.");
      },
      downloadAjax: function(uri, options) {
        return new _promise.default(function(resolve, reject) {
          var xhr = new XHR2();
          xhr.open("GET", uri, true);
          xhr.responseType = "arraybuffer";
          xhr.onerror = function(e3) {
            reject(e3);
          };
          xhr.onreadystatechange = function() {
            if (xhr.readyState !== xhr.DONE) {
              return;
            }
            if (!this.response) {
              return resolve({});
            }
            var bytes = new Uint8Array(this.response);
            resolve({
              base64: (0, _ParseFileEncode.encodeBase64)(bytes),
              contentType: xhr.getResponseHeader("content-type")
            });
          };
          options.requestTask(xhr);
          xhr.send();
        });
      },
      deleteFile: function(name2, options) {
        var headers = {
          "X-Parse-Application-ID": _CoreManager.default.get("APPLICATION_ID")
        };
        if (options.useMasterKey) {
          headers["X-Parse-Master-Key"] = _CoreManager.default.get("MASTER_KEY");
        }
        var url = _CoreManager.default.get("SERVER_URL");
        if (url[url.length - 1] !== "/") {
          url += "/";
        }
        url += "files/".concat(name2);
        return _CoreManager.default.getRESTController().ajax("DELETE", url, "", headers).catch(function(response) {
          if (!response || response === "SyntaxError: Unexpected end of JSON input") {
            return _promise.default.resolve();
          }
          return _CoreManager.default.getRESTController().handleError(response);
        });
      },
      _setXHR: function(xhr) {
        XHR2 = xhr;
      },
      _getXHR: function() {
        return XHR2;
      }
    };
    module.exports = DefaultController;
  }
});

// node_modules/moralis/lib/browser/ParseFile.js
var require_ParseFile = __commonJS({
  "node_modules/moralis/lib/browser/ParseFile.js"(exports) {
    "use strict";
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _slice = _interopRequireDefault(require_slice4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseFileEncode = require_ParseFileEncode();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context4, _context5;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty2(_context4 = ownKeys4(Object(source), true)).call(_context4, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys4(Object(source))).call(_context5, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    var ParseError = require_ParseError().default;
    var dataUriRegexp = /^data:([a-zA-Z]+\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\-/]*)?;base64,/;
    var ParseFile = function() {
      function ParseFile2(name2, data, type, metadata, tags) {
        (0, _classCallCheck2.default)(this, ParseFile2);
        (0, _defineProperty2.default)(this, "_name", void 0);
        (0, _defineProperty2.default)(this, "_url", void 0);
        (0, _defineProperty2.default)(this, "_hash", void 0);
        (0, _defineProperty2.default)(this, "_ipfs", void 0);
        (0, _defineProperty2.default)(this, "_source", void 0);
        (0, _defineProperty2.default)(this, "_previousSave", void 0);
        (0, _defineProperty2.default)(this, "_data", void 0);
        (0, _defineProperty2.default)(this, "_requestTask", void 0);
        (0, _defineProperty2.default)(this, "_metadata", void 0);
        (0, _defineProperty2.default)(this, "_tags", void 0);
        var specifiedType = type || "";
        this._name = name2;
        this._metadata = metadata || {};
        this._tags = tags || {};
        if (data !== void 0) {
          if ((0, _isArray.default)(data)) {
            this._data = ParseFile2.encodeBase64(data);
            this._source = {
              format: "base64",
              base64: this._data,
              type: specifiedType
            };
          } else if (typeof Blob !== "undefined" && data instanceof Blob) {
            this._source = {
              format: "file",
              file: data,
              type: specifiedType
            };
          } else if (data && typeof data.uri === "string" && data.uri !== void 0) {
            this._source = {
              format: "uri",
              uri: data.uri,
              type: specifiedType
            };
          } else if (data && typeof data.base64 === "string") {
            var base64 = data.base64;
            var commaIndex = (0, _indexOf.default)(base64).call(base64, ",");
            if (commaIndex !== -1) {
              var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1));
              this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);
              this._source = {
                format: "base64",
                base64: this._data,
                type: matches[1]
              };
            } else {
              this._data = base64;
              this._source = {
                format: "base64",
                base64,
                type: specifiedType
              };
            }
          } else {
            throw new TypeError("Cannot create a Parse.File with that data.");
          }
        }
      }
      (0, _createClass2.default)(ParseFile2, [{
        key: "getData",
        value: function() {
          var _getData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
            var _this = this;
            var options, controller, result;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this._data) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", this._data);
                  case 2:
                    if (this._url) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("Cannot retrieve data for unsaved ParseFile.");
                  case 4:
                    options = {
                      requestTask: function(task) {
                        return _this._requestTask = task;
                      }
                    };
                    controller = _CoreManager.default.getFileController();
                    _context.next = 8;
                    return controller.download(this._url, options);
                  case 8:
                    result = _context.sent;
                    this._data = result.base64;
                    return _context.abrupt("return", this._data);
                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _getData.apply(this, arguments);
          };
        }()
      }, {
        key: "name",
        value: function() {
          return this._name;
        }
      }, {
        key: "url",
        value: function(options) {
          options = options || {};
          if (!this._url) {
            return;
          }
          if (options.forceSecure) {
            return this._url.replace(/^http:\/\//i, "https://");
          }
          return this._url;
        }
      }, {
        key: "ipfs",
        value: function() {
          return this._ipfs;
        }
      }, {
        key: "hash",
        value: function() {
          return this._hash;
        }
      }, {
        key: "metadata",
        value: function() {
          return this._metadata;
        }
      }, {
        key: "tags",
        value: function() {
          return this._tags;
        }
      }, {
        key: "save",
        value: function(options) {
          var _this2 = this;
          options = options || {};
          options.requestTask = function(task) {
            return _this2._requestTask = task;
          };
          options.metadata = this._metadata;
          options.tags = this._tags;
          var controller = _CoreManager.default.getFileController();
          if (!this._previousSave) {
            if (this._source.format === "file") {
              this._previousSave = controller.saveFile(this._name, this._source, options).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._data = null;
                _this2._requestTask = null;
                return _this2;
              });
            } else if (this._source.format === "uri") {
              this._previousSave = controller.download(this._source.uri, options).then(function(result) {
                if (!(result && result.base64)) {
                  return {};
                }
                var newSource = {
                  format: "base64",
                  base64: result.base64,
                  type: result.contentType
                };
                _this2._data = result.base64;
                _this2._requestTask = null;
                return controller.saveBase64(_this2._name, newSource, options);
              }).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._requestTask = null;
                return _this2;
              });
            } else {
              this._previousSave = controller.saveBase64(this._name, this._source, options).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._requestTask = null;
                return _this2;
              });
            }
          }
          if (this._previousSave) {
            return this._previousSave;
          }
        }
      }, {
        key: "saveIPFS",
        value: function(options) {
          return this.save(_objectSpread4(_objectSpread4({}, options), {}, {
            ipfs: true
          }));
        }
      }, {
        key: "cancel",
        value: function() {
          if (this._requestTask && typeof this._requestTask.abort === "function") {
            this._requestTask.abort();
          }
          this._requestTask = null;
        }
      }, {
        key: "destroy",
        value: function() {
          var _this3 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (!this._name) {
            throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, "Cannot delete an unnamed file.");
          }
          var destroyOptions = {
            useMasterKey: true
          };
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getFileController();
          return controller.deleteFile(this._name, destroyOptions).then(function() {
            _this3._data = null;
            _this3._requestTask = null;
            return _this3;
          });
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __type: "File",
            name: this._name,
            url: this._url,
            ipfs: this._ipfs,
            hash: this._hash
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          if (this === other) {
            return true;
          }
          return other instanceof ParseFile2 && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== "undefined";
        }
      }, {
        key: "setMetadata",
        value: function(metadata) {
          var _this4 = this;
          if (metadata && (0, _typeof2.default)(metadata) === "object") {
            var _context2;
            (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function(key2) {
              _this4.addMetadata(key2, metadata[key2]);
            });
          }
        }
      }, {
        key: "addMetadata",
        value: function(key2, value) {
          if (typeof key2 === "string") {
            this._metadata[key2] = value;
          }
        }
      }, {
        key: "setTags",
        value: function(tags) {
          var _this5 = this;
          if (tags && (0, _typeof2.default)(tags) === "object") {
            var _context3;
            (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function(key2) {
              _this5.addTag(key2, tags[key2]);
            });
          }
        }
      }, {
        key: "addTag",
        value: function(key2, value) {
          if (typeof key2 === "string") {
            this._tags[key2] = value;
          }
        }
      }], [{
        key: "fromJSON",
        value: function(obj) {
          if (obj.__type !== "File") {
            throw new TypeError("JSON object does not represent a ParseFile");
          }
          var file = new ParseFile2(obj.name);
          file._url = obj.url;
          file._hash = obj.hash;
          file._ipfs = obj.ipfs;
          return file;
        }
      }, {
        key: "encodeBase64",
        value: function(bytes) {
          return (0, _ParseFileEncode.encodeBase64)(bytes);
        }
      }]);
      return ParseFile2;
    }();
    _CoreManager.default.setFileController(require_ParseFileController_default());
    var _default = ParseFile;
    exports.default = _default;
    exports.b64Digit = _ParseFileEncode.b64Digit;
  }
});

// node_modules/core-js-pure/internals/delete-property-or-throw.js
var require_delete_property_or_throw = __commonJS({
  "node_modules/core-js-pure/internals/delete-property-or-throw.js"(exports, module) {
    "use strict";
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module.exports = function(O3, P4) {
      if (!delete O3[P4])
        throw $TypeError("Cannot delete property " + tryToString(P4) + " of " + tryToString(O3));
    };
  }
});

// node_modules/core-js-pure/modules/es.array.splice.js
var require_es_array_splice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.splice.js"() {
    "use strict";
    var $3 = require_export();
    var toObject = require_to_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var lengthOfArrayLike = require_length_of_array_like();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var arraySpeciesCreate = require_array_species_create();
    var createProperty = require_create_property();
    var deletePropertyOrThrow = require_delete_property_or_throw();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
    var max = Math.max;
    var min = Math.min;
    $3({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      splice: function splice(start, deleteCount) {
        var O3 = toObject(this);
        var len = lengthOfArrayLike(O3);
        var actualStart = toAbsoluteIndex(start, len);
        var argumentsLength = arguments.length;
        var insertCount, actualDeleteCount, A5, k4, from, to;
        if (argumentsLength === 0) {
          insertCount = actualDeleteCount = 0;
        } else if (argumentsLength === 1) {
          insertCount = 0;
          actualDeleteCount = len - actualStart;
        } else {
          insertCount = argumentsLength - 2;
          actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
        }
        doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
        A5 = arraySpeciesCreate(O3, actualDeleteCount);
        for (k4 = 0; k4 < actualDeleteCount; k4++) {
          from = actualStart + k4;
          if (from in O3)
            createProperty(A5, k4, O3[from]);
        }
        A5.length = actualDeleteCount;
        if (insertCount < actualDeleteCount) {
          for (k4 = actualStart; k4 < len - actualDeleteCount; k4++) {
            from = k4 + actualDeleteCount;
            to = k4 + insertCount;
            if (from in O3)
              O3[to] = O3[from];
            else
              deletePropertyOrThrow(O3, to);
          }
          for (k4 = len; k4 > len - actualDeleteCount + insertCount; k4--)
            deletePropertyOrThrow(O3, k4 - 1);
        } else if (insertCount > actualDeleteCount) {
          for (k4 = len - actualDeleteCount; k4 > actualStart; k4--) {
            from = k4 + actualDeleteCount - 1;
            to = k4 + insertCount - 1;
            if (from in O3)
              O3[to] = O3[from];
            else
              deletePropertyOrThrow(O3, to);
          }
        }
        for (k4 = 0; k4 < insertCount; k4++) {
          O3[k4 + actualStart] = arguments[k4 + 2];
        }
        O3.length = len - actualDeleteCount + insertCount;
        return A5;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/splice.js
var require_splice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/splice.js"(exports, module) {
    require_es_array_splice();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").splice;
  }
});

// node_modules/core-js-pure/es/instance/splice.js
var require_splice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/splice.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_splice();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.splice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.splice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/splice.js
var require_splice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/splice.js"(exports, module) {
    var parent = require_splice2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js
var require_splice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js"(exports, module) {
    module.exports = require_splice3();
  }
});

// node_modules/moralis/lib/browser/arrayContainsObject.js
var require_arrayContainsObject = __commonJS({
  "node_modules/moralis/lib/browser/arrayContainsObject.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = arrayContainsObject;
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function arrayContainsObject(array, object) {
      if ((0, _indexOf.default)(array).call(array, object) > -1) {
        return true;
      }
      for (var i4 = 0; i4 < array.length; i4++) {
        if (array[i4] instanceof _ParseObject.default && array[i4].className === object.className && array[i4]._getId() === object._getId()) {
          return true;
        }
      }
      return false;
    }
  }
});

// node_modules/core-js-pure/modules/es.string.starts-with.js
var require_es_string_starts_with = __commonJS({
  "node_modules/core-js-pure/modules/es.string.starts-with.js"() {
    "use strict";
    var $3 = require_export();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var toLength = require_to_length();
    var toString2 = require_to_string();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var IS_PURE = require_is_pure();
    var un$StartsWith = uncurryThis("".startsWith);
    var stringSlice = uncurryThis("".slice);
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
      return descriptor && !descriptor.writable;
    }();
    $3({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      startsWith: function startsWith(searchString) {
        var that = toString2(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
        var search = toString2(searchString);
        return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice(that, index, index + search.length) === search;
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/starts-with.js
var require_starts_with = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/starts-with.js"(exports, module) {
    require_es_string_starts_with();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").startsWith;
  }
});

// node_modules/core-js-pure/es/instance/starts-with.js
var require_starts_with2 = __commonJS({
  "node_modules/core-js-pure/es/instance/starts-with.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_starts_with();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.startsWith;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.startsWith ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/starts-with.js
var require_starts_with3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/starts-with.js"(exports, module) {
    var parent = require_starts_with2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js
var require_starts_with4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js"(exports, module) {
    module.exports = require_starts_with3();
  }
});

// node_modules/moralis/lib/browser/ParseGeoPoint.js
var require_ParseGeoPoint = __commonJS({
  "node_modules/moralis/lib/browser/ParseGeoPoint.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var ParseGeoPoint = function() {
      function ParseGeoPoint2(arg1, arg2) {
        (0, _classCallCheck2.default)(this, ParseGeoPoint2);
        (0, _defineProperty2.default)(this, "_latitude", void 0);
        (0, _defineProperty2.default)(this, "_longitude", void 0);
        if ((0, _isArray.default)(arg1)) {
          ParseGeoPoint2._validate(arg1[0], arg1[1]);
          this._latitude = arg1[0];
          this._longitude = arg1[1];
        } else if ((0, _typeof2.default)(arg1) === "object") {
          ParseGeoPoint2._validate(arg1.latitude, arg1.longitude);
          this._latitude = arg1.latitude;
          this._longitude = arg1.longitude;
        } else if (arg1 !== void 0 && arg2 !== void 0) {
          ParseGeoPoint2._validate(arg1, arg2);
          this._latitude = arg1;
          this._longitude = arg2;
        } else {
          this._latitude = 0;
          this._longitude = 0;
        }
      }
      (0, _createClass2.default)(ParseGeoPoint2, [{
        key: "latitude",
        get: function() {
          return this._latitude;
        },
        set: function(val) {
          ParseGeoPoint2._validate(val, this.longitude);
          this._latitude = val;
        }
      }, {
        key: "longitude",
        get: function() {
          return this._longitude;
        },
        set: function(val) {
          ParseGeoPoint2._validate(this.latitude, val);
          this._longitude = val;
        }
      }, {
        key: "toJSON",
        value: function() {
          ParseGeoPoint2._validate(this._latitude, this._longitude);
          return {
            __type: "GeoPoint",
            latitude: this._latitude,
            longitude: this._longitude
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          return other instanceof ParseGeoPoint2 && this.latitude === other.latitude && this.longitude === other.longitude;
        }
      }, {
        key: "radiansTo",
        value: function(point3) {
          var d2r = Math.PI / 180;
          var lat1rad = this.latitude * d2r;
          var long1rad = this.longitude * d2r;
          var lat2rad = point3.latitude * d2r;
          var long2rad = point3.longitude * d2r;
          var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);
          var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2);
          var a4 = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;
          a4 = Math.min(1, a4);
          return 2 * Math.asin(Math.sqrt(a4));
        }
      }, {
        key: "kilometersTo",
        value: function(point3) {
          return this.radiansTo(point3) * 6371;
        }
      }, {
        key: "milesTo",
        value: function(point3) {
          return this.radiansTo(point3) * 3958.8;
        }
      }], [{
        key: "_validate",
        value: function(latitude, longitude) {
          if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== "number" || typeof longitude !== "number") {
            throw new TypeError("GeoPoint latitude and longitude must be valid numbers");
          }
          if (latitude < -90) {
            throw new TypeError("GeoPoint latitude out of bounds: ".concat(latitude, " < -90.0."));
          }
          if (latitude > 90) {
            throw new TypeError("GeoPoint latitude out of bounds: ".concat(latitude, " > 90.0."));
          }
          if (longitude < -180) {
            throw new TypeError("GeoPoint longitude out of bounds: ".concat(longitude, " < -180.0."));
          }
          if (longitude > 180) {
            throw new TypeError("GeoPoint longitude out of bounds: ".concat(longitude, " > 180.0."));
          }
        }
      }, {
        key: "current",
        value: function() {
          return navigator.geolocation.getCurrentPosition(function(location) {
            return new ParseGeoPoint2(location.coords.latitude, location.coords.longitude);
          });
        }
      }]);
      return ParseGeoPoint2;
    }();
    var _default = ParseGeoPoint;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParsePolygon.js
var require_ParsePolygon = __commonJS({
  "node_modules/moralis/lib/browser/ParsePolygon.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var ParsePolygon = function() {
      function ParsePolygon2(coordinates) {
        (0, _classCallCheck2.default)(this, ParsePolygon2);
        (0, _defineProperty2.default)(this, "_coordinates", void 0);
        this._coordinates = ParsePolygon2._validate(coordinates);
      }
      (0, _createClass2.default)(ParsePolygon2, [{
        key: "coordinates",
        get: function() {
          return this._coordinates;
        },
        set: function(coords) {
          this._coordinates = ParsePolygon2._validate(coords);
        }
      }, {
        key: "toJSON",
        value: function() {
          ParsePolygon2._validate(this._coordinates);
          return {
            __type: "Polygon",
            coordinates: this._coordinates
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParsePolygon2) || this.coordinates.length !== other.coordinates.length) {
            return false;
          }
          var isEqual = true;
          for (var i4 = 1; i4 < this._coordinates.length; i4 += 1) {
            if (this._coordinates[i4][0] !== other.coordinates[i4][0] || this._coordinates[i4][1] !== other.coordinates[i4][1]) {
              isEqual = false;
              break;
            }
          }
          return isEqual;
        }
      }, {
        key: "containsPoint",
        value: function(point3) {
          var minX = this._coordinates[0][0];
          var maxX = this._coordinates[0][0];
          var minY = this._coordinates[0][1];
          var maxY = this._coordinates[0][1];
          for (var i4 = 1; i4 < this._coordinates.length; i4 += 1) {
            var p4 = this._coordinates[i4];
            minX = Math.min(p4[0], minX);
            maxX = Math.max(p4[0], maxX);
            minY = Math.min(p4[1], minY);
            maxY = Math.max(p4[1], maxY);
          }
          var outside = point3.latitude < minX || point3.latitude > maxX || point3.longitude < minY || point3.longitude > maxY;
          if (outside) {
            return false;
          }
          var inside = false;
          for (var _i = 0, j4 = this._coordinates.length - 1; _i < this._coordinates.length; j4 = _i++) {
            var startX = this._coordinates[_i][0];
            var startY = this._coordinates[_i][1];
            var endX = this._coordinates[j4][0];
            var endY = this._coordinates[j4][1];
            var intersect = startY > point3.longitude !== endY > point3.longitude && point3.latitude < (endX - startX) * (point3.longitude - startY) / (endY - startY) + startX;
            if (intersect) {
              inside = !inside;
            }
          }
          return inside;
        }
      }], [{
        key: "_validate",
        value: function(coords) {
          if (!(0, _isArray.default)(coords)) {
            throw new TypeError("Coordinates must be an Array");
          }
          if (coords.length < 3) {
            throw new TypeError("Polygon must have at least 3 GeoPoints or Points");
          }
          var points = [];
          for (var i4 = 0; i4 < coords.length; i4 += 1) {
            var coord = coords[i4];
            var geoPoint = void 0;
            if (coord instanceof _ParseGeoPoint.default) {
              geoPoint = coord;
            } else if ((0, _isArray.default)(coord) && coord.length === 2) {
              geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);
            } else {
              throw new TypeError("Coordinates must be an Array of GeoPoints or Points");
            }
            points.push([geoPoint.latitude, geoPoint.longitude]);
          }
          return points;
        }
      }]);
      return ParsePolygon2;
    }();
    var _default = ParsePolygon;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/encode.js
var require_encode = __commonJS({
  "node_modules/moralis/lib/browser/encode.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _keys = _interopRequireDefault(require_keys3());
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _map = _interopRequireDefault(require_map10());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParsePolygon = _interopRequireDefault(require_ParsePolygon());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseOp = require_ParseOp();
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function encode4(value, disallowObjects, forcePointers, seen, offline) {
      if (value instanceof _ParseObject.default) {
        var _context;
        if (disallowObjects) {
          throw new Error("Parse Objects not allowed here");
        }
        var seenEntry = value.id ? (0, _concat.default)(_context = "".concat(value.className, ":")).call(_context, value.id) : value;
        if (forcePointers || !seen || (0, _indexOf.default)(seen).call(seen, seenEntry) > -1 || value.dirty() || (0, _keys.default)(value._getServerData()).length < 1) {
          var _context2;
          if (offline && (0, _startsWith.default)(_context2 = value._getId()).call(_context2, "local")) {
            return value.toOfflinePointer();
          }
          return value.toPointer();
        }
        seen = (0, _concat.default)(seen).call(seen, seenEntry);
        return value._toFullJSON(seen, offline);
      }
      if (value instanceof _ParseOp.Op || value instanceof _ParseACL.default || value instanceof _ParseGeoPoint.default || value instanceof _ParsePolygon.default || value instanceof _ParseRelation.default) {
        return value.toJSON();
      }
      if (value instanceof _ParseFile.default) {
        if (!value.url()) {
          throw new Error("Tried to encode an unsaved file.");
        }
        return value.toJSON();
      }
      if (Object.prototype.toString.call(value) === "[object Date]") {
        if (isNaN(value)) {
          throw new Error("Tried to encode an invalid date.");
        }
        return {
          __type: "Date",
          iso: value.toJSON()
        };
      }
      if (Object.prototype.toString.call(value) === "[object RegExp]" && typeof value.source === "string") {
        return value.source;
      }
      if ((0, _isArray.default)(value)) {
        return (0, _map.default)(value).call(value, function(v4) {
          return encode4(v4, disallowObjects, forcePointers, seen, offline);
        });
      }
      if (value && (0, _typeof2.default)(value) === "object") {
        var output = {};
        for (var k4 in value) {
          output[k4] = encode4(value[k4], disallowObjects, forcePointers, seen, offline);
        }
        return output;
      }
      return value;
    }
    function _default(value, disallowObjects, forcePointers, seen, offline) {
      return encode4(value, !!disallowObjects, !!forcePointers, seen || [], offline);
    }
  }
});

// node_modules/moralis/lib/browser/unique.js
var require_unique = __commonJS({
  "node_modules/moralis/lib/browser/unique.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unique;
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _arrayContainsObject = _interopRequireDefault(require_arrayContainsObject());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function unique(arr) {
      var uniques = [];
      (0, _forEach.default)(arr).call(arr, function(value) {
        if (value instanceof _ParseObject.default) {
          if (!(0, _arrayContainsObject.default)(uniques, value)) {
            uniques.push(value);
          }
        } else {
          if ((0, _indexOf.default)(uniques).call(uniques, value) < 0) {
            uniques.push(value);
          }
        }
      });
      return uniques;
    }
  }
});

// node_modules/moralis/lib/browser/ParseOp.js
var require_ParseOp = __commonJS({
  "node_modules/moralis/lib/browser/ParseOp.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UnsetOp = exports.SetOp = exports.RemoveOp = exports.RelationOp = exports.Op = exports.IncrementOp = exports.AddUniqueOp = exports.AddOp = void 0;
    exports.opFromJSON = opFromJSON;
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _concat = _interopRequireDefault(require_concat4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _splice = _interopRequireDefault(require_splice4());
    var _map = _interopRequireDefault(require_map10());
    var _arrayContainsObject = _interopRequireDefault(require_arrayContainsObject());
    var _decode2 = _interopRequireDefault(require_decode());
    var _encode3 = _interopRequireDefault(require_encode());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var _unique = _interopRequireDefault(require_unique());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    function opFromJSON(json) {
      if (!json || !json.__op) {
        return null;
      }
      switch (json.__op) {
        case "Delete":
          return new UnsetOp();
        case "Increment":
          return new IncrementOp(json.amount);
        case "Add":
          return new AddOp((0, _decode2.default)(json.objects));
        case "AddUnique":
          return new AddUniqueOp((0, _decode2.default)(json.objects));
        case "Remove":
          return new RemoveOp((0, _decode2.default)(json.objects));
        case "AddRelation": {
          var toAdd = (0, _decode2.default)(json.objects);
          if (!(0, _isArray.default)(toAdd)) {
            return new RelationOp([], []);
          }
          return new RelationOp(toAdd, []);
        }
        case "RemoveRelation": {
          var toRemove = (0, _decode2.default)(json.objects);
          if (!(0, _isArray.default)(toRemove)) {
            return new RelationOp([], []);
          }
          return new RelationOp([], toRemove);
        }
        case "Batch": {
          var _toAdd = [];
          var _toRemove = [];
          for (var i4 = 0; i4 < json.ops.length; i4++) {
            if (json.ops[i4].__op === "AddRelation") {
              _toAdd = (0, _concat.default)(_toAdd).call(_toAdd, (0, _decode2.default)(json.ops[i4].objects));
            } else if (json.ops[i4].__op === "RemoveRelation") {
              _toRemove = (0, _concat.default)(_toRemove).call(_toRemove, (0, _decode2.default)(json.ops[i4].objects));
            }
          }
          return new RelationOp(_toAdd, _toRemove);
        }
        default:
          return null;
      }
    }
    var Op = function() {
      function Op2() {
        (0, _classCallCheck2.default)(this, Op2);
      }
      (0, _createClass2.default)(Op2, [{
        key: "applyTo",
        value: function() {
        }
      }, {
        key: "mergeWith",
        value: function() {
        }
      }, {
        key: "toJSON",
        value: function() {
        }
      }]);
      return Op2;
    }();
    exports.Op = Op;
    var SetOp = function(_Op) {
      (0, _inherits2.default)(SetOp2, _Op);
      var _super = _createSuper(SetOp2);
      function SetOp2(value) {
        var _this;
        (0, _classCallCheck2.default)(this, SetOp2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_value", void 0);
        _this._value = value;
        return _this;
      }
      (0, _createClass2.default)(SetOp2, [{
        key: "applyTo",
        value: function() {
          return this._value;
        }
      }, {
        key: "mergeWith",
        value: function() {
          return new SetOp2(this._value);
        }
      }, {
        key: "toJSON",
        value: function(offline) {
          return (0, _encode3.default)(this._value, false, true, void 0, offline);
        }
      }]);
      return SetOp2;
    }(Op);
    exports.SetOp = SetOp;
    var UnsetOp = function(_Op2) {
      (0, _inherits2.default)(UnsetOp2, _Op2);
      var _super2 = _createSuper(UnsetOp2);
      function UnsetOp2() {
        (0, _classCallCheck2.default)(this, UnsetOp2);
        return _super2.apply(this, arguments);
      }
      (0, _createClass2.default)(UnsetOp2, [{
        key: "applyTo",
        value: function() {
          return void 0;
        }
      }, {
        key: "mergeWith",
        value: function() {
          return new UnsetOp2();
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Delete"
          };
        }
      }]);
      return UnsetOp2;
    }(Op);
    exports.UnsetOp = UnsetOp;
    var IncrementOp = function(_Op3) {
      (0, _inherits2.default)(IncrementOp2, _Op3);
      var _super3 = _createSuper(IncrementOp2);
      function IncrementOp2(amount) {
        var _this2;
        (0, _classCallCheck2.default)(this, IncrementOp2);
        _this2 = _super3.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "_amount", void 0);
        if (typeof amount !== "number") {
          throw new TypeError("Increment Op must be initialized with a numeric amount.");
        }
        _this2._amount = amount;
        return _this2;
      }
      (0, _createClass2.default)(IncrementOp2, [{
        key: "applyTo",
        value: function(value) {
          if (typeof value === "undefined") {
            return this._amount;
          }
          if (typeof value !== "number") {
            throw new TypeError("Cannot increment a non-numeric value.");
          }
          return this._amount + value;
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._amount);
          }
          if (previous instanceof IncrementOp2) {
            return new IncrementOp2(this.applyTo(previous._amount));
          }
          throw new Error("Cannot merge Increment Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Increment",
            amount: this._amount
          };
        }
      }]);
      return IncrementOp2;
    }(Op);
    exports.IncrementOp = IncrementOp;
    var AddOp = function(_Op4) {
      (0, _inherits2.default)(AddOp2, _Op4);
      var _super4 = _createSuper(AddOp2);
      function AddOp2(value) {
        var _this3;
        (0, _classCallCheck2.default)(this, AddOp2);
        _this3 = _super4.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "_value", void 0);
        _this3._value = (0, _isArray.default)(value) ? value : [value];
        return _this3;
      }
      (0, _createClass2.default)(AddOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return this._value;
          }
          if ((0, _isArray.default)(value)) {
            return (0, _concat.default)(value).call(value, this._value);
          }
          throw new Error("Cannot add elements to a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._value);
          }
          if (previous instanceof AddOp2) {
            return new AddOp2(this.applyTo(previous._value));
          }
          throw new Error("Cannot merge Add Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Add",
            objects: (0, _encode3.default)(this._value, false, true)
          };
        }
      }]);
      return AddOp2;
    }(Op);
    exports.AddOp = AddOp;
    var AddUniqueOp = function(_Op5) {
      (0, _inherits2.default)(AddUniqueOp2, _Op5);
      var _super5 = _createSuper(AddUniqueOp2);
      function AddUniqueOp2(value) {
        var _this4;
        (0, _classCallCheck2.default)(this, AddUniqueOp2);
        _this4 = _super5.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "_value", void 0);
        _this4._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
        return _this4;
      }
      (0, _createClass2.default)(AddUniqueOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return this._value || [];
          }
          if ((0, _isArray.default)(value)) {
            var _context;
            var toAdd = [];
            (0, _forEach.default)(_context = this._value).call(_context, function(v4) {
              if (v4 instanceof _ParseObject.default) {
                if (!(0, _arrayContainsObject.default)(value, v4)) {
                  toAdd.push(v4);
                }
              } else {
                if ((0, _indexOf.default)(value).call(value, v4) < 0) {
                  toAdd.push(v4);
                }
              }
            });
            return (0, _concat.default)(value).call(value, toAdd);
          }
          throw new Error("Cannot add elements to a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._value);
          }
          if (previous instanceof AddUniqueOp2) {
            return new AddUniqueOp2(this.applyTo(previous._value));
          }
          throw new Error("Cannot merge AddUnique Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "AddUnique",
            objects: (0, _encode3.default)(this._value, false, true)
          };
        }
      }]);
      return AddUniqueOp2;
    }(Op);
    exports.AddUniqueOp = AddUniqueOp;
    var RemoveOp = function(_Op6) {
      (0, _inherits2.default)(RemoveOp2, _Op6);
      var _super6 = _createSuper(RemoveOp2);
      function RemoveOp2(value) {
        var _this5;
        (0, _classCallCheck2.default)(this, RemoveOp2);
        _this5 = _super6.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this5), "_value", void 0);
        _this5._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
        return _this5;
      }
      (0, _createClass2.default)(RemoveOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return [];
          }
          if ((0, _isArray.default)(value)) {
            var removed = (0, _concat.default)(value).call(value, []);
            for (var i4 = 0; i4 < this._value.length; i4++) {
              var index = (0, _indexOf.default)(removed).call(removed, this._value[i4]);
              while (index > -1) {
                (0, _splice.default)(removed).call(removed, index, 1);
                index = (0, _indexOf.default)(removed).call(removed, this._value[i4]);
              }
              if (this._value[i4] instanceof _ParseObject.default && this._value[i4].id) {
                for (var j4 = 0; j4 < removed.length; j4++) {
                  if (removed[j4] instanceof _ParseObject.default && this._value[i4].id === removed[j4].id) {
                    (0, _splice.default)(removed).call(removed, j4, 1);
                    j4--;
                  }
                }
              }
            }
            return removed;
          }
          throw new Error("Cannot remove elements from a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new UnsetOp();
          }
          if (previous instanceof RemoveOp2) {
            var _context2;
            var uniques = (0, _concat.default)(_context2 = previous._value).call(_context2, []);
            for (var i4 = 0; i4 < this._value.length; i4++) {
              if (this._value[i4] instanceof _ParseObject.default) {
                if (!(0, _arrayContainsObject.default)(uniques, this._value[i4])) {
                  uniques.push(this._value[i4]);
                }
              } else {
                if ((0, _indexOf.default)(uniques).call(uniques, this._value[i4]) < 0) {
                  uniques.push(this._value[i4]);
                }
              }
            }
            return new RemoveOp2(uniques);
          }
          throw new Error("Cannot merge Remove Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Remove",
            objects: (0, _encode3.default)(this._value, false, true)
          };
        }
      }]);
      return RemoveOp2;
    }(Op);
    exports.RemoveOp = RemoveOp;
    var RelationOp = function(_Op7) {
      (0, _inherits2.default)(RelationOp2, _Op7);
      var _super7 = _createSuper(RelationOp2);
      function RelationOp2(adds, removes) {
        var _this6;
        (0, _classCallCheck2.default)(this, RelationOp2);
        _this6 = _super7.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "_targetClassName", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToAdd", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToRemove", void 0);
        _this6._targetClassName = null;
        if ((0, _isArray.default)(adds)) {
          _this6.relationsToAdd = (0, _unique.default)((0, _map.default)(adds).call(adds, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
        }
        if ((0, _isArray.default)(removes)) {
          _this6.relationsToRemove = (0, _unique.default)((0, _map.default)(removes).call(removes, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
        }
        return _this6;
      }
      (0, _createClass2.default)(RelationOp2, [{
        key: "_extractId",
        value: function(obj) {
          if (typeof obj === "string") {
            return obj;
          }
          if (!obj.id) {
            throw new Error("You cannot add or remove an unsaved Parse Object from a relation");
          }
          if (!this._targetClassName) {
            this._targetClassName = obj.className;
          }
          if (this._targetClassName !== obj.className) {
            var _context3;
            throw new Error((0, _concat.default)(_context3 = "Tried to create a Relation with 2 different object types: ".concat(this._targetClassName, " and ")).call(_context3, obj.className, "."));
          }
          return obj.id;
        }
      }, {
        key: "applyTo",
        value: function(value, object, key2) {
          if (!value) {
            var _context4;
            if (!object || !key2) {
              throw new Error("Cannot apply a RelationOp without either a previous value, or an object and a key");
            }
            var parent = new _ParseObject.default(object.className);
            if (object.id && (0, _indexOf.default)(_context4 = object.id).call(_context4, "local") === 0) {
              parent._localId = object.id;
            } else if (object.id) {
              parent.id = object.id;
            }
            var relation = new _ParseRelation.default(parent, key2);
            relation.targetClassName = this._targetClassName;
            return relation;
          }
          if (value instanceof _ParseRelation.default) {
            if (this._targetClassName) {
              if (value.targetClassName) {
                if (this._targetClassName !== value.targetClassName) {
                  var _context5;
                  throw new Error((0, _concat.default)(_context5 = "Related object must be a ".concat(value.targetClassName, ", but a ")).call(_context5, this._targetClassName, " was passed in."));
                }
              } else {
                value.targetClassName = this._targetClassName;
              }
            }
            return value;
          }
          throw new Error("Relation cannot be applied to a non-relation field");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof UnsetOp) {
            throw new Error("You cannot modify a relation after deleting it.");
          }
          if (previous instanceof SetOp && previous._value instanceof _ParseRelation.default) {
            return this;
          }
          if (previous instanceof RelationOp2) {
            var _context7, _context8, _context9, _context10, _context11, _context12;
            if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {
              var _context6;
              throw new Error((0, _concat.default)(_context6 = "Related object must be of class ".concat(previous._targetClassName, ", but ")).call(_context6, this._targetClassName || "null", " was passed in."));
            }
            var newAdd = (0, _concat.default)(_context7 = previous.relationsToAdd).call(_context7, []);
            (0, _forEach.default)(_context8 = this.relationsToRemove).call(_context8, function(r4) {
              var index = (0, _indexOf.default)(newAdd).call(newAdd, r4);
              if (index > -1) {
                (0, _splice.default)(newAdd).call(newAdd, index, 1);
              }
            });
            (0, _forEach.default)(_context9 = this.relationsToAdd).call(_context9, function(r4) {
              var index = (0, _indexOf.default)(newAdd).call(newAdd, r4);
              if (index < 0) {
                newAdd.push(r4);
              }
            });
            var newRemove = (0, _concat.default)(_context10 = previous.relationsToRemove).call(_context10, []);
            (0, _forEach.default)(_context11 = this.relationsToAdd).call(_context11, function(r4) {
              var index = (0, _indexOf.default)(newRemove).call(newRemove, r4);
              if (index > -1) {
                (0, _splice.default)(newRemove).call(newRemove, index, 1);
              }
            });
            (0, _forEach.default)(_context12 = this.relationsToRemove).call(_context12, function(r4) {
              var index = (0, _indexOf.default)(newRemove).call(newRemove, r4);
              if (index < 0) {
                newRemove.push(r4);
              }
            });
            var newRelation = new RelationOp2(newAdd, newRemove);
            newRelation._targetClassName = this._targetClassName;
            return newRelation;
          }
          throw new Error("Cannot merge Relation Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          var _this7 = this;
          var idToPointer = function(id2) {
            return {
              __type: "Pointer",
              className: _this7._targetClassName,
              objectId: id2
            };
          };
          var adds = null;
          var removes = null;
          var pointers = null;
          if (this.relationsToAdd.length > 0) {
            var _context13;
            pointers = (0, _map.default)(_context13 = this.relationsToAdd).call(_context13, idToPointer);
            adds = {
              __op: "AddRelation",
              objects: pointers
            };
          }
          if (this.relationsToRemove.length > 0) {
            var _context14;
            pointers = (0, _map.default)(_context14 = this.relationsToRemove).call(_context14, idToPointer);
            removes = {
              __op: "RemoveRelation",
              objects: pointers
            };
          }
          if (adds && removes) {
            return {
              __op: "Batch",
              ops: [adds, removes]
            };
          }
          return adds || removes || {};
        }
      }]);
      return RelationOp2;
    }(Op);
    exports.RelationOp = RelationOp;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js"(exports, module) {
    var _Array$isArray = require_is_array8();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _arrayWithoutHoles(arr) {
      if (_Array$isArray(arr))
        return arrayLikeToArray(arr);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js
var require_iterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js"(exports, module) {
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$from = require_from7();
    function _iterableToArray(iter) {
      if (typeof _Symbol !== "undefined" && _getIteratorMethod(iter) != null || iter["@@iterator"] != null)
        return _Array$from(iter);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js"(exports, module) {
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js"(exports, module) {
    var arrayWithoutHoles = require_arrayWithoutHoles();
    var iterableToArray = require_iterableToArray();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableSpread = require_nonIterableSpread();
    function _toConsumableArray(arr) {
      return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/es/array/virtual/keys.js
var require_keys4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/keys.js"(exports, module) {
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").keys;
  }
});

// node_modules/core-js-pure/stable/array/virtual/keys.js
var require_keys5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/keys.js"(exports, module) {
    var parent = require_keys4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/keys.js
var require_keys6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/keys.js"(exports, module) {
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_keys5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.keys;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.keys || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js
var require_keys7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js"(exports, module) {
    module.exports = require_keys6();
  }
});

// node_modules/core-js-pure/internals/array-sort.js
var require_array_sort = __commonJS({
  "node_modules/core-js-pure/internals/array-sort.js"(exports, module) {
    var arraySlice = require_array_slice_simple();
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
      var length = array.length;
      var middle = floor(length / 2);
      return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
    };
    var insertionSort = function(array, comparefn) {
      var length = array.length;
      var i4 = 1;
      var element, j4;
      while (i4 < length) {
        j4 = i4;
        element = array[i4];
        while (j4 && comparefn(array[j4 - 1], element) > 0) {
          array[j4] = array[--j4];
        }
        if (j4 !== i4++)
          array[j4] = element;
      }
      return array;
    };
    var merge = function(array, left, right, comparefn) {
      var llength = left.length;
      var rlength = right.length;
      var lindex = 0;
      var rindex = 0;
      while (lindex < llength || rindex < rlength) {
        array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
      }
      return array;
    };
    module.exports = mergeSort;
  }
});

// node_modules/core-js-pure/internals/engine-ff-version.js
var require_engine_ff_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-ff-version.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    var firefox = userAgent.match(/firefox\/(\d+)/i);
    module.exports = !!firefox && +firefox[1];
  }
});

// node_modules/core-js-pure/internals/engine-is-ie-or-edge.js
var require_engine_is_ie_or_edge = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ie-or-edge.js"(exports, module) {
    var UA = require_engine_user_agent();
    module.exports = /MSIE|Trident/.test(UA);
  }
});

// node_modules/core-js-pure/internals/engine-webkit-version.js
var require_engine_webkit_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-webkit-version.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
    module.exports = !!webkit && +webkit[1];
  }
});

// node_modules/core-js-pure/modules/es.array.sort.js
var require_es_array_sort = __commonJS({
  "node_modules/core-js-pure/modules/es.array.sort.js"() {
    "use strict";
    var $3 = require_export();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var deletePropertyOrThrow = require_delete_property_or_throw();
    var toString2 = require_to_string();
    var fails = require_fails();
    var internalSort = require_array_sort();
    var arrayMethodIsStrict = require_array_method_is_strict();
    var FF = require_engine_ff_version();
    var IE_OR_EDGE = require_engine_is_ie_or_edge();
    var V8 = require_engine_v8_version();
    var WEBKIT = require_engine_webkit_version();
    var test = [];
    var un$Sort = uncurryThis(test.sort);
    var push = uncurryThis(test.push);
    var FAILS_ON_UNDEFINED = fails(function() {
      test.sort(void 0);
    });
    var FAILS_ON_NULL = fails(function() {
      test.sort(null);
    });
    var STRICT_METHOD = arrayMethodIsStrict("sort");
    var STABLE_SORT = !fails(function() {
      if (V8)
        return V8 < 70;
      if (FF && FF > 3)
        return;
      if (IE_OR_EDGE)
        return true;
      if (WEBKIT)
        return WEBKIT < 603;
      var result = "";
      var code, chr, value, index;
      for (code = 65; code < 76; code++) {
        chr = String.fromCharCode(code);
        switch (code) {
          case 66:
          case 69:
          case 70:
          case 72:
            value = 3;
            break;
          case 68:
          case 71:
            value = 4;
            break;
          default:
            value = 2;
        }
        for (index = 0; index < 47; index++) {
          test.push({ k: chr + index, v: value });
        }
      }
      test.sort(function(a4, b3) {
        return b3.v - a4.v;
      });
      for (index = 0; index < test.length; index++) {
        chr = test[index].k.charAt(0);
        if (result.charAt(result.length - 1) !== chr)
          result += chr;
      }
      return result !== "DGBEFHACIJK";
    });
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
    var getSortCompare = function(comparefn) {
      return function(x4, y4) {
        if (y4 === void 0)
          return -1;
        if (x4 === void 0)
          return 1;
        if (comparefn !== void 0)
          return +comparefn(x4, y4) || 0;
        return toString2(x4) > toString2(y4) ? 1 : -1;
      };
    };
    $3({ target: "Array", proto: true, forced: FORCED }, {
      sort: function sort(comparefn) {
        if (comparefn !== void 0)
          aCallable(comparefn);
        var array = toObject(this);
        if (STABLE_SORT)
          return comparefn === void 0 ? un$Sort(array) : un$Sort(array, comparefn);
        var items = [];
        var arrayLength = lengthOfArrayLike(array);
        var itemsLength, index;
        for (index = 0; index < arrayLength; index++) {
          if (index in array)
            push(items, array[index]);
        }
        internalSort(items, getSortCompare(comparefn));
        itemsLength = items.length;
        index = 0;
        while (index < itemsLength)
          array[index] = items[index++];
        while (index < arrayLength)
          deletePropertyOrThrow(array, index++);
        return array;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/sort.js
var require_sort = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/sort.js"(exports, module) {
    require_es_array_sort();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").sort;
  }
});

// node_modules/core-js-pure/es/instance/sort.js
var require_sort2 = __commonJS({
  "node_modules/core-js-pure/es/instance/sort.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_sort();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.sort;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/sort.js
var require_sort3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/sort.js"(exports, module) {
    var parent = require_sort2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
var require_sort4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js"(exports, module) {
    module.exports = require_sort3();
  }
});

// node_modules/core-js-pure/internals/object-to-array.js
var require_object_to_array = __commonJS({
  "node_modules/core-js-pure/internals/object-to-array.js"(exports, module) {
    var DESCRIPTORS = require_descriptors();
    var uncurryThis = require_function_uncurry_this();
    var objectKeys = require_object_keys();
    var toIndexedObject = require_to_indexed_object();
    var $propertyIsEnumerable = require_object_property_is_enumerable().f;
    var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
    var push = uncurryThis([].push);
    var createMethod = function(TO_ENTRIES) {
      return function(it) {
        var O3 = toIndexedObject(it);
        var keys = objectKeys(O3);
        var length = keys.length;
        var i4 = 0;
        var result = [];
        var key2;
        while (length > i4) {
          key2 = keys[i4++];
          if (!DESCRIPTORS || propertyIsEnumerable(O3, key2)) {
            push(result, TO_ENTRIES ? [key2, O3[key2]] : O3[key2]);
          }
        }
        return result;
      };
    };
    module.exports = {
      entries: createMethod(true),
      values: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/modules/es.object.entries.js
var require_es_object_entries = __commonJS({
  "node_modules/core-js-pure/modules/es.object.entries.js"() {
    var $3 = require_export();
    var $entries = require_object_to_array().entries;
    $3({ target: "Object", stat: true }, {
      entries: function entries(O3) {
        return $entries(O3);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/entries.js
var require_entries = __commonJS({
  "node_modules/core-js-pure/es/object/entries.js"(exports, module) {
    require_es_object_entries();
    var path = require_path();
    module.exports = path.Object.entries;
  }
});

// node_modules/core-js-pure/stable/object/entries.js
var require_entries2 = __commonJS({
  "node_modules/core-js-pure/stable/object/entries.js"(exports, module) {
    var parent = require_entries();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js
var require_entries3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js"(exports, module) {
    module.exports = require_entries2();
  }
});

// node_modules/moralis/lib/browser/promiseUtils.js
var require_promiseUtils = __commonJS({
  "node_modules/moralis/lib/browser/promiseUtils.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.continueWhile = continueWhile;
    exports.resolvingPromise = resolvingPromise;
    exports.when = when;
    var _promise = _interopRequireDefault(require_promise3());
    var _isArray = _interopRequireDefault(require_is_array4());
    function resolvingPromise() {
      var res;
      var rej;
      var promise = new _promise.default(function(resolve, reject) {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    function when(promises) {
      var objects;
      var arrayArgument = (0, _isArray.default)(promises);
      if (arrayArgument) {
        objects = promises;
      } else {
        objects = arguments;
      }
      var total = objects.length;
      var hadError = false;
      var results2 = [];
      var returnValue = arrayArgument ? [results2] : results2;
      var errors = [];
      results2.length = objects.length;
      errors.length = objects.length;
      if (total === 0) {
        return _promise.default.resolve(returnValue);
      }
      var promise = new resolvingPromise();
      var resolveOne = function() {
        total--;
        if (total <= 0) {
          if (hadError) {
            promise.reject(errors);
          } else {
            promise.resolve(returnValue);
          }
        }
      };
      var chain = function(object, index) {
        if (object && typeof object.then === "function") {
          object.then(function(result) {
            results2[index] = result;
            resolveOne();
          }, function(error) {
            errors[index] = error;
            hadError = true;
            resolveOne();
          });
        } else {
          results2[index] = object;
          resolveOne();
        }
      };
      for (var i4 = 0; i4 < objects.length; i4++) {
        chain(objects[i4], i4);
      }
      return promise;
    }
    function continueWhile(test, emitter) {
      if (test()) {
        return emitter().then(function() {
          return continueWhile(test, emitter);
        });
      }
      return _promise.default.resolve();
    }
  }
});

// node_modules/moralis/lib/browser/equals.js
var require_equals = __commonJS({
  "node_modules/moralis/lib/browser/equals.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = equals;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function equals(a4, b3) {
      var toString2 = Object.prototype.toString;
      if (toString2.call(a4) === "[object Date]" || toString2.call(b3) === "[object Date]") {
        var dateA = new Date(a4);
        var dateB = new Date(b3);
        return +dateA === +dateB;
      }
      if ((0, _typeof2.default)(a4) !== (0, _typeof2.default)(b3)) {
        return false;
      }
      if (!a4 || (0, _typeof2.default)(a4) !== "object") {
        return a4 === b3;
      }
      if ((0, _isArray.default)(a4) || (0, _isArray.default)(b3)) {
        if (!(0, _isArray.default)(a4) || !(0, _isArray.default)(b3)) {
          return false;
        }
        if (a4.length !== b3.length) {
          return false;
        }
        for (var i4 = a4.length; i4--; ) {
          if (!equals(a4[i4], b3[i4])) {
            return false;
          }
        }
        return true;
      }
      if (a4 instanceof _ParseACL.default || a4 instanceof _ParseFile.default || a4 instanceof _ParseGeoPoint.default || a4 instanceof _ParseObject.default) {
        return a4.equals(b3);
      }
      if (b3 instanceof _ParseObject.default) {
        if (a4.__type === "Object" || a4.__type === "Pointer") {
          return a4.objectId === b3.id && a4.className === b3.className;
        }
      }
      if ((0, _keys.default)(a4).length !== (0, _keys.default)(b3).length) {
        return false;
      }
      for (var k4 in a4) {
        if (!equals(a4[k4], b3[k4])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/moralis/lib/browser/OfflineQuery.js
var require_OfflineQuery = __commonJS({
  "node_modules/moralis/lib/browser/OfflineQuery.js"(exports, module) {
    "use strict";
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray2 = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _slice = _interopRequireDefault(require_slice4());
    var _filter = _interopRequireDefault(require_filter4());
    var _map = _interopRequireDefault(require_map10());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context5;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty2(_context5 = Object.prototype.toString.call(o4)).call(_context5, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    var equalObjects = require_equals().default;
    var decode3 = require_decode().default;
    var ParseError = require_ParseError().default;
    var ParsePolygon = require_ParsePolygon().default;
    var ParseGeoPoint = require_ParseGeoPoint().default;
    function contains(haystack, needle) {
      if (needle && needle.__type && (needle.__type === "Pointer" || needle.__type === "Object")) {
        for (var i4 in haystack) {
          var ptr = haystack[i4];
          if (typeof ptr === "string" && ptr === needle.objectId) {
            return true;
          }
          if (ptr.className === needle.className && ptr.objectId === needle.objectId) {
            return true;
          }
        }
        return false;
      }
      return (0, _indexOf.default)(haystack).call(haystack, needle) > -1;
    }
    function transformObject(object) {
      if (object._toFullJSON) {
        return object._toFullJSON();
      }
      return object;
    }
    function matchesQuery(className, object, objects, query) {
      if (object.className !== className) {
        return false;
      }
      var obj = object;
      var q4 = query;
      if (object.toJSON) {
        obj = object.toJSON();
      }
      if (query.toJSON) {
        q4 = query.toJSON().where;
      }
      obj.className = className;
      for (var field in q4) {
        if (!matchesKeyConstraints(className, obj, objects, field, q4[field])) {
          return false;
        }
      }
      return true;
    }
    function equalObjectsGeneric(obj, compareTo, eqlFn) {
      if ((0, _isArray.default)(obj)) {
        for (var i4 = 0; i4 < obj.length; i4++) {
          if (eqlFn(obj[i4], compareTo)) {
            return true;
          }
        }
        return false;
      }
      return eqlFn(obj, compareTo);
    }
    function matchesKeyConstraints(className, object, objects, key2, constraints) {
      if (constraints === null) {
        return false;
      }
      if ((0, _indexOf.default)(key2).call(key2, ".") >= 0) {
        var keyComponents = key2.split(".");
        var subObjectKey = keyComponents[0];
        var keyRemainder = (0, _slice.default)(keyComponents).call(keyComponents, 1).join(".");
        return matchesKeyConstraints(className, object[subObjectKey] || {}, objects, keyRemainder, constraints);
      }
      var i4;
      if (key2 === "$or") {
        for (i4 = 0; i4 < constraints.length; i4++) {
          if (matchesQuery(className, object, objects, constraints[i4])) {
            return true;
          }
        }
        return false;
      }
      if (key2 === "$and") {
        for (i4 = 0; i4 < constraints.length; i4++) {
          if (!matchesQuery(className, object, objects, constraints[i4])) {
            return false;
          }
        }
        return true;
      }
      if (key2 === "$nor") {
        for (i4 = 0; i4 < constraints.length; i4++) {
          if (matchesQuery(className, object, objects, constraints[i4])) {
            return false;
          }
        }
        return true;
      }
      if (key2 === "$relatedTo") {
        return false;
      }
      if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key2)) {
        throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid Key: ".concat(key2));
      }
      if ((0, _typeof2.default)(constraints) !== "object") {
        if ((0, _isArray.default)(object[key2])) {
          var _context;
          return (0, _indexOf.default)(_context = object[key2]).call(_context, constraints) > -1;
        }
        return object[key2] === constraints;
      }
      var compareTo;
      if (constraints.__type) {
        if (constraints.__type === "Pointer") {
          return equalObjectsGeneric(object[key2], constraints, function(obj, ptr) {
            return typeof obj !== "undefined" && ptr.className === obj.className && ptr.objectId === obj.objectId;
          });
        }
        return equalObjectsGeneric(decode3(object[key2]), decode3(constraints), equalObjects);
      }
      for (var condition in constraints) {
        compareTo = constraints[condition];
        if (compareTo.__type) {
          compareTo = decode3(compareTo);
        }
        if (toString.call(compareTo) === "[object Date]" || typeof compareTo === "string" && new Date(compareTo) !== "Invalid Date" && !isNaN(new Date(compareTo))) {
          object[key2] = new Date(object[key2].iso ? object[key2].iso : object[key2]);
        }
        switch (condition) {
          case "$lt":
            if (object[key2] >= compareTo) {
              return false;
            }
            break;
          case "$lte":
            if (object[key2] > compareTo) {
              return false;
            }
            break;
          case "$gt":
            if (object[key2] <= compareTo) {
              return false;
            }
            break;
          case "$gte":
            if (object[key2] < compareTo) {
              return false;
            }
            break;
          case "$ne":
            if (equalObjects(object[key2], compareTo)) {
              return false;
            }
            break;
          case "$in":
            if (!contains(compareTo, object[key2])) {
              return false;
            }
            break;
          case "$nin":
            if (contains(compareTo, object[key2])) {
              return false;
            }
            break;
          case "$all":
            for (i4 = 0; i4 < compareTo.length; i4++) {
              var _context2;
              if ((0, _indexOf.default)(_context2 = object[key2]).call(_context2, compareTo[i4]) < 0) {
                return false;
              }
            }
            break;
          case "$exists": {
            var propertyExists = typeof object[key2] !== "undefined";
            var existenceIsRequired = constraints.$exists;
            if (typeof constraints.$exists !== "boolean") {
              break;
            }
            if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {
              return false;
            }
            break;
          }
          case "$regex": {
            if ((0, _typeof2.default)(compareTo) === "object") {
              return compareTo.test(object[key2]);
            }
            var expString = "";
            var escapeEnd = -2;
            var escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, "\\Q");
            while (escapeStart > -1) {
              expString += compareTo.substring(escapeEnd + 2, escapeStart);
              escapeEnd = (0, _indexOf.default)(compareTo).call(compareTo, "\\E", escapeStart);
              if (escapeEnd > -1) {
                expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\E/g, "\\E").replace(/\W/g, "\\$&");
              }
              escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, "\\Q", escapeEnd);
            }
            expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));
            var modifiers = constraints.$options || "";
            modifiers = modifiers.replace("x", "").replace("s", "");
            var exp = new RegExp(expString, modifiers);
            if (!exp.test(object[key2])) {
              return false;
            }
            break;
          }
          case "$nearSphere": {
            if (!compareTo || !object[key2]) {
              return false;
            }
            var distance = compareTo.radiansTo(object[key2]);
            var max = constraints.$maxDistance || Infinity;
            return distance <= max;
          }
          case "$within": {
            if (!compareTo || !object[key2]) {
              return false;
            }
            var southWest = compareTo.$box[0];
            var northEast = compareTo.$box[1];
            if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {
              return false;
            }
            return object[key2].latitude > southWest.latitude && object[key2].latitude < northEast.latitude && object[key2].longitude > southWest.longitude && object[key2].longitude < northEast.longitude;
          }
          case "$options":
            break;
          case "$maxDistance":
            break;
          case "$select": {
            var subQueryObjects = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
            });
            for (var _i = 0; _i < subQueryObjects.length; _i += 1) {
              var subObject = transformObject(subQueryObjects[_i]);
              return equalObjects(object[key2], subObject[compareTo.key]);
            }
            return false;
          }
          case "$dontSelect": {
            var _subQueryObjects = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
            });
            for (var _i2 = 0; _i2 < _subQueryObjects.length; _i2 += 1) {
              var _subObject = transformObject(_subQueryObjects[_i2]);
              return !equalObjects(object[key2], _subObject[compareTo.key]);
            }
            return false;
          }
          case "$inQuery": {
            var _subQueryObjects2 = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.className, obj, arr, compareTo.where);
            });
            for (var _i3 = 0; _i3 < _subQueryObjects2.length; _i3 += 1) {
              var _subObject2 = transformObject(_subQueryObjects2[_i3]);
              if (object[key2].className === _subObject2.className && object[key2].objectId === _subObject2.objectId) {
                return true;
              }
            }
            return false;
          }
          case "$notInQuery": {
            var _subQueryObjects3 = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.className, obj, arr, compareTo.where);
            });
            for (var _i4 = 0; _i4 < _subQueryObjects3.length; _i4 += 1) {
              var _subObject3 = transformObject(_subQueryObjects3[_i4]);
              if (object[key2].className === _subObject3.className && object[key2].objectId === _subObject3.objectId) {
                return false;
              }
            }
            return true;
          }
          case "$containedBy": {
            var _iterator = _createForOfIteratorHelper(object[key2]), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var value = _step.value;
                if (!contains(compareTo, value)) {
                  return false;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return true;
          }
          case "$geoWithin": {
            var _context3;
            var points = (0, _map.default)(_context3 = compareTo.$polygon).call(_context3, function(geoPoint) {
              return [geoPoint.latitude, geoPoint.longitude];
            });
            var polygon = new ParsePolygon(points);
            return polygon.containsPoint(object[key2]);
          }
          case "$geoIntersects": {
            var _polygon = new ParsePolygon(object[key2].coordinates);
            var point3 = new ParseGeoPoint(compareTo.$point);
            return _polygon.containsPoint(point3);
          }
          default:
            return false;
        }
      }
      return true;
    }
    function validateQuery(query) {
      var _context4;
      var q4 = query;
      if (query.toJSON) {
        q4 = query.toJSON().where;
      }
      var specialQuerykeys = ["$and", "$or", "$nor", "_rperm", "_wperm", "_perishable_token", "_email_verify_token", "_email_verify_token_expires_at", "_account_lockout_expires_at", "_failed_login_count"];
      (0, _forEach.default)(_context4 = (0, _keys.default)(q4)).call(_context4, function(key2) {
        if (q4 && q4[key2] && q4[key2].$regex) {
          if (typeof q4[key2].$options === "string") {
            if (!q4[key2].$options.match(/^[imxs]+$/)) {
              throw new ParseError(ParseError.INVALID_QUERY, "Bad $options value for query: ".concat(q4[key2].$options));
            }
          }
        }
        if ((0, _indexOf.default)(specialQuerykeys).call(specialQuerykeys, key2) < 0 && !key2.match(/^[a-zA-Z][a-zA-Z0-9_.]*$/)) {
          throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid key name: ".concat(key2));
        }
      });
    }
    var OfflineQuery = {
      matchesQuery,
      validateQuery
    };
    module.exports = OfflineQuery;
  }
});

// node_modules/moralis/lib/browser/LocalDatastoreUtils.js
var require_LocalDatastoreUtils = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastoreUtils.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PIN_PREFIX = exports.OBJECT_PREFIX = exports.DEFAULT_PIN = void 0;
    exports.isLocalDatastoreKey = isLocalDatastoreKey;
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var DEFAULT_PIN = "_default";
    exports.DEFAULT_PIN = DEFAULT_PIN;
    var PIN_PREFIX = "parsePin_";
    exports.PIN_PREFIX = PIN_PREFIX;
    var OBJECT_PREFIX = "Parse_LDS_";
    exports.OBJECT_PREFIX = OBJECT_PREFIX;
    function isLocalDatastoreKey(key2) {
      return !!(key2 && (key2 === DEFAULT_PIN || (0, _startsWith.default)(key2).call(key2, PIN_PREFIX) || (0, _startsWith.default)(key2).call(key2, OBJECT_PREFIX)));
    }
  }
});

// node_modules/moralis/lib/browser/ParseQuery.js
var require_ParseQuery = __commonJS({
  "node_modules/moralis/lib/browser/ParseQuery.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _keys = _interopRequireDefault(require_keys3());
    var _slice = _interopRequireDefault(require_slice4());
    var _map2 = _interopRequireDefault(require_map10());
    var _filter2 = _interopRequireDefault(require_filter4());
    var _keys2 = _interopRequireDefault(require_keys7());
    var _concat = _interopRequireDefault(require_concat4());
    var _includes = _interopRequireDefault(require_includes5());
    var _sort = _interopRequireDefault(require_sort4());
    var _splice = _interopRequireDefault(require_splice4());
    var _promise = _interopRequireDefault(require_promise3());
    var _find = _interopRequireDefault(require_find4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _entries = _interopRequireDefault(require_entries3());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _encode3 = _interopRequireDefault(require_encode());
    var _promiseUtils = require_promiseUtils();
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _OfflineQuery = _interopRequireDefault(require_OfflineQuery());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    function quote(s4) {
      return "\\Q".concat(s4.replace("\\E", "\\E\\\\E\\Q"), "\\E");
    }
    function _getClassNameFromQueries(queries) {
      var className = null;
      (0, _forEach.default)(queries).call(queries, function(q4) {
        if (!className) {
          className = q4.className;
        }
        if (className !== q4.className) {
          throw new Error("All queries must be for the same class.");
        }
      });
      return className;
    }
    function handleSelectResult(data, select) {
      var serverDataMask = {};
      (0, _forEach.default)(select).call(select, function(field) {
        var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, ".") !== -1;
        if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {
          data[field] = void 0;
        } else if (hasSubObjectSelect) {
          var pathComponents = field.split(".");
          var _obj = data;
          var serverMask = serverDataMask;
          (0, _forEach.default)(pathComponents).call(pathComponents, function(component, index, arr) {
            if (_obj && !_obj.hasOwnProperty(component)) {
              _obj[component] = void 0;
            }
            if (_obj && (0, _typeof2.default)(_obj) === "object") {
              _obj = _obj[component];
            }
            if (index < arr.length - 1) {
              if (!serverMask[component]) {
                serverMask[component] = {};
              }
              serverMask = serverMask[component];
            }
          });
        }
      });
      if ((0, _keys.default)(serverDataMask).length > 0) {
        var serverData = _CoreManager.default.getObjectStateController().getServerData({
          id: data.objectId,
          className: data.className
        });
        copyMissingDataWithMask(serverData, data, serverDataMask, false);
      }
    }
    function copyMissingDataWithMask(src, dest, mask, copyThisLevel) {
      if (copyThisLevel) {
        for (var _key in src) {
          if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {
            dest[_key] = src[_key];
          }
        }
      }
      for (var _key2 in mask) {
        if (dest[_key2] !== void 0 && dest[_key2] !== null && src !== void 0 && src !== null) {
          copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);
        }
      }
    }
    function handleOfflineSort(a4, b3, sorts) {
      var order = sorts[0];
      var operator = (0, _slice.default)(order).call(order, 0, 1);
      var isDescending = operator === "-";
      if (isDescending) {
        order = order.substring(1);
      }
      if (order === "_created_at") {
        order = "createdAt";
      }
      if (order === "_updated_at") {
        order = "updatedAt";
      }
      if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === "password") {
        throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, "Invalid Key: ".concat(order));
      }
      var field1 = a4.get(order);
      var field2 = b3.get(order);
      if (field1 < field2) {
        return isDescending ? 1 : -1;
      }
      if (field1 > field2) {
        return isDescending ? -1 : 1;
      }
      if (sorts.length > 1) {
        var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);
        return handleOfflineSort(a4, b3, remainingSorts);
      }
      return 0;
    }
    var ParseQuery = function() {
      function ParseQuery2(objectClass) {
        (0, _classCallCheck2.default)(this, ParseQuery2);
        (0, _defineProperty2.default)(this, "className", void 0);
        (0, _defineProperty2.default)(this, "_where", void 0);
        (0, _defineProperty2.default)(this, "_include", void 0);
        (0, _defineProperty2.default)(this, "_exclude", void 0);
        (0, _defineProperty2.default)(this, "_select", void 0);
        (0, _defineProperty2.default)(this, "_limit", void 0);
        (0, _defineProperty2.default)(this, "_skip", void 0);
        (0, _defineProperty2.default)(this, "_count", void 0);
        (0, _defineProperty2.default)(this, "_order", void 0);
        (0, _defineProperty2.default)(this, "_readPreference", void 0);
        (0, _defineProperty2.default)(this, "_includeReadPreference", void 0);
        (0, _defineProperty2.default)(this, "_subqueryReadPreference", void 0);
        (0, _defineProperty2.default)(this, "_queriesLocalDatastore", void 0);
        (0, _defineProperty2.default)(this, "_localDatastorePinName", void 0);
        (0, _defineProperty2.default)(this, "_extraOptions", void 0);
        (0, _defineProperty2.default)(this, "_hint", void 0);
        (0, _defineProperty2.default)(this, "_explain", void 0);
        (0, _defineProperty2.default)(this, "_xhrRequest", void 0);
        if (typeof objectClass === "string") {
          if (objectClass === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            this.className = "_User";
          } else {
            this.className = objectClass;
          }
        } else if (objectClass instanceof _ParseObject.default) {
          this.className = objectClass.className;
        } else if (typeof objectClass === "function") {
          if (typeof objectClass.className === "string") {
            this.className = objectClass.className;
          } else {
            var _obj2 = new objectClass();
            this.className = _obj2.className;
          }
        } else {
          throw new TypeError("A ParseQuery must be constructed with a ParseObject or class name.");
        }
        this._where = {};
        this._include = [];
        this._exclude = [];
        this._count = false;
        this._limit = -1;
        this._skip = 0;
        this._readPreference = null;
        this._includeReadPreference = null;
        this._subqueryReadPreference = null;
        this._queriesLocalDatastore = false;
        this._localDatastorePinName = null;
        this._extraOptions = {};
        this._xhrRequest = {
          task: null,
          onchange: function() {
          }
        };
      }
      (0, _createClass2.default)(ParseQuery2, [{
        key: "_orQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q4) {
            return q4.toJSON().where;
          });
          this._where.$or = queryJSON;
          return this;
        }
      }, {
        key: "_andQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q4) {
            return q4.toJSON().where;
          });
          this._where.$and = queryJSON;
          return this;
        }
      }, {
        key: "_norQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q4) {
            return q4.toJSON().where;
          });
          this._where.$nor = queryJSON;
          return this;
        }
      }, {
        key: "_addCondition",
        value: function(key2, condition, value) {
          if (!this._where[key2] || typeof this._where[key2] === "string") {
            this._where[key2] = {};
          }
          this._where[key2][condition] = (0, _encode3.default)(value, false, true);
          return this;
        }
      }, {
        key: "_regexStartWith",
        value: function(string) {
          return "^".concat(quote(string));
        }
      }, {
        key: "_handleOfflineQuery",
        value: function() {
          var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(params) {
            var _context, _this2 = this;
            var localDatastore, objects, results2, keys, alwaysSelectedKeys, sorts, count, limit;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _OfflineQuery.default.validateQuery(this);
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    _context3.next = 4;
                    return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);
                  case 4:
                    objects = _context3.sent;
                    results2 = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function(json, index, arr) {
                      var object = _ParseObject.default.fromJSON(json, false);
                      if (json._localId && !json.objectId) {
                        object._localId = json._localId;
                      }
                      if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {
                        return null;
                      }
                      return object;
                    })).call(_context, function(object) {
                      return object !== null;
                    });
                    if ((0, _keys2.default)(params)) {
                      keys = (0, _keys2.default)(params).split(",");
                      alwaysSelectedKeys = ["className", "objectId", "createdAt", "updatedAt", "ACL"];
                      keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);
                      results2 = (0, _map2.default)(results2).call(results2, function(object) {
                        var _context2;
                        var json = object._toFullJSON();
                        (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function(key2) {
                          if (!(0, _includes.default)(keys).call(keys, key2)) {
                            delete json[key2];
                          }
                        });
                        return _ParseObject.default.fromJSON(json, false);
                      });
                    }
                    if (params.order) {
                      sorts = params.order.split(",");
                      (0, _sort.default)(results2).call(results2, function(a4, b3) {
                        return handleOfflineSort(a4, b3, sorts);
                      });
                    }
                    if (params.count) {
                      count = results2.length;
                    }
                    if (params.skip) {
                      if (params.skip >= results2.length) {
                        results2 = [];
                      } else {
                        results2 = (0, _splice.default)(results2).call(results2, params.skip, results2.length);
                      }
                    }
                    limit = results2.length;
                    if (params.limit !== 0 && params.limit < results2.length) {
                      limit = params.limit;
                    }
                    results2 = (0, _splice.default)(results2).call(results2, 0, limit);
                    if (!(typeof count === "number")) {
                      _context3.next = 15;
                      break;
                    }
                    return _context3.abrupt("return", {
                      results: results2,
                      count
                    });
                  case 15:
                    return _context3.abrupt("return", results2);
                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _handleOfflineQuery2.apply(this, arguments);
          };
        }()
      }, {
        key: "toJSON",
        value: function() {
          var params = {
            where: this._where
          };
          if (this._include.length) {
            params.include = this._include.join(",");
          }
          if (this._exclude.length) {
            params.excludeKeys = this._exclude.join(",");
          }
          if (this._select) {
            params.keys = this._select.join(",");
          }
          if (this._count) {
            params.count = 1;
          }
          if (this._limit >= 0) {
            params.limit = this._limit;
          }
          if (this._skip > 0) {
            params.skip = this._skip;
          }
          if (this._order) {
            params.order = this._order.join(",");
          }
          if (this._readPreference) {
            params.readPreference = this._readPreference;
          }
          if (this._includeReadPreference) {
            params.includeReadPreference = this._includeReadPreference;
          }
          if (this._subqueryReadPreference) {
            params.subqueryReadPreference = this._subqueryReadPreference;
          }
          if (this._hint) {
            params.hint = this._hint;
          }
          if (this._explain) {
            params.explain = true;
          }
          for (var _key3 in this._extraOptions) {
            params[_key3] = this._extraOptions[_key3];
          }
          return params;
        }
      }, {
        key: "withJSON",
        value: function(json) {
          if (json.where) {
            this._where = json.where;
          }
          if (json.include) {
            this._include = json.include.split(",");
          }
          if ((0, _keys2.default)(json)) {
            this._select = (0, _keys2.default)(json).split(",");
          }
          if (json.excludeKeys) {
            this._exclude = json.excludeKeys.split(",");
          }
          if (json.count) {
            this._count = json.count === 1;
          }
          if (json.limit) {
            this._limit = json.limit;
          }
          if (json.skip) {
            this._skip = json.skip;
          }
          if (json.order) {
            this._order = json.order.split(",");
          }
          if (json.readPreference) {
            this._readPreference = json.readPreference;
          }
          if (json.includeReadPreference) {
            this._includeReadPreference = json.includeReadPreference;
          }
          if (json.subqueryReadPreference) {
            this._subqueryReadPreference = json.subqueryReadPreference;
          }
          if (json.hint) {
            this._hint = json.hint;
          }
          if (json.explain) {
            this._explain = !!json.explain;
          }
          for (var _key4 in json) {
            if (json.hasOwnProperty(_key4)) {
              var _context4;
              if ((0, _indexOf.default)(_context4 = ["where", "include", "keys", "count", "limit", "skip", "order", "readPreference", "includeReadPreference", "subqueryReadPreference", "hint", "explain"]).call(_context4, _key4) === -1) {
                this._extraOptions[_key4] = json[_key4];
              }
            }
          }
          return this;
        }
      }, {
        key: "get",
        value: function(objectId, options) {
          this.equalTo("objectId", objectId);
          var firstOptions = {};
          if (options && options.hasOwnProperty("useMasterKey")) {
            firstOptions.useMasterKey = options.useMasterKey;
          }
          if (options && options.hasOwnProperty("sessionToken")) {
            firstOptions.sessionToken = options.sessionToken;
          }
          if (options && options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            firstOptions.context = options.context;
          }
          return this.first(firstOptions).then(function(response) {
            if (response) {
              return response;
            }
            var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, "Object not found.");
            return _promise.default.reject(errorObject);
          });
        }
      }, {
        key: "find",
        value: function(options) {
          var _this3 = this;
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var select = this._select;
          if (this._queriesLocalDatastore) {
            return this._handleOfflineQuery(this.toJSON());
          }
          return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function(response) {
            var _context5;
            if (_this3._explain) {
              return response.results;
            }
            var results2 = (0, _map2.default)(_context5 = response.results).call(_context5, function(data) {
              var override = response.className || _this3.className;
              if (!data.className) {
                data.className = override;
              }
              if (select) {
                handleSelectResult(data, select);
              }
              return _ParseObject.default.fromJSON(data, !select);
            });
            var count = response.count;
            if (typeof count === "number") {
              return {
                results: results2,
                count
              };
            }
            return results2;
          });
        }
      }, {
        key: "findAll",
        value: function() {
          var _findAll = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(options) {
            var result;
            return _regenerator.default.wrap(function(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    result = [];
                    _context7.next = 3;
                    return this.eachBatch(function(objects) {
                      var _context6;
                      result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));
                    }, options);
                  case 3:
                    return _context7.abrupt("return", result);
                  case 4:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _findAll.apply(this, arguments);
          };
        }()
      }, {
        key: "count",
        value: function(options) {
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = this.toJSON();
          params.limit = 0;
          params.count = 1;
          return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function(result) {
            return result.count;
          });
        }
      }, {
        key: "distinct",
        value: function(key2, options) {
          options = options || {};
          var distinctOptions = {};
          distinctOptions.useMasterKey = true;
          if (options.hasOwnProperty("sessionToken")) {
            distinctOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(distinctOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = {
            distinct: key2,
            where: this._where,
            hint: this._hint
          };
          return controller.aggregate(this.className, params, distinctOptions).then(function(results2) {
            return results2.results;
          });
        }
      }, {
        key: "aggregate",
        value: function(pipeline, options) {
          options = options || {};
          var aggregateOptions = {};
          aggregateOptions.useMasterKey = true;
          if (options.hasOwnProperty("sessionToken")) {
            aggregateOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(aggregateOptions);
          var controller = _CoreManager.default.getQueryController();
          if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== "object") {
            throw new Error("Invalid pipeline must be Array or Object");
          }
          if ((0, _keys.default)(this._where || {}).length) {
            if (!(0, _isArray.default)(pipeline)) {
              pipeline = [pipeline];
            }
            pipeline.unshift({
              match: this._where
            });
          }
          var params = {
            pipeline,
            hint: this._hint,
            explain: this._explain,
            readPreference: this._readPreference
          };
          return controller.aggregate(this.className, params, aggregateOptions).then(function(results2) {
            return results2.results;
          });
        }
      }, {
        key: "first",
        value: function(options) {
          var _this4 = this;
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = this.toJSON();
          params.limit = 1;
          var select = this._select;
          if (this._queriesLocalDatastore) {
            return this._handleOfflineQuery(params).then(function(objects) {
              if (!objects[0]) {
                return void 0;
              }
              return objects[0];
            });
          }
          return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function(response) {
            var objects = response.results;
            if (!objects[0]) {
              return void 0;
            }
            if (!objects[0].className) {
              objects[0].className = _this4.className;
            }
            if (select) {
              handleSelectResult(objects[0], select);
            }
            return _ParseObject.default.fromJSON(objects[0], !select);
          });
        }
      }, {
        key: "eachBatch",
        value: function(callback, options) {
          var _context8;
          options = options || {};
          if (this._order || this._skip || this._limit >= 0) {
            return _promise.default.reject("Cannot iterate on a query with sort, skip, or limit.");
          }
          var query = new ParseQuery2(this.className);
          query._limit = options.batchSize || 100;
          query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function(i4) {
            return i4;
          });
          if (this._select) {
            var _context9;
            query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function(s4) {
              return s4;
            });
          }
          query._hint = this._hint;
          query._where = {};
          for (var _attr in this._where) {
            var val = this._where[_attr];
            if ((0, _isArray.default)(val)) {
              query._where[_attr] = (0, _map2.default)(val).call(val, function(v4) {
                return v4;
              });
            } else if (val && (0, _typeof2.default)(val) === "object") {
              var conditionMap = {};
              query._where[_attr] = conditionMap;
              for (var cond in val) {
                conditionMap[cond] = val[cond];
              }
            } else {
              query._where[_attr] = val;
            }
          }
          query.ascending("objectId");
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          var finished = false;
          var previousResults = [];
          return (0, _promiseUtils.continueWhile)(function() {
            return !finished;
          }, (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
            var _yield$Promise$all, _yield$Promise$all2, results2;
            return _regenerator.default.wrap(function(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);
                  case 2:
                    _yield$Promise$all = _context10.sent;
                    _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
                    results2 = _yield$Promise$all2[0];
                    if (!(results2.length >= query._limit)) {
                      _context10.next = 10;
                      break;
                    }
                    query.greaterThan("objectId", results2[results2.length - 1].id);
                    previousResults = results2;
                    _context10.next = 17;
                    break;
                  case 10:
                    if (!(results2.length > 0)) {
                      _context10.next = 16;
                      break;
                    }
                    _context10.next = 13;
                    return _promise.default.resolve(callback(results2));
                  case 13:
                    finished = true;
                    _context10.next = 17;
                    break;
                  case 16:
                    finished = true;
                  case 17:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee3);
          })));
        }
      }, {
        key: "each",
        value: function(callback, options) {
          return this.eachBatch(function(results2) {
            var callbacksDone = _promise.default.resolve();
            (0, _forEach.default)(results2).call(results2, function(result) {
              callbacksDone = callbacksDone.then(function() {
                return callback(result);
              });
            });
            return callbacksDone;
          }, options);
        }
      }, {
        key: "hint",
        value: function(value) {
          if (typeof value === "undefined") {
            delete this._hint;
          }
          this._hint = value;
          return this;
        }
      }, {
        key: "explain",
        value: function() {
          var _explain = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          if (typeof _explain !== "boolean") {
            throw new Error("You can only set explain to a boolean value");
          }
          this._explain = _explain;
          return this;
        }
      }, {
        key: "map",
        value: function() {
          var _map = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(callback, options) {
            var _this5 = this;
            var array, index;
            return _regenerator.default.wrap(function(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    array = [];
                    index = 0;
                    _context11.next = 4;
                    return this.each(function(object) {
                      return _promise.default.resolve(callback(object, index, _this5)).then(function(result) {
                        array.push(result);
                        index += 1;
                      });
                    }, options);
                  case 4:
                    return _context11.abrupt("return", array);
                  case 5:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee4, this);
          }));
          return function() {
            return _map.apply(this, arguments);
          };
        }()
      }, {
        key: "reduce",
        value: function() {
          var _reduce = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(callback, initialValue, options) {
            var accumulator, index;
            return _regenerator.default.wrap(function(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    accumulator = initialValue;
                    index = 0;
                    _context12.next = 4;
                    return this.each(function(object) {
                      if (index === 0 && initialValue === void 0) {
                        accumulator = object;
                        index += 1;
                        return;
                      }
                      return _promise.default.resolve(callback(accumulator, object, index)).then(function(result) {
                        accumulator = result;
                        index += 1;
                      });
                    }, options);
                  case 4:
                    if (!(index === 0 && initialValue === void 0)) {
                      _context12.next = 6;
                      break;
                    }
                    throw new TypeError("Reducing empty query result set with no initial value");
                  case 6:
                    return _context12.abrupt("return", accumulator);
                  case 7:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee5, this);
          }));
          return function() {
            return _reduce.apply(this, arguments);
          };
        }()
      }, {
        key: "filter",
        value: function() {
          var _filter = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(callback, options) {
            var _this6 = this;
            var array, index;
            return _regenerator.default.wrap(function(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    array = [];
                    index = 0;
                    _context13.next = 4;
                    return this.each(function(object) {
                      return _promise.default.resolve(callback(object, index, _this6)).then(function(flag) {
                        if (flag) {
                          array.push(object);
                        }
                        index += 1;
                      });
                    }, options);
                  case 4:
                    return _context13.abrupt("return", array);
                  case 5:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee6, this);
          }));
          return function() {
            return _filter.apply(this, arguments);
          };
        }()
      }, {
        key: "equalTo",
        value: function(key2, value) {
          var _this7 = this;
          if (key2 && (0, _typeof2.default)(key2) === "object") {
            var _context14;
            (0, _forEach.default)(_context14 = (0, _entries.default)(key2)).call(_context14, function(_ref2) {
              var _ref3 = (0, _slicedToArray2.default)(_ref2, 2), k4 = _ref3[0], val = _ref3[1];
              return _this7.equalTo(k4, val);
            });
            return this;
          }
          if (typeof value === "undefined") {
            return this.doesNotExist(key2);
          }
          this._where[key2] = (0, _encode3.default)(value, false, true);
          return this;
        }
      }, {
        key: "notEqualTo",
        value: function(key2, value) {
          var _this8 = this;
          if (key2 && (0, _typeof2.default)(key2) === "object") {
            var _context15;
            (0, _forEach.default)(_context15 = (0, _entries.default)(key2)).call(_context15, function(_ref4) {
              var _ref5 = (0, _slicedToArray2.default)(_ref4, 2), k4 = _ref5[0], val = _ref5[1];
              return _this8.notEqualTo(k4, val);
            });
            return this;
          }
          return this._addCondition(key2, "$ne", value);
        }
      }, {
        key: "lessThan",
        value: function(key2, value) {
          return this._addCondition(key2, "$lt", value);
        }
      }, {
        key: "greaterThan",
        value: function(key2, value) {
          return this._addCondition(key2, "$gt", value);
        }
      }, {
        key: "lessThanOrEqualTo",
        value: function(key2, value) {
          return this._addCondition(key2, "$lte", value);
        }
      }, {
        key: "greaterThanOrEqualTo",
        value: function(key2, value) {
          return this._addCondition(key2, "$gte", value);
        }
      }, {
        key: "containedIn",
        value: function(key2, value) {
          return this._addCondition(key2, "$in", value);
        }
      }, {
        key: "notContainedIn",
        value: function(key2, value) {
          return this._addCondition(key2, "$nin", value);
        }
      }, {
        key: "containedBy",
        value: function(key2, values) {
          return this._addCondition(key2, "$containedBy", values);
        }
      }, {
        key: "containsAll",
        value: function(key2, values) {
          return this._addCondition(key2, "$all", values);
        }
      }, {
        key: "containsAllStartingWith",
        value: function(key2, values) {
          var _this = this;
          if (!(0, _isArray.default)(values)) {
            values = [values];
          }
          var regexObject = (0, _map2.default)(values).call(values, function(value) {
            return {
              $regex: _this._regexStartWith(value)
            };
          });
          return this.containsAll(key2, regexObject);
        }
      }, {
        key: "exists",
        value: function(key2) {
          return this._addCondition(key2, "$exists", true);
        }
      }, {
        key: "doesNotExist",
        value: function(key2) {
          return this._addCondition(key2, "$exists", false);
        }
      }, {
        key: "matches",
        value: function(key2, regex, modifiers) {
          this._addCondition(key2, "$regex", regex);
          if (!modifiers) {
            modifiers = "";
          }
          if (regex.ignoreCase) {
            modifiers += "i";
          }
          if (regex.multiline) {
            modifiers += "m";
          }
          if (modifiers.length) {
            this._addCondition(key2, "$options", modifiers);
          }
          return this;
        }
      }, {
        key: "matchesQuery",
        value: function(key2, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key2, "$inQuery", queryJSON);
        }
      }, {
        key: "doesNotMatchQuery",
        value: function(key2, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key2, "$notInQuery", queryJSON);
        }
      }, {
        key: "matchesKeyInQuery",
        value: function(key2, queryKey, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key2, "$select", {
            key: queryKey,
            query: queryJSON
          });
        }
      }, {
        key: "doesNotMatchKeyInQuery",
        value: function(key2, queryKey, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key2, "$dontSelect", {
            key: queryKey,
            query: queryJSON
          });
        }
      }, {
        key: "contains",
        value: function(key2, substring) {
          if (typeof substring !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key2, "$regex", quote(substring));
        }
      }, {
        key: "fullText",
        value: function(key2, value, options) {
          options = options || {};
          if (!key2) {
            throw new Error("A key is required.");
          }
          if (!value) {
            throw new Error("A search term is required");
          }
          if (typeof value !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          var fullOptions = {};
          fullOptions.$term = value;
          for (var option in options) {
            switch (option) {
              case "language":
                fullOptions.$language = options[option];
                break;
              case "caseSensitive":
                fullOptions.$caseSensitive = options[option];
                break;
              case "diacriticSensitive":
                fullOptions.$diacriticSensitive = options[option];
                break;
              default:
                throw new Error("Unknown option: ".concat(option));
            }
          }
          return this._addCondition(key2, "$text", {
            $search: fullOptions
          });
        }
      }, {
        key: "sortByTextScore",
        value: function() {
          this.ascending("$score");
          this.select(["$score"]);
          return this;
        }
      }, {
        key: "startsWith",
        value: function(key2, prefix) {
          if (typeof prefix !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key2, "$regex", this._regexStartWith(prefix));
        }
      }, {
        key: "endsWith",
        value: function(key2, suffix) {
          if (typeof suffix !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key2, "$regex", "".concat(quote(suffix), "$"));
        }
      }, {
        key: "near",
        value: function(key2, point3) {
          if (!(point3 instanceof _ParseGeoPoint.default)) {
            point3 = new _ParseGeoPoint.default(point3);
          }
          return this._addCondition(key2, "$nearSphere", point3);
        }
      }, {
        key: "withinRadians",
        value: function(key2, point3, maxDistance, sorted) {
          if (sorted || sorted === void 0) {
            this.near(key2, point3);
            return this._addCondition(key2, "$maxDistance", maxDistance);
          }
          return this._addCondition(key2, "$geoWithin", {
            $centerSphere: [[point3.longitude, point3.latitude], maxDistance]
          });
        }
      }, {
        key: "withinMiles",
        value: function(key2, point3, maxDistance, sorted) {
          return this.withinRadians(key2, point3, maxDistance / 3958.8, sorted);
        }
      }, {
        key: "withinKilometers",
        value: function(key2, point3, maxDistance, sorted) {
          return this.withinRadians(key2, point3, maxDistance / 6371, sorted);
        }
      }, {
        key: "withinGeoBox",
        value: function(key2, southwest, northeast) {
          if (!(southwest instanceof _ParseGeoPoint.default)) {
            southwest = new _ParseGeoPoint.default(southwest);
          }
          if (!(northeast instanceof _ParseGeoPoint.default)) {
            northeast = new _ParseGeoPoint.default(northeast);
          }
          this._addCondition(key2, "$within", {
            $box: [southwest, northeast]
          });
          return this;
        }
      }, {
        key: "withinPolygon",
        value: function(key2, points) {
          return this._addCondition(key2, "$geoWithin", {
            $polygon: points
          });
        }
      }, {
        key: "polygonContains",
        value: function(key2, point3) {
          return this._addCondition(key2, "$geoIntersects", {
            $point: point3
          });
        }
      }, {
        key: "ascending",
        value: function() {
          this._order = [];
          for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {
            keys[_key5] = arguments[_key5];
          }
          return this.addAscending.apply(this, keys);
        }
      }, {
        key: "addAscending",
        value: function() {
          var _this9 = this;
          if (!this._order) {
            this._order = [];
          }
          for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {
            keys[_key6] = arguments[_key6];
          }
          (0, _forEach.default)(keys).call(keys, function(key2) {
            var _context16;
            if ((0, _isArray.default)(key2)) {
              key2 = key2.join();
            }
            _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key2.replace(/\s/g, "").split(","));
          });
          return this;
        }
      }, {
        key: "descending",
        value: function() {
          this._order = [];
          for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {
            keys[_key7] = arguments[_key7];
          }
          return this.addDescending.apply(this, keys);
        }
      }, {
        key: "addDescending",
        value: function() {
          var _this10 = this;
          if (!this._order) {
            this._order = [];
          }
          for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {
            keys[_key8] = arguments[_key8];
          }
          (0, _forEach.default)(keys).call(keys, function(key2) {
            var _context17, _context18;
            if ((0, _isArray.default)(key2)) {
              key2 = key2.join();
            }
            _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key2.replace(/\s/g, "").split(",")).call(_context18, function(k4) {
              return "-".concat(k4);
            }));
          });
          return this;
        }
      }, {
        key: "skip",
        value: function(n3) {
          if (typeof n3 !== "number" || n3 < 0) {
            throw new Error("You can only skip by a positive number");
          }
          this._skip = n3;
          return this;
        }
      }, {
        key: "limit",
        value: function(n3) {
          if (typeof n3 !== "number") {
            throw new Error("You can only set the limit to a numeric value");
          }
          this._limit = n3;
          return this;
        }
      }, {
        key: "withCount",
        value: function() {
          var includeCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          if (typeof includeCount !== "boolean") {
            throw new Error("You can only set withCount to a boolean value");
          }
          this._count = includeCount;
          return this;
        }
      }, {
        key: "include",
        value: function() {
          var _this11 = this;
          for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {
            keys[_key9] = arguments[_key9];
          }
          (0, _forEach.default)(keys).call(keys, function(key2) {
            if ((0, _isArray.default)(key2)) {
              var _context19;
              _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key2);
            } else {
              _this11._include.push(key2);
            }
          });
          return this;
        }
      }, {
        key: "includeAll",
        value: function() {
          return this.include("*");
        }
      }, {
        key: "select",
        value: function() {
          var _this12 = this;
          if (!this._select) {
            this._select = [];
          }
          for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {
            keys[_key10] = arguments[_key10];
          }
          (0, _forEach.default)(keys).call(keys, function(key2) {
            if ((0, _isArray.default)(key2)) {
              var _context20;
              _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key2);
            } else {
              _this12._select.push(key2);
            }
          });
          return this;
        }
      }, {
        key: "exclude",
        value: function() {
          var _this13 = this;
          for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {
            keys[_key11] = arguments[_key11];
          }
          (0, _forEach.default)(keys).call(keys, function(key2) {
            if ((0, _isArray.default)(key2)) {
              var _context21;
              _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key2);
            } else {
              _this13._exclude.push(key2);
            }
          });
          return this;
        }
      }, {
        key: "readPreference",
        value: function(_readPreference, includeReadPreference, subqueryReadPreference) {
          this._readPreference = _readPreference;
          this._includeReadPreference = includeReadPreference;
          this._subqueryReadPreference = subqueryReadPreference;
          return this;
        }
      }, {
        key: "onChange",
        value: function(onUpdate, onError) {
          var sub = null;
          this.subscribe().then(function(subscription) {
            sub = subscription;
            subscription.on("create", function(object) {
              onUpdate(object);
            });
            subscription.on("update", function(object) {
              onUpdate(object);
            });
            subscription.on("error", function(err) {
              if (onError) {
                onError(err);
              } else {
                console.warn("Moralis: Subscription error", err);
              }
            });
          }).catch(function(err) {
            if (onError) {
              onError(err);
            } else {
              console.warn("Moralis: Subscription connection error", err);
            }
          });
          return function() {
            if (sub) {
              sub.unsubscribe();
            }
          };
        }
      }, {
        key: "subscribe",
        value: function() {
          var _subscribe = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7(sessionToken) {
            var currentUser, liveQueryClient, subscription;
            return _regenerator.default.wrap(function(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    _context22.next = 2;
                    return _CoreManager.default.getUserController().currentUserAsync();
                  case 2:
                    currentUser = _context22.sent;
                    if (!sessionToken) {
                      sessionToken = currentUser ? currentUser.getSessionToken() : void 0;
                    }
                    _context22.next = 6;
                    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
                  case 6:
                    liveQueryClient = _context22.sent;
                    if (liveQueryClient.shouldOpen()) {
                      liveQueryClient.open();
                    }
                    subscription = liveQueryClient.subscribe(this, sessionToken);
                    return _context22.abrupt("return", subscription.subscribePromise.then(function() {
                      return subscription;
                    }));
                  case 10:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee7, this);
          }));
          return function() {
            return _subscribe.apply(this, arguments);
          };
        }()
      }, {
        key: "fromNetwork",
        value: function() {
          this._queriesLocalDatastore = false;
          this._localDatastorePinName = null;
          return this;
        }
      }, {
        key: "fromLocalDatastore",
        value: function() {
          return this.fromPinWithName(null);
        }
      }, {
        key: "fromPin",
        value: function() {
          return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);
        }
      }, {
        key: "fromPinWithName",
        value: function(name2) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (localDatastore.checkIfEnabled()) {
            this._queriesLocalDatastore = true;
            this._localDatastorePinName = name2;
          }
          return this;
        }
      }, {
        key: "cancel",
        value: function() {
          var _this14 = this;
          if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === "function") {
            this._xhrRequest.task._aborted = true;
            this._xhrRequest.task.abort();
            this._xhrRequest.task = null;
            this._xhrRequest.onchange = function() {
            };
            return this;
          }
          return this._xhrRequest.onchange = function() {
            return _this14.cancel();
          };
        }
      }, {
        key: "_setRequestTask",
        value: function(options) {
          var _this15 = this;
          options.requestTask = function(task) {
            _this15._xhrRequest.task = task;
            _this15._xhrRequest.onchange();
          };
        }
      }], [{
        key: "fromJSON",
        value: function(className, json) {
          var query = new ParseQuery2(className);
          return query.withJSON(json);
        }
      }, {
        key: "or",
        value: function() {
          for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {
            queries[_key12] = arguments[_key12];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._orQuery(queries);
          return query;
        }
      }, {
        key: "and",
        value: function() {
          for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {
            queries[_key13] = arguments[_key13];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._andQuery(queries);
          return query;
        }
      }, {
        key: "nor",
        value: function() {
          for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {
            queries[_key14] = arguments[_key14];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._norQuery(queries);
          return query;
        }
      }]);
      return ParseQuery2;
    }();
    var DefaultController = {
      find: function(className, params, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "classes/".concat(className), params, options);
      },
      aggregate: function(className, params, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "aggregate/".concat(className), params, options);
      }
    };
    _CoreManager.default.setQueryController(DefaultController);
    var _default = ParseQuery;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseRelation.js
var require_ParseRelation = __commonJS({
  "node_modules/moralis/lib/browser/ParseRelation.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseOp = require_ParseOp();
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var ParseRelation = function() {
      function ParseRelation2(parent, key2) {
        (0, _classCallCheck2.default)(this, ParseRelation2);
        (0, _defineProperty2.default)(this, "parent", void 0);
        (0, _defineProperty2.default)(this, "key", void 0);
        (0, _defineProperty2.default)(this, "targetClassName", void 0);
        this.parent = parent;
        this.key = key2;
        this.targetClassName = null;
      }
      (0, _createClass2.default)(ParseRelation2, [{
        key: "_ensureParentAndKey",
        value: function(parent, key2) {
          this.key = this.key || key2;
          if (this.key !== key2) {
            throw new Error("Internal Error. Relation retrieved from two different keys.");
          }
          if (this.parent) {
            if (this.parent.className !== parent.className) {
              throw new Error("Internal Error. Relation retrieved from two different Objects.");
            }
            if (this.parent.id) {
              if (this.parent.id !== parent.id) {
                throw new Error("Internal Error. Relation retrieved from two different Objects.");
              }
            } else if (parent.id) {
              this.parent = parent;
            }
          } else {
            this.parent = parent;
          }
        }
      }, {
        key: "add",
        value: function(objects) {
          if (!(0, _isArray.default)(objects)) {
            objects = [objects];
          }
          var change = new _ParseOp.RelationOp(objects, []);
          var parent = this.parent;
          if (!parent) {
            throw new Error("Cannot add to a Relation without a parent");
          }
          if (objects.length === 0) {
            return parent;
          }
          parent.set(this.key, change);
          this.targetClassName = change._targetClassName;
          return parent;
        }
      }, {
        key: "remove",
        value: function(objects) {
          if (!(0, _isArray.default)(objects)) {
            objects = [objects];
          }
          var change = new _ParseOp.RelationOp([], objects);
          if (!this.parent) {
            throw new Error("Cannot remove from a Relation without a parent");
          }
          if (objects.length === 0) {
            return;
          }
          this.parent.set(this.key, change);
          this.targetClassName = change._targetClassName;
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __type: "Relation",
            className: this.targetClassName
          };
        }
      }, {
        key: "query",
        value: function query() {
          var query2;
          var parent = this.parent;
          if (!parent) {
            throw new Error("Cannot construct a query for a Relation without a parent");
          }
          if (!this.targetClassName) {
            query2 = new _ParseQuery.default(parent.className);
            query2._extraOptions.redirectClassNameForKey = this.key;
          } else {
            query2 = new _ParseQuery.default(this.targetClassName);
          }
          query2._addCondition("$relatedTo", "object", {
            __type: "Pointer",
            className: parent.className,
            objectId: parent.id
          });
          query2._addCondition("$relatedTo", "key", this.key);
          return query2;
        }
      }]);
      return ParseRelation2;
    }();
    var _default = ParseRelation;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/canBeSerialized.js
var require_canBeSerialized = __commonJS({
  "node_modules/moralis/lib/browser/canBeSerialized.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = canBeSerialized;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function canBeSerialized(obj) {
      if (!(obj instanceof _ParseObject.default)) {
        return true;
      }
      var attributes = obj.attributes;
      for (var attr in attributes) {
        var val = attributes[attr];
        if (!canBeSerializedHelper(val)) {
          return false;
        }
      }
      return true;
    }
    function canBeSerializedHelper(value) {
      if ((0, _typeof2.default)(value) !== "object") {
        return true;
      }
      if (value instanceof _ParseRelation.default) {
        return true;
      }
      if (value instanceof _ParseObject.default) {
        return !!value.id;
      }
      if (value instanceof _ParseFile.default) {
        if (value.url()) {
          return true;
        }
        return false;
      }
      if ((0, _isArray.default)(value)) {
        for (var i4 = 0; i4 < value.length; i4++) {
          if (!canBeSerializedHelper(value[i4])) {
            return false;
          }
        }
        return true;
      }
      for (var k4 in value) {
        if (!canBeSerializedHelper(value[k4])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/moralis/lib/browser/escape.js
var require_escape = __commonJS({
  "node_modules/moralis/lib/browser/escape.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = escape2;
    var encoded = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "/": "&#x2F;",
      "'": "&#x27;",
      '"': "&quot;"
    };
    function escape2(str) {
      return str.replace(/[&<>/'"]/g, function(char) {
        return encoded[char];
      });
    }
  }
});

// node_modules/core-js-pure/internals/whitespaces.js
var require_whitespaces = __commonJS({
  "node_modules/core-js-pure/internals/whitespaces.js"(exports, module) {
    module.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  }
});

// node_modules/core-js-pure/internals/string-trim.js
var require_string_trim = __commonJS({
  "node_modules/core-js-pure/internals/string-trim.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var toString2 = require_to_string();
    var whitespaces = require_whitespaces();
    var replace = uncurryThis("".replace);
    var whitespace = "[" + whitespaces + "]";
    var ltrim = RegExp("^" + whitespace + whitespace + "*");
    var rtrim = RegExp(whitespace + whitespace + "*$");
    var createMethod = function(TYPE) {
      return function($this) {
        var string = toString2(requireObjectCoercible($this));
        if (TYPE & 1)
          string = replace(string, ltrim, "");
        if (TYPE & 2)
          string = replace(string, rtrim, "");
        return string;
      };
    };
    module.exports = {
      start: createMethod(1),
      end: createMethod(2),
      trim: createMethod(3)
    };
  }
});

// node_modules/core-js-pure/internals/number-parse-int.js
var require_number_parse_int = __commonJS({
  "node_modules/core-js-pure/internals/number-parse-int.js"(exports, module) {
    var global2 = require_global();
    var fails = require_fails();
    var uncurryThis = require_function_uncurry_this();
    var toString2 = require_to_string();
    var trim = require_string_trim().trim;
    var whitespaces = require_whitespaces();
    var $parseInt = global2.parseInt;
    var Symbol2 = global2.Symbol;
    var ITERATOR = Symbol2 && Symbol2.iterator;
    var hex = /^[+-]?0x/i;
    var exec = uncurryThis(hex.exec);
    var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
      $parseInt(Object(ITERATOR));
    });
    module.exports = FORCED ? function parseInt2(string, radix) {
      var S3 = trim(toString2(string));
      return $parseInt(S3, radix >>> 0 || (exec(hex, S3) ? 16 : 10));
    } : $parseInt;
  }
});

// node_modules/core-js-pure/modules/es.parse-int.js
var require_es_parse_int = __commonJS({
  "node_modules/core-js-pure/modules/es.parse-int.js"() {
    var $3 = require_export();
    var $parseInt = require_number_parse_int();
    $3({ global: true, forced: parseInt != $parseInt }, {
      parseInt: $parseInt
    });
  }
});

// node_modules/core-js-pure/es/parse-int.js
var require_parse_int = __commonJS({
  "node_modules/core-js-pure/es/parse-int.js"(exports, module) {
    require_es_parse_int();
    var path = require_path();
    module.exports = path.parseInt;
  }
});

// node_modules/core-js-pure/stable/parse-int.js
var require_parse_int2 = __commonJS({
  "node_modules/core-js-pure/stable/parse-int.js"(exports, module) {
    var parent = require_parse_int();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js
var require_parse_int3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js"(exports, module) {
    module.exports = require_parse_int2();
  }
});

// node_modules/moralis/lib/browser/parseDate.js
var require_parseDate = __commonJS({
  "node_modules/moralis/lib/browser/parseDate.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = parseDate;
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    function parseDate(iso8601) {
      var regexp = new RegExp("^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})T([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})(.([0-9]+))?Z$");
      var match = regexp.exec(iso8601);
      if (!match) {
        return null;
      }
      var year = (0, _parseInt2.default)(match[1]) || 0;
      var month = ((0, _parseInt2.default)(match[2]) || 1) - 1;
      var day = (0, _parseInt2.default)(match[3]) || 0;
      var hour = (0, _parseInt2.default)(match[4]) || 0;
      var minute = (0, _parseInt2.default)(match[5]) || 0;
      var second = (0, _parseInt2.default)(match[6]) || 0;
      var milli = (0, _parseInt2.default)(match[8]) || 0;
      return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
    }
  }
});

// node_modules/moralis/lib/browser/TaskQueue.js
var require_TaskQueue = __commonJS({
  "node_modules/moralis/lib/browser/TaskQueue.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _promiseUtils = require_promiseUtils();
    var TaskQueue = function() {
      function TaskQueue2() {
        (0, _classCallCheck2.default)(this, TaskQueue2);
        (0, _defineProperty2.default)(this, "queue", void 0);
        this.queue = [];
      }
      (0, _createClass2.default)(TaskQueue2, [{
        key: "enqueue",
        value: function(task) {
          var _this = this;
          var taskComplete = new _promiseUtils.resolvingPromise();
          this.queue.push({
            task,
            _completion: taskComplete
          });
          if (this.queue.length === 1) {
            task().then(function() {
              _this._dequeue();
              taskComplete.resolve();
            }, function(error) {
              _this._dequeue();
              taskComplete.reject(error);
            });
          }
          return taskComplete;
        }
      }, {
        key: "_dequeue",
        value: function() {
          var _this2 = this;
          this.queue.shift();
          if (this.queue.length) {
            var next = this.queue[0];
            next.task().then(function() {
              _this2._dequeue();
              next._completion.resolve();
            }, function(error) {
              _this2._dequeue();
              next._completion.reject(error);
            });
          }
        }
      }]);
      return TaskQueue2;
    }();
    module.exports = TaskQueue;
  }
});

// node_modules/moralis/lib/browser/ObjectStateMutations.js
var require_ObjectStateMutations = __commonJS({
  "node_modules/moralis/lib/browser/ObjectStateMutations.js"(exports) {
    "use strict";
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.commitServerChanges = commitServerChanges;
    exports.defaultState = defaultState;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _includes = _interopRequireDefault(require_includes5());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _encode3 = _interopRequireDefault(require_encode());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var _TaskQueue = _interopRequireDefault(require_TaskQueue());
    var _ParseOp = require_ParseOp();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context, _context2;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty(_context = ownKeys4(Object(source), true)).call(_context, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys4(Object(source))).call(_context2, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    function defaultState() {
      return {
        serverData: {},
        pendingOps: [{}],
        objectCache: {},
        tasks: new _TaskQueue.default(),
        existed: false
      };
    }
    function setServerData(serverData, attributes) {
      for (var _attr in attributes) {
        if (typeof attributes[_attr] !== "undefined") {
          serverData[_attr] = attributes[_attr];
        } else {
          delete serverData[_attr];
        }
      }
    }
    function setPendingOp(pendingOps, attr, op) {
      var last = pendingOps.length - 1;
      if (op) {
        pendingOps[last][attr] = op;
      } else {
        delete pendingOps[last][attr];
      }
    }
    function pushPendingState(pendingOps) {
      pendingOps.push({});
    }
    function popPendingState(pendingOps) {
      var first = pendingOps.shift();
      if (!pendingOps.length) {
        pendingOps[0] = {};
      }
      return first;
    }
    function mergeFirstPendingState(pendingOps) {
      var first = popPendingState(pendingOps);
      var next = pendingOps[0];
      for (var _attr2 in first) {
        if (next[_attr2] && first[_attr2]) {
          var merged = next[_attr2].mergeWith(first[_attr2]);
          if (merged) {
            next[_attr2] = merged;
          }
        } else {
          next[_attr2] = first[_attr2];
        }
      }
    }
    function estimateAttribute(serverData, pendingOps, className, id2, attr) {
      var value = serverData[attr];
      for (var i4 = 0; i4 < pendingOps.length; i4++) {
        if (pendingOps[i4][attr]) {
          if (pendingOps[i4][attr] instanceof _ParseOp.RelationOp) {
            if (id2) {
              value = pendingOps[i4][attr].applyTo(value, {
                className,
                id: id2
              }, attr);
            }
          } else {
            value = pendingOps[i4][attr].applyTo(value);
          }
        }
      }
      return value;
    }
    function estimateAttributes(serverData, pendingOps, className, id2) {
      var data = {};
      for (var attr in serverData) {
        data[attr] = serverData[attr];
      }
      for (var i4 = 0; i4 < pendingOps.length; i4++) {
        for (attr in pendingOps[i4]) {
          if (pendingOps[i4][attr] instanceof _ParseOp.RelationOp) {
            if (id2) {
              data[attr] = pendingOps[i4][attr].applyTo(data[attr], {
                className,
                id: id2
              }, attr);
            }
          } else {
            if ((0, _includes.default)(attr).call(attr, ".")) {
              var fields = attr.split(".");
              var first = fields[0];
              var last = fields[fields.length - 1];
              data[first] = _objectSpread4({}, serverData[first]);
              var object = _objectSpread4({}, data);
              for (var _i = 0; _i < fields.length - 1; _i++) {
                object = object[fields[_i]];
              }
              object[last] = pendingOps[i4][attr].applyTo(object[last]);
            } else {
              data[attr] = pendingOps[i4][attr].applyTo(data[attr]);
            }
          }
        }
      }
      return data;
    }
    function commitServerChanges(serverData, objectCache, changes) {
      for (var _attr3 in changes) {
        var val = changes[_attr3];
        serverData[_attr3] = val;
        if (val && (0, _typeof2.default)(val) === "object" && !(val instanceof _ParseObject.default) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
          var json = (0, _encode3.default)(val, false, true);
          objectCache[_attr3] = (0, _stringify.default)(json);
        }
      }
    }
  }
});

// node_modules/moralis/lib/browser/SingleInstanceStateController.js
var require_SingleInstanceStateController = __commonJS({
  "node_modules/moralis/lib/browser/SingleInstanceStateController.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.clearAllState = clearAllState;
    exports.commitServerChanges = commitServerChanges;
    exports.duplicateState = duplicateState;
    exports.enqueueTask = enqueueTask;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.getObjectCache = getObjectCache;
    exports.getPendingOps = getPendingOps;
    exports.getServerData = getServerData;
    exports.getState = getState;
    exports.initializeState = initializeState;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.removeState = removeState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var ObjectStateMutations = _interopRequireWildcard(require_ObjectStateMutations());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key2 in obj) {
        if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key2) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key2, desc);
          } else {
            newObj[key2] = obj[key2];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var objectState = {};
    function getState(obj) {
      var classData = objectState[obj.className];
      if (classData) {
        return classData[obj.id] || null;
      }
      return null;
    }
    function initializeState(obj, initial) {
      var state = getState(obj);
      if (state) {
        return state;
      }
      if (!objectState[obj.className]) {
        objectState[obj.className] = {};
      }
      if (!initial) {
        initial = ObjectStateMutations.defaultState();
      }
      state = objectState[obj.className][obj.id] = initial;
      return state;
    }
    function removeState(obj) {
      var state = getState(obj);
      if (state === null) {
        return null;
      }
      delete objectState[obj.className][obj.id];
      return state;
    }
    function getServerData(obj) {
      var state = getState(obj);
      if (state) {
        return state.serverData;
      }
      return {};
    }
    function setServerData(obj, attributes) {
      var _initializeState = initializeState(obj), serverData = _initializeState.serverData;
      ObjectStateMutations.setServerData(serverData, attributes);
    }
    function getPendingOps(obj) {
      var state = getState(obj);
      if (state) {
        return state.pendingOps;
      }
      return [{}];
    }
    function setPendingOp(obj, attr, op) {
      var _initializeState2 = initializeState(obj), pendingOps = _initializeState2.pendingOps;
      ObjectStateMutations.setPendingOp(pendingOps, attr, op);
    }
    function pushPendingState(obj) {
      var _initializeState3 = initializeState(obj), pendingOps = _initializeState3.pendingOps;
      ObjectStateMutations.pushPendingState(pendingOps);
    }
    function popPendingState(obj) {
      var _initializeState4 = initializeState(obj), pendingOps = _initializeState4.pendingOps;
      return ObjectStateMutations.popPendingState(pendingOps);
    }
    function mergeFirstPendingState(obj) {
      var pendingOps = getPendingOps(obj);
      ObjectStateMutations.mergeFirstPendingState(pendingOps);
    }
    function getObjectCache(obj) {
      var state = getState(obj);
      if (state) {
        return state.objectCache;
      }
      return {};
    }
    function estimateAttribute(obj, attr) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
    }
    function estimateAttributes(obj) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
    }
    function commitServerChanges(obj, changes) {
      var state = initializeState(obj);
      ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);
    }
    function enqueueTask(obj, task) {
      var state = initializeState(obj);
      return state.tasks.enqueue(task);
    }
    function clearAllState() {
      objectState = {};
    }
    function duplicateState(source, dest) {
      dest.id = source.id;
    }
  }
});

// node_modules/moralis/lib/browser/UniqueInstanceStateController.js
var require_UniqueInstanceStateController = __commonJS({
  "node_modules/moralis/lib/browser/UniqueInstanceStateController.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    var _WeakMap2 = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.clearAllState = clearAllState;
    exports.commitServerChanges = commitServerChanges;
    exports.duplicateState = duplicateState;
    exports.enqueueTask = enqueueTask;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.getObjectCache = getObjectCache;
    exports.getPendingOps = getPendingOps;
    exports.getServerData = getServerData;
    exports.getState = getState;
    exports.initializeState = initializeState;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.removeState = removeState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var _weakMap = _interopRequireDefault(require_weak_map3());
    var ObjectStateMutations = _interopRequireWildcard(require_ObjectStateMutations());
    var _TaskQueue = _interopRequireDefault(require_TaskQueue());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap2 !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap2();
      var cacheNodeInterop = new _WeakMap2();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key2 in obj) {
        if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key2) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key2, desc);
          } else {
            newObj[key2] = obj[key2];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var objectState = new _weakMap.default();
    function getState(obj) {
      var classData = objectState.get(obj);
      return classData || null;
    }
    function initializeState(obj, initial) {
      var state = getState(obj);
      if (state) {
        return state;
      }
      if (!initial) {
        initial = {
          serverData: {},
          pendingOps: [{}],
          objectCache: {},
          tasks: new _TaskQueue.default(),
          existed: false
        };
      }
      state = initial;
      objectState.set(obj, state);
      return state;
    }
    function removeState(obj) {
      var state = getState(obj);
      if (state === null) {
        return null;
      }
      objectState.delete(obj);
      return state;
    }
    function getServerData(obj) {
      var state = getState(obj);
      if (state) {
        return state.serverData;
      }
      return {};
    }
    function setServerData(obj, attributes) {
      var _initializeState = initializeState(obj), serverData = _initializeState.serverData;
      ObjectStateMutations.setServerData(serverData, attributes);
    }
    function getPendingOps(obj) {
      var state = getState(obj);
      if (state) {
        return state.pendingOps;
      }
      return [{}];
    }
    function setPendingOp(obj, attr, op) {
      var _initializeState2 = initializeState(obj), pendingOps = _initializeState2.pendingOps;
      ObjectStateMutations.setPendingOp(pendingOps, attr, op);
    }
    function pushPendingState(obj) {
      var _initializeState3 = initializeState(obj), pendingOps = _initializeState3.pendingOps;
      ObjectStateMutations.pushPendingState(pendingOps);
    }
    function popPendingState(obj) {
      var _initializeState4 = initializeState(obj), pendingOps = _initializeState4.pendingOps;
      return ObjectStateMutations.popPendingState(pendingOps);
    }
    function mergeFirstPendingState(obj) {
      var pendingOps = getPendingOps(obj);
      ObjectStateMutations.mergeFirstPendingState(pendingOps);
    }
    function getObjectCache(obj) {
      var state = getState(obj);
      if (state) {
        return state.objectCache;
      }
      return {};
    }
    function estimateAttribute(obj, attr) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
    }
    function estimateAttributes(obj) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
    }
    function commitServerChanges(obj, changes) {
      var state = initializeState(obj);
      ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);
    }
    function enqueueTask(obj, task) {
      var state = initializeState(obj);
      return state.tasks.enqueue(task);
    }
    function duplicateState(source, dest) {
      var oldState = initializeState(source);
      var newState = initializeState(dest);
      for (var key2 in oldState.serverData) {
        newState.serverData[key2] = oldState.serverData[key2];
      }
      for (var index = 0; index < oldState.pendingOps.length; index++) {
        for (var _key in oldState.pendingOps[index]) {
          newState.pendingOps[index][_key] = oldState.pendingOps[index][_key];
        }
      }
      for (var _key2 in oldState.objectCache) {
        newState.objectCache[_key2] = oldState.objectCache[_key2];
      }
      newState.existed = oldState.existed;
    }
    function clearAllState() {
      objectState = new _weakMap.default();
    }
  }
});

// node_modules/moralis/lib/browser/unsavedChildren.js
var require_unsavedChildren = __commonJS({
  "node_modules/moralis/lib/browser/unsavedChildren.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unsavedChildren;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function unsavedChildren(obj, allowDeepUnsaved) {
      var _context;
      var encountered = {
        objects: {},
        files: []
      };
      var identifier = (0, _concat.default)(_context = "".concat(obj.className, ":")).call(_context, obj._getId());
      encountered.objects[identifier] = obj.dirty() ? obj : true;
      var attributes = obj.attributes;
      for (var attr in attributes) {
        if ((0, _typeof2.default)(attributes[attr]) === "object") {
          traverse(attributes[attr], encountered, false, !!allowDeepUnsaved);
        }
      }
      var unsaved = [];
      for (var id2 in encountered.objects) {
        if (id2 !== identifier && encountered.objects[id2] !== true) {
          unsaved.push(encountered.objects[id2]);
        }
      }
      return (0, _concat.default)(unsaved).call(unsaved, encountered.files);
    }
    function traverse(obj, encountered, shouldThrow, allowDeepUnsaved) {
      if (obj instanceof _ParseObject.default) {
        var _context2;
        if (!obj.id && shouldThrow) {
          throw new Error("Cannot create a pointer to an unsaved Object.");
        }
        var _identifier = (0, _concat.default)(_context2 = "".concat(obj.className, ":")).call(_context2, obj._getId());
        if (!encountered.objects[_identifier]) {
          encountered.objects[_identifier] = obj.dirty() ? obj : true;
          var attributes = obj.attributes;
          for (var attr in attributes) {
            if ((0, _typeof2.default)(attributes[attr]) === "object") {
              traverse(attributes[attr], encountered, !allowDeepUnsaved, allowDeepUnsaved);
            }
          }
        }
        return;
      }
      if (obj instanceof _ParseFile.default) {
        var _context3;
        if (!obj.url() && (0, _indexOf.default)(_context3 = encountered.files).call(_context3, obj) < 0) {
          encountered.files.push(obj);
        }
        return;
      }
      if (obj instanceof _ParseRelation.default) {
        return;
      }
      if ((0, _isArray.default)(obj)) {
        (0, _forEach.default)(obj).call(obj, function(el) {
          if ((0, _typeof2.default)(el) === "object") {
            traverse(el, encountered, shouldThrow, allowDeepUnsaved);
          }
        });
      }
      for (var k4 in obj) {
        if ((0, _typeof2.default)(obj[k4]) === "object") {
          traverse(obj[k4], encountered, shouldThrow, allowDeepUnsaved);
        }
      }
    }
  }
});

// node_modules/moralis/lib/browser/ParseObject.js
var require_ParseObject = __commonJS({
  "node_modules/moralis/lib/browser/ParseObject.js"(exports) {
    "use strict";
    var _typeof3 = require_typeof();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty2 = require_define_property3();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray2 = require_is_array4();
    var _WeakMap = require_weak_map3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _keys = _interopRequireDefault(require_keys3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _includes = _interopRequireDefault(require_includes5());
    var _getPrototypeOf = _interopRequireDefault(require_get_prototype_of7());
    var _concat = _interopRequireDefault(require_concat4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _promise = _interopRequireDefault(require_promise3());
    var _create = _interopRequireDefault(require_create7());
    var _defineProperty3 = _interopRequireDefault(require_define_property3());
    var _find = _interopRequireDefault(require_find4());
    var _map = _interopRequireDefault(require_map10());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _canBeSerialized = _interopRequireDefault(require_canBeSerialized());
    var _decode2 = _interopRequireDefault(require_decode());
    var _encode3 = _interopRequireDefault(require_encode());
    var _escape2 = _interopRequireDefault(require_escape());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _parseDate = _interopRequireDefault(require_parseDate());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _promiseUtils = require_promiseUtils();
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    var _ParseOp = require_ParseOp();
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var SingleInstanceStateController = _interopRequireWildcard(require_SingleInstanceStateController());
    var _unique = _interopRequireDefault(require_unique());
    var UniqueInstanceStateController = _interopRequireWildcard(require_UniqueInstanceStateController());
    var _unsavedChildren = _interopRequireDefault(require_unsavedChildren());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key2 in obj) {
        if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
          var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key2) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty2(newObj, key2, desc);
          } else {
            newObj[key2] = obj[key2];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context21;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty(_context21 = Object.prototype.toString.call(o4)).call(_context21, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context19, _context20;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty2(_context19 = ownKeys4(Object(source), true)).call(_context19, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context20 = ownKeys4(Object(source))).call(_context20, function(key2) {
          _Object$defineProperty2(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var classMap = {};
    var objectCount = 0;
    var singleInstance = !_CoreManager.default.get("IS_NODE");
    if (singleInstance) {
      _CoreManager.default.setObjectStateController(SingleInstanceStateController);
    } else {
      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);
    }
    function getServerUrlPath() {
      var serverUrl = _CoreManager.default.get("SERVER_URL");
      if (serverUrl[serverUrl.length - 1] !== "/") {
        serverUrl += "/";
      }
      var url = serverUrl.replace(/https?:\/\//, "");
      return url.substr((0, _indexOf.default)(url).call(url, "/"));
    }
    var ParseObject = function() {
      function ParseObject2(className, attributes, options) {
        (0, _classCallCheck2.default)(this, ParseObject2);
        (0, _defineProperty2.default)(this, "id", void 0);
        (0, _defineProperty2.default)(this, "_localId", void 0);
        (0, _defineProperty2.default)(this, "_objCount", void 0);
        (0, _defineProperty2.default)(this, "className", void 0);
        if (typeof this.initialize === "function") {
          this.initialize.apply(this, arguments);
        }
        var toSet = null;
        this._objCount = objectCount++;
        if (typeof className === "string") {
          this.className = className;
          if (attributes && (0, _typeof2.default)(attributes) === "object") {
            toSet = attributes;
          }
        } else if (className && (0, _typeof2.default)(className) === "object") {
          this.className = className.className;
          toSet = {};
          for (var _attr in className) {
            if (_attr !== "className") {
              toSet[_attr] = className[_attr];
            }
          }
          if (attributes && (0, _typeof2.default)(attributes) === "object") {
            options = attributes;
          }
        }
        if (toSet && !this.set(toSet, options)) {
          throw new Error("Can't create an invalid Parse Object");
        }
      }
      (0, _createClass2.default)(ParseObject2, [{
        key: "attributes",
        get: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));
        }
      }, {
        key: "createdAt",
        get: function() {
          return this._getServerData().createdAt;
        }
      }, {
        key: "updatedAt",
        get: function() {
          return this._getServerData().updatedAt;
        }
      }, {
        key: "_getId",
        value: function() {
          if (typeof this.id === "string") {
            return this.id;
          }
          if (typeof this._localId === "string") {
            return this._localId;
          }
          var localId = "local".concat(uuidv4());
          this._localId = localId;
          return localId;
        }
      }, {
        key: "_getStateIdentifier",
        value: function() {
          if (singleInstance) {
            var id2 = this.id;
            if (!id2) {
              id2 = this._getId();
            }
            return {
              id: id2,
              className: this.className
            };
          }
          return this;
        }
      }, {
        key: "_getServerData",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return stateController.getServerData(this._getStateIdentifier());
        }
      }, {
        key: "_clearServerData",
        value: function() {
          var serverData = this._getServerData();
          var unset = {};
          for (var _attr2 in serverData) {
            unset[_attr2] = void 0;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.setServerData(this._getStateIdentifier(), unset);
        }
      }, {
        key: "_getPendingOps",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return stateController.getPendingOps(this._getStateIdentifier());
        }
      }, {
        key: "_clearPendingOps",
        value: function(keysToClear) {
          var pending = this._getPendingOps();
          var latest = pending[pending.length - 1];
          var keys = keysToClear || (0, _keys.default)(latest);
          (0, _forEach.default)(keys).call(keys, function(key2) {
            delete latest[key2];
          });
        }
      }, {
        key: "_getDirtyObjectAttributes",
        value: function() {
          var attributes = this.attributes;
          var stateController = _CoreManager.default.getObjectStateController();
          var objectCache = stateController.getObjectCache(this._getStateIdentifier());
          var dirty = {};
          for (var _attr3 in attributes) {
            var val = attributes[_attr3];
            if (val && (0, _typeof2.default)(val) === "object" && !(val instanceof ParseObject2) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
              try {
                var json = (0, _encode3.default)(val, false, true);
                var stringified = (0, _stringify.default)(json);
                if (objectCache[_attr3] !== stringified) {
                  dirty[_attr3] = val;
                }
              } catch (e3) {
                dirty[_attr3] = val;
              }
            }
          }
          return dirty;
        }
      }, {
        key: "_toFullJSON",
        value: function(seen, offline) {
          var json = this.toJSON(seen, offline);
          json.__type = "Object";
          json.className = this.className;
          return json;
        }
      }, {
        key: "_getSaveJSON",
        value: function() {
          var pending = this._getPendingOps();
          var dirtyObjects = this._getDirtyObjectAttributes();
          var json = {};
          for (var attr in dirtyObjects) {
            var isDotNotation = false;
            for (var i4 = 0; i4 < pending.length; i4 += 1) {
              for (var field in pending[i4]) {
                if ((0, _includes.default)(field).call(field, ".")) {
                  var fieldName = field.split(".")[0];
                  if (fieldName === attr) {
                    isDotNotation = true;
                    break;
                  }
                }
              }
            }
            if (!isDotNotation) {
              json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();
            }
          }
          for (attr in pending[0]) {
            json[attr] = pending[0][attr].toJSON();
          }
          return json;
        }
      }, {
        key: "_getSaveParams",
        value: function() {
          var method = this.id ? "PUT" : "POST";
          var body = this._getSaveJSON();
          var path = "classes/".concat(this.className);
          if (this.id) {
            path += "/".concat(this.id);
          } else if (this.className === "_User") {
            path = "users";
          }
          return {
            method,
            body,
            path
          };
        }
      }, {
        key: "_finishFetch",
        value: function(serverData) {
          if (!this.id && serverData.objectId) {
            this.id = serverData.objectId;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.initializeState(this._getStateIdentifier());
          var decoded = {};
          for (var _attr4 in serverData) {
            if (_attr4 === "ACL") {
              decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);
            } else if (_attr4 !== "objectId") {
              decoded[_attr4] = (0, _decode2.default)(serverData[_attr4]);
              if (decoded[_attr4] instanceof _ParseRelation.default) {
                decoded[_attr4]._ensureParentAndKey(this, _attr4);
              }
            }
          }
          if (decoded.createdAt && typeof decoded.createdAt === "string") {
            decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);
          }
          if (decoded.updatedAt && typeof decoded.updatedAt === "string") {
            decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);
          }
          if (!decoded.updatedAt && decoded.createdAt) {
            decoded.updatedAt = decoded.createdAt;
          }
          stateController.commitServerChanges(this._getStateIdentifier(), decoded);
        }
      }, {
        key: "_setExisted",
        value: function(existed) {
          var stateController = _CoreManager.default.getObjectStateController();
          var state = stateController.getState(this._getStateIdentifier());
          if (state) {
            state.existed = existed;
          }
        }
      }, {
        key: "_migrateId",
        value: function(serverId) {
          if (this._localId && serverId) {
            if (singleInstance) {
              var stateController = _CoreManager.default.getObjectStateController();
              var oldState = stateController.removeState(this._getStateIdentifier());
              this.id = serverId;
              delete this._localId;
              if (oldState) {
                stateController.initializeState(this._getStateIdentifier(), oldState);
              }
            } else {
              this.id = serverId;
              delete this._localId;
            }
          }
        }
      }, {
        key: "_handleSaveResponse",
        value: function(response, status) {
          var changes = {};
          var stateController = _CoreManager.default.getObjectStateController();
          var pending = stateController.popPendingState(this._getStateIdentifier());
          for (var attr in pending) {
            if (pending[attr] instanceof _ParseOp.RelationOp) {
              changes[attr] = pending[attr].applyTo(void 0, this, attr);
            } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, ".")) {
              changes[attr] = pending[attr].applyTo(void 0);
            }
          }
          for (attr in response) {
            if ((attr === "createdAt" || attr === "updatedAt") && typeof response[attr] === "string") {
              changes[attr] = (0, _parseDate.default)(response[attr]);
            } else if (attr === "ACL") {
              changes[attr] = new _ParseACL.default(response[attr]);
            } else if (attr !== "objectId") {
              var val = (0, _decode2.default)(response[attr]);
              if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {
                changes[attr] = _objectSpread4(_objectSpread4({}, this.attributes[attr]), val);
              } else {
                changes[attr] = val;
              }
              if (changes[attr] instanceof _ParseOp.UnsetOp) {
                changes[attr] = void 0;
              }
            }
          }
          if (changes.createdAt && !changes.updatedAt) {
            changes.updatedAt = changes.createdAt;
          }
          this._migrateId(response.objectId);
          if (status !== 201) {
            this._setExisted(true);
          }
          stateController.commitServerChanges(this._getStateIdentifier(), changes);
        }
      }, {
        key: "_handleSaveError",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.mergeFirstPendingState(this._getStateIdentifier());
        }
      }, {
        key: "initialize",
        value: function() {
        }
      }, {
        key: "toJSON",
        value: function(seen, offline) {
          var _context;
          var seenEntry = this.id ? (0, _concat.default)(_context = "".concat(this.className, ":")).call(_context, this.id) : this;
          seen = seen || [seenEntry];
          var json = {};
          var attrs = this.attributes;
          for (var _attr5 in attrs) {
            if ((_attr5 === "createdAt" || _attr5 === "updatedAt") && attrs[_attr5].toJSON) {
              json[_attr5] = attrs[_attr5].toJSON();
            } else {
              json[_attr5] = (0, _encode3.default)(attrs[_attr5], false, false, seen, offline);
            }
          }
          var pending = this._getPendingOps();
          for (var _attr6 in pending[0]) {
            json[_attr6] = pending[0][_attr6].toJSON(offline);
          }
          if (this.id) {
            json.objectId = this.id;
          }
          return json;
        }
      }, {
        key: "equals",
        value: function(other) {
          if (this === other) {
            return true;
          }
          return other instanceof ParseObject2 && this.className === other.className && this.id === other.id && typeof this.id !== "undefined";
        }
      }, {
        key: "dirty",
        value: function(attr) {
          if (!this.id) {
            return true;
          }
          var pendingOps = this._getPendingOps();
          var dirtyObjects = this._getDirtyObjectAttributes();
          if (attr) {
            if (dirtyObjects.hasOwnProperty(attr)) {
              return true;
            }
            for (var i4 = 0; i4 < pendingOps.length; i4++) {
              if (pendingOps[i4].hasOwnProperty(attr)) {
                return true;
              }
            }
            return false;
          }
          if ((0, _keys.default)(pendingOps[0]).length !== 0) {
            return true;
          }
          if ((0, _keys.default)(dirtyObjects).length !== 0) {
            return true;
          }
          return false;
        }
      }, {
        key: "dirtyKeys",
        value: function() {
          var pendingOps = this._getPendingOps();
          var keys = {};
          for (var i4 = 0; i4 < pendingOps.length; i4++) {
            for (var _attr7 in pendingOps[i4]) {
              keys[_attr7] = true;
            }
          }
          var dirtyObjects = this._getDirtyObjectAttributes();
          for (var _attr8 in dirtyObjects) {
            keys[_attr8] = true;
          }
          return (0, _keys.default)(keys);
        }
      }, {
        key: "isDataAvailable",
        value: function() {
          var serverData = this._getServerData();
          return !!(0, _keys.default)(serverData).length;
        }
      }, {
        key: "toPointer",
        value: function() {
          if (!this.id) {
            throw new Error("Cannot create a pointer to an unsaved ParseObject");
          }
          return {
            __type: "Pointer",
            className: this.className,
            objectId: this.id
          };
        }
      }, {
        key: "toOfflinePointer",
        value: function() {
          if (!this._localId) {
            throw new Error("Cannot create a offline pointer to a saved ParseObject");
          }
          return {
            __type: "Object",
            className: this.className,
            _localId: this._localId
          };
        }
      }, {
        key: "get",
        value: function(attr) {
          return this.attributes[attr];
        }
      }, {
        key: "relation",
        value: function(attr) {
          var value = this.get(attr);
          if (value) {
            if (!(value instanceof _ParseRelation.default)) {
              throw new Error("Called relation() on non-relation field ".concat(attr));
            }
            value._ensureParentAndKey(this, attr);
            return value;
          }
          return new _ParseRelation.default(this, attr);
        }
      }, {
        key: "escape",
        value: function(attr) {
          var val = this.attributes[attr];
          if (val == null) {
            return "";
          }
          if (typeof val !== "string") {
            if (typeof val.toString !== "function") {
              return "";
            }
            val = val.toString();
          }
          return (0, _escape2.default)(val);
        }
      }, {
        key: "has",
        value: function(attr) {
          var attributes = this.attributes;
          if (attributes.hasOwnProperty(attr)) {
            return attributes[attr] != null;
          }
          return false;
        }
      }, {
        key: "set",
        value: function(key2, value, options) {
          var changes = {};
          var newOps = {};
          if (key2 && (0, _typeof2.default)(key2) === "object") {
            changes = key2;
            options = value;
          } else if (typeof key2 === "string") {
            changes[key2] = value;
          } else {
            return this;
          }
          options = options || {};
          var readonly = [];
          if (typeof this.constructor.readOnlyAttributes === "function") {
            readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
          }
          for (var k4 in changes) {
            if (k4 === "createdAt" || k4 === "updatedAt") {
              continue;
            }
            if ((0, _indexOf.default)(readonly).call(readonly, k4) > -1) {
              throw new Error("Cannot modify readonly attribute: ".concat(k4));
            }
            if (options.unset) {
              newOps[k4] = new _ParseOp.UnsetOp();
            } else if (changes[k4] instanceof _ParseOp.Op) {
              newOps[k4] = changes[k4];
            } else if (changes[k4] && (0, _typeof2.default)(changes[k4]) === "object" && typeof changes[k4].__op === "string") {
              newOps[k4] = (0, _ParseOp.opFromJSON)(changes[k4]);
            } else if (k4 === "objectId" || k4 === "id") {
              if (typeof changes[k4] === "string") {
                this.id = changes[k4];
              }
            } else if (k4 === "ACL" && (0, _typeof2.default)(changes[k4]) === "object" && !(changes[k4] instanceof _ParseACL.default)) {
              newOps[k4] = new _ParseOp.SetOp(new _ParseACL.default(changes[k4]));
            } else if (changes[k4] instanceof _ParseRelation.default) {
              var relation = new _ParseRelation.default(this, k4);
              relation.targetClassName = changes[k4].targetClassName;
              newOps[k4] = new _ParseOp.SetOp(relation);
            } else {
              newOps[k4] = new _ParseOp.SetOp(changes[k4]);
            }
          }
          var currentAttributes = this.attributes;
          var serverData = this._getServerData();
          if (typeof key2 === "string" && (0, _includes.default)(key2).call(key2, ".")) {
            var field = key2.split(".")[0];
            if (!serverData[field]) {
              return this;
            }
          }
          var newValues = {};
          for (var _attr9 in newOps) {
            if (newOps[_attr9] instanceof _ParseOp.RelationOp) {
              newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);
            } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {
              newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);
            }
          }
          if (!options.ignoreValidation) {
            var validation = this.validate(newValues);
            if (validation) {
              if (typeof options.error === "function") {
                options.error(this, validation);
              }
              return false;
            }
          }
          var pendingOps = this._getPendingOps();
          var last = pendingOps.length - 1;
          var stateController = _CoreManager.default.getObjectStateController();
          for (var _attr10 in newOps) {
            var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);
            stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);
          }
          return this;
        }
      }, {
        key: "unset",
        value: function(attr, options) {
          options = options || {};
          options.unset = true;
          return this.set(attr, null, options);
        }
      }, {
        key: "increment",
        value: function(attr, amount) {
          if (typeof amount === "undefined") {
            amount = 1;
          }
          if (typeof amount !== "number") {
            throw new Error("Cannot increment by a non-numeric amount.");
          }
          return this.set(attr, new _ParseOp.IncrementOp(amount));
        }
      }, {
        key: "decrement",
        value: function(attr, amount) {
          if (typeof amount === "undefined") {
            amount = 1;
          }
          if (typeof amount !== "number") {
            throw new Error("Cannot decrement by a non-numeric amount.");
          }
          return this.set(attr, new _ParseOp.IncrementOp(amount * -1));
        }
      }, {
        key: "add",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.AddOp([item]));
        }
      }, {
        key: "addAll",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.AddOp(items));
        }
      }, {
        key: "addUnique",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.AddUniqueOp([item]));
        }
      }, {
        key: "addAllUnique",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.AddUniqueOp(items));
        }
      }, {
        key: "remove",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.RemoveOp([item]));
        }
      }, {
        key: "removeAll",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.RemoveOp(items));
        }
      }, {
        key: "op",
        value: function(attr) {
          var pending = this._getPendingOps();
          for (var i4 = pending.length; i4--; ) {
            if (pending[i4][attr]) {
              return pending[i4][attr];
            }
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          var clone2 = new this.constructor();
          if (!clone2.className) {
            clone2.className = this.className;
          }
          var attributes = this.attributes;
          if (typeof this.constructor.readOnlyAttributes === "function") {
            var readonly = this.constructor.readOnlyAttributes() || [];
            var copy = {};
            for (var a4 in attributes) {
              if ((0, _indexOf.default)(readonly).call(readonly, a4) < 0) {
                copy[a4] = attributes[a4];
              }
            }
            attributes = copy;
          }
          if (clone2.set) {
            clone2.set(attributes);
          }
          return clone2;
        }
      }, {
        key: "newInstance",
        value: function() {
          var clone = new this.constructor();
          if (!clone.className) {
            clone.className = this.className;
          }
          clone.id = this.id;
          if (singleInstance) {
            return clone;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          if (stateController) {
            stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());
          }
          return clone;
        }
      }, {
        key: "isNew",
        value: function() {
          return !this.id;
        }
      }, {
        key: "existed",
        value: function() {
          if (!this.id) {
            return false;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          var state = stateController.getState(this._getStateIdentifier());
          if (state) {
            return state.existed;
          }
          return false;
        }
      }, {
        key: "exists",
        value: function() {
          var _exists = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(options) {
            var query;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (this.id) {
                      _context2.next = 2;
                      break;
                    }
                    return _context2.abrupt("return", false);
                  case 2:
                    _context2.prev = 2;
                    query = new _ParseQuery.default(this.className);
                    _context2.next = 6;
                    return query.get(this.id, options);
                  case 6:
                    return _context2.abrupt("return", true);
                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2["catch"](2);
                    if (!(_context2.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {
                      _context2.next = 13;
                      break;
                    }
                    return _context2.abrupt("return", false);
                  case 13:
                    throw _context2.t0;
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[2, 9]]);
          }));
          return function() {
            return _exists.apply(this, arguments);
          };
        }()
      }, {
        key: "isValid",
        value: function() {
          return !this.validate(this.attributes);
        }
      }, {
        key: "validate",
        value: function(attrs) {
          if (attrs.hasOwnProperty("ACL") && !(attrs.ACL instanceof _ParseACL.default)) {
            return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "ACL must be a Parse ACL.");
          }
          for (var _key in attrs) {
            if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {
              return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);
            }
          }
          return false;
        }
      }, {
        key: "getACL",
        value: function() {
          var acl = this.get("ACL");
          if (acl instanceof _ParseACL.default) {
            return acl;
          }
          return null;
        }
      }, {
        key: "setACL",
        value: function(acl, options) {
          return this.set("ACL", acl, options);
        }
      }, {
        key: "revert",
        value: function() {
          var keysToRevert;
          for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            keys[_key2] = arguments[_key2];
          }
          if (keys.length) {
            keysToRevert = [];
            var _iterator = _createForOfIteratorHelper(keys), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _key3 = _step.value;
                if (typeof _key3 === "string") {
                  keysToRevert.push(_key3);
                } else {
                  throw new Error("Parse.Object#revert expects either no, or a list of string, arguments.");
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          this._clearPendingOps(keysToRevert);
        }
      }, {
        key: "clear",
        value: function() {
          var attributes = this.attributes;
          var erasable = {};
          var readonly = ["createdAt", "updatedAt"];
          if (typeof this.constructor.readOnlyAttributes === "function") {
            readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
          }
          for (var _attr11 in attributes) {
            if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {
              erasable[_attr11] = true;
            }
          }
          return this.set(erasable, {
            unset: true
          });
        }
      }, {
        key: "fetch",
        value: function(options) {
          options = options || {};
          var fetchOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            fetchOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            fetchOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            fetchOptions.context = options.context;
          }
          if (options.hasOwnProperty("include")) {
            fetchOptions.include = [];
            if ((0, _isArray.default)(options.include)) {
              var _context3;
              (0, _forEach.default)(_context3 = options.include).call(_context3, function(key2) {
                if ((0, _isArray.default)(key2)) {
                  var _context4;
                  fetchOptions.include = (0, _concat.default)(_context4 = fetchOptions.include).call(_context4, key2);
                } else {
                  fetchOptions.include.push(key2);
                }
              });
            } else {
              fetchOptions.include.push(options.include);
            }
          }
          var controller = _CoreManager.default.getObjectController();
          return controller.fetch(this, true, fetchOptions);
        }
      }, {
        key: "fetchWithInclude",
        value: function(keys, options) {
          options = options || {};
          options.include = keys;
          return this.fetch(options);
        }
      }, {
        key: "save",
        value: function(arg1, arg2, arg3) {
          var _this = this;
          var attrs;
          var options;
          if ((0, _typeof2.default)(arg1) === "object" || typeof arg1 === "undefined") {
            attrs = arg1;
            if ((0, _typeof2.default)(arg2) === "object") {
              options = arg2;
            }
          } else {
            attrs = {};
            attrs[arg1] = arg2;
            options = arg3;
          }
          if (attrs) {
            var validation = this.validate(attrs);
            if (validation) {
              return _promise.default.reject(validation);
            }
            this.set(attrs, options);
          }
          options = options || {};
          var saveOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            saveOptions.useMasterKey = !!options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken") && typeof options.sessionToken === "string") {
            saveOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("installationId") && typeof options.installationId === "string") {
            saveOptions.installationId = options.installationId;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            saveOptions.context = options.context;
          }
          var controller = _CoreManager.default.getObjectController();
          var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;
          return controller.save(unsaved, saveOptions).then(function() {
            return controller.save(_this, saveOptions);
          });
        }
      }, {
        key: "destroy",
        value: function(options) {
          options = options || {};
          var destroyOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            destroyOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            destroyOptions.context = options.context;
          }
          if (!this.id) {
            return _promise.default.resolve();
          }
          return _CoreManager.default.getObjectController().destroy(this, destroyOptions);
        }
      }, {
        key: "pin",
        value: function() {
          return ParseObject2.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);
        }
      }, {
        key: "unPin",
        value: function() {
          return ParseObject2.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);
        }
      }, {
        key: "isPinned",
        value: function() {
          var _isPinned = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            var localDatastore, objectKey, pin;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    if (localDatastore.isEnabled) {
                      _context5.next = 3;
                      break;
                    }
                    return _context5.abrupt("return", _promise.default.reject("Parse.enableLocalDatastore() must be called first"));
                  case 3:
                    objectKey = localDatastore.getKeyForObject(this);
                    _context5.next = 6;
                    return localDatastore.fromPinWithName(objectKey);
                  case 6:
                    pin = _context5.sent;
                    return _context5.abrupt("return", pin.length > 0);
                  case 8:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _isPinned.apply(this, arguments);
          };
        }()
      }, {
        key: "pinWithName",
        value: function(name2) {
          return ParseObject2.pinAllWithName(name2, [this]);
        }
      }, {
        key: "unPinWithName",
        value: function(name2) {
          return ParseObject2.unPinAllWithName(name2, [this]);
        }
      }, {
        key: "fetchFromLocalDatastore",
        value: function() {
          var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
            var localDatastore, objectKey, pinned, result;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    if (localDatastore.isEnabled) {
                      _context6.next = 3;
                      break;
                    }
                    throw new Error("Parse.enableLocalDatastore() must be called first");
                  case 3:
                    objectKey = localDatastore.getKeyForObject(this);
                    _context6.next = 6;
                    return localDatastore._serializeObject(objectKey);
                  case 6:
                    pinned = _context6.sent;
                    if (pinned) {
                      _context6.next = 9;
                      break;
                    }
                    throw new Error("Cannot fetch an unsaved ParseObject");
                  case 9:
                    result = ParseObject2.fromJSON(pinned);
                    this._finishFetch(result.toJSON());
                    return _context6.abrupt("return", this);
                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee3, this);
          }));
          return function() {
            return _fetchFromLocalDatastore.apply(this, arguments);
          };
        }()
      }], [{
        key: "_clearAllState",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.clearAllState();
        }
      }, {
        key: "fetchAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var queryOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            queryOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            queryOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("include")) {
            queryOptions.include = ParseObject2.handleIncludeOptions(options);
          }
          return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);
        }
      }, {
        key: "fetchAllWithInclude",
        value: function(list, keys, options) {
          options = options || {};
          options.include = keys;
          return ParseObject2.fetchAll(list, options);
        }
      }, {
        key: "fetchAllIfNeededWithInclude",
        value: function(list, keys, options) {
          options = options || {};
          options.include = keys;
          return ParseObject2.fetchAllIfNeeded(list, options);
        }
      }, {
        key: "fetchAllIfNeeded",
        value: function(list, options) {
          options = options || {};
          var queryOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            queryOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            queryOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("include")) {
            queryOptions.include = ParseObject2.handleIncludeOptions(options);
          }
          return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);
        }
      }, {
        key: "handleIncludeOptions",
        value: function(options) {
          var include = [];
          if ((0, _isArray.default)(options.include)) {
            var _context7;
            (0, _forEach.default)(_context7 = options.include).call(_context7, function(key2) {
              if ((0, _isArray.default)(key2)) {
                include = (0, _concat.default)(include).call(include, key2);
              } else {
                include.push(key2);
              }
            });
          } else {
            include.push(options.include);
          }
          return include;
        }
      }, {
        key: "destroyAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var destroyOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            destroyOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("batchSize") && typeof options.batchSize === "number") {
            destroyOptions.batchSize = options.batchSize;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            destroyOptions.context = options.context;
          }
          return _CoreManager.default.getObjectController().destroy(list, destroyOptions);
        }
      }, {
        key: "saveAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var saveOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            saveOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            saveOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("batchSize") && typeof options.batchSize === "number") {
            saveOptions.batchSize = options.batchSize;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            saveOptions.context = options.context;
          }
          return _CoreManager.default.getObjectController().save(list, saveOptions);
        }
      }, {
        key: "createWithoutData",
        value: function(id2) {
          var obj = new this();
          obj.id = id2;
          return obj;
        }
      }, {
        key: "fromJSON",
        value: function(json, override) {
          if (!json.className) {
            throw new Error("Cannot create an object without a className");
          }
          var constructor = classMap[json.className];
          var o4 = constructor ? new constructor() : new ParseObject2(json.className);
          var otherAttributes = {};
          for (var _attr12 in json) {
            if (_attr12 !== "className" && _attr12 !== "__type") {
              otherAttributes[_attr12] = json[_attr12];
            }
          }
          if (override) {
            if (otherAttributes.objectId) {
              o4.id = otherAttributes.objectId;
            }
            var preserved = null;
            if (typeof o4._preserveFieldsOnFetch === "function") {
              preserved = o4._preserveFieldsOnFetch();
            }
            o4._clearServerData();
            if (preserved) {
              o4._finishFetch(preserved);
            }
          }
          o4._finishFetch(otherAttributes);
          if (json.objectId) {
            o4._setExisted(true);
          }
          return o4;
        }
      }, {
        key: "registerSubclass",
        value: function(className, constructor) {
          if (typeof className !== "string") {
            throw new TypeError("The first argument must be a valid class name.");
          }
          if (typeof constructor === "undefined") {
            throw new TypeError("You must supply a subclass constructor.");
          }
          if (typeof constructor !== "function") {
            throw new TypeError("You must register the subclass constructor. Did you attempt to register an instance of the subclass?");
          }
          classMap[className] = constructor;
          if (!constructor.className) {
            constructor.className = className;
          }
        }
      }, {
        key: "extend",
        value: function(className, protoProps, classProps) {
          if (typeof className !== "string") {
            if (className && typeof className.className === "string") {
              return ParseObject2.extend(className.className, className, protoProps);
            }
            throw new Error("Parse.Object.extend's first argument should be the className.");
          }
          var adjustedClassName = className;
          if (adjustedClassName === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            adjustedClassName = "_User";
          }
          var parentProto = ParseObject2.prototype;
          if (this.hasOwnProperty("__super__") && this.__super__) {
            parentProto = this.prototype;
          } else if (classMap[adjustedClassName]) {
            parentProto = classMap[adjustedClassName].prototype;
          }
          var ParseObjectSubclass = function(attributes, options) {
            this.className = adjustedClassName;
            this._objCount = objectCount++;
            if (typeof this.initialize === "function") {
              this.initialize.apply(this, arguments);
            }
            if (attributes && (0, _typeof2.default)(attributes) === "object") {
              if (!this.set(attributes || {}, options)) {
                throw new Error("Can't create an invalid Parse Object");
              }
            }
          };
          ParseObjectSubclass.className = adjustedClassName;
          ParseObjectSubclass.__super__ = parentProto;
          ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {
            constructor: {
              value: ParseObjectSubclass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (protoProps) {
            for (var prop in protoProps) {
              if (prop !== "className") {
                (0, _defineProperty3.default)(ParseObjectSubclass.prototype, prop, {
                  value: protoProps[prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          if (classProps) {
            for (var _prop in classProps) {
              if (_prop !== "className") {
                (0, _defineProperty3.default)(ParseObjectSubclass, _prop, {
                  value: classProps[_prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          ParseObjectSubclass.extend = function(name2, protoProps2, classProps2) {
            if (typeof name2 === "string") {
              return ParseObject2.extend.call(ParseObjectSubclass, name2, protoProps2, classProps2);
            }
            return ParseObject2.extend.call(ParseObjectSubclass, adjustedClassName, name2, protoProps2);
          };
          ParseObjectSubclass.createWithoutData = ParseObject2.createWithoutData;
          classMap[adjustedClassName] = ParseObjectSubclass;
          return ParseObjectSubclass;
        }
      }, {
        key: "enableSingleInstance",
        value: function() {
          singleInstance = true;
          _CoreManager.default.setObjectStateController(SingleInstanceStateController);
        }
      }, {
        key: "disableSingleInstance",
        value: function() {
          singleInstance = false;
          _CoreManager.default.setObjectStateController(UniqueInstanceStateController);
        }
      }, {
        key: "pinAll",
        value: function(objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return ParseObject2.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);
        }
      }, {
        key: "pinAllWithName",
        value: function(name2, objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore._handlePinAllWithName(name2, objects);
        }
      }, {
        key: "unPinAll",
        value: function(objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return ParseObject2.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);
        }
      }, {
        key: "unPinAllWithName",
        value: function(name2, objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore._handleUnPinAllWithName(name2, objects);
        }
      }, {
        key: "unPinAllObjects",
        value: function() {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);
        }
      }, {
        key: "unPinAllObjectsWithName",
        value: function(name2) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name2);
        }
      }]);
      return ParseObject2;
    }();
    var DefaultController = {
      fetch: function(target, forceFetch, options) {
        var localDatastore = _CoreManager.default.getLocalDatastore();
        if ((0, _isArray.default)(target)) {
          if (target.length < 1) {
            return _promise.default.resolve([]);
          }
          var objs = [];
          var ids = [];
          var className = null;
          var results2 = [];
          var error = null;
          (0, _forEach.default)(target).call(target, function(el) {
            if (error) {
              return;
            }
            if (!className) {
              className = el.className;
            }
            if (className !== el.className) {
              error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, "All objects should be of the same class");
            }
            if (!el.id) {
              error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, "All objects must have an ID");
            }
            if (forceFetch || !el.isDataAvailable()) {
              ids.push(el.id);
              objs.push(el);
            }
            results2.push(el);
          });
          if (error) {
            return _promise.default.reject(error);
          }
          var query = new _ParseQuery.default(className);
          query.containedIn("objectId", ids);
          if (options && options.include) {
            query.include(options.include);
          }
          query._limit = ids.length;
          return (0, _find.default)(query).call(query, options).then(function() {
            var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(objects) {
              var idMap, i4, obj, _i, _obj, id2, _iterator2, _step2, object;
              return _regenerator.default.wrap(function(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      idMap = {};
                      (0, _forEach.default)(objects).call(objects, function(o4) {
                        idMap[o4.id] = o4;
                      });
                      i4 = 0;
                    case 3:
                      if (!(i4 < objs.length)) {
                        _context8.next = 11;
                        break;
                      }
                      obj = objs[i4];
                      if (!(!obj || !obj.id || !idMap[obj.id])) {
                        _context8.next = 8;
                        break;
                      }
                      if (!forceFetch) {
                        _context8.next = 8;
                        break;
                      }
                      return _context8.abrupt("return", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, "All objects must exist on the server.")));
                    case 8:
                      i4++;
                      _context8.next = 3;
                      break;
                    case 11:
                      if (!singleInstance) {
                        for (_i = 0; _i < results2.length; _i++) {
                          _obj = results2[_i];
                          if (_obj && _obj.id && idMap[_obj.id]) {
                            id2 = _obj.id;
                            _obj._finishFetch(idMap[id2].toJSON());
                            results2[_i] = idMap[id2];
                          }
                        }
                      }
                      _iterator2 = _createForOfIteratorHelper(results2);
                      _context8.prev = 13;
                      _iterator2.s();
                    case 15:
                      if ((_step2 = _iterator2.n()).done) {
                        _context8.next = 21;
                        break;
                      }
                      object = _step2.value;
                      _context8.next = 19;
                      return localDatastore._updateObjectIfPinned(object);
                    case 19:
                      _context8.next = 15;
                      break;
                    case 21:
                      _context8.next = 26;
                      break;
                    case 23:
                      _context8.prev = 23;
                      _context8.t0 = _context8["catch"](13);
                      _iterator2.e(_context8.t0);
                    case 26:
                      _context8.prev = 26;
                      _iterator2.f();
                      return _context8.finish(26);
                    case 29:
                      return _context8.abrupt("return", _promise.default.resolve(results2));
                    case 30:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee4, null, [[13, 23, 26, 29]]);
            }));
            return function() {
              return _ref.apply(this, arguments);
            };
          }());
        }
        if (target instanceof ParseObject) {
          var _context9;
          if (!target.id) {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, "Object does not have an ID"));
          }
          var RESTController = _CoreManager.default.getRESTController();
          var params = {};
          if (options && options.include) {
            params.include = options.include.join();
          }
          return RESTController.request("GET", (0, _concat.default)(_context9 = "classes/".concat(target.className, "/")).call(_context9, target._getId()), params, options).then(function() {
            var _ref2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(response) {
              return _regenerator.default.wrap(function(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      target._clearPendingOps();
                      target._clearServerData();
                      target._finishFetch(response);
                      _context10.next = 5;
                      return localDatastore._updateObjectIfPinned(target);
                    case 5:
                      return _context10.abrupt("return", target);
                    case 6:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee5);
            }));
            return function() {
              return _ref2.apply(this, arguments);
            };
          }());
        }
        return _promise.default.resolve();
      },
      destroy: function(target, options) {
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee8() {
          var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors, _context14;
          return _regenerator.default.wrap(function(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get("REQUEST_BATCH_SIZE");
                  localDatastore = _CoreManager.default.getLocalDatastore();
                  RESTController = _CoreManager.default.getRESTController();
                  if (!(0, _isArray.default)(target)) {
                    _context16.next = 13;
                    break;
                  }
                  if (!(target.length < 1)) {
                    _context16.next = 6;
                    break;
                  }
                  return _context16.abrupt("return", _promise.default.resolve([]));
                case 6:
                  batches = [[]];
                  (0, _forEach.default)(target).call(target, function(obj) {
                    if (!obj.id) {
                      return;
                    }
                    batches[batches.length - 1].push(obj);
                    if (batches[batches.length - 1].length >= batchSize) {
                      batches.push([]);
                    }
                  });
                  if (batches[batches.length - 1].length === 0) {
                    batches.pop();
                  }
                  deleteCompleted = _promise.default.resolve();
                  errors = [];
                  (0, _forEach.default)(batches).call(batches, function(batch) {
                    deleteCompleted = deleteCompleted.then(function() {
                      return RESTController.request("POST", "batch", {
                        requests: (0, _map.default)(batch).call(batch, function(obj) {
                          var _context11, _context12;
                          return {
                            method: "DELETE",
                            path: (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = "".concat(getServerUrlPath(), "classes/")).call(_context12, obj.className, "/")).call(_context11, obj._getId()),
                            body: {}
                          };
                        })
                      }, options).then(function(results2) {
                        for (var i4 = 0; i4 < results2.length; i4++) {
                          if (results2[i4] && results2[i4].hasOwnProperty("error")) {
                            var err = new _ParseError.default(results2[i4].error.code, results2[i4].error.error);
                            err.object = batch[i4];
                            errors.push(err);
                          }
                        }
                      });
                    });
                  });
                  return _context16.abrupt("return", deleteCompleted.then((0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
                    var aggregate, _iterator3, _step3, object;
                    return _regenerator.default.wrap(function(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            if (!errors.length) {
                              _context13.next = 4;
                              break;
                            }
                            aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);
                            aggregate.errors = errors;
                            return _context13.abrupt("return", _promise.default.reject(aggregate));
                          case 4:
                            _iterator3 = _createForOfIteratorHelper(target);
                            _context13.prev = 5;
                            _iterator3.s();
                          case 7:
                            if ((_step3 = _iterator3.n()).done) {
                              _context13.next = 13;
                              break;
                            }
                            object = _step3.value;
                            _context13.next = 11;
                            return localDatastore._destroyObjectIfPinned(object);
                          case 11:
                            _context13.next = 7;
                            break;
                          case 13:
                            _context13.next = 18;
                            break;
                          case 15:
                            _context13.prev = 15;
                            _context13.t0 = _context13["catch"](5);
                            _iterator3.e(_context13.t0);
                          case 18:
                            _context13.prev = 18;
                            _iterator3.f();
                            return _context13.finish(18);
                          case 21:
                            return _context13.abrupt("return", _promise.default.resolve(target));
                          case 22:
                          case "end":
                            return _context13.stop();
                        }
                      }
                    }, _callee6, null, [[5, 15, 18, 21]]);
                  }))));
                case 13:
                  if (!(target instanceof ParseObject)) {
                    _context16.next = 15;
                    break;
                  }
                  return _context16.abrupt("return", RESTController.request("DELETE", (0, _concat.default)(_context14 = "classes/".concat(target.className, "/")).call(_context14, target._getId()), {}, options).then((0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7() {
                    return _regenerator.default.wrap(function(_context15) {
                      while (1) {
                        switch (_context15.prev = _context15.next) {
                          case 0:
                            _context15.next = 2;
                            return localDatastore._destroyObjectIfPinned(target);
                          case 2:
                            return _context15.abrupt("return", _promise.default.resolve(target));
                          case 3:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    }, _callee7);
                  }))));
                case 15:
                  return _context16.abrupt("return", _promise.default.resolve(target));
                case 16:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee8);
        }))();
      },
      save: function(target, options) {
        var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get("REQUEST_BATCH_SIZE");
        var localDatastore = _CoreManager.default.getLocalDatastore();
        var mapIdForPin = {};
        var RESTController = _CoreManager.default.getRESTController();
        var stateController = _CoreManager.default.getObjectStateController();
        options = options || {};
        options.returnStatus = options.returnStatus || true;
        if ((0, _isArray.default)(target)) {
          if (target.length < 1) {
            return _promise.default.resolve([]);
          }
          var unsaved = (0, _concat.default)(target).call(target);
          for (var i4 = 0; i4 < target.length; i4++) {
            if (target[i4] instanceof ParseObject) {
              unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i4], true));
            }
          }
          unsaved = (0, _unique.default)(unsaved);
          var filesSaved = [];
          var pending = [];
          (0, _forEach.default)(unsaved).call(unsaved, function(el) {
            if (el instanceof _ParseFile.default) {
              filesSaved.push(el.save(options));
            } else if (el instanceof ParseObject) {
              pending.push(el);
            }
          });
          return _promise.default.all(filesSaved).then(function() {
            var objectError = null;
            return (0, _promiseUtils.continueWhile)(function() {
              return pending.length > 0;
            }, function() {
              var batch = [];
              var nextPending = [];
              (0, _forEach.default)(pending).call(pending, function(el) {
                if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {
                  batch.push(el);
                } else {
                  nextPending.push(el);
                }
              });
              pending = nextPending;
              if (batch.length < 1) {
                return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Tried to save a batch with a cycle."));
              }
              var batchReturned = new _promiseUtils.resolvingPromise();
              var batchReady = [];
              var batchTasks = [];
              (0, _forEach.default)(batch).call(batch, function(obj, index) {
                var ready = new _promiseUtils.resolvingPromise();
                batchReady.push(ready);
                stateController.pushPendingState(obj._getStateIdentifier());
                batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function() {
                  ready.resolve();
                  return batchReturned.then(function(responses) {
                    if (responses[index].hasOwnProperty("success")) {
                      var objectId = responses[index].success.objectId;
                      var status = responses[index]._status;
                      delete responses[index]._status;
                      mapIdForPin[objectId] = obj._localId;
                      obj._handleSaveResponse(responses[index].success, status);
                    } else {
                      if (!objectError && responses[index].hasOwnProperty("error")) {
                        var serverError = responses[index].error;
                        objectError = new _ParseError.default(serverError.code, serverError.error);
                        pending = [];
                      }
                      obj._handleSaveError();
                    }
                  });
                }));
              });
              (0, _promiseUtils.when)(batchReady).then(function() {
                return RESTController.request("POST", "batch", {
                  requests: (0, _map.default)(batch).call(batch, function(obj) {
                    var params = obj._getSaveParams();
                    params.path = getServerUrlPath() + params.path;
                    return params;
                  })
                }, options);
              }).then(batchReturned.resolve, function(error) {
                batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));
              });
              return (0, _promiseUtils.when)(batchTasks);
            }).then((0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee9() {
              var _iterator4, _step4, object;
              return _regenerator.default.wrap(function(_context17) {
                while (1) {
                  switch (_context17.prev = _context17.next) {
                    case 0:
                      if (!objectError) {
                        _context17.next = 2;
                        break;
                      }
                      return _context17.abrupt("return", _promise.default.reject(objectError));
                    case 2:
                      _iterator4 = _createForOfIteratorHelper(target);
                      _context17.prev = 3;
                      _iterator4.s();
                    case 5:
                      if ((_step4 = _iterator4.n()).done) {
                        _context17.next = 13;
                        break;
                      }
                      object = _step4.value;
                      _context17.next = 9;
                      return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);
                    case 9:
                      _context17.next = 11;
                      return localDatastore._updateObjectIfPinned(object);
                    case 11:
                      _context17.next = 5;
                      break;
                    case 13:
                      _context17.next = 18;
                      break;
                    case 15:
                      _context17.prev = 15;
                      _context17.t0 = _context17["catch"](3);
                      _iterator4.e(_context17.t0);
                    case 18:
                      _context17.prev = 18;
                      _iterator4.f();
                      return _context17.finish(18);
                    case 21:
                      return _context17.abrupt("return", _promise.default.resolve(target));
                    case 22:
                    case "end":
                      return _context17.stop();
                  }
                }
              }, _callee9, null, [[3, 15, 18, 21]]);
            })));
          });
        }
        if (target instanceof ParseObject) {
          target._getId();
          var localId = target._localId;
          var targetCopy = target;
          var task = function() {
            var params = targetCopy._getSaveParams();
            return RESTController.request(params.method, params.path, params.body, options).then(function(response) {
              var status = response._status;
              delete response._status;
              targetCopy._handleSaveResponse(response, status);
            }, function(error) {
              targetCopy._handleSaveError();
              return _promise.default.reject(error);
            });
          };
          stateController.pushPendingState(target._getStateIdentifier());
          return stateController.enqueueTask(target._getStateIdentifier(), task).then((0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee10() {
            return _regenerator.default.wrap(function(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    _context18.next = 2;
                    return localDatastore._updateLocalIdForObject(localId, target);
                  case 2:
                    _context18.next = 4;
                    return localDatastore._updateObjectIfPinned(target);
                  case 4:
                    return _context18.abrupt("return", target);
                  case 5:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee10);
          })), function(error) {
            return _promise.default.reject(error);
          });
        }
        return _promise.default.resolve();
      }
    };
    _CoreManager.default.setObjectController(DefaultController);
    var _default = ParseObject;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseRole.js
var require_ParseRole = __commonJS({
  "node_modules/moralis/lib/browser/ParseRole.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _get2 = _interopRequireDefault(require_get7());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var ParseRole = function(_ParseObject) {
      (0, _inherits2.default)(ParseRole2, _ParseObject);
      var _super = _createSuper(ParseRole2);
      function ParseRole2(name2, acl) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseRole2);
        _this = _super.call(this, "_Role");
        if (typeof name2 === "string" && acl instanceof _ParseACL.default) {
          _this.setName(name2);
          _this.setACL(acl);
        }
        return _this;
      }
      (0, _createClass2.default)(ParseRole2, [{
        key: "getName",
        value: function() {
          var name2 = this.get("name");
          if (name2 == null || typeof name2 === "string") {
            return name2;
          }
          return "";
        }
      }, {
        key: "setName",
        value: function(name2, options) {
          return this.set("name", name2, options);
        }
      }, {
        key: "getUsers",
        value: function() {
          return this.relation("users");
        }
      }, {
        key: "getRoles",
        value: function() {
          return this.relation("roles");
        }
      }, {
        key: "validate",
        value: function(attrs, options) {
          var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole2.prototype), "validate", this).call(this, attrs, options);
          if (isInvalid) {
            return isInvalid;
          }
          if ("name" in attrs && attrs.name !== this.getName()) {
            var newName = attrs.name;
            if (this.id && this.id !== attrs.objectId) {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can only be set before it has been saved.");
            }
            if (typeof newName !== "string") {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name must be a String.");
            }
            if (!/^[0-9a-zA-Z\-_ ]+$/.test(newName)) {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can be only contain alphanumeric characters, _, -, and spaces.");
            }
          }
          return false;
        }
      }]);
      return ParseRole2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_Role", ParseRole);
    var _default = ParseRole;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/AnonymousUtils.js
var require_AnonymousUtils = __commonJS({
  "node_modules/moralis/lib/browser/AnonymousUtils.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var registered = false;
    var AnonymousUtils = {
      isLinked: function(user) {
        var provider = this._getAuthProvider();
        return user._isLinked(provider.getAuthType());
      },
      logIn: function(options) {
        var provider = this._getAuthProvider();
        return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);
      },
      link: function(user, options) {
        var provider = this._getAuthProvider();
        return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);
      },
      _getAuthProvider: function() {
        var provider = {
          restoreAuthentication: function() {
            return true;
          },
          getAuthType: function() {
            return "anonymous";
          },
          getAuthData: function() {
            return {
              authData: {
                id: uuidv4()
              }
            };
          }
        };
        if (!registered) {
          _ParseUser.default._registerAuthenticationProvider(provider);
          registered = true;
        }
        return provider;
      }
    };
    var _default = AnonymousUtils;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/isRevocableSession.js
var require_isRevocableSession = __commonJS({
  "node_modules/moralis/lib/browser/isRevocableSession.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRevocableSession;
    var _indexOf = _interopRequireDefault(require_index_of8());
    function isRevocableSession(token) {
      return (0, _indexOf.default)(token).call(token, "r:") > -1;
    }
  }
});

// node_modules/moralis/lib/browser/ParseSession.js
var require_ParseSession = __commonJS({
  "node_modules/moralis/lib/browser/ParseSession.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _isRevocableSession = _interopRequireDefault(require_isRevocableSession());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var ParseSession = function(_ParseObject) {
      (0, _inherits2.default)(ParseSession2, _ParseObject);
      var _super = _createSuper(ParseSession2);
      function ParseSession2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseSession2);
        _this = _super.call(this, "_Session");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Session");
          }
        }
        return _this;
      }
      (0, _createClass2.default)(ParseSession2, [{
        key: "getSessionToken",
        value: function() {
          var token = this.get("sessionToken");
          if (typeof token === "string") {
            return token;
          }
          return "";
        }
      }], [{
        key: "readOnlyAttributes",
        value: function() {
          return ["createdWith", "expiresAt", "installationId", "restricted", "sessionToken", "user"];
        }
      }, {
        key: "current",
        value: function(options) {
          options = options || {};
          var controller = _CoreManager.default.getSessionController();
          var sessionOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            sessionOptions.useMasterKey = options.useMasterKey;
          }
          return _ParseUser.default.currentAsync().then(function(user) {
            if (!user) {
              return _promise.default.reject("There is no current user.");
            }
            sessionOptions.sessionToken = user.getSessionToken();
            return controller.getSession(sessionOptions);
          });
        }
      }, {
        key: "isCurrentSessionRevocable",
        value: function() {
          var currentUser = _ParseUser.default.current();
          if (currentUser) {
            return (0, _isRevocableSession.default)(currentUser.getSessionToken() || "");
          }
          return false;
        }
      }]);
      return ParseSession2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_Session", ParseSession);
    var DefaultController = {
      getSession: function(options) {
        var RESTController = _CoreManager.default.getRESTController();
        var session = new ParseSession();
        return RESTController.request("GET", "sessions/me", {}, options).then(function(sessionData) {
          session._finishFetch(sessionData);
          session._setExisted(true);
          return session;
        });
      }
    };
    _CoreManager.default.setSessionController(DefaultController);
    var _default = ParseSession;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/string-trim-forced.js
var require_string_trim_forced = __commonJS({
  "node_modules/core-js-pure/internals/string-trim-forced.js"(exports, module) {
    var PROPER_FUNCTION_NAME = require_function_name().PROPER;
    var fails = require_fails();
    var whitespaces = require_whitespaces();
    var non = "\u200B\x85\u180E";
    module.exports = function(METHOD_NAME) {
      return fails(function() {
        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
      });
    };
  }
});

// node_modules/core-js-pure/modules/es.string.trim.js
var require_es_string_trim = __commonJS({
  "node_modules/core-js-pure/modules/es.string.trim.js"() {
    "use strict";
    var $3 = require_export();
    var $trim = require_string_trim().trim;
    var forcedStringTrimMethod = require_string_trim_forced();
    $3({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
      trim: function trim() {
        return $trim(this);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/trim.js
var require_trim = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/trim.js"(exports, module) {
    require_es_string_trim();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").trim;
  }
});

// node_modules/core-js-pure/es/instance/trim.js
var require_trim2 = __commonJS({
  "node_modules/core-js-pure/es/instance/trim.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_trim();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.trim;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.trim ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/trim.js
var require_trim3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/trim.js"(exports, module) {
    var parent = require_trim2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js
var require_trim4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js"(exports, module) {
    module.exports = require_trim3();
  }
});

// node_modules/core-js-pure/modules/es.array.every.js
var require_es_array_every = __commonJS({
  "node_modules/core-js-pure/modules/es.array.every.js"() {
    "use strict";
    var $3 = require_export();
    var $every = require_array_iteration().every;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("every");
    $3({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
      every: function every(callbackfn) {
        return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/every.js
var require_every = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/every.js"(exports, module) {
    require_es_array_every();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").every;
  }
});

// node_modules/core-js-pure/es/instance/every.js
var require_every2 = __commonJS({
  "node_modules/core-js-pure/es/instance/every.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_every();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.every;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.every ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/every.js
var require_every3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/every.js"(exports, module) {
    var parent = require_every2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js
var require_every4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js"(exports, module) {
    module.exports = require_every3();
  }
});

// node_modules/core-js-pure/modules/es.object.values.js
var require_es_object_values = __commonJS({
  "node_modules/core-js-pure/modules/es.object.values.js"() {
    var $3 = require_export();
    var $values = require_object_to_array().values;
    $3({ target: "Object", stat: true }, {
      values: function values(O3) {
        return $values(O3);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/values.js
var require_values = __commonJS({
  "node_modules/core-js-pure/es/object/values.js"(exports, module) {
    require_es_object_values();
    var path = require_path();
    module.exports = path.Object.values;
  }
});

// node_modules/core-js-pure/stable/object/values.js
var require_values2 = __commonJS({
  "node_modules/core-js-pure/stable/object/values.js"(exports, module) {
    var parent = require_values();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js
var require_values3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js"(exports, module) {
    module.exports = require_values2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js
var require_bind8 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js"(exports, module) {
    module.exports = require_bind3();
  }
});

// node_modules/moralis/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/moralis/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_buffer(), __toCommonJS(buffer_exports)).Buffer;
        }
      } catch (e3) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i4 = 0; i4 < this.length; i4++) {
          this.words[i4] = 0;
        }
        var j4, w5;
        var off = 0;
        if (endian === "be") {
          for (i4 = number.length - 1, j4 = 0; i4 >= 0; i4 -= 3) {
            w5 = number[i4] | number[i4 - 1] << 8 | number[i4 - 2] << 16;
            this.words[j4] |= w5 << off & 67108863;
            this.words[j4 + 1] = w5 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j4++;
            }
          }
        } else if (endian === "le") {
          for (i4 = 0, j4 = 0; i4 < number.length; i4 += 3) {
            w5 = number[i4] | number[i4 + 1] << 8 | number[i4 + 2] << 16;
            this.words[j4] |= w5 << off & 67108863;
            this.words[j4 + 1] = w5 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j4++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c4 = string.charCodeAt(index);
        if (c4 >= 65 && c4 <= 70) {
          return c4 - 55;
        } else if (c4 >= 97 && c4 <= 102) {
          return c4 - 87;
        } else {
          return c4 - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r4 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r4 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r4;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i4 = 0; i4 < this.length; i4++) {
          this.words[i4] = 0;
        }
        var off = 0;
        var j4 = 0;
        var w5;
        if (endian === "be") {
          for (i4 = number.length - 1; i4 >= start; i4 -= 2) {
            w5 = parseHexByte(number, start, i4) << off;
            this.words[j4] |= w5 & 67108863;
            if (off >= 18) {
              off -= 18;
              j4 += 1;
              this.words[j4] |= w5 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i4 = parseLength % 2 === 0 ? start + 1 : start; i4 < number.length; i4 += 2) {
            w5 = parseHexByte(number, start, i4) << off;
            this.words[j4] |= w5 & 67108863;
            if (off >= 18) {
              off -= 18;
              j4 += 1;
              this.words[j4] |= w5 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r4 = 0;
        var len = Math.min(str.length, end);
        for (var i4 = start; i4 < len; i4++) {
          var c4 = str.charCodeAt(i4) - 48;
          r4 *= mul3;
          if (c4 >= 49) {
            r4 += c4 - 49 + 10;
          } else if (c4 >= 17) {
            r4 += c4 - 17 + 10;
          } else {
            r4 += c4;
          }
        }
        return r4;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i4 = start; i4 < end; i4 += limbLen) {
          word = parseBase(number, i4, i4 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i4, number.length, base2);
          for (i4 = 0; i4 < mod; i4++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i4 = 0; i4 < this.length; i4++) {
          dest.words[i4] = this.words[i4];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r4 = new BN3(null);
        this.copy(r4);
        return r4;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString2(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i4 = 0; i4 < this.length; i4++) {
            var w5 = this.words[i4];
            var word = ((w5 << off | carry) & 16777215).toString(16);
            carry = w5 >>> 24 - off & 16777215;
            if (carry !== 0 || i4 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i4--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c4 = this.clone();
          c4.negative = 0;
          while (!c4.isZero()) {
            var r4 = c4.modn(groupBase).toString(base2);
            c4 = c4.idivn(groupBase);
            if (!c4.isZero()) {
              out = zeros2[groupSize - r4.length] + r4 + out;
            } else {
              out = r4 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b3, i4;
        var q4 = this.clone();
        if (!littleEndian) {
          for (i4 = 0; i4 < reqLength - byteLength; i4++) {
            res[i4] = 0;
          }
          for (i4 = 0; !q4.isZero(); i4++) {
            b3 = q4.andln(255);
            q4.iushrn(8);
            res[reqLength - i4 - 1] = b3;
          }
        } else {
          for (i4 = 0; !q4.isZero(); i4++) {
            b3 = q4.andln(255);
            q4.iushrn(8);
            res[i4] = b3;
          }
          for (; i4 < reqLength; i4++) {
            res[i4] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w5) {
          return 32 - Math.clz32(w5);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w5) {
          var t4 = w5;
          var r4 = 0;
          if (t4 >= 4096) {
            r4 += 13;
            t4 >>>= 13;
          }
          if (t4 >= 64) {
            r4 += 7;
            t4 >>>= 7;
          }
          if (t4 >= 8) {
            r4 += 4;
            t4 >>>= 4;
          }
          if (t4 >= 2) {
            r4 += 2;
            t4 >>>= 2;
          }
          return r4 + t4;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w5) {
        if (w5 === 0)
          return 26;
        var t4 = w5;
        var r4 = 0;
        if ((t4 & 8191) === 0) {
          r4 += 13;
          t4 >>>= 13;
        }
        if ((t4 & 127) === 0) {
          r4 += 7;
          t4 >>>= 7;
        }
        if ((t4 & 15) === 0) {
          r4 += 4;
          t4 >>>= 4;
        }
        if ((t4 & 3) === 0) {
          r4 += 2;
          t4 >>>= 2;
        }
        if ((t4 & 1) === 0) {
          r4++;
        }
        return r4;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w5 = this.words[this.length - 1];
        var hi = this._countBits(w5);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w5 = new Array(num.bitLength());
        for (var bit = 0; bit < w5.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w5[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w5;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r4 = 0;
        for (var i4 = 0; i4 < this.length; i4++) {
          var b3 = this._zeroBits(this.words[i4]);
          r4 += b3;
          if (b3 !== 26)
            break;
        }
        return r4;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i4 = 0; i4 < num.length; i4++) {
          this.words[i4] = this.words[i4] | num.words[i4];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b3;
        if (this.length > num.length) {
          b3 = num;
        } else {
          b3 = this;
        }
        for (var i4 = 0; i4 < b3.length; i4++) {
          this.words[i4] = this.words[i4] & num.words[i4];
        }
        this.length = b3.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a4;
        var b3;
        if (this.length > num.length) {
          a4 = this;
          b3 = num;
        } else {
          a4 = num;
          b3 = this;
        }
        for (var i4 = 0; i4 < b3.length; i4++) {
          this.words[i4] = a4.words[i4] ^ b3.words[i4];
        }
        if (this !== a4) {
          for (; i4 < a4.length; i4++) {
            this.words[i4] = a4.words[i4];
          }
        }
        this.length = a4.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i4 = 0; i4 < bytesNeeded; i4++) {
          this.words[i4] = ~this.words[i4] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i4] = ~this.words[i4] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r4;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r4 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r4 = this.isub(num);
          num.negative = 1;
          return r4._normSign();
        }
        var a4, b3;
        if (this.length > num.length) {
          a4 = this;
          b3 = num;
        } else {
          a4 = num;
          b3 = this;
        }
        var carry = 0;
        for (var i4 = 0; i4 < b3.length; i4++) {
          r4 = (a4.words[i4] | 0) + (b3.words[i4] | 0) + carry;
          this.words[i4] = r4 & 67108863;
          carry = r4 >>> 26;
        }
        for (; carry !== 0 && i4 < a4.length; i4++) {
          r4 = (a4.words[i4] | 0) + carry;
          this.words[i4] = r4 & 67108863;
          carry = r4 >>> 26;
        }
        this.length = a4.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a4 !== this) {
          for (; i4 < a4.length; i4++) {
            this.words[i4] = a4.words[i4];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r4 = this.iadd(num);
          num.negative = 1;
          return r4._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a4, b3;
        if (cmp > 0) {
          a4 = this;
          b3 = num;
        } else {
          a4 = num;
          b3 = this;
        }
        var carry = 0;
        for (var i4 = 0; i4 < b3.length; i4++) {
          r4 = (a4.words[i4] | 0) - (b3.words[i4] | 0) + carry;
          carry = r4 >> 26;
          this.words[i4] = r4 & 67108863;
        }
        for (; carry !== 0 && i4 < a4.length; i4++) {
          r4 = (a4.words[i4] | 0) + carry;
          carry = r4 >> 26;
          this.words[i4] = r4 & 67108863;
        }
        if (carry === 0 && i4 < a4.length && a4 !== this) {
          for (; i4 < a4.length; i4++) {
            this.words[i4] = a4.words[i4];
          }
        }
        this.length = Math.max(this.length, i4);
        if (a4 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a4 = self2.words[0] | 0;
        var b3 = num.words[0] | 0;
        var r4 = a4 * b3;
        var lo = r4 & 67108863;
        var carry = r4 / 67108864 | 0;
        out.words[0] = lo;
        for (var k4 = 1; k4 < len; k4++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k4, num.length - 1);
          for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
            var i4 = k4 - j4 | 0;
            a4 = self2.words[i4] | 0;
            b3 = num.words[j4] | 0;
            r4 = a4 * b3 + rword;
            ncarry += r4 / 67108864 | 0;
            rword = r4 & 67108863;
          }
          out.words[k4] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k4] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a4 = self2.words;
        var b3 = num.words;
        var o4 = out.words;
        var c4 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a4[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a4[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a4[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a4[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a4[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a5 = a4[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a4[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a4[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a4[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a4[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b3[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b3[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b3[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b3[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b4 = b3[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b3[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b3[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b3[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b3[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b3[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w22 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w32 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w42 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w42 >>> 26) | 0;
        w42 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c4 + lo | 0) + ((mid & 8191) << 13) | 0;
        c4 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o4[0] = w0;
        o4[1] = w1;
        o4[2] = w22;
        o4[3] = w32;
        o4[4] = w42;
        o4[5] = w5;
        o4[6] = w6;
        o4[7] = w7;
        o4[8] = w8;
        o4[9] = w9;
        o4[10] = w10;
        o4[11] = w11;
        o4[12] = w12;
        o4[13] = w13;
        o4[14] = w14;
        o4[15] = w15;
        o4[16] = w16;
        o4[17] = w17;
        o4[18] = w18;
        if (c4 !== 0) {
          o4[19] = c4;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k4 = 0; k4 < out.length - 1; k4++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k4, num.length - 1);
          for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
            var i4 = k4 - j4;
            var a4 = self2.words[i4] | 0;
            var b3 = num.words[j4] | 0;
            var r4 = a4 * b3;
            var lo = r4 & 67108863;
            ncarry = ncarry + (r4 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k4] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k4] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x4, y4) {
        this.x = x4;
        this.y = y4;
      }
      FFTM.prototype.makeRBT = function makeRBT(N4) {
        var t4 = new Array(N4);
        var l4 = BN3.prototype._countBits(N4) - 1;
        for (var i4 = 0; i4 < N4; i4++) {
          t4[i4] = this.revBin(i4, l4, N4);
        }
        return t4;
      };
      FFTM.prototype.revBin = function revBin(x4, l4, N4) {
        if (x4 === 0 || x4 === N4 - 1)
          return x4;
        var rb = 0;
        for (var i4 = 0; i4 < l4; i4++) {
          rb |= (x4 & 1) << l4 - i4 - 1;
          x4 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
        for (var i4 = 0; i4 < N4; i4++) {
          rtws[i4] = rws[rbt[i4]];
          itws[i4] = iws[rbt[i4]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N4);
        for (var s4 = 1; s4 < N4; s4 <<= 1) {
          var l4 = s4 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l4);
          var itwdf = Math.sin(2 * Math.PI / l4);
          for (var p4 = 0; p4 < N4; p4 += l4) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j4 = 0; j4 < s4; j4++) {
              var re = rtws[p4 + j4];
              var ie = itws[p4 + j4];
              var ro = rtws[p4 + j4 + s4];
              var io = itws[p4 + j4 + s4];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p4 + j4] = re + ro;
              itws[p4 + j4] = ie + io;
              rtws[p4 + j4 + s4] = re - ro;
              itws[p4 + j4 + s4] = ie - io;
              if (j4 !== l4) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n3, m3) {
        var N4 = Math.max(m3, n3) | 1;
        var odd = N4 & 1;
        var i4 = 0;
        for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
          i4++;
        }
        return 1 << i4 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
        if (N4 <= 1)
          return;
        for (var i4 = 0; i4 < N4 / 2; i4++) {
          var t4 = rws[i4];
          rws[i4] = rws[N4 - i4 - 1];
          rws[N4 - i4 - 1] = t4;
          t4 = iws[i4];
          iws[i4] = -iws[N4 - i4 - 1];
          iws[N4 - i4 - 1] = -t4;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
        var carry = 0;
        for (var i4 = 0; i4 < N4 / 2; i4++) {
          var w5 = Math.round(ws[2 * i4 + 1] / N4) * 8192 + Math.round(ws[2 * i4] / N4) + carry;
          ws[i4] = w5 & 67108863;
          if (w5 < 67108864) {
            carry = 0;
          } else {
            carry = w5 / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
        var carry = 0;
        for (var i4 = 0; i4 < len; i4++) {
          carry = carry + (ws[i4] | 0);
          rws[2 * i4] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i4 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i4 = 2 * len; i4 < N4; ++i4) {
          rws[i4] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N4) {
        var ph = new Array(N4);
        for (var i4 = 0; i4 < N4; i4++) {
          ph[i4] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x4, y4, out) {
        var N4 = 2 * this.guessLen13b(x4.length, y4.length);
        var rbt = this.makeRBT(N4);
        var _5 = this.stub(N4);
        var rws = new Array(N4);
        var rwst = new Array(N4);
        var iwst = new Array(N4);
        var nrws = new Array(N4);
        var nrwst = new Array(N4);
        var niwst = new Array(N4);
        var rmws = out.words;
        rmws.length = N4;
        this.convert13b(x4.words, x4.length, rws, N4);
        this.convert13b(y4.words, y4.length, nrws, N4);
        this.transform(rws, _5, rwst, iwst, N4, rbt);
        this.transform(nrws, _5, nrwst, niwst, N4, rbt);
        for (var i4 = 0; i4 < N4; i4++) {
          var rx = rwst[i4] * nrwst[i4] - iwst[i4] * niwst[i4];
          iwst[i4] = rwst[i4] * niwst[i4] + iwst[i4] * nrwst[i4];
          rwst[i4] = rx;
        }
        this.conjugate(rwst, iwst, N4);
        this.transform(rwst, iwst, rmws, _5, N4, rbt);
        this.conjugate(rmws, _5, N4);
        this.normalize13b(rmws, N4);
        out.negative = x4.negative ^ y4.negative;
        out.length = x4.length + y4.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i4 = 0; i4 < this.length; i4++) {
          var w5 = (this.words[i4] | 0) * num;
          var lo = (w5 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w5 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i4] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i4] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w5 = toBitArray(num);
        if (w5.length === 0)
          return new BN3(1);
        var res = this;
        for (var i4 = 0; i4 < w5.length; i4++, res = res.sqr()) {
          if (w5[i4] !== 0)
            break;
        }
        if (++i4 < w5.length) {
          for (var q4 = res.sqr(); i4 < w5.length; i4++, q4 = q4.sqr()) {
            if (w5[i4] === 0)
              continue;
            res = res.mul(q4);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r4 = bits % 26;
        var s4 = (bits - r4) / 26;
        var carryMask = 67108863 >>> 26 - r4 << 26 - r4;
        var i4;
        if (r4 !== 0) {
          var carry = 0;
          for (i4 = 0; i4 < this.length; i4++) {
            var newCarry = this.words[i4] & carryMask;
            var c4 = (this.words[i4] | 0) - newCarry << r4;
            this.words[i4] = c4 | carry;
            carry = newCarry >>> 26 - r4;
          }
          if (carry) {
            this.words[i4] = carry;
            this.length++;
          }
        }
        if (s4 !== 0) {
          for (i4 = this.length - 1; i4 >= 0; i4--) {
            this.words[i4 + s4] = this.words[i4];
          }
          for (i4 = 0; i4 < s4; i4++) {
            this.words[i4] = 0;
          }
          this.length += s4;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h4;
        if (hint) {
          h4 = (hint - hint % 26) / 26;
        } else {
          h4 = 0;
        }
        var r4 = bits % 26;
        var s4 = Math.min((bits - r4) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r4 << r4;
        var maskedWords = extended;
        h4 -= s4;
        h4 = Math.max(0, h4);
        if (maskedWords) {
          for (var i4 = 0; i4 < s4; i4++) {
            maskedWords.words[i4] = this.words[i4];
          }
          maskedWords.length = s4;
        }
        if (s4 === 0) {
        } else if (this.length > s4) {
          this.length -= s4;
          for (i4 = 0; i4 < this.length; i4++) {
            this.words[i4] = this.words[i4 + s4];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i4 = this.length - 1; i4 >= 0 && (carry !== 0 || i4 >= h4); i4--) {
          var word = this.words[i4] | 0;
          this.words[i4] = carry << 26 - r4 | word >>> r4;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r4 = bit % 26;
        var s4 = (bit - r4) / 26;
        var q4 = 1 << r4;
        if (this.length <= s4)
          return false;
        var w5 = this.words[s4];
        return !!(w5 & q4);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r4 = bits % 26;
        var s4 = (bits - r4) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s4) {
          return this;
        }
        if (r4 !== 0) {
          s4++;
        }
        this.length = Math.min(s4, this.length);
        if (r4 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r4 << r4;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i4 = 0; i4 < this.length && this.words[i4] >= 67108864; i4++) {
          this.words[i4] -= 67108864;
          if (i4 === this.length - 1) {
            this.words[i4 + 1] = 1;
          } else {
            this.words[i4 + 1]++;
          }
        }
        this.length = Math.max(this.length, i4 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i4 = 0; i4 < this.length && this.words[i4] < 0; i4++) {
            this.words[i4] += 67108864;
            this.words[i4 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i4;
        this._expand(len);
        var w5;
        var carry = 0;
        for (i4 = 0; i4 < num.length; i4++) {
          w5 = (this.words[i4 + shift] | 0) + carry;
          var right = (num.words[i4] | 0) * mul3;
          w5 -= right & 67108863;
          carry = (w5 >> 26) - (right / 67108864 | 0);
          this.words[i4 + shift] = w5 & 67108863;
        }
        for (; i4 < this.length - shift; i4++) {
          w5 = (this.words[i4 + shift] | 0) + carry;
          carry = w5 >> 26;
          this.words[i4 + shift] = w5 & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i4 = 0; i4 < this.length; i4++) {
          w5 = -(this.words[i4] | 0) + carry;
          carry = w5 >> 26;
          this.words[i4] = w5 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a4 = this.clone();
        var b3 = num;
        var bhi = b3.words[b3.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b3 = b3.ushln(shift);
          a4.iushln(shift);
          bhi = b3.words[b3.length - 1] | 0;
        }
        var m3 = a4.length - b3.length;
        var q4;
        if (mode !== "mod") {
          q4 = new BN3(null);
          q4.length = m3 + 1;
          q4.words = new Array(q4.length);
          for (var i4 = 0; i4 < q4.length; i4++) {
            q4.words[i4] = 0;
          }
        }
        var diff = a4.clone()._ishlnsubmul(b3, 1, m3);
        if (diff.negative === 0) {
          a4 = diff;
          if (q4) {
            q4.words[m3] = 1;
          }
        }
        for (var j4 = m3 - 1; j4 >= 0; j4--) {
          var qj = (a4.words[b3.length + j4] | 0) * 67108864 + (a4.words[b3.length + j4 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a4._ishlnsubmul(b3, qj, j4);
          while (a4.negative !== 0) {
            qj--;
            a4.negative = 0;
            a4._ishlnsubmul(b3, 1, j4);
            if (!a4.isZero()) {
              a4.negative ^= 1;
            }
          }
          if (q4) {
            q4.words[j4] = qj;
          }
        }
        if (q4) {
          q4.strip();
        }
        a4.strip();
        if (mode !== "div" && shift !== 0) {
          a4.iushrn(shift);
        }
        return {
          div: q4 || null,
          mod: a4
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p4 = (1 << 26) % num;
        var acc = 0;
        for (var i4 = this.length - 1; i4 >= 0; i4--) {
          acc = (p4 * acc + (this.words[i4] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i4 = this.length - 1; i4 >= 0; i4--) {
          var w5 = (this.words[i4] | 0) + carry * 67108864;
          this.words[i4] = w5 / num | 0;
          carry = w5 % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p4) {
        assert2(p4.negative === 0);
        assert2(!p4.isZero());
        var x4 = this;
        var y4 = p4.clone();
        if (x4.negative !== 0) {
          x4 = x4.umod(p4);
        } else {
          x4 = x4.clone();
        }
        var A5 = new BN3(1);
        var B3 = new BN3(0);
        var C3 = new BN3(0);
        var D4 = new BN3(1);
        var g4 = 0;
        while (x4.isEven() && y4.isEven()) {
          x4.iushrn(1);
          y4.iushrn(1);
          ++g4;
        }
        var yp = y4.clone();
        var xp = x4.clone();
        while (!x4.isZero()) {
          for (var i4 = 0, im = 1; (x4.words[0] & im) === 0 && i4 < 26; ++i4, im <<= 1)
            ;
          if (i4 > 0) {
            x4.iushrn(i4);
            while (i4-- > 0) {
              if (A5.isOdd() || B3.isOdd()) {
                A5.iadd(yp);
                B3.isub(xp);
              }
              A5.iushrn(1);
              B3.iushrn(1);
            }
          }
          for (var j4 = 0, jm = 1; (y4.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
            ;
          if (j4 > 0) {
            y4.iushrn(j4);
            while (j4-- > 0) {
              if (C3.isOdd() || D4.isOdd()) {
                C3.iadd(yp);
                D4.isub(xp);
              }
              C3.iushrn(1);
              D4.iushrn(1);
            }
          }
          if (x4.cmp(y4) >= 0) {
            x4.isub(y4);
            A5.isub(C3);
            B3.isub(D4);
          } else {
            y4.isub(x4);
            C3.isub(A5);
            D4.isub(B3);
          }
        }
        return {
          a: C3,
          b: D4,
          gcd: y4.iushln(g4)
        };
      };
      BN3.prototype._invmp = function _invmp(p4) {
        assert2(p4.negative === 0);
        assert2(!p4.isZero());
        var a4 = this;
        var b3 = p4.clone();
        if (a4.negative !== 0) {
          a4 = a4.umod(p4);
        } else {
          a4 = a4.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b3.clone();
        while (a4.cmpn(1) > 0 && b3.cmpn(1) > 0) {
          for (var i4 = 0, im = 1; (a4.words[0] & im) === 0 && i4 < 26; ++i4, im <<= 1)
            ;
          if (i4 > 0) {
            a4.iushrn(i4);
            while (i4-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j4 = 0, jm = 1; (b3.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
            ;
          if (j4 > 0) {
            b3.iushrn(j4);
            while (j4-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a4.cmp(b3) >= 0) {
            a4.isub(b3);
            x1.isub(x22);
          } else {
            b3.isub(a4);
            x22.isub(x1);
          }
        }
        var res;
        if (a4.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p4);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a4 = this.clone();
        var b3 = num.clone();
        a4.negative = 0;
        b3.negative = 0;
        for (var shift = 0; a4.isEven() && b3.isEven(); shift++) {
          a4.iushrn(1);
          b3.iushrn(1);
        }
        do {
          while (a4.isEven()) {
            a4.iushrn(1);
          }
          while (b3.isEven()) {
            b3.iushrn(1);
          }
          var r4 = a4.cmp(b3);
          if (r4 < 0) {
            var t4 = a4;
            a4 = b3;
            b3 = t4;
          } else if (r4 === 0 || b3.cmpn(1) === 0) {
            break;
          }
          a4.isub(b3);
        } while (true);
        return b3.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r4 = bit % 26;
        var s4 = (bit - r4) / 26;
        var q4 = 1 << r4;
        if (this.length <= s4) {
          this._expand(s4 + 1);
          this.words[s4] |= q4;
          return this;
        }
        var carry = q4;
        for (var i4 = s4; carry !== 0 && i4 < this.length; i4++) {
          var w5 = this.words[i4] | 0;
          w5 += carry;
          carry = w5 >>> 26;
          w5 &= 67108863;
          this.words[i4] = w5;
        }
        if (carry !== 0) {
          this.words[i4] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w5 = this.words[0] | 0;
          res = w5 === num ? 0 : w5 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i4 = this.length - 1; i4 >= 0; i4--) {
          var a4 = this.words[i4] | 0;
          var b3 = num.words[i4] | 0;
          if (a4 === b3)
            continue;
          if (a4 < b3) {
            res = -1;
          } else if (a4 > b3) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p4) {
        this.name = name2;
        this.p = new BN3(p4, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r4 = num;
        var rlen;
        do {
          this.split(r4, this.tmp);
          r4 = this.imulK(r4);
          r4 = r4.iadd(this.tmp);
          rlen = r4.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r4.ucmp(this.p);
        if (cmp === 0) {
          r4.words[0] = 0;
          r4.length = 1;
        } else if (cmp > 0) {
          r4.isub(this.p);
        } else {
          if (r4.strip !== void 0) {
            r4.strip();
          } else {
            r4._strip();
          }
        }
        return r4;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i4 = 0; i4 < outLen; i4++) {
          output.words[i4] = input.words[i4];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i4 = 10; i4 < input.length; i4++) {
          var next = input.words[i4] | 0;
          input.words[i4 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i4 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i4 = 0; i4 < num.length; i4++) {
          var w5 = num.words[i4] | 0;
          lo += w5 * 977;
          num.words[i4] = lo & 67108863;
          lo = w5 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i4 = 0; i4 < num.length; i4++) {
          var hi = (num.words[i4] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i4] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m3) {
        if (typeof m3 === "string") {
          var prime = BN3._prime(m3);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m3.gtn(1), "modulus must be greater than 1");
          this.m = m3;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a4) {
        assert2(a4.negative === 0, "red works only with positives");
        assert2(a4.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a4, b3) {
        assert2((a4.negative | b3.negative) === 0, "red works only with positives");
        assert2(a4.red && a4.red === b3.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a4) {
        if (this.prime)
          return this.prime.ireduce(a4)._forceRed(this);
        return a4.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a4) {
        if (a4.isZero()) {
          return a4.clone();
        }
        return this.m.sub(a4)._forceRed(this);
      };
      Red.prototype.add = function add3(a4, b3) {
        this._verify2(a4, b3);
        var res = a4.add(b3);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a4, b3) {
        this._verify2(a4, b3);
        var res = a4.iadd(b3);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a4, b3) {
        this._verify2(a4, b3);
        var res = a4.sub(b3);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a4, b3) {
        this._verify2(a4, b3);
        var res = a4.isub(b3);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a4, num) {
        this._verify1(a4);
        return this.imod(a4.ushln(num));
      };
      Red.prototype.imul = function imul(a4, b3) {
        this._verify2(a4, b3);
        return this.imod(a4.imul(b3));
      };
      Red.prototype.mul = function mul3(a4, b3) {
        this._verify2(a4, b3);
        return this.imod(a4.mul(b3));
      };
      Red.prototype.isqr = function isqr(a4) {
        return this.imul(a4, a4.clone());
      };
      Red.prototype.sqr = function sqr(a4) {
        return this.mul(a4, a4);
      };
      Red.prototype.sqrt = function sqrt(a4) {
        if (a4.isZero())
          return a4.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a4, pow);
        }
        var q4 = this.m.subn(1);
        var s4 = 0;
        while (!q4.isZero() && q4.andln(1) === 0) {
          s4++;
          q4.iushrn(1);
        }
        assert2(!q4.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z4 = this.m.bitLength();
        z4 = new BN3(2 * z4 * z4).toRed(this);
        while (this.pow(z4, lpow).cmp(nOne) !== 0) {
          z4.redIAdd(nOne);
        }
        var c4 = this.pow(z4, q4);
        var r4 = this.pow(a4, q4.addn(1).iushrn(1));
        var t4 = this.pow(a4, q4);
        var m3 = s4;
        while (t4.cmp(one) !== 0) {
          var tmp = t4;
          for (var i4 = 0; tmp.cmp(one) !== 0; i4++) {
            tmp = tmp.redSqr();
          }
          assert2(i4 < m3);
          var b3 = this.pow(c4, new BN3(1).iushln(m3 - i4 - 1));
          r4 = r4.redMul(b3);
          c4 = b3.redSqr();
          t4 = t4.redMul(c4);
          m3 = i4;
        }
        return r4;
      };
      Red.prototype.invm = function invm(a4) {
        var inv = a4._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a4, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a4.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a4;
        for (var i4 = 2; i4 < wnd.length; i4++) {
          wnd[i4] = this.mul(wnd[i4 - 1], a4);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i4 = num.length - 1; i4 >= 0; i4--) {
          var word = num.words[i4];
          for (var j4 = start - 1; j4 >= 0; j4--) {
            var bit = word >> j4 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i4 !== 0 || j4 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r4 = num.umod(this.m);
        return r4 === num ? r4.clone() : r4;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m3) {
        Red.call(this, m3);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r4 = this.imod(num.mul(this.rinv));
        r4.red = null;
        return r4;
      };
      Mont.prototype.imul = function imul(a4, b3) {
        if (a4.isZero() || b3.isZero()) {
          a4.words[0] = 0;
          a4.length = 1;
          return a4;
        }
        var t4 = a4.imul(b3);
        var c4 = t4.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t4.isub(c4).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a4, b3) {
        if (a4.isZero() || b3.isZero())
          return new BN3(0)._forceRed(this);
        var t4 = a4.mul(b3);
        var c4 = t4.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u4 = t4.isub(c4).iushrn(this.shift);
        var res = u4;
        if (u4.cmp(this.m) >= 0) {
          res = u4.isub(this.m);
        } else if (u4.cmpn(0) < 0) {
          res = u4.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a4) {
        var res = this.imod(a4._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/moralis/node_modules/@ethersproject/bytes/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/moralis/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    version = "bytes/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/bytes/lib.esm/index.js
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i4 = 0; i4 < value.length; i4++) {
    const v4 = value[i4];
    if (!isInteger(v4) || v4 < 0 || v4 >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0x0" + hex.substring(2);
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i4 = 0; i4 < hex.length; i4 += 2) {
      result.push(parseInt(hex.substring(i4, i4 + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  let result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i4 = 0; i4 < value.length; i4++) {
      let v4 = value[i4];
      result += HexCharacters[(v4 & 240) >> 4] + HexCharacters[v4 & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexValue(value) {
  const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify(value);
  }
  if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  value = value.substring(2);
  let offset = 0;
  while (offset < value.length && value[offset] === "0") {
    offset++;
  }
  return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs2[0] &= 127;
      const s4 = hexlify(vs2);
      if (result.s == null) {
        result.s = s4;
      } else if (result.s !== s4) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature2) {
  signature2 = splitSignature(signature2);
  return hexlify(concat([
    signature2.r,
    signature2.s,
    signature2.recoveryParam ? "0x1c" : "0x1b"
  ]));
}
var logger, HexCharacters;
var init_lib3 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version();
    logger = new Logger(version);
    HexCharacters = "0123456789abcdef";
  }
});

// node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version2;
var init_version2 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    version2 = "bignumber/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
function _base16To36(value) {
  return new BN(value, 16).toString(36);
}
var import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    "use strict";
    import_bn = __toESM(require_bn2());
    init_lib3();
    init_lib();
    init_version2();
    BN = import_bn.default.BN;
    logger2 = new Logger(version2);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class {
      constructor(constructorGuard, hex) {
        logger2.checkNew(new.target, BigNumber);
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
        if (this._hex[0] === "-") {
          return BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o4 = BigNumber.from(other);
        if (o4.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
      }
      or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e3) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key2) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
        if (value instanceof BigNumber) {
          return value;
        }
        if (typeof value === "string") {
          if (value.match(/^-?0x[0-9a-f]+$/i)) {
            return new BigNumber(_constructorGuard, toHex(value));
          }
          if (value.match(/^-?[0-9]+$/)) {
            return new BigNumber(_constructorGuard, toHex(new BN(value)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
          if (value % 1) {
            throwFault("underflow", "BigNumber.from", value);
          }
          if (value >= MAX_SAFE || value <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value);
          }
          return BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
          return BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
          return BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                return BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
        return !!(value && value._isBigNumber);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e3) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    "use strict";
    init_lib3();
    init_lib();
    init_version2();
    init_bignumber();
    logger3 = new Logger(version2);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class {
      constructor(constructorGuard, signed, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value) {
        if (value instanceof FixedFormat) {
          return value;
        }
        if (typeof value === "number") {
          value = `fixed128x${value}`;
        }
        let signed = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
          if (value === "fixed") {
          } else if (value === "ufixed") {
            signed = false;
          } else {
            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value);
            }
            signed = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value) {
          const check = (key2, type, defaultValue) => {
            if (value[key2] == null) {
              return defaultValue;
            }
            if (typeof value[key2] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
            }
            return value[key2];
          };
          signed = check("signed", "boolean", signed);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new FixedFormat(_constructorGuard2, signed, width, decimals);
      }
    };
    FixedNumber = class {
      constructor(constructorGuard, hex, value, format) {
        logger3.checkNew(new.target, FixedNumber);
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a4 = parseFixed(this._value, this.format.decimals);
        const b3 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a4.add(b3), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a4 = parseFixed(this._value, this.format.decimals);
        const b3 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a4.sub(b3), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a4 = parseFixed(this._value, this.format.decimals);
        const b3 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a4.mul(b3).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a4 = parseFixed(this._value, this.format.decimals);
        const b3 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a4.mul(this.format._multiplier).div(b3), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value, format) {
        if (typeof value === "string") {
          return FixedNumber.fromString(value, format);
        }
        if (isBytes(value)) {
          return FixedNumber.fromBytes(value, format);
        }
        try {
          return FixedNumber.fromValue(value, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
      }
    };
    ONE = FixedNumber.from(1);
    BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/index.js
var init_lib4 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/_version.js
var version3;
var init_version3 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    version3 = "abi/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name2) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name2]) {
      return true;
    }
  } else if (type === "address") {
    if (name2 === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name2]) {
      return true;
    }
  }
  if (ModifiersBytes[name2] || name2 === "payable") {
    logger4.throwArgumentError("invalid modifier", "name", name2);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i4) {
    logger4.throwArgumentError(`unexpected character at position ${i4}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i4 = 0; i4 < param.length; i4++) {
    let c4 = param[i4];
    switch (c4) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i4);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i4);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i4);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i4);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i4);
              }
              if (node.indexed) {
                throwError(i4);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i4);
        }
        node.type += c4;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i4);
        }
        node.type += c4;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c4;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c4;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c4;
        } else {
          throwError(i4);
        }
    }
  }
  if (node.parent) {
    logger4.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key2 in params) {
    defineReadOnly(object, key2, params[key2]);
  }
}
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger4.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger4.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger4.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger4.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger4.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger4.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger4.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger4.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger4.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c4 = value[offset];
    if (c4 === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c4;
      if (c4 === "(") {
        depth++;
      } else if (c4 === ")") {
        depth--;
        if (depth === -1) {
          logger4.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger4, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    "use strict";
    init_lib4();
    init_lib2();
    init_lib();
    init_version3();
    logger4 = new Logger(version3);
    _constructorGuard3 = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      sighash: "sighash",
      minimal: "minimal",
      full: "full",
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType = class {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger4.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
          populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: ParamType.fromObject({
              type: match[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger4.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value, allowIndexed) {
        if (typeof value === "string") {
          return ParamType.fromString(value, allowIndexed);
        }
        return ParamType.fromObject(value);
      }
      static fromObject(value) {
        if (ParamType.isParamType(value)) {
          return value;
        }
        return new ParamType(_constructorGuard3, {
          name: value.name || null,
          type: verifyType(value.type),
          indexed: value.indexed == null ? null : !!value.indexed,
          components: value.components ? value.components.map(ParamType.fromObject) : null
        });
      }
      static fromString(value, allowIndexed) {
        function ParamTypify(node) {
          return ParamType.fromObject({
            name: node.name,
            type: node.type,
            indexed: node.indexed,
            components: node.components
          });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
        return !!(value != null && value._isParamType);
      }
    };
    Fragment = class {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger4.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value) {
        if (Fragment.isFragment(value)) {
          return value;
        }
        if (typeof value === "string") {
          return Fragment.fromString(value);
        }
        return Fragment.fromObject(value);
      }
      static fromObject(value) {
        if (Fragment.isFragment(value)) {
          return value;
        }
        switch (value.type) {
          case "function":
            return FunctionFragment.fromObject(value);
          case "event":
            return EventFragment.fromObject(value);
          case "constructor":
            return ConstructorFragment.fromObject(value);
          case "error":
            return ErrorFragment.fromObject(value);
          case "fallback":
          case "receive":
            return null;
        }
        return logger4.throwArgumentError("invalid fragment object", "value", value);
      }
      static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
          return EventFragment.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
          return FunctionFragment.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
          return ConstructorFragment.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
          return ErrorFragment.fromString(value.substring(5).trim());
        }
        return logger4.throwArgumentError("unsupported fragment", "value", value);
      }
      static isFragment(value) {
        return !!(value && value._isFragment);
      }
    };
    EventFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger4.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return EventFragment.fromString(value);
        }
        return EventFragment.fromObject(value);
      }
      static fromObject(value) {
        if (EventFragment.isEventFragment(value)) {
          return value;
        }
        if (value.type !== "event") {
          logger4.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
          name: verifyIdentifier(value.name),
          anonymous: value.anonymous,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          type: "event"
        };
        return new EventFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
          logger4.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger4.warn("unknown modifier: " + modifier);
          }
        });
        return EventFragment.fromObject({
          name: match[1].trim(),
          anonymous,
          inputs: parseParams(match[2], true),
          type: "event"
        });
      }
      static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
      }
    };
    ConstructorFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger4.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger4.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return ConstructorFragment.fromString(value);
        }
        return ConstructorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (ConstructorFragment.isConstructorFragment(value)) {
          return value;
        }
        if (value.type !== "constructor") {
          logger4.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
          logger4.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
          name: null,
          type: value.type,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new ConstructorFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger4.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
      }
    };
    FunctionFragment = class extends ConstructorFragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger4.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return FunctionFragment.fromString(value);
        }
        return FunctionFragment.fromObject(value);
      }
      static fromObject(value) {
        if (FunctionFragment.isFunctionFragment(value)) {
          return value;
        }
        if (value.type !== "function") {
          logger4.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          constant: state.constant,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new FunctionFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
          logger4.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger4.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger4.throwArgumentError("unexpected tokens", "value", value);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
      }
    };
    ErrorFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger4.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return ErrorFragment.fromString(value);
        }
        return ErrorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (ErrorFragment.isErrorFragment(value)) {
          return value;
        }
        if (value.type !== "error") {
          logger4.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new ErrorFragment(_constructorGuard3, params));
      }
      static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
          logger4.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key2 in object) {
      const childPath = path.slice();
      childPath.push(key2);
      try {
        checkErrors(childPath, object[key2]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger5, Coder, Writer, Reader;
var init_abstract_coder = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    "use strict";
    init_lib3();
    init_lib4();
    init_lib2();
    init_lib();
    init_version3();
    logger5 = new Logger(version3);
    Coder = class {
      constructor(name2, type, localName, dynamic) {
        this.name = name2;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value) {
        logger5.throwArgumentError(message, this.localName, value);
      }
    };
    Writer = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat(writer._data));
      }
      writeBytes(value) {
        let bytes = arrayify(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
          bytes = concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
      }
      _getValue(value) {
        let bytes = arrayify(BigNumber.from(value));
        if (bytes.length > this.wordSize) {
          logger5.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
          });
        }
        if (bytes.length % this.wordSize) {
          bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
      }
      writeValue(value) {
        return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
          this._data[offset] = this._getValue(value);
        };
      }
    };
    Reader = class {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify(this._data);
      }
      get consumed() {
        return this._offset;
      }
      static coerce(name2, value) {
        let match = name2.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
          value = value.toNumber();
        }
        return value;
      }
      coerce(name2, value) {
        if (this._coerceFunc) {
          return this._coerceFunc(name2, value);
        }
        return Reader.coerce(name2, value);
      }
      _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length <= this._data.length) {
            alignedLength = length;
          } else {
            logger5.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        return bytes.slice(0, length);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_js_sha3;
var init_lib5 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    "use strict";
    import_js_sha3 = __toESM(require_sha3());
    init_lib3();
  }
});

// node_modules/moralis/node_modules/@ethersproject/rlp/lib.esm/_version.js
var version4;
var init_version4 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    version4 = "rlp/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/rlp/lib.esm/index.js
var lib_exports = {};
__export(lib_exports, {
  decode: () => decode,
  encode: () => encode
});
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i4 = 0; i4 < length; i4++) {
    result = result * 256 + data[offset + i4];
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  if (!isBytesLike(object)) {
    logger6.throwArgumentError("RLP object must be BytesLike", "object", object);
  }
  const data = Array.prototype.slice.call(arrayify(object));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
function encode(object) {
  return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    if (childOffset > offset + 1 + length) {
      logger6.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  if (data.length === 0) {
    logger6.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
  }
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    if (offset + 1 + lengthLength > data.length) {
      logger6.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger6.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    if (offset + 1 + length > data.length) {
      logger6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    if (offset + 1 + lengthLength > data.length) {
      logger6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    if (offset + 1 + length > data.length) {
      logger6.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlify(data[offset]) };
}
function decode(data) {
  const bytes = arrayify(data);
  const decoded = _decode(bytes, 0);
  if (decoded.consumed !== bytes.length) {
    logger6.throwArgumentError("invalid rlp data", "data", data);
  }
  return decoded.result;
}
var logger6;
var init_lib6 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    "use strict";
    init_lib3();
    init_lib();
    init_version4();
    logger6 = new Logger(version4);
  }
});

// node_modules/moralis/node_modules/@ethersproject/address/lib.esm/_version.js
var version5;
var init_version5 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/address/lib.esm/_version.js"() {
    version5 = "address/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/address/lib.esm/index.js
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i4 = 0; i4 < 40; i4++) {
    expanded[i4] = chars[i4].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i4 = 0; i4 < 40; i4 += 2) {
    if (hashed[i4 >> 1] >> 4 >= 8) {
      chars[i4] = chars[i4].toUpperCase();
    }
    if ((hashed[i4 >> 1] & 15) >= 8) {
      chars[i4 + 1] = chars[i4 + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x4) {
  if (Math.log10) {
    return Math.log10(x4);
  }
  return Math.log(x4) / Math.LN10;
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c4) => {
    return ibanLookup[c4];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger7.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger7.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger7.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {
  }
  return false;
}
function getIcapAddress(address) {
  let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
function getContractAddress(transaction) {
  let from = null;
  try {
    from = getAddress(transaction.from);
  } catch (error) {
    logger7.throwArgumentError("missing from address", "transaction", transaction);
  }
  const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
  return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
  if (hexDataLength(salt) !== 32) {
    logger7.throwArgumentError("salt must be 32 bytes", "salt", salt);
  }
  if (hexDataLength(initCodeHash) !== 32) {
    logger7.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
  }
  return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
}
var logger7, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
var init_lib7 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/address/lib.esm/index.js"() {
    "use strict";
    init_lib3();
    init_lib4();
    init_lib5();
    init_lib6();
    init_lib();
    init_version5();
    logger7 = new Logger(version5);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup = {};
    for (let i4 = 0; i4 < 10; i4++) {
      ibanLookup[String(i4)] = String(i4);
    }
    for (let i4 = 0; i4 < 26; i4++) {
      ibanLookup[String.fromCharCode(65 + i4)] = String(10 + i4);
    }
    safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder;
var init_address = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    "use strict";
    init_lib7();
    init_lib3();
    init_abstract_coder();
    AddressCoder = class extends Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
        try {
          value = getAddress(value);
        } catch (error) {
          this._throwError(error.message, value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    "use strict";
    init_abstract_coder();
    AnonymousCoder = class extends Coder {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name2 = coder.localName;
      if (!name2) {
        logger8.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name2]) {
        logger8.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name2] = true;
      return values[name2];
    });
  } else {
    logger8.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger8.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name2 = coder.localName;
    if (name2) {
      if (!accum[name2]) {
        accum[name2] = 0;
      }
      accum[name2]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name2 = coder.localName;
    if (!name2 || uniqueNames[name2] !== 1) {
      return;
    }
    if (name2 === "length") {
      name2 = "_length";
    }
    if (values[name2] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name2, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name2] = value;
    }
  });
  for (let i4 = 0; i4 < values.length; i4++) {
    const value = values[i4];
    if (value instanceof Error) {
      Object.defineProperty(values, i4, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger8, ArrayCoder;
var init_array = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    "use strict";
    init_lib();
    init_version3();
    init_abstract_coder();
    init_anonymous();
    logger8 = new Logger(version3);
    ArrayCoder = class extends Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i4 = 0; i4 < this.length; i4++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value) {
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        logger8.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i4 = 0; i4 < value.length; i4++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger8.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i4 = 0; i4 < count; i4++) {
          coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    "use strict";
    init_abstract_coder();
    BooleanCoder = class extends Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    "use strict";
    init_lib3();
    init_abstract_coder();
    DynamicBytesCoder = class extends Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    "use strict";
    init_lib3();
    init_abstract_coder();
    FixedBytesCoder = class extends Coder {
      constructor(size, localName) {
        let name2 = "bytes" + String(size);
        super(name2, name2, localName, false);
        this.size = size;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder;
var init_null = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    "use strict";
    init_abstract_coder();
    NullCoder = class extends Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/addresses.js
var AddressZero;
var init_addresses = __esm({
  "node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
    AddressZero = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_bignumbers = __esm({
  "node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    init_lib4();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther = BigNumber.from("1000000000000000000");
    MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/hashes.js
var HashZero;
var init_hashes = __esm({
  "node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
    HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/strings.js
var EtherSymbol;
var init_strings = __esm({
  "node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/strings.js"() {
    EtherSymbol = "\u039E";
  }
});

// node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/index.js
var lib_exports2 = {};
__export(lib_exports2, {
  AddressZero: () => AddressZero,
  EtherSymbol: () => EtherSymbol,
  HashZero: () => HashZero,
  MaxInt256: () => MaxInt256,
  MaxUint256: () => MaxUint256,
  MinInt256: () => MinInt256,
  NegativeOne: () => NegativeOne2,
  One: () => One,
  Two: () => Two,
  WeiPerEther: () => WeiPerEther,
  Zero: () => Zero2
});
var init_lib8 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/constants/lib.esm/index.js"() {
    "use strict";
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder;
var init_number = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    "use strict";
    init_lib4();
    init_lib8();
    init_abstract_coder();
    NumberCoder = class extends Coder {
      constructor(size, signed, localName) {
        const name2 = (signed ? "int" : "uint") + size * 8;
        super(name2, name2, localName, false);
        this.size = size;
        this.signed = signed;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value) {
        let v4 = BigNumber.from(value);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v4.gt(bounds) || v4.lt(bounds.add(One).mul(NegativeOne2))) {
            this._throwError("value out-of-bounds", value);
          }
        } else if (v4.lt(Zero2) || v4.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value);
        }
        v4 = v4.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v4 = v4.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v4);
      }
      decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/_version.js
var version6;
var init_version6 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    version6 = "strings/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger9.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i4 = 0;
    for (let o4 = offset + 1; o4 < bytes.length; o4++) {
      if (bytes[o4] >> 6 !== 2) {
        break;
      }
      i4++;
    }
    return i4;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i4 = 0;
  while (i4 < bytes.length) {
    const c4 = bytes[i4++];
    if (c4 >> 7 === 0) {
      result.push(c4);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c4 & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c4 & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c4 & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c4 & 192) === 128) {
        i4 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i4 - 1, bytes, result);
      } else {
        i4 += onError(Utf8ErrorReason.BAD_PREFIX, i4 - 1, bytes, result);
      }
      continue;
    }
    if (i4 - 1 + extraLength >= bytes.length) {
      i4 += onError(Utf8ErrorReason.OVERRUN, i4 - 1, bytes, result);
      continue;
    }
    let res = c4 & (1 << 8 - extraLength - 1) - 1;
    for (let j4 = 0; j4 < extraLength; j4++) {
      let nextChar = bytes[i4];
      if ((nextChar & 192) != 128) {
        i4 += onError(Utf8ErrorReason.MISSING_CONTINUE, i4, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i4++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i4 += onError(Utf8ErrorReason.OUT_OF_RANGE, i4 - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i4 += onError(Utf8ErrorReason.UTF16_SURROGATE, i4 - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i4 += onError(Utf8ErrorReason.OVERLONG, i4 - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger9.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i4 = 0; i4 < str.length; i4++) {
    const c4 = str.charCodeAt(i4);
    if (c4 < 128) {
      result.push(c4);
    } else if (c4 < 2048) {
      result.push(c4 >> 6 | 192);
      result.push(c4 & 63 | 128);
    } else if ((c4 & 64512) == 55296) {
      i4++;
      const c22 = str.charCodeAt(i4);
      if (i4 >= str.length || (c22 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c4 & 1023) << 10) + (c22 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c4 >> 12 | 224);
      result.push(c4 >> 6 & 63 | 128);
      result.push(c4 & 63 | 128);
    }
  }
  return arrayify(result);
}
function escapeChar(value) {
  const hex = "0000" + value.toString(16);
  return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes, onError) {
  return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
    if (codePoint < 256) {
      switch (codePoint) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 13:
          return "\\r";
        case 34:
          return '\\"';
        case 92:
          return "\\\\";
      }
      if (codePoint >= 32 && codePoint < 127) {
        return String.fromCharCode(codePoint);
      }
    }
    if (codePoint <= 65535) {
      return escapeChar(codePoint);
    }
    codePoint -= 65536;
    return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
  }).join("") + '"';
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}
var logger9, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
var init_utf8 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    "use strict";
    init_lib3();
    init_lib();
    init_version6();
    logger9 = new Logger(version6);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
  }
});

// node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/bytes32.js
function formatBytes32String(text) {
  const bytes = toUtf8Bytes(text);
  if (bytes.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return hexlify(concat([bytes, HashZero]).slice(0, 32));
}
function parseBytes32String(bytes) {
  const data = arrayify(bytes);
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}
var init_bytes32 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    "use strict";
    init_lib8();
    init_lib3();
    init_utf8();
  }
});

// node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i4 = 0; i4 < data.length; i4 += 4) {
    result.push(parseInt(data.substring(i4, i4 + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v4) => {
    let comps = v4.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
function matchMap(value, ranges) {
  let lo = 0;
  for (let i4 = 0; i4 < ranges.length; i4++) {
    let range = ranges[i4];
    lo += range.l;
    if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
      if (range.e && range.e.indexOf(value - lo) !== -1) {
        continue;
      }
      return range;
    }
  }
  return null;
}
function flatten(values) {
  return values.reduce((accum, value) => {
    value.forEach((value2) => {
      accum.push(value2);
    });
    return accum;
  }, []);
}
function _nameprepTableA1(codepoint) {
  return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
  let range = matchMap(codepoint, Table_B_2_ranges);
  if (range) {
    return [codepoint + range.s];
  }
  let codes = Table_B_2_lut_abs[codepoint];
  if (codes) {
    return codes;
  }
  let shift = Table_B_2_lut_rel[codepoint];
  if (shift) {
    return [codepoint + shift[0]];
  }
  let complex = Table_B_2_complex[codepoint];
  if (complex) {
    return complex;
  }
  return null;
}
function _nameprepTableC(codepoint) {
  return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value) {
  if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
    return value.toLowerCase();
  }
  let codes = toUtf8CodePoints(value);
  codes = flatten(codes.map((code) => {
    if (Table_B_1_flags.indexOf(code) >= 0) {
      return [];
    }
    if (code >= 65024 && code <= 65039) {
      return [];
    }
    let codesTableB2 = _nameprepTableB2(code);
    if (codesTableB2) {
      return codesTableB2;
    }
    return [code];
  }));
  codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
  codes.forEach((code) => {
    if (_nameprepTableC(code)) {
      throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    }
  });
  codes.forEach((code) => {
    if (_nameprepTableA1(code)) {
      throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    }
  });
  let name2 = _toUtf8String(codes);
  if (name2.substring(0, 1) === "-" || name2.substring(2, 4) === "--" || name2.substring(name2.length - 1) === "-") {
    throw new Error("invalid hyphen");
  }
  if (name2.length > 63) {
    throw new Error("too long");
  }
  return name2;
}
var Table_A_1_ranges, Table_B_1_flags, Table_B_2_ranges, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    "use strict";
    init_utf8();
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v4) => parseInt(v4, 16));
    Table_B_2_ranges = [
      { h: 25, s: 32, l: 65 },
      { h: 30, s: 32, e: [23], l: 127 },
      { h: 54, s: 1, e: [48], l: 64, d: 2 },
      { h: 14, s: 1, l: 57, d: 2 },
      { h: 44, s: 1, l: 17, d: 2 },
      { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
      { h: 16, s: 1, l: 68, d: 2 },
      { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
      { h: 26, s: 32, e: [17], l: 435 },
      { h: 22, s: 1, l: 71, d: 2 },
      { h: 15, s: 80, l: 40 },
      { h: 31, s: 32, l: 16 },
      { h: 32, s: 1, l: 80, d: 2 },
      { h: 52, s: 1, l: 42, d: 2 },
      { h: 12, s: 1, l: 55, d: 2 },
      { h: 40, s: 1, e: [38], l: 15, d: 2 },
      { h: 14, s: 1, l: 48, d: 2 },
      { h: 37, s: 48, l: 49 },
      { h: 148, s: 1, l: 6351, d: 2 },
      { h: 88, s: 1, l: 160, d: 2 },
      { h: 15, s: 16, l: 704 },
      { h: 25, s: 26, l: 854 },
      { h: 25, s: 32, l: 55915 },
      { h: 37, s: 40, l: 1247 },
      { h: 25, s: -119711, l: 53248 },
      { h: 25, s: -119763, l: 52 },
      { h: 25, s: -119815, l: 52 },
      { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
      { h: 25, s: -119919, l: 52 },
      { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
      { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
      { h: 25, s: -120075, l: 52 },
      { h: 25, s: -120127, l: 52 },
      { h: 25, s: -120179, l: 52 },
      { h: 25, s: -120231, l: 52 },
      { h: 25, s: -120283, l: 52 },
      { h: 25, s: -120335, l: 52 },
      { h: 24, s: -119543, e: [17], l: 56 },
      { h: 24, s: -119601, e: [17], l: 58 },
      { h: 24, s: -119659, e: [17], l: 58 },
      { h: 24, s: -119717, e: [17], l: 58 },
      { h: 24, s: -119775, e: [17], l: 58 }
    ];
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/index.js
var init_lib9 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/strings/lib.esm/index.js"() {
    "use strict";
    init_bytes32();
    init_idna();
    init_utf8();
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder;
var init_string = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    "use strict";
    init_lib9();
    init_bytes();
    StringCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
      }
      decode(reader) {
        return toUtf8String(super.decode(reader));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder;
var init_tuple = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    "use strict";
    init_abstract_coder();
    init_array();
    TupleCoder = class extends Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name2 = coder.localName;
          if (name2) {
            if (!accum[name2]) {
              accum[name2] = 0;
            }
            accum[name2]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name2 = coder.localName;
          if (!name2 || uniqueNames[name2] !== 1) {
            return;
          }
          if (name2 === "length") {
            name2 = "_length";
          }
          if (values[name2] != null) {
            return;
          }
          values[name2] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value) {
        return pack(writer, this.coders, value);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger10, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    "use strict";
    init_lib3();
    init_lib2();
    init_lib();
    init_version3();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    logger10 = new Logger(version3);
    paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder = class {
      constructor(coerceFunc) {
        logger10.checkNew(new.target, AbiCoder);
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "array":
            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            logger10.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
          }
          return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            logger10.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder(size, param.name);
        }
        return logger10.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger10.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/id.js
function id(text) {
  return keccak256(toUtf8Bytes(text));
}
var init_id = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/id.js"() {
    init_lib5();
    init_lib9();
  }
});

// node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/_version.js
var version7;
var init_version7 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/_version.js"() {
    version7 = "hash/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/namehash.js
function isValidName(name2) {
  try {
    const comps = name2.split(".");
    for (let i4 = 0; i4 < comps.length; i4++) {
      if (nameprep(comps[i4]).length === 0) {
        throw new Error("empty");
      }
    }
    return true;
  } catch (error) {
  }
  return false;
}
function namehash(name2) {
  if (typeof name2 !== "string") {
    logger11.throwArgumentError("invalid ENS name; not a string", "name", name2);
  }
  let current = name2;
  let result = Zeros;
  while (current.length) {
    const partition = current.match(Partition);
    if (partition == null || partition[2] === "") {
      logger11.throwArgumentError("invalid ENS address; missing component", "name", name2);
    }
    const label = toUtf8Bytes(nameprep(partition[3]));
    result = keccak256(concat([result, keccak256(label)]));
    current = partition[2] || "";
  }
  return hexlify(result);
}
function dnsEncode(name2) {
  return hexlify(concat(name2.split(".").map((comp) => {
    const bytes = toUtf8Bytes("_" + nameprep(comp));
    bytes[0] = bytes.length - 1;
    return bytes;
  }))) + "00";
}
var logger11, Zeros, Partition;
var init_namehash = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
    init_lib3();
    init_lib9();
    init_lib5();
    init_lib();
    init_version7();
    logger11 = new Logger(version7);
    Zeros = new Uint8Array(32);
    Zeros.fill(0);
    Partition = new RegExp("^((.*)\\.)?([^.]+)$");
  }
});

// node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/message.js
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}
var messagePrefix;
var init_message = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/message.js"() {
    init_lib3();
    init_lib5();
    init_lib9();
    messagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/typed-data.js
function hexPadRight(value) {
  const bytes = arrayify(value);
  const padOffset = bytes.length % 32;
  if (padOffset) {
    return hexConcat([bytes, padding.slice(padOffset)]);
  }
  return hexlify(bytes);
}
function checkString(key2) {
  return function(value) {
    if (typeof value !== "string") {
      logger12.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
    }
    return value;
  };
}
function getBaseEncoder(type) {
  {
    const match = type.match(/^(u?)int(\d*)$/);
    if (match) {
      const signed = match[1] === "";
      const width = parseInt(match[2] || "256");
      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
        logger12.throwArgumentError("invalid numeric width", "type", type);
      }
      const boundsUpper = MaxUint2562.mask(signed ? width - 1 : width);
      const boundsLower = signed ? boundsUpper.add(One2).mul(NegativeOne3) : Zero3;
      return function(value) {
        const v4 = BigNumber.from(value);
        if (v4.lt(boundsLower) || v4.gt(boundsUpper)) {
          logger12.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
        }
        return hexZeroPad(v4.toTwos(256).toHexString(), 32);
      };
    }
  }
  {
    const match = type.match(/^bytes(\d+)$/);
    if (match) {
      const width = parseInt(match[1]);
      if (width === 0 || width > 32 || match[1] !== String(width)) {
        logger12.throwArgumentError("invalid bytes width", "type", type);
      }
      return function(value) {
        const bytes = arrayify(value);
        if (bytes.length !== width) {
          logger12.throwArgumentError(`invalid length for ${type}`, "value", value);
        }
        return hexPadRight(value);
      };
    }
  }
  switch (type) {
    case "address":
      return function(value) {
        return hexZeroPad(getAddress(value), 32);
      };
    case "bool":
      return function(value) {
        return !value ? hexFalse : hexTrue;
      };
    case "bytes":
      return function(value) {
        return keccak256(value);
      };
    case "string":
      return function(value) {
        return id(value);
      };
  }
  return null;
}
function encodeType(name2, fields) {
  return `${name2}(${fields.map(({ name: name3, type }) => type + " " + name3).join(",")})`;
}
var __awaiter, logger12, padding, NegativeOne3, Zero3, One2, MaxUint2562, hexTrue, hexFalse, domainFieldTypes, domainFieldNames, domainChecks, TypedDataEncoder;
var init_typed_data = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
    init_lib7();
    init_lib4();
    init_lib3();
    init_lib5();
    init_lib2();
    init_lib();
    init_version7();
    init_id();
    __awaiter = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger12 = new Logger(version7);
    padding = new Uint8Array(32);
    padding.fill(0);
    NegativeOne3 = BigNumber.from(-1);
    Zero3 = BigNumber.from(0);
    One2 = BigNumber.from(1);
    MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    hexTrue = hexZeroPad(One2.toHexString(), 32);
    hexFalse = hexZeroPad(Zero3.toHexString(), 32);
    domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value) {
        try {
          return BigNumber.from(value).toString();
        } catch (error) {
        }
        return logger12.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
      },
      verifyingContract: function(value) {
        try {
          return getAddress(value).toLowerCase();
        } catch (error) {
        }
        return logger12.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        try {
          const bytes = arrayify(value);
          if (bytes.length !== 32) {
            throw new Error("bad length");
          }
          return hexlify(bytes);
        } catch (error) {
        }
        return logger12.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
      }
    };
    TypedDataEncoder = class {
      constructor(types) {
        defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
        defineReadOnly(this, "_encoderCache", {});
        defineReadOnly(this, "_types", {});
        const links = {};
        const parents = {};
        const subtypes = {};
        Object.keys(types).forEach((type) => {
          links[type] = {};
          parents[type] = [];
          subtypes[type] = {};
        });
        for (const name2 in types) {
          const uniqueNames = {};
          types[name2].forEach((field) => {
            if (uniqueNames[field.name]) {
              logger12.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name2)}`, "types", types);
            }
            uniqueNames[field.name] = true;
            const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
            if (baseType === name2) {
              logger12.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
            }
            const encoder = getBaseEncoder(baseType);
            if (encoder) {
              return;
            }
            if (!parents[baseType]) {
              logger12.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
            }
            parents[baseType].push(name2);
            links[name2][baseType] = true;
          });
        }
        const primaryTypes = Object.keys(parents).filter((n3) => parents[n3].length === 0);
        if (primaryTypes.length === 0) {
          logger12.throwArgumentError("missing primary type", "types", types);
        } else if (primaryTypes.length > 1) {
          logger12.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t4) => JSON.stringify(t4)).join(", ")}`, "types", types);
        }
        defineReadOnly(this, "primaryType", primaryTypes[0]);
        function checkCircular(type, found) {
          if (found[type]) {
            logger12.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
          }
          found[type] = true;
          Object.keys(links[type]).forEach((child) => {
            if (!parents[child]) {
              return;
            }
            checkCircular(child, found);
            Object.keys(found).forEach((subtype) => {
              subtypes[subtype][child] = true;
            });
          });
          delete found[type];
        }
        checkCircular(this.primaryType, {});
        for (const name2 in subtypes) {
          const st = Object.keys(subtypes[name2]);
          st.sort();
          this._types[name2] = encodeType(name2, types[name2]) + st.map((t4) => encodeType(t4, types[t4])).join("");
        }
      }
      getEncoder(type) {
        let encoder = this._encoderCache[type];
        if (!encoder) {
          encoder = this._encoderCache[type] = this._getEncoder(type);
        }
        return encoder;
      }
      _getEncoder(type) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return encoder;
          }
        }
        const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
          const subtype = match[1];
          const subEncoder = this.getEncoder(subtype);
          const length = parseInt(match[3]);
          return (value) => {
            if (length >= 0 && value.length !== length) {
              logger12.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
            }
            let result = value.map(subEncoder);
            if (this._types[subtype]) {
              result = result.map(keccak256);
            }
            return keccak256(hexConcat(result));
          };
        }
        const fields = this.types[type];
        if (fields) {
          const encodedType = id(this._types[type]);
          return (value) => {
            const values = fields.map(({ name: name2, type: type2 }) => {
              const result = this.getEncoder(type2)(value[name2]);
              if (this._types[type2]) {
                return keccak256(result);
              }
              return result;
            });
            values.unshift(encodedType);
            return hexConcat(values);
          };
        }
        return logger12.throwArgumentError(`unknown type: ${type}`, "type", type);
      }
      encodeType(name2) {
        const result = this._types[name2];
        if (!result) {
          logger12.throwArgumentError(`unknown type: ${JSON.stringify(name2)}`, "name", name2);
        }
        return result;
      }
      encodeData(type, value) {
        return this.getEncoder(type)(value);
      }
      hashStruct(name2, value) {
        return keccak256(this.encodeData(name2, value));
      }
      encode(value) {
        return this.encodeData(this.primaryType, value);
      }
      hash(value) {
        return this.hashStruct(this.primaryType, value);
      }
      _visit(type, value, callback) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return callback(type, value);
          }
        }
        const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
          const subtype = match[1];
          const length = parseInt(match[3]);
          if (length >= 0 && value.length !== length) {
            logger12.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
          }
          return value.map((v4) => this._visit(subtype, v4, callback));
        }
        const fields = this.types[type];
        if (fields) {
          return fields.reduce((accum, { name: name2, type: type2 }) => {
            accum[name2] = this._visit(type2, value[name2], callback);
            return accum;
          }, {});
        }
        return logger12.throwArgumentError(`unknown type: ${type}`, "type", type);
      }
      visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
      }
      static from(types) {
        return new TypedDataEncoder(types);
      }
      static getPrimaryType(types) {
        return TypedDataEncoder.from(types).primaryType;
      }
      static hashStruct(name2, types, value) {
        return TypedDataEncoder.from(types).hashStruct(name2, value);
      }
      static hashDomain(domain) {
        const domainFields = [];
        for (const name2 in domain) {
          const type = domainFieldTypes[name2];
          if (!type) {
            logger12.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name2)}`, "domain", domain);
          }
          domainFields.push({ name: name2, type });
        }
        domainFields.sort((a4, b3) => {
          return domainFieldNames.indexOf(a4.name) - domainFieldNames.indexOf(b3.name);
        });
        return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
      }
      static encode(domain, types, value) {
        return hexConcat([
          "0x1901",
          TypedDataEncoder.hashDomain(domain),
          TypedDataEncoder.from(types).hash(value)
        ]);
      }
      static hash(domain, types, value) {
        return keccak256(TypedDataEncoder.encode(domain, types, value));
      }
      static resolveNames(domain, types, value, resolveName2) {
        return __awaiter(this, void 0, void 0, function* () {
          domain = shallowCopy(domain);
          const ensCache = {};
          if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
            ensCache[domain.verifyingContract] = "0x";
          }
          const encoder = TypedDataEncoder.from(types);
          encoder.visit(value, (type, value2) => {
            if (type === "address" && !isHexString(value2, 20)) {
              ensCache[value2] = "0x";
            }
            return value2;
          });
          for (const name2 in ensCache) {
            ensCache[name2] = yield resolveName2(name2);
          }
          if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
            domain.verifyingContract = ensCache[domain.verifyingContract];
          }
          value = encoder.visit(value, (type, value2) => {
            if (type === "address" && ensCache[value2]) {
              return ensCache[value2];
            }
            return value2;
          });
          return { domain, value };
        });
      }
      static getPayload(domain, types, value) {
        TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name2) => {
          const value2 = domain[name2];
          if (value2 == null) {
            return;
          }
          domainValues[name2] = domainChecks[name2](value2);
          domainTypes.push({ name: name2, type: domainFieldTypes[name2] });
        });
        const encoder = TypedDataEncoder.from(types);
        const typesWithDomain = shallowCopy(types);
        if (typesWithDomain.EIP712Domain) {
          logger12.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
        } else {
          typesWithDomain.EIP712Domain = domainTypes;
        }
        encoder.encode(value);
        return {
          types: typesWithDomain,
          domain: domainValues,
          primaryType: encoder.primaryType,
          message: encoder.visit(value, (type, value2) => {
            if (type.match(/^bytes(\d*)/)) {
              return hexlify(arrayify(value2));
            }
            if (type.match(/^u?int/)) {
              return BigNumber.from(value2).toString();
            }
            switch (type) {
              case "address":
                return value2.toLowerCase();
              case "bool":
                return !!value2;
              case "string":
                if (typeof value2 !== "string") {
                  logger12.throwArgumentError(`invalid string`, "value", value2);
                }
                return value2;
            }
            return logger12.throwArgumentError("unsupported type", "type", type);
          })
        };
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/index.js
var init_lib10 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hash/lib.esm/index.js"() {
    "use strict";
    init_id();
    init_namehash();
    init_message();
    init_typed_data();
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger13, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;
var init_interface = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    "use strict";
    init_lib7();
    init_lib4();
    init_lib3();
    init_lib10();
    init_lib5();
    init_lib2();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib();
    init_version3();
    logger13 = new Logger(version3);
    LogDescription = class extends Description {
    };
    TransactionDescription = class extends Description {
    };
    ErrorDescription = class extends Description {
    };
    Indexed = class extends Description {
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface = class {
      constructor(fragments) {
        logger13.checkNew(new.target, Interface);
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger13.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature2 = fragment.format();
          if (bucket[signature2]) {
            logger13.warn("duplicate definition - " + signature2);
            return;
          }
          bucket[signature2] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger13.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j4) => JSON.parse(j4)));
        }
        return abi;
      }
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id(eventFragment.format());
      }
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          for (const name2 in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name2)) {
              return this.functions[name2];
            }
          }
          logger13.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f4) => f4.split("(")[0] === name2);
          if (matching.length === 0) {
            logger13.throwArgumentError("no matching function", "name", name2);
          } else if (matching.length > 1) {
            logger13.throwArgumentError("multiple matching functions", "name", name2);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger13.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name2 in this.events) {
            if (topichash === this.getEventTopic(name2)) {
              return this.events[name2];
            }
          }
          logger13.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f4) => f4.split("(")[0] === name2);
          if (matching.length === 0) {
            logger13.throwArgumentError("no matching event", "name", name2);
          } else if (matching.length > 1) {
            logger13.throwArgumentError("multiple matching events", "name", name2);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger13.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name2 in this.errors) {
            const error = this.errors[name2];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name2];
            }
          }
          logger13.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f4) => f4.split("(")[0] === name2);
          if (matching.length === 0) {
            logger13.throwArgumentError("no matching error", "name", name2);
          } else if (matching.length > 1) {
            logger13.throwArgumentError("multiple matching errors", "name", name2);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger13.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_5) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
          logger13.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify(concat([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger13.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
      }
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes = arrayify(data);
        let reason = null;
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify(bytes.slice(0, 4));
            const builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
              }
            }
            break;
          }
        }
        return logger13.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger13.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return id(value);
          } else if (param.type === "bytes") {
            return keccak256(hexlify(value));
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value]);
          }
          return hexZeroPad(hexlify(value), 32);
        };
        values.forEach((value, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value != null) {
              logger13.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            }
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger13.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger13.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id(value));
            } else if (param.type === "bytes") {
              topics.push(keccak256(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger13.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value = result[index];
            if (value instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                }
              });
            } else {
              result[param.name] = value;
            }
          }
        });
        for (let i4 = 0; i4 < result.length; i4++) {
          const value = result[i4];
          if (value instanceof Error) {
            Object.defineProperty(result, i4, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i4}`, value);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      parseLog(log4) {
        let fragment = this.getEvent(log4.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log4.data, log4.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      static isInterface(value) {
        return !!(value && value._isInterface);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/index.js
var init_lib11 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abi/lib.esm/index.js"() {
    "use strict";
    init_fragments();
    init_abi_coder();
    init_interface();
  }
});

// node_modules/moralis/node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
var version8;
var init_version8 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abstract-provider/lib.esm/_version.js"() {
    version8 = "abstract-provider/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/abstract-provider/lib.esm/index.js
var __awaiter2, logger14, ForkEvent, Provider;
var init_lib12 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abstract-provider/lib.esm/index.js"() {
    "use strict";
    init_lib4();
    init_lib3();
    init_lib2();
    init_lib();
    init_version8();
    __awaiter2 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger14 = new Logger(version8);
    ForkEvent = class extends Description {
      static isForkEvent(value) {
        return !!(value && value._isForkEvent);
      }
    };
    Provider = class {
      constructor() {
        logger14.checkAbstract(new.target, Provider);
        defineReadOnly(this, "_isProvider", true);
      }
      getFeeData() {
        return __awaiter2(this, void 0, void 0, function* () {
          const { block, gasPrice } = yield resolveProperties({
            block: this.getBlock("latest"),
            gasPrice: this.getGasPrice().catch((error) => {
              return null;
            })
          });
          let maxFeePerGas = null, maxPriorityFeePerGas = null;
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = BigNumber.from("1500000000");
            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
          }
          return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
        });
      }
      addListener(eventName, listener) {
        return this.on(eventName, listener);
      }
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
      static isProvider(value) {
        return !!(value && value._isProvider);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
var version9;
var init_version9 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abstract-signer/lib.esm/_version.js"() {
    version9 = "abstract-signer/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/abstract-signer/lib.esm/index.js
var __awaiter3, logger15, allowedTransactionKeys, forwardErrors, Signer, VoidSigner;
var init_lib13 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/abstract-signer/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version9();
    __awaiter3 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger15 = new Logger(version9);
    allowedTransactionKeys = [
      "accessList",
      "ccipReadEnabled",
      "chainId",
      "customData",
      "data",
      "from",
      "gasLimit",
      "gasPrice",
      "maxFeePerGas",
      "maxPriorityFeePerGas",
      "nonce",
      "to",
      "type",
      "value"
    ];
    forwardErrors = [
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED
    ];
    Signer = class {
      constructor() {
        logger15.checkAbstract(new.target, Signer);
        defineReadOnly(this, "_isSigner", true);
      }
      getBalance(blockTag) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getBalance");
          return yield this.provider.getBalance(this.getAddress(), blockTag);
        });
      }
      getTransactionCount(blockTag) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getTransactionCount");
          return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
        });
      }
      estimateGas(transaction) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("estimateGas");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.estimateGas(tx);
        });
      }
      call(transaction, blockTag) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("call");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.call(tx, blockTag);
        });
      }
      sendTransaction(transaction) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("sendTransaction");
          const tx = yield this.populateTransaction(transaction);
          const signedTx = yield this.signTransaction(tx);
          return yield this.provider.sendTransaction(signedTx);
        });
      }
      getChainId() {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getChainId");
          const network = yield this.provider.getNetwork();
          return network.chainId;
        });
      }
      getGasPrice() {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getGasPrice");
          return yield this.provider.getGasPrice();
        });
      }
      getFeeData() {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("getFeeData");
          return yield this.provider.getFeeData();
        });
      }
      resolveName(name2) {
        return __awaiter3(this, void 0, void 0, function* () {
          this._checkProvider("resolveName");
          return yield this.provider.resolveName(name2);
        });
      }
      checkTransaction(transaction) {
        for (const key2 in transaction) {
          if (allowedTransactionKeys.indexOf(key2) === -1) {
            logger15.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
          }
        }
        const tx = shallowCopy(transaction);
        if (tx.from == null) {
          tx.from = this.getAddress();
        } else {
          tx.from = Promise.all([
            Promise.resolve(tx.from),
            this.getAddress()
          ]).then((result) => {
            if (result[0].toLowerCase() !== result[1].toLowerCase()) {
              logger15.throwArgumentError("from address mismatch", "transaction", transaction);
            }
            return result[0];
          });
        }
        return tx;
      }
      populateTransaction(transaction) {
        return __awaiter3(this, void 0, void 0, function* () {
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          if (tx.to != null) {
            tx.to = Promise.resolve(tx.to).then((to) => __awaiter3(this, void 0, void 0, function* () {
              if (to == null) {
                return null;
              }
              const address = yield this.resolveName(to);
              if (address == null) {
                logger15.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
              }
              return address;
            }));
            tx.to.catch((error) => {
            });
          }
          const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
          if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
            logger15.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
          } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
            logger15.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
          }
          if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
            tx.type = 2;
          } else if (tx.type === 0 || tx.type === 1) {
            if (tx.gasPrice == null) {
              tx.gasPrice = this.getGasPrice();
            }
          } else {
            const feeData = yield this.getFeeData();
            if (tx.type == null) {
              if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                tx.type = 2;
                if (tx.gasPrice != null) {
                  const gasPrice = tx.gasPrice;
                  delete tx.gasPrice;
                  tx.maxFeePerGas = gasPrice;
                  tx.maxPriorityFeePerGas = gasPrice;
                } else {
                  if (tx.maxFeePerGas == null) {
                    tx.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (tx.maxPriorityFeePerGas == null) {
                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              } else if (feeData.gasPrice != null) {
                if (hasEip1559) {
                  logger15.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "populateTransaction"
                  });
                }
                if (tx.gasPrice == null) {
                  tx.gasPrice = feeData.gasPrice;
                }
                tx.type = 0;
              } else {
                logger15.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "signer.getFeeData"
                });
              }
            } else if (tx.type === 2) {
              if (tx.maxFeePerGas == null) {
                tx.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (tx.maxPriorityFeePerGas == null) {
                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          }
          if (tx.nonce == null) {
            tx.nonce = this.getTransactionCount("pending");
          }
          if (tx.gasLimit == null) {
            tx.gasLimit = this.estimateGas(tx).catch((error) => {
              if (forwardErrors.indexOf(error.code) >= 0) {
                throw error;
              }
              return logger15.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error,
                tx
              });
            });
          }
          if (tx.chainId == null) {
            tx.chainId = this.getChainId();
          } else {
            tx.chainId = Promise.all([
              Promise.resolve(tx.chainId),
              this.getChainId()
            ]).then((results2) => {
              if (results2[1] !== 0 && results2[0] !== results2[1]) {
                logger15.throwArgumentError("chainId address mismatch", "transaction", transaction);
              }
              return results2[0];
            });
          }
          return yield resolveProperties(tx);
        });
      }
      _checkProvider(operation) {
        if (!this.provider) {
          logger15.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: operation || "_checkProvider"
          });
        }
      }
      static isSigner(value) {
        return !!(value && value._isSigner);
      }
    };
    VoidSigner = class extends Signer {
      constructor(address, provider) {
        logger15.checkNew(new.target, VoidSigner);
        super();
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "provider", provider || null);
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      _fail(message, operation) {
        return Promise.resolve().then(() => {
          logger15.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
        });
      }
      signMessage(message) {
        return this._fail("VoidSigner cannot sign messages", "signMessage");
      }
      signTransaction(transaction) {
        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
      }
      _signTypedData(domain, types, value) {
        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
      }
      connect(provider) {
        return new VoidSigner(this.address, provider);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
function createCommonjsModule(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
function ShortCurve(conf) {
  base.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
function Point(curve, x4, y4, isRed) {
  base.BasePoint.call(this, curve, "affine");
  if (x4 === null && y4 === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x4, 16);
    this.y = new import_bn2.default(y4, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
function JPoint(curve, x4, y4, z4) {
  base.BasePoint.call(this, curve, "jacobian");
  if (x4 === null && y4 === null && z4 === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x4, 16);
    this.y = new import_bn2.default(y4, 16);
    this.z = new import_bn2.default(z4, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
  this._init(entropy, nonce, pers);
}
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
function Position() {
  this.place = 0;
}
function getLength(buf, p4) {
  var initial = buf[p4.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i4 = 0, off = p4.place; i4 < octetLen; i4++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p4.place = off;
  return val;
}
function rmPadding(buf) {
  var i4 = 0;
  var len = buf.length - 1;
  while (!buf[i4] && !(buf[i4 + 1] & 128) && i4 < len) {
    i4++;
  }
  if (i4 === 0) {
    return buf;
  }
  return buf.slice(i4);
}
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var import_bn2, import_hash2, minimalisticAssert, utils_1, utils_1$1, getNAF, getJSF, assert$1, base, inherits_browser, assert$2, short_1, curve_1, curves_1, hmacDrbg, assert$3, key, assert$4, signature, rand, assert$5, ec, elliptic_1, EC$1;
var init_elliptic = __esm({
  "node_modules/moralis/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js"() {
    import_bn2 = __toESM(require_bn2());
    import_hash2 = __toESM(require_hash());
    minimalisticAssert = assert;
    assert.equal = function assertEqual(l4, r4, msg) {
      if (l4 != r4)
        throw new Error(msg || "Assertion failed: " + l4 + " != " + r4);
    };
    utils_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i4 = 0; i4 < msg.length; i4++)
            res[i4] = msg[i4] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i4 = 0; i4 < msg.length; i4 += 2)
            res.push(parseInt(msg[i4] + msg[i4 + 1], 16));
        } else {
          for (var i4 = 0; i4 < msg.length; i4++) {
            var c4 = msg.charCodeAt(i4);
            var hi = c4 >> 8;
            var lo = c4 & 255;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils.toArray = toArray;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils.zero2 = zero2;
      function toHex2(msg) {
        var res = "";
        for (var i4 = 0; i4 < msg.length; i4++)
          res += zero2(msg[i4].toString(16));
        return res;
      }
      utils.toHex = toHex2;
      utils.encode = function encode4(arr, enc) {
        if (enc === "hex")
          return toHex2(arr);
        else
          return arr;
      };
    });
    utils_1$1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      utils.assert = minimalisticAssert;
      utils.toArray = utils_1.toArray;
      utils.zero2 = utils_1.zero2;
      utils.toHex = utils_1.toHex;
      utils.encode = utils_1.encode;
      function getNAF2(num, w5, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws = 1 << w5 + 1;
        var k4 = num.clone();
        for (var i4 = 0; i4 < naf.length; i4++) {
          var z4;
          var mod = k4.andln(ws - 1);
          if (k4.isOdd()) {
            if (mod > (ws >> 1) - 1)
              z4 = (ws >> 1) - mod;
            else
              z4 = mod;
            k4.isubn(z4);
          } else {
            z4 = 0;
          }
          naf[i4] = z4;
          k4.iushrn(1);
        }
        return naf;
      }
      utils.getNAF = getNAF2;
      function getJSF2(k1, k22) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k22 = k22.clone();
        var d1 = 0;
        var d22 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k22.andln(3) + d22 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u22;
          if ((m24 & 1) === 0) {
            u22 = 0;
          } else {
            m8 = k22.andln(7) + d22 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u22 = -m24;
            else
              u22 = m24;
          }
          jsf[1].push(u22);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d22 === u22 + 1)
            d22 = 1 - d22;
          k1.iushrn(1);
          k22.iushrn(1);
        }
        return jsf;
      }
      utils.getJSF = getJSF2;
      function cachedProperty(obj, name2, computer) {
        var key2 = "_" + name2;
        obj.prototype[name2] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new import_bn2.default(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;
    });
    getNAF = utils_1$1.getNAF;
    getJSF = utils_1$1.getJSF;
    assert$1 = utils_1$1.assert;
    base = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p4, k4) {
      assert$1(p4.precomputed);
      var doubles = p4._getDoubles();
      var naf = getNAF(k4, 1, this._bitLength);
      var I4 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I4 /= 3;
      var repr = [];
      var j4;
      var nafW;
      for (j4 = 0; j4 < naf.length; j4 += doubles.step) {
        nafW = 0;
        for (var l4 = j4 + doubles.step - 1; l4 >= j4; l4--)
          nafW = (nafW << 1) + naf[l4];
        repr.push(nafW);
      }
      var a4 = this.jpoint(null, null, null);
      var b3 = this.jpoint(null, null, null);
      for (var i4 = I4; i4 > 0; i4--) {
        for (j4 = 0; j4 < repr.length; j4++) {
          nafW = repr[j4];
          if (nafW === i4)
            b3 = b3.mixedAdd(doubles.points[j4]);
          else if (nafW === -i4)
            b3 = b3.mixedAdd(doubles.points[j4].neg());
        }
        a4 = a4.add(b3);
      }
      return a4.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p4, k4) {
      var w5 = 4;
      var nafPoints = p4._getNAFPoints(w5);
      w5 = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k4, w5, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i4 = naf.length - 1; i4 >= 0; i4--) {
        for (var l4 = 0; i4 >= 0 && naf[i4] === 0; i4--)
          l4++;
        if (i4 >= 0)
          l4++;
        acc = acc.dblp(l4);
        if (i4 < 0)
          break;
        var z4 = naf[i4];
        assert$1(z4 !== 0);
        if (p4.type === "affine") {
          if (z4 > 0)
            acc = acc.mixedAdd(wnd[z4 - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z4 - 1 >> 1].neg());
        } else {
          if (z4 > 0)
            acc = acc.add(wnd[z4 - 1 >> 1]);
          else
            acc = acc.add(wnd[-z4 - 1 >> 1].neg());
        }
      }
      return p4.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i4;
      var j4;
      var p4;
      for (i4 = 0; i4 < len; i4++) {
        p4 = points[i4];
        var nafPoints = p4._getNAFPoints(defW);
        wndWidth[i4] = nafPoints.wnd;
        wnd[i4] = nafPoints.points;
      }
      for (i4 = len - 1; i4 >= 1; i4 -= 2) {
        var a4 = i4 - 1;
        var b3 = i4;
        if (wndWidth[a4] !== 1 || wndWidth[b3] !== 1) {
          naf[a4] = getNAF(coeffs[a4], wndWidth[a4], this._bitLength);
          naf[b3] = getNAF(coeffs[b3], wndWidth[b3], this._bitLength);
          max = Math.max(naf[a4].length, max);
          max = Math.max(naf[b3].length, max);
          continue;
        }
        var comb = [
          points[a4],
          null,
          null,
          points[b3]
        ];
        if (points[a4].y.cmp(points[b3].y) === 0) {
          comb[1] = points[a4].add(points[b3]);
          comb[2] = points[a4].toJ().mixedAdd(points[b3].neg());
        } else if (points[a4].y.cmp(points[b3].y.redNeg()) === 0) {
          comb[1] = points[a4].toJ().mixedAdd(points[b3]);
          comb[2] = points[a4].add(points[b3].neg());
        } else {
          comb[1] = points[a4].toJ().mixedAdd(points[b3]);
          comb[2] = points[a4].toJ().mixedAdd(points[b3].neg());
        }
        var index = [
          -3,
          -1,
          -5,
          -7,
          0,
          7,
          5,
          1,
          3
        ];
        var jsf = getJSF(coeffs[a4], coeffs[b3]);
        max = Math.max(jsf[0].length, max);
        naf[a4] = new Array(max);
        naf[b3] = new Array(max);
        for (j4 = 0; j4 < max; j4++) {
          var ja = jsf[0][j4] | 0;
          var jb = jsf[1][j4] | 0;
          naf[a4][j4] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b3][j4] = 0;
          wnd[a4] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i4 = max; i4 >= 0; i4--) {
        var k4 = 0;
        while (i4 >= 0) {
          var zero = true;
          for (j4 = 0; j4 < len; j4++) {
            tmp[j4] = naf[j4][i4] | 0;
            if (tmp[j4] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k4++;
          i4--;
        }
        if (i4 >= 0)
          k4++;
        acc = acc.dblp(k4);
        if (i4 < 0)
          break;
        for (j4 = 0; j4 < len; j4++) {
          var z4 = tmp[j4];
          p4;
          if (z4 === 0)
            continue;
          else if (z4 > 0)
            p4 = wnd[j4][z4 - 1 >> 1];
          else if (z4 < 0)
            p4 = wnd[j4][-z4 - 1 >> 1].neg();
          if (p4.type === "affine")
            acc = acc.mixedAdd(p4);
          else
            acc = acc.add(p4);
        }
      }
      for (i4 = 0; i4 < len; i4++)
        wnd[i4] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert$1(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode2(compact) {
      var len = this.curve.p.byteLength();
      var x4 = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x4);
      return [4].concat(x4, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode2(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k4) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k4.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i4 = 0; i4 < power; i4 += step) {
        for (var j4 = 0; j4 < step; j4++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i4 = 1; i4 < max; i4++)
        res[i4] = res[i4 - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k4) {
      var r4 = this;
      for (var i4 = 0; i4 < k4; i4++)
        r4 = r4.dbl();
      return r4;
    };
    inherits_browser = createCommonjsModule(function(module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    });
    assert$2 = utils_1$1.assert;
    inherits_browser(ShortCurve, base);
    short_1 = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new import_bn2.default(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new import_bn2.default(vec.a, 16),
            b: new import_bn2.default(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : import_bn2.default.mont(num);
      var tinv = new import_bn2.default(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s4 = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s4).fromRed();
      var l22 = ntinv.redSub(s4).fromRed();
      return [l1, l22];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u4 = lambda;
      var v4 = this.n.clone();
      var x1 = new import_bn2.default(1);
      var y1 = new import_bn2.default(0);
      var x22 = new import_bn2.default(0);
      var y22 = new import_bn2.default(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a22;
      var b22;
      var prevR;
      var i4 = 0;
      var r4;
      var x4;
      while (u4.cmpn(0) !== 0) {
        var q4 = v4.div(u4);
        r4 = v4.sub(q4.mul(u4));
        x4 = x22.sub(q4.mul(x1));
        var y4 = y22.sub(q4.mul(y1));
        if (!a1 && r4.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r4.neg();
          b1 = x4;
        } else if (a1 && ++i4 === 2) {
          break;
        }
        prevR = r4;
        v4 = u4;
        u4 = r4;
        x22 = x1;
        x1 = x4;
        y22 = y1;
        y1 = y4;
      }
      a22 = r4.neg();
      b22 = x4;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a22.sqr().add(b22.sqr());
      if (len2.cmp(len1) >= 0) {
        a22 = a0;
        b22 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a22.negative) {
        a22 = a22.neg();
        b22 = b22.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a22, b: b22 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k4) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v22 = basis[1];
      var c1 = v22.b.mul(k4).divRound(this.n);
      var c22 = v1.b.neg().mul(k4).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p22 = c22.mul(v22.a);
      var q1 = c1.mul(v1.b);
      var q22 = c22.mul(v22.b);
      var k1 = k4.sub(p1).sub(p22);
      var k22 = q1.add(q22).neg();
      return { k1, k2: k22 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x4, odd) {
      x4 = new import_bn2.default(x4, 16);
      if (!x4.red)
        x4 = x4.toRed(this.red);
      var y22 = x4.redSqr().redMul(x4).redIAdd(x4.redMul(this.a)).redIAdd(this.b);
      var y4 = y22.redSqrt();
      if (y4.redSqr().redSub(y22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y4.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y4 = y4.redNeg();
      return this.point(x4, y4);
    };
    ShortCurve.prototype.validate = function validate3(point3) {
      if (point3.inf)
        return true;
      var x4 = point3.x;
      var y4 = point3.y;
      var ax = this.a.redMul(x4);
      var rhs = x4.redSqr().redMul(x4).redIAdd(ax).redIAdd(this.b);
      return y4.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i4 = 0; i4 < points.length; i4++) {
        var split = this._endoSplit(coeffs[i4]);
        var p4 = points[i4];
        var beta = p4._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p4 = p4.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i4 * 2] = p4;
        npoints[i4 * 2 + 1] = beta;
        ncoeffs[i4 * 2] = split.k1;
        ncoeffs[i4 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i4 * 2, jacobianResult);
      for (var j4 = 0; j4 < i4 * 2; j4++) {
        npoints[j4] = null;
        ncoeffs[j4] = null;
      }
      return res;
    };
    inherits_browser(Point, base.BasePoint);
    ShortCurve.prototype.point = function point2(x4, y4, isRed) {
      return new Point(this, x4, y4, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta2() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p4) {
          return curve.point(p4.x.redMul(curve.endo.beta), p4.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p4) {
      if (this.inf)
        return p4;
      if (p4.inf)
        return this;
      if (this.eq(p4))
        return this.dbl();
      if (this.neg().eq(p4))
        return this.curve.point(null, null);
      if (this.x.cmp(p4.x) === 0)
        return this.curve.point(null, null);
      var c4 = this.y.redSub(p4.y);
      if (c4.cmpn(0) !== 0)
        c4 = c4.redMul(this.x.redSub(p4.x).redInvm());
      var nx = c4.redSqr().redISub(this.x).redISub(p4.x);
      var ny = c4.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a4 = this.curve.a;
      var x22 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c4 = x22.redAdd(x22).redIAdd(x22).redIAdd(a4).redMul(dyinv);
      var nx = c4.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c4.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k4) {
      k4 = new import_bn2.default(k4, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k4))
        return this.curve._fixedNafMul(this, k4);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k4]);
      else
        return this.curve._wnafMul(this, k4);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq2(p4) {
      return this === p4 || this.inf === p4.inf && (this.inf || this.x.cmp(p4.x) === 0 && this.y.cmp(p4.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p4) {
          return p4.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    inherits_browser(JPoint, base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x4, y4, z4) {
      return new JPoint(this, x4, y4, z4);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg2() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add2(p4) {
      if (this.isInfinity())
        return p4;
      if (p4.isInfinity())
        return this;
      var pz2 = p4.z.redSqr();
      var z22 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u22 = p4.x.redMul(z22);
      var s1 = this.y.redMul(pz2.redMul(p4.z));
      var s22 = p4.y.redMul(z22.redMul(this.z));
      var h4 = u1.redSub(u22);
      var r4 = s1.redSub(s22);
      if (h4.cmpn(0) === 0) {
        if (r4.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h4.redSqr();
      var h32 = h22.redMul(h4);
      var v4 = u1.redMul(h22);
      var nx = r4.redSqr().redIAdd(h32).redISub(v4).redISub(v4);
      var ny = r4.redMul(v4.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(p4.z).redMul(h4);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p4) {
      if (this.isInfinity())
        return p4.toJ();
      if (p4.isInfinity())
        return this;
      var z22 = this.z.redSqr();
      var u1 = this.x;
      var u22 = p4.x.redMul(z22);
      var s1 = this.y;
      var s22 = p4.y.redMul(z22).redMul(this.z);
      var h4 = u1.redSub(u22);
      var r4 = s1.redSub(s22);
      if (h4.cmpn(0) === 0) {
        if (r4.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h4.redSqr();
      var h32 = h22.redMul(h4);
      var v4 = u1.redMul(h22);
      var nx = r4.redSqr().redIAdd(h32).redISub(v4).redISub(v4);
      var ny = r4.redMul(v4.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(h4);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp2(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i4;
      if (this.curve.zeroA || this.curve.threeA) {
        var r4 = this;
        for (i4 = 0; i4 < pow; i4++)
          r4 = r4.dbl();
        return r4;
      }
      var a4 = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i4 = 0; i4 < pow; i4++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c4 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c4.redSqr().redISub(t1.redAdd(t1));
        var t22 = t1.redISub(nx);
        var dny = c4.redMul(t22);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i4 + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl2() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s4 = s4.redIAdd(s4);
        var m3 = xx.redAdd(xx).redIAdd(xx);
        var t4 = m3.redSqr().redISub(s4).redISub(s4);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t4;
        ny = m3.redMul(s4.redISub(t4)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a4 = this.x.redSqr();
        var b3 = this.y.redSqr();
        var c4 = b3.redSqr();
        var d4 = this.x.redAdd(b3).redSqr().redISub(a4).redISub(c4);
        d4 = d4.redIAdd(d4);
        var e3 = a4.redAdd(a4).redIAdd(a4);
        var f4 = e3.redSqr();
        var c8 = c4.redIAdd(c4);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f4.redISub(d4).redISub(d4);
        ny = e3.redMul(d4.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s4 = s4.redIAdd(s4);
        var m3 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t4 = m3.redSqr().redISub(s4).redISub(s4);
        nx = t4;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m3.redMul(s4.redISub(t4)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a4 = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c4 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c4.redSqr().redISub(t1.redAdd(t1));
      var t22 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c4.redMul(t22).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m3 = xx.redAdd(xx).redIAdd(xx);
      var mm = m3.redSqr();
      var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e3 = e3.redIAdd(e3);
      e3 = e3.redAdd(e3).redIAdd(e3);
      e3 = e3.redISub(mm);
      var ee = e3.redSqr();
      var t4 = yyyy.redIAdd(yyyy);
      t4 = t4.redIAdd(t4);
      t4 = t4.redIAdd(t4);
      t4 = t4.redIAdd(t4);
      var u4 = m3.redIAdd(e3).redSqr().redISub(mm).redISub(ee).redISub(t4);
      var yyu4 = yy.redMul(u4);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u4.redMul(t4.redISub(u4)).redISub(e3.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul2(k4, kbase) {
      k4 = new import_bn2.default(k4, kbase);
      return this.curve._wnafMul(this, k4);
    };
    JPoint.prototype.eq = function eq3(p4) {
      if (p4.type === "affine")
        return this.eq(p4.toJ());
      if (this === p4)
        return true;
      var z22 = this.z.redSqr();
      var pz2 = p4.z.redSqr();
      if (this.x.redMul(pz2).redISub(p4.x.redMul(z22)).cmpn(0) !== 0)
        return false;
      var z32 = z22.redMul(this.z);
      var pz3 = pz2.redMul(p4.z);
      return this.y.redMul(pz3).redISub(p4.y.redMul(z32)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x4) {
      var zs = this.z.redSqr();
      var rx = x4.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x4.clone();
      var t4 = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t4);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity2() {
      return this.z.cmpn(0) === 0;
    };
    curve_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curve = exports;
      curve.base = base;
      curve.short = short_1;
      curve.mont = null;
      curve.edwards = null;
    });
    curves_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curves = exports;
      var assert2 = utils_1$1.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve_1.short(options);
        else if (options.type === "edwards")
          this.curve = new curve_1.edwards(options);
        else
          this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name2, options) {
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name2, {
              configurable: true,
              enumerable: true,
              value: curve
            });
            return curve;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: import_hash2.default.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: import_hash2.default.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = null.crash();
      } catch (e3) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: import_hash2.default.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    });
    hmacDrbg = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i4 = 0; i4 < this.V.length; i4++) {
        this.K[i4] = 0;
        this.V[i4] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new import_hash2.default.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils_1.toArray(entropy, entropyEnc);
      add3 = utils_1.toArray(add3, addEnc);
      minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._update(entropy.concat(add3 || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
      }
      if (add3) {
        add3 = utils_1.toArray(add3, addEnc || "hex");
        this._update(add3);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add3);
      this._reseed++;
      return utils_1.encode(res, enc);
    };
    assert$3 = utils_1$1.assert;
    key = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate4() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new import_bn2.default(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert$3(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert$3(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert$3(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature2) {
      return this.ec.verify(msg, signature2, this);
    };
    KeyPair.prototype.inspect = function inspect3() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    assert$4 = utils_1$1.assert;
    signature = Signature;
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p4 = new Position();
      if (data[p4.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p4);
      if (len === false) {
        return false;
      }
      if (len + p4.place !== data.length) {
        return false;
      }
      if (data[p4.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p4);
      if (rlen === false) {
        return false;
      }
      var r4 = data.slice(p4.place, rlen + p4.place);
      p4.place += rlen;
      if (data[p4.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p4);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p4.place) {
        return false;
      }
      var s4 = data.slice(p4.place, slen + p4.place);
      if (r4[0] === 0) {
        if (r4[1] & 128) {
          r4 = r4.slice(1);
        } else {
          return false;
        }
      }
      if (s4[0] === 0) {
        if (s4[1] & 128) {
          s4 = s4.slice(1);
        } else {
          return false;
        }
      }
      this.r = new import_bn2.default(r4);
      this.s = new import_bn2.default(s4);
      this.recoveryParam = null;
      return true;
    };
    Signature.prototype.toDER = function toDER(enc) {
      var r4 = this.r.toArray();
      var s4 = this.s.toArray();
      if (r4[0] & 128)
        r4 = [0].concat(r4);
      if (s4[0] & 128)
        s4 = [0].concat(s4);
      r4 = rmPadding(r4);
      s4 = rmPadding(s4);
      while (!s4[0] && !(s4[1] & 128)) {
        s4 = s4.slice(1);
      }
      var arr = [2];
      constructLength(arr, r4.length);
      arr = arr.concat(r4);
      arr.push(2);
      constructLength(arr, s4.length);
      var backHalf = arr.concat(s4);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };
    rand = function() {
      throw new Error("unsupported");
    };
    assert$5 = utils_1$1.assert;
    ec = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new import_bn2.default(2));
      for (; ; ) {
        var priv = new import_bn2.default(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign2(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new import_bn2.default(1));
      for (var iter = 0; ; iter++) {
        var k4 = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
        k4 = this._truncateToN(k4, true);
        if (k4.cmpn(1) <= 0 || k4.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k4);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r4 = kpX.umod(this.n);
        if (r4.cmpn(0) === 0)
          continue;
        var s4 = k4.invm(this.n).mul(r4.mul(key2.getPrivate()).iadd(msg));
        s4 = s4.umod(this.n);
        if (s4.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r4) !== 0 ? 2 : 0);
        if (options.canonical && s4.cmp(this.nh) > 0) {
          s4 = this.n.sub(s4);
          recoveryParam ^= 1;
        }
        return new signature({ r: r4, s: s4, recoveryParam });
      }
    };
    EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      key2 = this.keyFromPublic(key2, enc);
      signature$1 = new signature(signature$1, "hex");
      var r4 = signature$1.r;
      var s4 = signature$1.s;
      if (r4.cmpn(1) < 0 || r4.cmp(this.n) >= 0)
        return false;
      if (s4.cmpn(1) < 0 || s4.cmp(this.n) >= 0)
        return false;
      var sinv = s4.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u22 = sinv.mul(r4).umod(this.n);
      var p4;
      if (!this.curve._maxwellTrick) {
        p4 = this.g.mulAdd(u1, key2.getPublic(), u22);
        if (p4.isInfinity())
          return false;
        return p4.getX().umod(this.n).cmp(r4) === 0;
      }
      p4 = this.g.jmulAdd(u1, key2.getPublic(), u22);
      if (p4.isInfinity())
        return false;
      return p4.eqXToP(r4);
    };
    EC.prototype.recoverPubKey = function(msg, signature$1, j4, enc) {
      assert$5((3 & j4) === j4, "The recovery param is more than two bits");
      signature$1 = new signature(signature$1, enc);
      var n3 = this.n;
      var e3 = new import_bn2.default(msg);
      var r4 = signature$1.r;
      var s4 = signature$1.s;
      var isYOdd = j4 & 1;
      var isSecondKey = j4 >> 1;
      if (r4.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r4 = this.curve.pointFromX(r4.add(this.curve.n), isYOdd);
      else
        r4 = this.curve.pointFromX(r4, isYOdd);
      var rInv = signature$1.r.invm(n3);
      var s1 = n3.sub(e3).mul(rInv).umod(n3);
      var s22 = s4.mul(rInv).umod(n3);
      return this.g.mulAdd(s1, r4, s22);
    };
    EC.prototype.getKeyRecoveryParam = function(e3, signature$1, Q3, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;
      for (var i4 = 0; i4 < 4; i4++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e3, signature$1, i4);
        } catch (e4) {
          continue;
        }
        if (Qprime.eq(Q3))
          return i4;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    elliptic_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var elliptic = exports;
      elliptic.version = { version: "6.5.4" }.version;
      elliptic.utils = utils_1$1;
      elliptic.rand = function() {
        throw new Error("unsupported");
      };
      elliptic.curve = curve_1;
      elliptic.curves = curves_1;
      elliptic.ec = ec;
      elliptic.eddsa = null;
    });
    EC$1 = elliptic_1.ec;
  }
});

// node_modules/moralis/node_modules/@ethersproject/signing-key/lib.esm/_version.js
var version10;
var init_version10 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/signing-key/lib.esm/_version.js"() {
    version10 = "signing-key/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/signing-key/lib.esm/index.js
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
function recoverPublicKey(digest, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger16.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
var logger16, _curve, SigningKey;
var init_lib14 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/signing-key/lib.esm/index.js"() {
    "use strict";
    init_elliptic();
    init_lib3();
    init_lib2();
    init_lib();
    init_version10();
    logger16 = new Logger(version10);
    _curve = null;
    SigningKey = class {
      constructor(privateKey) {
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", hexlify(privateKey));
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
      }
      _addPoint(other) {
        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
        const p1 = getCurve().keyFromPublic(arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
      }
      signDigest(digest) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const digestBytes = arrayify(digest);
        if (digestBytes.length !== 32) {
          logger16.throwArgumentError("bad digest length", "digest", digest);
        }
        const signature2 = keyPair2.sign(digestBytes, { canonical: true });
        return splitSignature({
          recoveryParam: signature2.recoveryParam,
          r: hexZeroPad("0x" + signature2.r.toString(16), 32),
          s: hexZeroPad("0x" + signature2.s.toString(16), 32)
        });
      }
      computeSharedSecret(otherKey) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
      }
      static isSigningKey(value) {
        return !!(value && value._isSigningKey);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/transactions/lib.esm/_version.js
var version11;
var init_version11 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
    version11 = "transactions/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/transactions/lib.esm/index.js
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleNumber(value) {
  if (value === "0x") {
    return Zero2;
  }
  return BigNumber.from(value);
}
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest), signature2));
}
function formatNumber(value, name2) {
  const result = stripZeros(BigNumber.from(value).toHexString());
  if (result.length > 32) {
    logger17.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value);
  }
  return result;
}
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: (storageKeys || []).map((storageKey, index) => {
      if (hexDataLength(storageKey) !== 32) {
        logger17.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
      }
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        if (set.length > 2) {
          logger17.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
        }
        return accessSetify(set[0], set[1]);
      }
      return accessSetify(set.address, set.storageKeys);
    });
  }
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a4, b3) => a4.address.localeCompare(b3.address));
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function _serializeEip1559(transaction, signature2) {
  if (transaction.gasPrice != null) {
    const gasPrice = BigNumber.from(transaction.gasPrice);
    const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
    if (!gasPrice.eq(maxFeePerGas)) {
      logger17.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
        gasPrice,
        maxFeePerGas
      });
    }
  }
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x02", encode(fields)]);
}
function _serializeEip2930(transaction, signature2) {
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.gasPrice || 0, "gasPrice"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x01", encode(fields)]);
}
function _serialize(transaction, signature2) {
  checkProperties(transaction, allowedTransactionKeys2);
  const raw = [];
  transactionFields.forEach(function(fieldInfo) {
    let value = transaction[fieldInfo.name] || [];
    const options = {};
    if (fieldInfo.numeric) {
      options.hexPad = "left";
    }
    value = arrayify(hexlify(value, options));
    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
      logger17.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
    }
    if (fieldInfo.maxLength) {
      value = stripZeros(value);
      if (value.length > fieldInfo.maxLength) {
        logger17.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
    }
    raw.push(hexlify(value));
  });
  let chainId = 0;
  if (transaction.chainId != null) {
    chainId = transaction.chainId;
    if (typeof chainId !== "number") {
      logger17.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    }
  } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {
    chainId = Math.floor((signature2.v - 35) / 2);
  }
  if (chainId !== 0) {
    raw.push(hexlify(chainId));
    raw.push("0x");
    raw.push("0x");
  }
  if (!signature2) {
    return encode(raw);
  }
  const sig = splitSignature(signature2);
  let v4 = 27 + sig.recoveryParam;
  if (chainId !== 0) {
    raw.pop();
    raw.pop();
    raw.pop();
    v4 += chainId * 2 + 8;
    if (sig.v > 28 && sig.v !== v4) {
      logger17.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
    }
  } else if (sig.v !== v4) {
    logger17.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
  }
  raw.push(hexlify(v4));
  raw.push(stripZeros(arrayify(sig.r)));
  raw.push(stripZeros(arrayify(sig.s)));
  return encode(raw);
}
function serialize(transaction, signature2) {
  if (transaction.type == null || transaction.type === 0) {
    if (transaction.accessList != null) {
      logger17.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    }
    return _serialize(transaction, signature2);
  }
  switch (transaction.type) {
    case 1:
      return _serializeEip2930(transaction, signature2);
    case 2:
      return _serializeEip1559(transaction, signature2);
    default:
      break;
  }
  return logger17.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: transaction.type
  });
}
function _parseEipSignature(tx, fields, serialize3) {
  try {
    const recid = handleNumber(fields[0]).toNumber();
    if (recid !== 0 && recid !== 1) {
      throw new Error("bad recid");
    }
    tx.v = recid;
  } catch (error) {
    logger17.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
  }
  tx.r = hexZeroPad(fields[1], 32);
  tx.s = hexZeroPad(fields[2], 32);
  try {
    const digest = keccak256(serialize3(tx));
    tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
  } catch (error) {
    console.log(error);
  }
}
function _parseEip1559(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 9 && transaction.length !== 12) {
    logger17.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
  }
  const maxPriorityFeePerGas = handleNumber(transaction[2]);
  const maxFeePerGas = handleNumber(transaction[3]);
  const tx = {
    type: 2,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice: null,
    gasLimit: handleNumber(transaction[4]),
    to: handleAddress(transaction[5]),
    value: handleNumber(transaction[6]),
    data: transaction[7],
    accessList: accessListify(transaction[8])
  };
  if (transaction.length === 9) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
  return tx;
}
function _parseEip2930(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 8 && transaction.length !== 11) {
    logger17.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
  }
  const tx = {
    type: 1,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    gasPrice: handleNumber(transaction[2]),
    gasLimit: handleNumber(transaction[3]),
    to: handleAddress(transaction[4]),
    value: handleNumber(transaction[5]),
    data: transaction[6],
    accessList: accessListify(transaction[7])
  };
  if (transaction.length === 8) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
  return tx;
}
function _parse(rawTransaction) {
  const transaction = decode(rawTransaction);
  if (transaction.length !== 9 && transaction.length !== 6) {
    logger17.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
  }
  const tx = {
    nonce: handleNumber(transaction[0]).toNumber(),
    gasPrice: handleNumber(transaction[1]),
    gasLimit: handleNumber(transaction[2]),
    to: handleAddress(transaction[3]),
    value: handleNumber(transaction[4]),
    data: transaction[5],
    chainId: 0
  };
  if (transaction.length === 6) {
    return tx;
  }
  try {
    tx.v = BigNumber.from(transaction[6]).toNumber();
  } catch (error) {
    console.log(error);
    return tx;
  }
  tx.r = hexZeroPad(transaction[7], 32);
  tx.s = hexZeroPad(transaction[8], 32);
  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
    tx.chainId = tx.v;
    tx.v = 0;
  } else {
    tx.chainId = Math.floor((tx.v - 35) / 2);
    if (tx.chainId < 0) {
      tx.chainId = 0;
    }
    let recoveryParam = tx.v - 27;
    const raw = transaction.slice(0, 6);
    if (tx.chainId !== 0) {
      raw.push(hexlify(tx.chainId));
      raw.push("0x");
      raw.push("0x");
      recoveryParam -= tx.chainId * 2 + 8;
    }
    const digest = keccak256(encode(raw));
    try {
      tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
    } catch (error) {
      console.log(error);
    }
    tx.hash = keccak256(rawTransaction);
  }
  tx.type = null;
  return tx;
}
function parse(rawTransaction) {
  const payload = arrayify(rawTransaction);
  if (payload[0] > 127) {
    return _parse(payload);
  }
  switch (payload[0]) {
    case 1:
      return _parseEip2930(payload);
    case 2:
      return _parseEip1559(payload);
    default:
      break;
  }
  return logger17.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "parseTransaction",
    transactionType: payload[0]
  });
}
var logger17, TransactionTypes, transactionFields, allowedTransactionKeys2;
var init_lib15 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
    "use strict";
    init_lib7();
    init_lib4();
    init_lib3();
    init_lib8();
    init_lib5();
    init_lib2();
    init_lib6();
    init_lib14();
    init_lib();
    init_version11();
    logger17 = new Logger(version11);
    (function(TransactionTypes2) {
      TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
      TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
      TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    transactionFields = [
      { name: "nonce", maxLength: 32, numeric: true },
      { name: "gasPrice", maxLength: 32, numeric: true },
      { name: "gasLimit", maxLength: 32, numeric: true },
      { name: "to", length: 20 },
      { name: "value", maxLength: 32, numeric: true },
      { name: "data" }
    ];
    allowedTransactionKeys2 = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      type: true,
      value: true
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/contracts/lib.esm/_version.js
var version12;
var init_version12 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/contracts/lib.esm/_version.js"() {
    version12 = "contracts/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/contracts/lib.esm/index.js
function resolveName(resolver, nameOrPromise) {
  return __awaiter4(this, void 0, void 0, function* () {
    const name2 = yield nameOrPromise;
    if (typeof name2 !== "string") {
      logger18.throwArgumentError("invalid address or ENS name", "name", name2);
    }
    try {
      return getAddress(name2);
    } catch (error) {
    }
    if (!resolver) {
      logger18.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName"
      });
    }
    const address = yield resolver.resolveName(name2);
    if (address == null) {
      logger18.throwArgumentError("resolver or addr is not configured for ENS name", "name", name2);
    }
    return address;
  });
}
function resolveAddresses(resolver, value, paramType) {
  return __awaiter4(this, void 0, void 0, function* () {
    if (Array.isArray(paramType)) {
      return yield Promise.all(paramType.map((paramType2, index) => {
        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);
      }));
    }
    if (paramType.type === "address") {
      return yield resolveName(resolver, value);
    }
    if (paramType.type === "tuple") {
      return yield resolveAddresses(resolver, value, paramType.components);
    }
    if (paramType.baseType === "array") {
      if (!Array.isArray(value)) {
        return Promise.reject(logger18.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
          argument: "value",
          value
        }));
      }
      return yield Promise.all(value.map((v4) => resolveAddresses(resolver, v4, paramType.arrayChildren)));
    }
    return value;
  });
}
function populateTransaction(contract, fragment, args) {
  return __awaiter4(this, void 0, void 0, function* () {
    let overrides = {};
    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      overrides = shallowCopy(args.pop());
    }
    logger18.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
    if (contract.signer) {
      if (overrides.from) {
        overrides.from = resolveProperties({
          override: resolveName(contract.signer, overrides.from),
          signer: contract.signer.getAddress()
        }).then((check) => __awaiter4(this, void 0, void 0, function* () {
          if (getAddress(check.signer) !== check.override) {
            logger18.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.from"
            });
          }
          return check.override;
        }));
      } else {
        overrides.from = contract.signer.getAddress();
      }
    } else if (overrides.from) {
      overrides.from = resolveName(contract.provider, overrides.from);
    }
    const resolved = yield resolveProperties({
      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
      address: contract.resolvedAddress,
      overrides: resolveProperties(overrides) || {}
    });
    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
    const tx = {
      data,
      to: resolved.address
    };
    const ro = resolved.overrides;
    if (ro.nonce != null) {
      tx.nonce = BigNumber.from(ro.nonce).toNumber();
    }
    if (ro.gasLimit != null) {
      tx.gasLimit = BigNumber.from(ro.gasLimit);
    }
    if (ro.gasPrice != null) {
      tx.gasPrice = BigNumber.from(ro.gasPrice);
    }
    if (ro.maxFeePerGas != null) {
      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
    }
    if (ro.maxPriorityFeePerGas != null) {
      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
    }
    if (ro.from != null) {
      tx.from = ro.from;
    }
    if (ro.type != null) {
      tx.type = ro.type;
    }
    if (ro.accessList != null) {
      tx.accessList = accessListify(ro.accessList);
    }
    if (tx.gasLimit == null && fragment.gas != null) {
      let intrinsic = 21e3;
      const bytes = arrayify(data);
      for (let i4 = 0; i4 < bytes.length; i4++) {
        intrinsic += 4;
        if (bytes[i4]) {
          intrinsic += 64;
        }
      }
      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
    }
    if (ro.value) {
      const roValue = BigNumber.from(ro.value);
      if (!roValue.isZero() && !fragment.payable) {
        logger18.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: overrides.value
        });
      }
      tx.value = roValue;
    }
    if (ro.customData) {
      tx.customData = shallowCopy(ro.customData);
    }
    if (ro.ccipReadEnabled) {
      tx.ccipReadEnabled = !!ro.ccipReadEnabled;
    }
    delete overrides.nonce;
    delete overrides.gasLimit;
    delete overrides.gasPrice;
    delete overrides.from;
    delete overrides.value;
    delete overrides.type;
    delete overrides.accessList;
    delete overrides.maxFeePerGas;
    delete overrides.maxPriorityFeePerGas;
    delete overrides.customData;
    delete overrides.ccipReadEnabled;
    const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);
    if (leftovers.length) {
      logger18.throwError(`cannot override ${leftovers.map((l4) => JSON.stringify(l4)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides",
        overrides: leftovers
      });
    }
    return tx;
  });
}
function buildPopulate(contract, fragment) {
  return function(...args) {
    return populateTransaction(contract, fragment, args);
  };
}
function buildEstimate(contract, fragment) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!signerOrProvider) {
        logger18.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "estimateGas"
        });
      }
      const tx = yield populateTransaction(contract, fragment, args);
      return yield signerOrProvider.estimateGas(tx);
    });
  };
}
function addContractWait(contract, tx) {
  const wait = tx.wait.bind(tx);
  tx.wait = (confirmations) => {
    return wait(confirmations).then((receipt) => {
      receipt.events = receipt.logs.map((log4) => {
        let event = deepCopy(log4);
        let parsed = null;
        try {
          parsed = contract.interface.parseLog(log4);
        } catch (e3) {
        }
        if (parsed) {
          event.args = parsed.args;
          event.decode = (data, topics) => {
            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        }
        event.removeListener = () => {
          return contract.provider;
        };
        event.getBlock = () => {
          return contract.provider.getBlock(receipt.blockHash);
        };
        event.getTransaction = () => {
          return contract.provider.getTransaction(receipt.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return Promise.resolve(receipt);
        };
        return event;
      });
      return receipt;
    });
  };
}
function buildCall(contract, fragment, collapseSimple) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter4(this, void 0, void 0, function* () {
      let blockTag = void 0;
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        const overrides = shallowCopy(args.pop());
        if (overrides.blockTag != null) {
          blockTag = yield overrides.blockTag;
        }
        delete overrides.blockTag;
        args.push(overrides);
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed(blockTag);
      }
      const tx = yield populateTransaction(contract, fragment, args);
      const result = yield signerOrProvider.call(tx, blockTag);
      try {
        let value = contract.interface.decodeFunctionResult(fragment, result);
        if (collapseSimple && fragment.outputs.length === 1) {
          value = value[0];
        }
        return value;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          error.address = contract.address;
          error.args = args;
          error.transaction = tx;
        }
        throw error;
      }
    });
  };
}
function buildSend(contract, fragment) {
  return function(...args) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (!contract.signer) {
        logger18.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction"
        });
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed();
      }
      const txRequest = yield populateTransaction(contract, fragment, args);
      const tx = yield contract.signer.sendTransaction(txRequest);
      addContractWait(contract, tx);
      return tx;
    });
  };
}
function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }
  return buildSend(contract, fragment);
}
function getEventTag(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }
  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }
    return topic;
  }).join(":") : "");
}
var __awaiter4, logger18, allowedTransactionKeys3, RunningEvent, ErrorRunningEvent, FragmentRunningEvent, WildcardRunningEvent, BaseContract, Contract, ContractFactory;
var init_lib16 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/contracts/lib.esm/index.js"() {
    "use strict";
    init_lib11();
    init_lib12();
    init_lib13();
    init_lib7();
    init_lib4();
    init_lib3();
    init_lib2();
    init_lib15();
    init_lib();
    init_version12();
    __awaiter4 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger18 = new Logger(version12);
    allowedTransactionKeys3 = {
      chainId: true,
      data: true,
      from: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true,
      customData: true,
      ccipReadEnabled: true
    };
    RunningEvent = class {
      constructor(tag, filter) {
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "filter", filter);
        this._listeners = [];
      }
      addListener(listener, once) {
        this._listeners.push({ listener, once });
      }
      removeListener(listener) {
        let done = false;
        this._listeners = this._listeners.filter((item) => {
          if (done || item.listener !== listener) {
            return true;
          }
          done = true;
          return false;
        });
      }
      removeAllListeners() {
        this._listeners = [];
      }
      listeners() {
        return this._listeners.map((i4) => i4.listener);
      }
      listenerCount() {
        return this._listeners.length;
      }
      run(args) {
        const listenerCount = this.listenerCount();
        this._listeners = this._listeners.filter((item) => {
          const argsCopy = args.slice();
          setTimeout(() => {
            item.listener.apply(this, argsCopy);
          }, 0);
          return !item.once;
        });
        return listenerCount;
      }
      prepareEvent(event) {
      }
      getEmit(event) {
        return [event];
      }
    };
    ErrorRunningEvent = class extends RunningEvent {
      constructor() {
        super("error", null);
      }
    };
    FragmentRunningEvent = class extends RunningEvent {
      constructor(address, contractInterface, fragment, topics) {
        const filter = {
          address
        };
        let topic = contractInterface.getEventTopic(fragment);
        if (topics) {
          if (topic !== topics[0]) {
            logger18.throwArgumentError("topic mismatch", "topics", topics);
          }
          filter.topics = topics.slice();
        } else {
          filter.topics = [topic];
        }
        super(getEventTag(filter), filter);
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "interface", contractInterface);
        defineReadOnly(this, "fragment", fragment);
      }
      prepareEvent(event) {
        super.prepareEvent(event);
        event.event = this.fragment.name;
        event.eventSignature = this.fragment.format();
        event.decode = (data, topics) => {
          return this.interface.decodeEventLog(this.fragment, data, topics);
        };
        try {
          event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
        } catch (error) {
          event.args = null;
          event.decodeError = error;
        }
      }
      getEmit(event) {
        const errors = checkResultErrors(event.args);
        if (errors.length) {
          throw errors[0].error;
        }
        const args = (event.args || []).slice();
        args.push(event);
        return args;
      }
    };
    WildcardRunningEvent = class extends RunningEvent {
      constructor(address, contractInterface) {
        super("*", { address });
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "interface", contractInterface);
      }
      prepareEvent(event) {
        super.prepareEvent(event);
        try {
          const parsed = this.interface.parseLog(event);
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
          event.decode = (data, topics) => {
            return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.args = parsed.args;
        } catch (error) {
        }
      }
    };
    BaseContract = class {
      constructor(addressOrName, contractInterface, signerOrProvider) {
        logger18.checkNew(new.target, Contract);
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        if (signerOrProvider == null) {
          defineReadOnly(this, "provider", null);
          defineReadOnly(this, "signer", null);
        } else if (Signer.isSigner(signerOrProvider)) {
          defineReadOnly(this, "provider", signerOrProvider.provider || null);
          defineReadOnly(this, "signer", signerOrProvider);
        } else if (Provider.isProvider(signerOrProvider)) {
          defineReadOnly(this, "provider", signerOrProvider);
          defineReadOnly(this, "signer", null);
        } else {
          logger18.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
        }
        defineReadOnly(this, "callStatic", {});
        defineReadOnly(this, "estimateGas", {});
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "populateTransaction", {});
        defineReadOnly(this, "filters", {});
        {
          const uniqueFilters = {};
          Object.keys(this.interface.events).forEach((eventSignature) => {
            const event = this.interface.events[eventSignature];
            defineReadOnly(this.filters, eventSignature, (...args) => {
              return {
                address: this.address,
                topics: this.interface.encodeFilterTopics(event, args)
              };
            });
            if (!uniqueFilters[event.name]) {
              uniqueFilters[event.name] = [];
            }
            uniqueFilters[event.name].push(eventSignature);
          });
          Object.keys(uniqueFilters).forEach((name2) => {
            const filters = uniqueFilters[name2];
            if (filters.length === 1) {
              defineReadOnly(this.filters, name2, this.filters[filters[0]]);
            } else {
              logger18.warn(`Duplicate definition of ${name2} (${filters.join(", ")})`);
            }
          });
        }
        defineReadOnly(this, "_runningEvents", {});
        defineReadOnly(this, "_wrappedEmits", {});
        if (addressOrName == null) {
          logger18.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
        }
        defineReadOnly(this, "address", addressOrName);
        if (this.provider) {
          defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
        } else {
          try {
            defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
          } catch (error) {
            logger18.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new Contract"
            });
          }
        }
        this.resolvedAddress.catch((e3) => {
        });
        const uniqueNames = {};
        const uniqueSignatures = {};
        Object.keys(this.interface.functions).forEach((signature2) => {
          const fragment = this.interface.functions[signature2];
          if (uniqueSignatures[signature2]) {
            logger18.warn(`Duplicate ABI entry for ${JSON.stringify(signature2)}`);
            return;
          }
          uniqueSignatures[signature2] = true;
          {
            const name2 = fragment.name;
            if (!uniqueNames[`%${name2}`]) {
              uniqueNames[`%${name2}`] = [];
            }
            uniqueNames[`%${name2}`].push(signature2);
          }
          if (this[signature2] == null) {
            defineReadOnly(this, signature2, buildDefault(this, fragment, true));
          }
          if (this.functions[signature2] == null) {
            defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));
          }
          if (this.callStatic[signature2] == null) {
            defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));
          }
          if (this.populateTransaction[signature2] == null) {
            defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));
          }
          if (this.estimateGas[signature2] == null) {
            defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));
          }
        });
        Object.keys(uniqueNames).forEach((name2) => {
          const signatures = uniqueNames[name2];
          if (signatures.length > 1) {
            return;
          }
          name2 = name2.substring(1);
          const signature2 = signatures[0];
          try {
            if (this[name2] == null) {
              defineReadOnly(this, name2, this[signature2]);
            }
          } catch (e3) {
          }
          if (this.functions[name2] == null) {
            defineReadOnly(this.functions, name2, this.functions[signature2]);
          }
          if (this.callStatic[name2] == null) {
            defineReadOnly(this.callStatic, name2, this.callStatic[signature2]);
          }
          if (this.populateTransaction[name2] == null) {
            defineReadOnly(this.populateTransaction, name2, this.populateTransaction[signature2]);
          }
          if (this.estimateGas[name2] == null) {
            defineReadOnly(this.estimateGas, name2, this.estimateGas[signature2]);
          }
        });
      }
      static getContractAddress(transaction) {
        return getContractAddress(transaction);
      }
      static getInterface(contractInterface) {
        if (Interface.isInterface(contractInterface)) {
          return contractInterface;
        }
        return new Interface(contractInterface);
      }
      deployed() {
        return this._deployed();
      }
      _deployed(blockTag) {
        if (!this._deployedPromise) {
          if (this.deployTransaction) {
            this._deployedPromise = this.deployTransaction.wait().then(() => {
              return this;
            });
          } else {
            this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
              if (code === "0x") {
                logger18.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                  contractAddress: this.address,
                  operation: "getDeployed"
                });
              }
              return this;
            });
          }
        }
        return this._deployedPromise;
      }
      fallback(overrides) {
        if (!this.signer) {
          logger18.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
        }
        const tx = shallowCopy(overrides || {});
        ["from", "to"].forEach(function(key2) {
          if (tx[key2] == null) {
            return;
          }
          logger18.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
        });
        tx.to = this.resolvedAddress;
        return this.deployed().then(() => {
          return this.signer.sendTransaction(tx);
        });
      }
      connect(signerOrProvider) {
        if (typeof signerOrProvider === "string") {
          signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
        }
        const contract = new this.constructor(this.address, this.interface, signerOrProvider);
        if (this.deployTransaction) {
          defineReadOnly(contract, "deployTransaction", this.deployTransaction);
        }
        return contract;
      }
      attach(addressOrName) {
        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
      }
      static isIndexed(value) {
        return Indexed.isIndexed(value);
      }
      _normalizeRunningEvent(runningEvent) {
        if (this._runningEvents[runningEvent.tag]) {
          return this._runningEvents[runningEvent.tag];
        }
        return runningEvent;
      }
      _getRunningEvent(eventName) {
        if (typeof eventName === "string") {
          if (eventName === "error") {
            return this._normalizeRunningEvent(new ErrorRunningEvent());
          }
          if (eventName === "event") {
            return this._normalizeRunningEvent(new RunningEvent("event", null));
          }
          if (eventName === "*") {
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
          }
          const fragment = this.interface.getEvent(eventName);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
        }
        if (eventName.topics && eventName.topics.length > 0) {
          try {
            const topic = eventName.topics[0];
            if (typeof topic !== "string") {
              throw new Error("invalid topic");
            }
            const fragment = this.interface.getEvent(topic);
            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
          } catch (error) {
          }
          const filter = {
            address: this.address,
            topics: eventName.topics
          };
          return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
        }
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      }
      _checkRunningEvents(runningEvent) {
        if (runningEvent.listenerCount() === 0) {
          delete this._runningEvents[runningEvent.tag];
          const emit = this._wrappedEmits[runningEvent.tag];
          if (emit && runningEvent.filter) {
            this.provider.off(runningEvent.filter, emit);
            delete this._wrappedEmits[runningEvent.tag];
          }
        }
      }
      _wrapEvent(runningEvent, log4, listener) {
        const event = deepCopy(log4);
        event.removeListener = () => {
          if (!listener) {
            return;
          }
          runningEvent.removeListener(listener);
          this._checkRunningEvents(runningEvent);
        };
        event.getBlock = () => {
          return this.provider.getBlock(log4.blockHash);
        };
        event.getTransaction = () => {
          return this.provider.getTransaction(log4.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return this.provider.getTransactionReceipt(log4.transactionHash);
        };
        runningEvent.prepareEvent(event);
        return event;
      }
      _addEventListener(runningEvent, listener, once) {
        if (!this.provider) {
          logger18.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
        }
        runningEvent.addListener(listener, once);
        this._runningEvents[runningEvent.tag] = runningEvent;
        if (!this._wrappedEmits[runningEvent.tag]) {
          const wrappedEmit = (log4) => {
            let event = this._wrapEvent(runningEvent, log4, listener);
            if (event.decodeError == null) {
              try {
                const args = runningEvent.getEmit(event);
                this.emit(runningEvent.filter, ...args);
              } catch (error) {
                event.decodeError = error.error;
              }
            }
            if (runningEvent.filter != null) {
              this.emit("event", event);
            }
            if (event.decodeError != null) {
              this.emit("error", event.decodeError, event);
            }
          };
          this._wrappedEmits[runningEvent.tag] = wrappedEmit;
          if (runningEvent.filter != null) {
            this.provider.on(runningEvent.filter, wrappedEmit);
          }
        }
      }
      queryFilter(event, fromBlockOrBlockhash, toBlock) {
        const runningEvent = this._getRunningEvent(event);
        const filter = shallowCopy(runningEvent.filter);
        if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
          if (toBlock != null) {
            logger18.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
          }
          filter.blockHash = fromBlockOrBlockhash;
        } else {
          filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
          filter.toBlock = toBlock != null ? toBlock : "latest";
        }
        return this.provider.getLogs(filter).then((logs) => {
          return logs.map((log4) => this._wrapEvent(runningEvent, log4, null));
        });
      }
      on(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, false);
        return this;
      }
      once(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, true);
        return this;
      }
      emit(eventName, ...args) {
        if (!this.provider) {
          return false;
        }
        const runningEvent = this._getRunningEvent(eventName);
        const result = runningEvent.run(args) > 0;
        this._checkRunningEvents(runningEvent);
        return result;
      }
      listenerCount(eventName) {
        if (!this.provider) {
          return 0;
        }
        if (eventName == null) {
          return Object.keys(this._runningEvents).reduce((accum, key2) => {
            return accum + this._runningEvents[key2].listenerCount();
          }, 0);
        }
        return this._getRunningEvent(eventName).listenerCount();
      }
      listeners(eventName) {
        if (!this.provider) {
          return [];
        }
        if (eventName == null) {
          const result = [];
          for (let tag in this._runningEvents) {
            this._runningEvents[tag].listeners().forEach((listener) => {
              result.push(listener);
            });
          }
          return result;
        }
        return this._getRunningEvent(eventName).listeners();
      }
      removeAllListeners(eventName) {
        if (!this.provider) {
          return this;
        }
        if (eventName == null) {
          for (const tag in this._runningEvents) {
            const runningEvent2 = this._runningEvents[tag];
            runningEvent2.removeAllListeners();
            this._checkRunningEvents(runningEvent2);
          }
          return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeAllListeners();
        this._checkRunningEvents(runningEvent);
        return this;
      }
      off(eventName, listener) {
        if (!this.provider) {
          return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
        return this;
      }
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
    };
    Contract = class extends BaseContract {
    };
    ContractFactory = class {
      constructor(contractInterface, bytecode, signer) {
        let bytecodeHex = null;
        if (typeof bytecode === "string") {
          bytecodeHex = bytecode;
        } else if (isBytes(bytecode)) {
          bytecodeHex = hexlify(bytecode);
        } else if (bytecode && typeof bytecode.object === "string") {
          bytecodeHex = bytecode.object;
        } else {
          bytecodeHex = "!";
        }
        if (bytecodeHex.substring(0, 2) !== "0x") {
          bytecodeHex = "0x" + bytecodeHex;
        }
        if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
          logger18.throwArgumentError("invalid bytecode", "bytecode", bytecode);
        }
        if (signer && !Signer.isSigner(signer)) {
          logger18.throwArgumentError("invalid signer", "signer", signer);
        }
        defineReadOnly(this, "bytecode", bytecodeHex);
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        defineReadOnly(this, "signer", signer || null);
      }
      getDeployTransaction(...args) {
        let tx = {};
        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
          tx = shallowCopy(args.pop());
          for (const key2 in tx) {
            if (!allowedTransactionKeys3[key2]) {
              throw new Error("unknown transaction override " + key2);
            }
          }
        }
        ["data", "from", "to"].forEach((key2) => {
          if (tx[key2] == null) {
            return;
          }
          logger18.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
        });
        if (tx.value) {
          const value = BigNumber.from(tx.value);
          if (!value.isZero() && !this.interface.deploy.payable) {
            logger18.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.value",
              value: tx.value
            });
          }
        }
        logger18.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        tx.data = hexlify(concat([
          this.bytecode,
          this.interface.encodeDeploy(args)
        ]));
        return tx;
      }
      deploy(...args) {
        return __awaiter4(this, void 0, void 0, function* () {
          let overrides = {};
          if (args.length === this.interface.deploy.inputs.length + 1) {
            overrides = args.pop();
          }
          logger18.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
          const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
          params.push(overrides);
          const unsignedTx = this.getDeployTransaction(...params);
          const tx = yield this.signer.sendTransaction(unsignedTx);
          const address = getStatic(this.constructor, "getContractAddress")(tx);
          const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
          addContractWait(contract, tx);
          defineReadOnly(contract, "deployTransaction", tx);
          return contract;
        });
      }
      attach(address) {
        return this.constructor.getContract(address, this.interface, this.signer);
      }
      connect(signer) {
        return new this.constructor(this.interface, this.bytecode, signer);
      }
      static fromSolidity(compilerOutput, signer) {
        if (compilerOutput == null) {
          logger18.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
        }
        if (typeof compilerOutput === "string") {
          compilerOutput = JSON.parse(compilerOutput);
        }
        const abi = compilerOutput.abi;
        let bytecode = null;
        if (compilerOutput.bytecode) {
          bytecode = compilerOutput.bytecode;
        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
          bytecode = compilerOutput.evm.bytecode;
        }
        return new this(abi, bytecode, signer);
      }
      static getInterface(contractInterface) {
        return Contract.getInterface(contractInterface);
      }
      static getContractAddress(tx) {
        return getContractAddress(tx);
      }
      static getContract(address, contractInterface, signer) {
        return new Contract(address, contractInterface, signer);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/basex/lib.esm/index.js
var BaseX, Base32, Base58;
var init_lib17 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/basex/lib.esm/index.js"() {
    init_lib3();
    init_lib2();
    BaseX = class {
      constructor(alphabet) {
        defineReadOnly(this, "alphabet", alphabet);
        defineReadOnly(this, "base", alphabet.length);
        defineReadOnly(this, "_alphabetMap", {});
        defineReadOnly(this, "_leader", alphabet.charAt(0));
        for (let i4 = 0; i4 < alphabet.length; i4++) {
          this._alphabetMap[alphabet.charAt(i4)] = i4;
        }
      }
      encode(value) {
        let source = arrayify(value);
        if (source.length === 0) {
          return "";
        }
        let digits = [0];
        for (let i4 = 0; i4 < source.length; ++i4) {
          let carry = source[i4];
          for (let j4 = 0; j4 < digits.length; ++j4) {
            carry += digits[j4] << 8;
            digits[j4] = carry % this.base;
            carry = carry / this.base | 0;
          }
          while (carry > 0) {
            digits.push(carry % this.base);
            carry = carry / this.base | 0;
          }
        }
        let string = "";
        for (let k4 = 0; source[k4] === 0 && k4 < source.length - 1; ++k4) {
          string += this._leader;
        }
        for (let q4 = digits.length - 1; q4 >= 0; --q4) {
          string += this.alphabet[digits[q4]];
        }
        return string;
      }
      decode(value) {
        if (typeof value !== "string") {
          throw new TypeError("Expected String");
        }
        let bytes = [];
        if (value.length === 0) {
          return new Uint8Array(bytes);
        }
        bytes.push(0);
        for (let i4 = 0; i4 < value.length; i4++) {
          let byte = this._alphabetMap[value[i4]];
          if (byte === void 0) {
            throw new Error("Non-base" + this.base + " character");
          }
          let carry = byte;
          for (let j4 = 0; j4 < bytes.length; ++j4) {
            carry += bytes[j4] * this.base;
            bytes[j4] = carry & 255;
            carry >>= 8;
          }
          while (carry > 0) {
            bytes.push(carry & 255);
            carry >>= 8;
          }
        }
        for (let k4 = 0; value[k4] === this._leader && k4 < value.length - 1; ++k4) {
          bytes.push(0);
        }
        return arrayify(new Uint8Array(bytes.reverse()));
      }
    };
    Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  }
});

// node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/types.js
var SupportedAlgorithm;
var init_types = __esm({
  "node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/types.js"() {
    (function(SupportedAlgorithm2) {
      SupportedAlgorithm2["sha256"] = "sha256";
      SupportedAlgorithm2["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  }
});

// node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/_version.js
var version13;
var init_version13 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/_version.js"() {
    version13 = "sha2/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/sha2.js
function ripemd160(data) {
  return "0x" + import_hash3.default.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256(data) {
  return "0x" + import_hash3.default.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + import_hash3.default.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key2, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger19.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm
    });
  }
  return "0x" + import_hash3.default.hmac(import_hash3.default[algorithm], arrayify(key2)).update(arrayify(data)).digest("hex");
}
var import_hash3, logger19;
var init_sha2 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/sha2.js"() {
    "use strict";
    import_hash3 = __toESM(require_hash());
    init_lib3();
    init_types();
    init_lib();
    init_version13();
    logger19 = new Logger(version13);
  }
});

// node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/index.js
var init_lib18 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/sha2/lib.esm/index.js"() {
    init_sha2();
    init_types();
  }
});

// node_modules/moralis/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
  password = arrayify(password);
  salt = arrayify(salt);
  let hLen;
  let l4 = 1;
  const DK = new Uint8Array(keylen);
  const block1 = new Uint8Array(salt.length + 4);
  block1.set(salt);
  let r4;
  let T4;
  for (let i4 = 1; i4 <= l4; i4++) {
    block1[salt.length] = i4 >> 24 & 255;
    block1[salt.length + 1] = i4 >> 16 & 255;
    block1[salt.length + 2] = i4 >> 8 & 255;
    block1[salt.length + 3] = i4 & 255;
    let U3 = arrayify(computeHmac(hashAlgorithm, password, block1));
    if (!hLen) {
      hLen = U3.length;
      T4 = new Uint8Array(hLen);
      l4 = Math.ceil(keylen / hLen);
      r4 = keylen - (l4 - 1) * hLen;
    }
    T4.set(U3);
    for (let j4 = 1; j4 < iterations; j4++) {
      U3 = arrayify(computeHmac(hashAlgorithm, password, U3));
      for (let k4 = 0; k4 < hLen; k4++)
        T4[k4] ^= U3[k4];
    }
    const destPos = (i4 - 1) * hLen;
    const len = i4 === l4 ? r4 : hLen;
    DK.set(arrayify(T4).slice(0, len), destPos);
  }
  return hexlify(DK);
}
var init_pbkdf2 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"() {
    "use strict";
    init_lib3();
    init_lib18();
  }
});

// node_modules/moralis/node_modules/@ethersproject/pbkdf2/lib.esm/index.js
var init_lib19 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/pbkdf2/lib.esm/index.js"() {
    init_pbkdf2();
  }
});

// node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/_version.js
var version14;
var init_version14 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/_version.js"() {
    version14 = "wordlists/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/wordlist.js
var exportWordlist, logger20, Wordlist;
var init_wordlist = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/wordlist.js"() {
    "use strict";
    init_lib10();
    init_lib2();
    init_lib();
    init_version14();
    exportWordlist = false;
    logger20 = new Logger(version14);
    Wordlist = class {
      constructor(locale) {
        logger20.checkAbstract(new.target, Wordlist);
        defineReadOnly(this, "locale", locale);
      }
      split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
      }
      join(words2) {
        return words2.join(" ");
      }
      static check(wordlist2) {
        const words2 = [];
        for (let i4 = 0; i4 < 2048; i4++) {
          const word = wordlist2.getWord(i4);
          if (i4 !== wordlist2.getWordIndex(word)) {
            return "0x";
          }
          words2.push(word);
        }
        return id(words2.join("\n") + "\n");
      }
      static register(lang, name2) {
        if (!name2) {
          name2 = lang.locale;
        }
        if (exportWordlist) {
          try {
            const anyGlobal2 = window;
            if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
              if (!anyGlobal2._ethers.wordlists[name2]) {
                defineReadOnly(anyGlobal2._ethers.wordlists, name2, lang);
              }
            }
          } catch (error) {
          }
        }
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/lang-en.js
function loadWords(lang) {
  if (wordlist != null) {
    return;
  }
  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
  if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}
var words, wordlist, LangEn, langEn;
var init_lang_en = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/lang-en.js"() {
    "use strict";
    init_wordlist();
    words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    wordlist = null;
    LangEn = class extends Wordlist {
      constructor() {
        super("en");
      }
      getWord(index) {
        loadWords(this);
        return wordlist[index];
      }
      getWordIndex(word) {
        loadWords(this);
        return wordlist.indexOf(word);
      }
    };
    langEn = new LangEn();
    Wordlist.register(langEn);
  }
});

// node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/wordlists.js
var wordlists;
var init_wordlists = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/wordlists.js"() {
    "use strict";
    init_lang_en();
    wordlists = {
      en: langEn
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/index.js
var init_lib20 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wordlists/lib.esm/index.js"() {
    "use strict";
    init_wordlist();
    init_wordlists();
  }
});

// node_modules/moralis/node_modules/@ethersproject/hdnode/lib.esm/_version.js
var version15;
var init_version15 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hdnode/lib.esm/_version.js"() {
    version15 = "hdnode/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/hdnode/lib.esm/index.js
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits;
}
function getLowerMask(bits) {
  return (1 << bits) - 1;
}
function bytes32(value) {
  return hexZeroPad(hexlify(value), 32);
}
function base58check(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function getWordlist(wordlist2) {
  if (wordlist2 == null) {
    return wordlists["en"];
  }
  if (typeof wordlist2 === "string") {
    const words2 = wordlists[wordlist2];
    if (words2 == null) {
      logger21.throwArgumentError("unknown locale", "wordlist", wordlist2);
    }
    return words2;
  }
  return wordlist2;
}
function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }
  const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  logger21.checkNormalize();
  const words2 = wordlist2.split(mnemonic);
  if (words2.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }
  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
  let offset = 0;
  for (let i4 = 0; i4 < words2.length; i4++) {
    let index = wordlist2.getWordIndex(words2[i4].normalize("NFKD"));
    if (index === -1) {
      throw new Error("invalid mnemonic");
    }
    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  entropy = arrayify(entropy);
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i4 = 0; i4 < entropy.length; i4++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i4];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i4] >> 8 - remainingBits;
      indices.push(entropy[i4] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist2) {
  try {
    mnemonicToEntropy(mnemonic, wordlist2);
    return true;
  } catch (error) {
  }
  return false;
}
function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger21.throwArgumentError("invalid account index", "index", index);
  }
  return `m/44'/60'/${index}'/0/0`;
}
var logger21, N, MasterSecret, HardenedBit, _constructorGuard4, defaultPath, HDNode;
var init_lib21 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/hdnode/lib.esm/index.js"() {
    "use strict";
    init_lib17();
    init_lib3();
    init_lib4();
    init_lib9();
    init_lib19();
    init_lib2();
    init_lib14();
    init_lib18();
    init_lib15();
    init_lib20();
    init_lib();
    init_version15();
    logger21 = new Logger(version15);
    N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    MasterSecret = toUtf8Bytes("Bitcoin seed");
    HardenedBit = 2147483648;
    _constructorGuard4 = {};
    defaultPath = "m/44'/60'/0'/0/0";
    HDNode = class {
      constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
        logger21.checkNew(new.target, HDNode);
        if (constructorGuard !== _constructorGuard4) {
          throw new Error("HDNode constructor cannot be called directly");
        }
        if (privateKey) {
          const signingKey = new SigningKey(privateKey);
          defineReadOnly(this, "privateKey", signingKey.privateKey);
          defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
        } else {
          defineReadOnly(this, "privateKey", null);
          defineReadOnly(this, "publicKey", hexlify(publicKey));
        }
        defineReadOnly(this, "parentFingerprint", parentFingerprint);
        defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        defineReadOnly(this, "chainCode", chainCode);
        defineReadOnly(this, "index", index);
        defineReadOnly(this, "depth", depth);
        if (mnemonicOrPath == null) {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", null);
        } else if (typeof mnemonicOrPath === "string") {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", mnemonicOrPath);
        } else {
          defineReadOnly(this, "mnemonic", mnemonicOrPath);
          defineReadOnly(this, "path", mnemonicOrPath.path);
        }
      }
      get extendedKey() {
        if (this.depth >= 256) {
          throw new Error("Depth too large!");
        }
        return base58check(concat([
          this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
          hexlify(this.depth),
          this.parentFingerprint,
          hexZeroPad(hexlify(this.index), 4),
          this.chainCode,
          this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey
        ]));
      }
      neuter() {
        return new HDNode(_constructorGuard4, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
      }
      _derive(index) {
        if (index > 4294967295) {
          throw new Error("invalid index - " + String(index));
        }
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
        }
        const data = new Uint8Array(37);
        if (index & HardenedBit) {
          if (!this.privateKey) {
            throw new Error("cannot derive child of neutered node");
          }
          data.set(arrayify(this.privateKey), 1);
          if (path) {
            path += "'";
          }
        } else {
          data.set(arrayify(this.publicKey));
        }
        for (let i4 = 24; i4 >= 0; i4 -= 8) {
          data[33 + (i4 >> 3)] = index >> 24 - i4 & 255;
        }
        const I4 = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
        const IL = I4.slice(0, 32);
        const IR = I4.slice(32);
        let ki = null;
        let Ki = null;
        if (this.privateKey) {
          ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
        } else {
          const ek = new SigningKey(hexlify(IL));
          Ki = ek._addPoint(this.publicKey);
        }
        let mnemonicOrPath = path;
        const srcMnemonic = this.mnemonic;
        if (srcMnemonic) {
          mnemonicOrPath = Object.freeze({
            phrase: srcMnemonic.phrase,
            path,
            locale: srcMnemonic.locale || "en"
          });
        }
        return new HDNode(_constructorGuard4, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
      }
      derivePath(path) {
        const components = path.split("/");
        if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
          throw new Error("invalid path - " + path);
        }
        if (components[0] === "m") {
          components.shift();
        }
        let result = this;
        for (let i4 = 0; i4 < components.length; i4++) {
          const component = components[i4];
          if (component.match(/^[0-9]+'$/)) {
            const index = parseInt(component.substring(0, component.length - 1));
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(HardenedBit + index);
          } else if (component.match(/^[0-9]+$/)) {
            const index = parseInt(component);
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(index);
          } else {
            throw new Error("invalid path component - " + component);
          }
        }
        return result;
      }
      static _fromSeed(seed, mnemonic) {
        const seedArray = arrayify(seed);
        if (seedArray.length < 16 || seedArray.length > 64) {
          throw new Error("invalid seed");
        }
        const I4 = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
        return new HDNode(_constructorGuard4, bytes32(I4.slice(0, 32)), null, "0x00000000", bytes32(I4.slice(32)), 0, 0, mnemonic);
      }
      static fromMnemonic(mnemonic, password, wordlist2) {
        wordlist2 = getWordlist(wordlist2);
        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
          phrase: mnemonic,
          path: "m",
          locale: wordlist2.locale
        });
      }
      static fromSeed(seed) {
        return HDNode._fromSeed(seed, null);
      }
      static fromExtendedKey(extendedKey) {
        const bytes = Base58.decode(extendedKey);
        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
          logger21.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
        const depth = bytes[4];
        const parentFingerprint = hexlify(bytes.slice(5, 9));
        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = hexlify(bytes.slice(13, 45));
        const key2 = bytes.slice(45, 78);
        switch (hexlify(bytes.slice(0, 4))) {
          case "0x0488b21e":
          case "0x043587cf":
            return new HDNode(_constructorGuard4, null, hexlify(key2), parentFingerprint, chainCode, index, depth, null);
          case "0x0488ade4":
          case "0x04358394 ":
            if (key2[0] !== 0) {
              break;
            }
            return new HDNode(_constructorGuard4, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
        }
        return logger21.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/random/lib.esm/_version.js
var version16;
var init_version16 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/random/lib.esm/_version.js"() {
    version16 = "random/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/random/lib.esm/random.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger22.throwArgumentError("invalid length", "length", length);
  }
  const result = new Uint8Array(length);
  crypto.getRandomValues(result);
  return arrayify(result);
}
var logger22, anyGlobal, crypto;
var init_random = __esm({
  "node_modules/moralis/node_modules/@ethersproject/random/lib.esm/random.js"() {
    "use strict";
    init_lib3();
    init_lib();
    init_version16();
    logger22 = new Logger(version16);
    anyGlobal = getGlobal();
    crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
      logger22.warn("WARNING: Missing strong random number source");
      crypto = {
        getRandomValues: function(buffer) {
          return logger22.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "crypto.getRandomValues"
          });
        }
      };
    }
  }
});

// node_modules/moralis/node_modules/@ethersproject/random/lib.esm/shuffle.js
function shuffled(array) {
  array = array.slice();
  for (let i4 = array.length - 1; i4 > 0; i4--) {
    const j4 = Math.floor(Math.random() * (i4 + 1));
    const tmp = array[i4];
    array[i4] = array[j4];
    array[j4] = tmp;
  }
  return array;
}
var init_shuffle = __esm({
  "node_modules/moralis/node_modules/@ethersproject/random/lib.esm/shuffle.js"() {
    "use strict";
  }
});

// node_modules/moralis/node_modules/@ethersproject/random/lib.esm/index.js
var init_lib22 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/random/lib.esm/index.js"() {
    "use strict";
    init_random();
    init_shuffle();
  }
});

// node_modules/moralis/node_modules/aes-js/index.js
var require_aes_js = __commonJS({
  "node_modules/moralis/node_modules/aes-js/index.js"(exports, module) {
    "use strict";
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i4 = 0; i4 < arrayish.length; i4++) {
          if (!checkInt(arrayish[i4]) || arrayish[i4] < 0 || arrayish[i4] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i4 = 0;
          text = encodeURI(text);
          while (i4 < text.length) {
            var c4 = text.charCodeAt(i4++);
            if (c4 === 37) {
              result.push(parseInt(text.substr(i4, 2), 16));
              i4 += 2;
            } else {
              result.push(c4);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i4 = 0;
          while (i4 < bytes.length) {
            var c4 = bytes[i4];
            if (c4 < 128) {
              result.push(String.fromCharCode(c4));
              i4++;
            } else if (c4 > 191 && c4 < 224) {
              result.push(String.fromCharCode((c4 & 31) << 6 | bytes[i4 + 1] & 63));
              i4 += 2;
            } else {
              result.push(String.fromCharCode((c4 & 15) << 12 | (bytes[i4 + 1] & 63) << 6 | bytes[i4 + 2] & 63));
              i4 += 3;
            }
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i4 = 0; i4 < text.length; i4 += 2) {
            result.push(parseInt(text.substr(i4, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i4 = 0; i4 < bytes.length; i4++) {
            var v4 = bytes[i4];
            result.push(Hex[(v4 & 240) >> 4] + Hex[v4 & 15]);
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S3 = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T22 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T32 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U22 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i4 = 0; i4 < bytes.length; i4 += 4) {
          result.push(bytes[i4] << 24 | bytes[i4 + 1] << 16 | bytes[i4 + 2] << 8 | bytes[i4 + 3]);
        }
        return result;
      }
      var AES = function(key2) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", {
          value: coerceArray(key2, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i4 = 0; i4 <= rounds; i4++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i4 = 0; i4 < KC; i4++) {
          index = i4 >> 2;
          this._Ke[index][i4 % 4] = tk[i4];
          this._Kd[rounds - index][i4 % 4] = tk[i4];
        }
        var rconpointer = 0;
        var t4 = KC, tt;
        while (t4 < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S3[tt >> 16 & 255] << 24 ^ S3[tt >> 8 & 255] << 16 ^ S3[tt & 255] << 8 ^ S3[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i4 = 1; i4 < KC; i4++) {
              tk[i4] ^= tk[i4 - 1];
            }
          } else {
            for (var i4 = 1; i4 < KC / 2; i4++) {
              tk[i4] ^= tk[i4 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S3[tt & 255] ^ S3[tt >> 8 & 255] << 8 ^ S3[tt >> 16 & 255] << 16 ^ S3[tt >> 24 & 255] << 24;
            for (var i4 = KC / 2 + 1; i4 < KC; i4++) {
              tk[i4] ^= tk[i4 - 1];
            }
          }
          var i4 = 0, r4, c4;
          while (i4 < KC && t4 < roundKeyCount) {
            r4 = t4 >> 2;
            c4 = t4 % 4;
            this._Ke[r4][c4] = tk[i4];
            this._Kd[rounds - r4][c4] = tk[i4++];
            t4++;
          }
        }
        for (var r4 = 1; r4 < rounds; r4++) {
          for (var c4 = 0; c4 < 4; c4++) {
            tt = this._Kd[r4][c4];
            this._Kd[r4][c4] = U1[tt >> 24 & 255] ^ U22[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a4 = [0, 0, 0, 0];
        var t4 = convertToInt32(plaintext);
        for (var i4 = 0; i4 < 4; i4++) {
          t4[i4] ^= this._Ke[0][i4];
        }
        for (var r4 = 1; r4 < rounds; r4++) {
          for (var i4 = 0; i4 < 4; i4++) {
            a4[i4] = T1[t4[i4] >> 24 & 255] ^ T22[t4[(i4 + 1) % 4] >> 16 & 255] ^ T32[t4[(i4 + 2) % 4] >> 8 & 255] ^ T4[t4[(i4 + 3) % 4] & 255] ^ this._Ke[r4][i4];
          }
          t4 = a4.slice();
        }
        var result = createArray(16), tt;
        for (var i4 = 0; i4 < 4; i4++) {
          tt = this._Ke[rounds][i4];
          result[4 * i4] = (S3[t4[i4] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i4 + 1] = (S3[t4[(i4 + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i4 + 2] = (S3[t4[(i4 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i4 + 3] = (S3[t4[(i4 + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a4 = [0, 0, 0, 0];
        var t4 = convertToInt32(ciphertext);
        for (var i4 = 0; i4 < 4; i4++) {
          t4[i4] ^= this._Kd[0][i4];
        }
        for (var r4 = 1; r4 < rounds; r4++) {
          for (var i4 = 0; i4 < 4; i4++) {
            a4[i4] = T5[t4[i4] >> 24 & 255] ^ T6[t4[(i4 + 3) % 4] >> 16 & 255] ^ T7[t4[(i4 + 2) % 4] >> 8 & 255] ^ T8[t4[(i4 + 1) % 4] & 255] ^ this._Kd[r4][i4];
          }
          t4 = a4.slice();
        }
        var result = createArray(16), tt;
        for (var i4 = 0; i4 < 4; i4++) {
          tt = this._Kd[rounds][i4];
          result[4 * i4] = (Si[t4[i4] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i4 + 1] = (Si[t4[(i4 + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i4 + 2] = (Si[t4[(i4 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i4 + 3] = (Si[t4[(i4 + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key2) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key2);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i4 = 0; i4 < plaintext.length; i4 += 16) {
          copyArray(plaintext, block, 0, i4, i4 + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i4);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i4 = 0; i4 < ciphertext.length; i4 += 16) {
          copyArray(ciphertext, block, 0, i4, i4 + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i4);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key2, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i4 = 0; i4 < plaintext.length; i4 += 16) {
          copyArray(plaintext, block, 0, i4, i4 + 16);
          for (var j4 = 0; j4 < 16; j4++) {
            block[j4] ^= this._lastCipherblock[j4];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i4);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i4 = 0; i4 < ciphertext.length; i4 += 16) {
          copyArray(ciphertext, block, 0, i4, i4 + 16);
          block = this._aes.decrypt(block);
          for (var j4 = 0; j4 < 16; j4++) {
            plaintext[i4 + j4] = block[j4] ^ this._lastCipherblock[j4];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i4, i4 + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key2, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i4 = 0; i4 < encrypted.length; i4 += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j4 = 0; j4 < this.segmentSize; j4++) {
            encrypted[i4 + j4] ^= xorSegment[j4];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i4, i4 + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i4 = 0; i4 < plaintext.length; i4 += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j4 = 0; j4 < this.segmentSize; j4++) {
            plaintext[i4 + j4] ^= xorSegment[j4];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i4, i4 + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key2, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i4 = 0; i4 < encrypted.length; i4++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i4] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value % 256;
          value = value >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i4 = 15; i4 >= 0; i4--) {
          if (this._counter[i4] === 255) {
            this._counter[i4] = 0;
          } else {
            this._counter[i4]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key2, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i4 = 0; i4 < encrypted.length; i4++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i4] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i4 = data.length; i4 < result.length; i4++) {
          result[i4] = padder;
        }
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data[data.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data.length - padder;
        for (var i4 = 0; i4 < padder; i4++) {
          if (data[length + i4] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
      }
      var aesjs = {
        AES,
        Counter,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        utils: {
          hex: convertHex,
          utf8: convertUtf8
        },
        padding: {
          pkcs7: {
            pad: pkcs7pad,
            strip: pkcs7strip
          }
        },
        _arrayTest: {
          coerceArray,
          createArray,
          copyArray
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = aesjs;
      } else if (typeof define === "function" && define.amd) {
        define(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(exports);
  }
});

// node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/_version.js
var version17;
var init_version17 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/_version.js"() {
    version17 = "json-wallets/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
    hexString = "0x" + hexString;
  }
  return arrayify(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
  }
  return arrayify(password);
}
function searchPath(object, path) {
  let currentChild = object;
  const comps = path.toLowerCase().split("/");
  for (let i4 = 0; i4 < comps.length; i4++) {
    let matchingChild = null;
    for (const key2 in currentChild) {
      if (key2.toLowerCase() === comps[i4]) {
        matchingChild = currentChild[key2];
        break;
      }
    }
    if (matchingChild === null) {
      return null;
    }
    currentChild = matchingChild;
  }
  return currentChild;
}
function uuidV4(randomBytes2) {
  const bytes = arrayify(randomBytes2);
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 63 | 128;
  const value = hexlify(bytes);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}
var init_utils = __esm({
  "node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/utils.js"() {
    "use strict";
    init_lib3();
    init_lib9();
  }
});

// node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
function decrypt(json, password) {
  const data = JSON.parse(json);
  password = getPassword(password);
  const ethaddr = getAddress(searchPath(data, "ethaddr"));
  const encseed = looseArrayify(searchPath(data, "encseed"));
  if (!encseed || encseed.length % 16 !== 0) {
    logger23.throwArgumentError("invalid encseed", "json", json);
  }
  const key2 = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key2, iv);
  const seed = import_aes_js.default.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i4 = 0; i4 < seed.length; i4++) {
    seedHex += String.fromCharCode(seed[i4]);
  }
  const seedHexBytes = toUtf8Bytes(seedHex);
  const privateKey = keccak256(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey
  });
}
var import_aes_js, logger23, CrowdsaleAccount;
var init_crowdsale = __esm({
  "node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js"() {
    "use strict";
    import_aes_js = __toESM(require_aes_js());
    init_lib7();
    init_lib3();
    init_lib5();
    init_lib19();
    init_lib9();
    init_lib2();
    init_lib();
    init_version17();
    init_utils();
    logger23 = new Logger(version17);
    CrowdsaleAccount = class extends Description {
      isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js
function isCrowdsaleWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  }
  return true;
}
function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return getAddress(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }
  if (isKeystoreWallet(json)) {
    try {
      return getAddress(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }
  return null;
}
var init_inspect = __esm({
  "node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"() {
    "use strict";
    init_lib7();
  }
});

// node_modules/scrypt-js/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/scrypt-js/scrypt.js"(exports, module) {
    "use strict";
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA256(m3) {
        const K2 = new Uint32Array([
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ]);
        let h0 = 1779033703, h1 = 3144134277, h22 = 1013904242, h32 = 2773480762;
        let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
        const w5 = new Uint32Array(64);
        function blocks(p5) {
          let off = 0, len = p5.length;
          while (len >= 64) {
            let a4 = h0, b3 = h1, c4 = h22, d4 = h32, e3 = h4, f4 = h5, g4 = h6, h8 = h7, u4, i5, j4, t1, t22;
            for (i5 = 0; i5 < 16; i5++) {
              j4 = off + i5 * 4;
              w5[i5] = (p5[j4] & 255) << 24 | (p5[j4 + 1] & 255) << 16 | (p5[j4 + 2] & 255) << 8 | p5[j4 + 3] & 255;
            }
            for (i5 = 16; i5 < 64; i5++) {
              u4 = w5[i5 - 2];
              t1 = (u4 >>> 17 | u4 << 32 - 17) ^ (u4 >>> 19 | u4 << 32 - 19) ^ u4 >>> 10;
              u4 = w5[i5 - 15];
              t22 = (u4 >>> 7 | u4 << 32 - 7) ^ (u4 >>> 18 | u4 << 32 - 18) ^ u4 >>> 3;
              w5[i5] = (t1 + w5[i5 - 7] | 0) + (t22 + w5[i5 - 16] | 0) | 0;
            }
            for (i5 = 0; i5 < 64; i5++) {
              t1 = (((e3 >>> 6 | e3 << 32 - 6) ^ (e3 >>> 11 | e3 << 32 - 11) ^ (e3 >>> 25 | e3 << 32 - 25)) + (e3 & f4 ^ ~e3 & g4) | 0) + (h8 + (K2[i5] + w5[i5] | 0) | 0) | 0;
              t22 = ((a4 >>> 2 | a4 << 32 - 2) ^ (a4 >>> 13 | a4 << 32 - 13) ^ (a4 >>> 22 | a4 << 32 - 22)) + (a4 & b3 ^ a4 & c4 ^ b3 & c4) | 0;
              h8 = g4;
              g4 = f4;
              f4 = e3;
              e3 = d4 + t1 | 0;
              d4 = c4;
              c4 = b3;
              b3 = a4;
              a4 = t1 + t22 | 0;
            }
            h0 = h0 + a4 | 0;
            h1 = h1 + b3 | 0;
            h22 = h22 + c4 | 0;
            h32 = h32 + d4 | 0;
            h4 = h4 + e3 | 0;
            h5 = h5 + f4 | 0;
            h6 = h6 + g4 | 0;
            h7 = h7 + h8 | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m3);
        let i4, bytesLeft = m3.length % 64, bitLenHi = m3.length / 536870912 | 0, bitLenLo = m3.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p4 = m3.slice(m3.length - bytesLeft, m3.length);
        p4.push(128);
        for (i4 = bytesLeft + 1; i4 < numZeros; i4++) {
          p4.push(0);
        }
        p4.push(bitLenHi >>> 24 & 255);
        p4.push(bitLenHi >>> 16 & 255);
        p4.push(bitLenHi >>> 8 & 255);
        p4.push(bitLenHi >>> 0 & 255);
        p4.push(bitLenLo >>> 24 & 255);
        p4.push(bitLenLo >>> 16 & 255);
        p4.push(bitLenLo >>> 8 & 255);
        p4.push(bitLenLo >>> 0 & 255);
        blocks(p4);
        return [
          h0 >>> 24 & 255,
          h0 >>> 16 & 255,
          h0 >>> 8 & 255,
          h0 >>> 0 & 255,
          h1 >>> 24 & 255,
          h1 >>> 16 & 255,
          h1 >>> 8 & 255,
          h1 >>> 0 & 255,
          h22 >>> 24 & 255,
          h22 >>> 16 & 255,
          h22 >>> 8 & 255,
          h22 >>> 0 & 255,
          h32 >>> 24 & 255,
          h32 >>> 16 & 255,
          h32 >>> 8 & 255,
          h32 >>> 0 & 255,
          h4 >>> 24 & 255,
          h4 >>> 16 & 255,
          h4 >>> 8 & 255,
          h4 >>> 0 & 255,
          h5 >>> 24 & 255,
          h5 >>> 16 & 255,
          h5 >>> 8 & 255,
          h5 >>> 0 & 255,
          h6 >>> 24 & 255,
          h6 >>> 16 & 255,
          h6 >>> 8 & 255,
          h6 >>> 0 & 255,
          h7 >>> 24 & 255,
          h7 >>> 16 & 255,
          h7 >>> 8 & 255,
          h7 >>> 0 & 255
        ];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA256(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i4;
        let dk = [];
        for (i4 = 0; i4 < 64; i4++) {
          inner[i4] = 54;
        }
        for (i4 = 0; i4 < password.length; i4++) {
          inner[i4] ^= password[i4];
        }
        for (i4 = 0; i4 < salt.length; i4++) {
          inner[64 + i4] = salt[i4];
        }
        for (i4 = innerLen - 4; i4 < innerLen; i4++) {
          inner[i4] = 0;
        }
        for (i4 = 0; i4 < 64; i4++)
          outerKey[i4] = 92;
        for (i4 = 0; i4 < password.length; i4++)
          outerKey[i4] ^= password[i4];
        function incrementCounter() {
          for (let i5 = innerLen - 1; i5 >= innerLen - 4; i5--) {
            inner[i5]++;
            if (inner[i5] <= 255)
              return;
            inner[i5] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r4, x4, _X) {
        let i4;
        arraycopy(BY, (2 * r4 - 1) * 16, _X, 0, 16);
        for (i4 = 0; i4 < 2 * r4; i4++) {
          blockxor(BY, i4 * 16, _X, 16);
          salsa20_8(_X, x4);
          arraycopy(_X, 0, BY, Yi + i4 * 16, 16);
        }
        for (i4 = 0; i4 < r4; i4++) {
          arraycopy(BY, Yi + i4 * 2 * 16, BY, i4 * 16, 16);
        }
        for (i4 = 0; i4 < r4; i4++) {
          arraycopy(BY, Yi + (i4 * 2 + 1) * 16, BY, (i4 + r4) * 16, 16);
        }
      }
      function R3(a4, b3) {
        return a4 << b3 | a4 >>> 32 - b3;
      }
      function salsa20_8(B3, x4) {
        arraycopy(B3, 0, x4, 0, 16);
        for (let i4 = 8; i4 > 0; i4 -= 2) {
          x4[4] ^= R3(x4[0] + x4[12], 7);
          x4[8] ^= R3(x4[4] + x4[0], 9);
          x4[12] ^= R3(x4[8] + x4[4], 13);
          x4[0] ^= R3(x4[12] + x4[8], 18);
          x4[9] ^= R3(x4[5] + x4[1], 7);
          x4[13] ^= R3(x4[9] + x4[5], 9);
          x4[1] ^= R3(x4[13] + x4[9], 13);
          x4[5] ^= R3(x4[1] + x4[13], 18);
          x4[14] ^= R3(x4[10] + x4[6], 7);
          x4[2] ^= R3(x4[14] + x4[10], 9);
          x4[6] ^= R3(x4[2] + x4[14], 13);
          x4[10] ^= R3(x4[6] + x4[2], 18);
          x4[3] ^= R3(x4[15] + x4[11], 7);
          x4[7] ^= R3(x4[3] + x4[15], 9);
          x4[11] ^= R3(x4[7] + x4[3], 13);
          x4[15] ^= R3(x4[11] + x4[7], 18);
          x4[1] ^= R3(x4[0] + x4[3], 7);
          x4[2] ^= R3(x4[1] + x4[0], 9);
          x4[3] ^= R3(x4[2] + x4[1], 13);
          x4[0] ^= R3(x4[3] + x4[2], 18);
          x4[6] ^= R3(x4[5] + x4[4], 7);
          x4[7] ^= R3(x4[6] + x4[5], 9);
          x4[4] ^= R3(x4[7] + x4[6], 13);
          x4[5] ^= R3(x4[4] + x4[7], 18);
          x4[11] ^= R3(x4[10] + x4[9], 7);
          x4[8] ^= R3(x4[11] + x4[10], 9);
          x4[9] ^= R3(x4[8] + x4[11], 13);
          x4[10] ^= R3(x4[9] + x4[8], 18);
          x4[12] ^= R3(x4[15] + x4[14], 7);
          x4[13] ^= R3(x4[12] + x4[15], 9);
          x4[14] ^= R3(x4[13] + x4[12], 13);
          x4[15] ^= R3(x4[14] + x4[13], 18);
        }
        for (let i4 = 0; i4 < 16; ++i4) {
          B3[i4] += x4[i4];
        }
      }
      function blockxor(S3, Si, D4, len) {
        for (let i4 = 0; i4 < len; i4++) {
          D4[i4] ^= S3[Si + i4];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o4) {
        if (!o4 || typeof o4.length !== "number") {
          return false;
        }
        for (let i4 = 0; i4 < o4.length; i4++) {
          const v4 = o4[i4];
          if (typeof v4 !== "number" || v4 % 1 || v4 < 0 || v4 >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value, name2) {
        if (typeof value !== "number" || value % 1) {
          throw new Error("invalid " + name2);
        }
        return value;
      }
      function _scrypt(password, salt, N4, r4, p4, dkLen, callback) {
        N4 = ensureInteger(N4, "N");
        r4 = ensureInteger(r4, "r");
        p4 = ensureInteger(p4, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N4 === 0 || (N4 & N4 - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N4 > MAX_VALUE / 128 / r4) {
          throw new Error("N too large");
        }
        if (r4 > MAX_VALUE / 128 / p4) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b3 = PBKDF2_HMAC_SHA256_OneIter(password, salt, p4 * 128 * r4);
        const B3 = new Uint32Array(p4 * 32 * r4);
        for (let i4 = 0; i4 < B3.length; i4++) {
          const j4 = i4 * 4;
          B3[i4] = (b3[j4 + 3] & 255) << 24 | (b3[j4 + 2] & 255) << 16 | (b3[j4 + 1] & 255) << 8 | (b3[j4 + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r4);
        const V2 = new Uint32Array(32 * r4 * N4);
        const Yi = 32 * r4;
        const x4 = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p4 * N4 * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop = false;
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        const limit = callback ? parseInt(1e3 / r4) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i0 * 32 * r4;
              arraycopy(B3, Bi, XY, 0, Yi);
              state = 1;
              i1 = 0;
            case 1:
              steps = N4 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i4 = 0; i4 < steps; i4++) {
                arraycopy(XY, 0, V2, (i1 + i4) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r4, x4, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N4) {
                break;
              }
              i1 = 0;
              state = 2;
            case 2:
              steps = N4 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i4 = 0; i4 < steps; i4++) {
                const offset = (2 * r4 - 1) * 16;
                const j4 = XY[offset] & N4 - 1;
                blockxor(V2, j4 * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r4, x4, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N4) {
                break;
              }
              arraycopy(XY, 0, B3, Bi, Yi);
              i0++;
              if (i0 < p4) {
                state = 0;
                break;
              }
              b3 = [];
              for (let i4 = 0; i4 < B3.length; i4++) {
                b3.push(B3[i4] >> 0 & 255);
                b3.push(B3[i4] >> 8 & 255);
                b3.push(B3[i4] >> 16 & 255);
                b3.push(B3[i4] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b3, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = {
        scrypt: function(password, salt, N4, r4, p4, dkLen, progressCallback) {
          return new Promise(function(resolve, reject) {
            let lastProgress = 0;
            if (progressCallback) {
              progressCallback(0);
            }
            _scrypt(password, salt, N4, r4, p4, dkLen, function(error, progress, key2) {
              if (error) {
                reject(error);
              } else if (key2) {
                if (progressCallback && lastProgress !== 1) {
                  progressCallback(1);
                }
                resolve(new Uint8Array(key2));
              } else if (progressCallback && progress !== lastProgress) {
                lastProgress = progress;
                return progressCallback(progress);
              }
            });
          });
        },
        syncScrypt: function(password, salt, N4, r4, p4, dkLen) {
          return new Uint8Array(_scrypt(password, salt, N4, r4, p4, dkLen));
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = lib;
      } else if (typeof define === "function" && define.amd) {
        define(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(exports);
  }
});

// node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js
function hasMnemonic(value) {
  return value != null && value.mnemonic && value.mnemonic.phrase;
}
function _decrypt(data, key2, ciphertext) {
  const cipher = searchPath(data, "crypto/cipher");
  if (cipher === "aes-128-ctr") {
    const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(key2, counter);
    return arrayify(aesCtr.decrypt(ciphertext));
  }
  return null;
}
function _getAccount(data, key2) {
  const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
  const computedMAC = hexlify(keccak256(concat([key2.slice(16, 32), ciphertext]))).substring(2);
  if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }
  const privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);
  if (!privateKey) {
    logger24.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }
  const mnemonicKey = key2.slice(32, 64);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }
    if (getAddress(check) !== address) {
      throw new Error("address mismatch");
    }
  }
  const account = {
    _isKeystoreAccount: true,
    address,
    privateKey: hexlify(privateKey)
  };
  if (searchPath(data, "x-ethers/version") === "0.1") {
    const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
    const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
    const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
    const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
    const path = searchPath(data, "x-ethers/path") || defaultPath;
    const locale = searchPath(data, "x-ethers/locale") || "en";
    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
    try {
      const mnemonic = entropyToMnemonic(entropy, locale);
      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
      account.mnemonic = node.mnemonic;
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }
  return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  const passwordBytes = getPassword(password);
  const kdf = searchPath(data, "crypto/kdf");
  if (kdf && typeof kdf === "string") {
    const throwError = function(name2, value) {
      return logger24.throwArgumentError("invalid key-derivation function parameters", name2, value);
    };
    if (kdf.toLowerCase() === "scrypt") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      const N4 = parseInt(searchPath(data, "crypto/kdfparams/n"));
      const r4 = parseInt(searchPath(data, "crypto/kdfparams/r"));
      const p4 = parseInt(searchPath(data, "crypto/kdfparams/p"));
      if (!N4 || !r4 || !p4) {
        throwError("kdf", kdf);
      }
      if ((N4 & N4 - 1) !== 0) {
        throwError("N", N4);
      }
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return scryptFunc(passwordBytes, salt, N4, r4, p4, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      let prfFunc = null;
      const prf = searchPath(data, "crypto/kdfparams/prf");
      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }
      const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
    }
  }
  return logger24.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
  const data = JSON.parse(json);
  const key2 = _computeKdfKey(data, password, pbkdf2Sync, import_scrypt_js.default.syncScrypt);
  return _getAccount(data, key2);
}
function decrypt2(json, password, progressCallback) {
  return __awaiter5(this, void 0, void 0, function* () {
    const data = JSON.parse(json);
    const key2 = yield _computeKdfKey(data, password, pbkdf22, import_scrypt_js.default.scrypt, progressCallback);
    return _getAccount(data, key2);
  });
}
function encrypt(account, password, options, progressCallback) {
  try {
    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    }
    if (hasMnemonic(account)) {
      const mnemonic = account.mnemonic;
      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e3) {
    return Promise.reject(e3);
  }
  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }
  if (!options) {
    options = {};
  }
  const privateKey = arrayify(account.privateKey);
  const passwordBytes = getPassword(password);
  let entropy = null;
  let path = null;
  let locale = null;
  if (hasMnemonic(account)) {
    const srcMnemonic = account.mnemonic;
    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || defaultPath;
    locale = srcMnemonic.locale || "en";
  }
  let client = options.client;
  if (!client) {
    client = "ethers.js";
  }
  let salt = null;
  if (options.salt) {
    salt = arrayify(options.salt);
  } else {
    salt = randomBytes(32);
    ;
  }
  let iv = null;
  if (options.iv) {
    iv = arrayify(options.iv);
    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = randomBytes(16);
  }
  let uuidRandom = null;
  if (options.uuid) {
    uuidRandom = arrayify(options.uuid);
    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = randomBytes(16);
  }
  let N4 = 1 << 17, r4 = 8, p4 = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N4 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r4 = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p4 = options.scrypt.p;
    }
  }
  return import_scrypt_js.default.scrypt(passwordBytes, salt, N4, r4, p4, 64, progressCallback).then((key2) => {
    key2 = arrayify(key2);
    const derivedKey = key2.slice(0, 16);
    const macPrefix = key2.slice(16, 32);
    const mnemonicKey = key2.slice(32, 64);
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(derivedKey, counter);
    const ciphertext = arrayify(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(salt).substring(2),
          n: N4,
          dklen: 32,
          p: p4,
          r: r4
        },
        mac: mac.substring(2)
      }
    };
    if (entropy) {
      const mnemonicIv = randomBytes(16);
      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
      const now2 = new Date();
      const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        path,
        locale,
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  });
}
var import_aes_js2, import_scrypt_js, __awaiter5, logger24, KeystoreAccount;
var init_keystore = __esm({
  "node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"() {
    "use strict";
    import_aes_js2 = __toESM(require_aes_js());
    import_scrypt_js = __toESM(require_scrypt());
    init_lib7();
    init_lib3();
    init_lib21();
    init_lib5();
    init_lib19();
    init_lib22();
    init_lib2();
    init_lib15();
    init_utils();
    init_lib();
    init_version17();
    __awaiter5 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger24 = new Logger(version17);
    KeystoreAccount = class extends Description {
      isKeystoreAccount(value) {
        return !!(value && value._isKeystoreAccount);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/index.js
function decryptJsonWallet(json, password, progressCallback) {
  if (isCrowdsaleWallet(json)) {
    if (progressCallback) {
      progressCallback(0);
    }
    const account = decrypt(json, password);
    if (progressCallback) {
      progressCallback(1);
    }
    return Promise.resolve(account);
  }
  if (isKeystoreWallet(json)) {
    return decrypt2(json, password, progressCallback);
  }
  return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
  if (isCrowdsaleWallet(json)) {
    return decrypt(json, password);
  }
  if (isKeystoreWallet(json)) {
    return decryptSync(json, password);
  }
  throw new Error("invalid JSON wallet");
}
var init_lib23 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/json-wallets/lib.esm/index.js"() {
    "use strict";
    init_crowdsale();
    init_inspect();
    init_keystore();
  }
});

// node_modules/moralis/node_modules/@ethersproject/wallet/lib.esm/_version.js
var version18;
var init_version18 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wallet/lib.esm/_version.js"() {
    version18 = "wallet/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/wallet/lib.esm/index.js
function isAccount(value) {
  return value != null && isHexString(value.privateKey, 32) && value.address != null;
}
function hasMnemonic2(value) {
  const mnemonic = value.mnemonic;
  return mnemonic && mnemonic.phrase;
}
function verifyMessage(message, signature2) {
  return recoverAddress(hashMessage(message), signature2);
}
function verifyTypedData(domain, types, value, signature2) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature2);
}
var __awaiter6, logger25, Wallet;
var init_lib24 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/wallet/lib.esm/index.js"() {
    "use strict";
    init_lib7();
    init_lib12();
    init_lib13();
    init_lib3();
    init_lib10();
    init_lib21();
    init_lib5();
    init_lib2();
    init_lib22();
    init_lib14();
    init_lib23();
    init_lib15();
    init_lib();
    init_version18();
    __awaiter6 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger25 = new Logger(version18);
    Wallet = class extends Signer {
      constructor(privateKey, provider) {
        logger25.checkNew(new.target, Wallet);
        super();
        if (isAccount(privateKey)) {
          const signingKey = new SigningKey(privateKey.privateKey);
          defineReadOnly(this, "_signingKey", () => signingKey);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
          if (this.address !== getAddress(privateKey.address)) {
            logger25.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
          }
          if (hasMnemonic2(privateKey)) {
            const srcMnemonic = privateKey.mnemonic;
            defineReadOnly(this, "_mnemonic", () => ({
              phrase: srcMnemonic.phrase,
              path: srcMnemonic.path || defaultPath,
              locale: srcMnemonic.locale || "en"
            }));
            const mnemonic = this.mnemonic;
            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
            if (computeAddress(node.privateKey) !== this.address) {
              logger25.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
            }
          } else {
            defineReadOnly(this, "_mnemonic", () => null);
          }
        } else {
          if (SigningKey.isSigningKey(privateKey)) {
            if (privateKey.curve !== "secp256k1") {
              logger25.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
            }
            defineReadOnly(this, "_signingKey", () => privateKey);
          } else {
            if (typeof privateKey === "string") {
              if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                privateKey = "0x" + privateKey;
              }
            }
            const signingKey = new SigningKey(privateKey);
            defineReadOnly(this, "_signingKey", () => signingKey);
          }
          defineReadOnly(this, "_mnemonic", () => null);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
        }
        if (provider && !Provider.isProvider(provider)) {
          logger25.throwArgumentError("invalid provider", "provider", provider);
        }
        defineReadOnly(this, "provider", provider || null);
      }
      get mnemonic() {
        return this._mnemonic();
      }
      get privateKey() {
        return this._signingKey().privateKey;
      }
      get publicKey() {
        return this._signingKey().publicKey;
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      connect(provider) {
        return new Wallet(this, provider);
      }
      signTransaction(transaction) {
        return resolveProperties(transaction).then((tx) => {
          if (tx.from != null) {
            if (getAddress(tx.from) !== this.address) {
              logger25.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
            }
            delete tx.from;
          }
          const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));
          return serialize(tx, signature2);
        });
      }
      signMessage(message) {
        return __awaiter6(this, void 0, void 0, function* () {
          return joinSignature(this._signingKey().signDigest(hashMessage(message)));
        });
      }
      _signTypedData(domain, types, value) {
        return __awaiter6(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
            if (this.provider == null) {
              logger25.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName",
                value: name2
              });
            }
            return this.provider.resolveName(name2);
          });
          return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
        });
      }
      encrypt(password, options, progressCallback) {
        if (typeof options === "function" && !progressCallback) {
          progressCallback = options;
          options = {};
        }
        if (progressCallback && typeof progressCallback !== "function") {
          throw new Error("invalid callback");
        }
        if (!options) {
          options = {};
        }
        return encrypt(this, password, options, progressCallback);
      }
      static createRandom(options) {
        let entropy = randomBytes(16);
        if (!options) {
          options = {};
        }
        if (options.extraEntropy) {
          entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
        }
        const mnemonic = entropyToMnemonic(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
      }
      static fromEncryptedJson(json, password, progressCallback) {
        return decryptJsonWallet(json, password, progressCallback).then((account) => {
          return new Wallet(account);
        });
      }
      static fromEncryptedJsonSync(json, password) {
        return new Wallet(decryptJsonWalletSync(json, password));
      }
      static fromMnemonic(mnemonic, path, wordlist2) {
        if (!path) {
          path = defaultPath;
        }
        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/networks/lib.esm/_version.js
var version19;
var init_version19 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/networks/lib.esm/_version.js"() {
    version19 = "networks/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/networks/lib.esm/index.js
function isRenetworkable(value) {
  return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network) {
  const func = function(providers, options) {
    if (options == null) {
      options = {};
    }
    const providerList = [];
    if (providers.InfuraProvider && options.infura !== "-") {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {
      }
    }
    if (providers.EtherscanProvider && options.etherscan !== "-") {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {
      }
    }
    if (providers.AlchemyProvider && options.alchemy !== "-") {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {
      }
    }
    if (providers.PocketProvider && options.pocket !== "-") {
      const skip = ["goerli", "ropsten", "rinkeby"];
      try {
        const provider = new providers.PocketProvider(network);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {
      }
    }
    if (providers.CloudflareProvider && options.cloudflare !== "-") {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {
      }
    }
    if (providerList.length === 0) {
      return null;
    }
    if (providers.FallbackProvider) {
      let quorum = 1;
      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }
      return new providers.FallbackProvider(providerList, quorum);
    }
    return providerList[0];
  };
  func.renetwork = function(network2) {
    return ethDefaultProvider(network2);
  };
  return func;
}
function etcDefaultProvider(url, network) {
  const func = function(providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }
    return null;
  };
  func.renetwork = function(network2) {
    return etcDefaultProvider(url, network2);
  };
  return func;
}
function getNetwork(network) {
  if (network == null) {
    return null;
  }
  if (typeof network === "number") {
    for (const name2 in networks) {
      const standard2 = networks[name2];
      if (standard2.chainId === network) {
        return {
          name: standard2.name,
          chainId: standard2.chainId,
          ensAddress: standard2.ensAddress || null,
          _defaultProvider: standard2._defaultProvider || null
        };
      }
    }
    return {
      chainId: network,
      name: "unknown"
    };
  }
  if (typeof network === "string") {
    const standard2 = networks[network];
    if (standard2 == null) {
      return null;
    }
    return {
      name: standard2.name,
      chainId: standard2.chainId,
      ensAddress: standard2.ensAddress,
      _defaultProvider: standard2._defaultProvider || null
    };
  }
  const standard = networks[network.name];
  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger26.throwArgumentError("invalid network chainId", "network", network);
    }
    return network;
  }
  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger26.throwArgumentError("network chainId mismatch", "network", network);
  }
  let defaultProvider = network._defaultProvider || null;
  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  }
  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}
var logger26, homestead, ropsten, classicMordor, networks;
var init_lib25 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/networks/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version19();
    logger26 = new Logger(version19);
    homestead = {
      chainId: 1,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "homestead",
      _defaultProvider: ethDefaultProvider("homestead")
    };
    ropsten = {
      chainId: 3,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "ropsten",
      _defaultProvider: ethDefaultProvider("ropsten")
    };
    classicMordor = {
      chainId: 63,
      name: "classicMordor",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    networks = {
      unspecified: { chainId: 0, name: "unspecified" },
      homestead,
      mainnet: homestead,
      morden: { chainId: 2, name: "morden" },
      ropsten,
      testnet: ropsten,
      rinkeby: {
        chainId: 4,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "rinkeby",
        _defaultProvider: ethDefaultProvider("rinkeby")
      },
      kovan: {
        chainId: 42,
        name: "kovan",
        _defaultProvider: ethDefaultProvider("kovan")
      },
      goerli: {
        chainId: 5,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "goerli",
        _defaultProvider: ethDefaultProvider("goerli")
      },
      kintsugi: { chainId: 1337702, name: "kintsugi" },
      classic: {
        chainId: 61,
        name: "classic",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
      },
      classicMorden: { chainId: 62, name: "classicMorden" },
      classicMordor,
      classicTestnet: classicMordor,
      classicKotti: {
        chainId: 6,
        name: "classicKotti",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
      },
      xdai: { chainId: 100, name: "xdai" },
      matic: { chainId: 137, name: "matic" },
      maticmum: { chainId: 80001, name: "maticmum" },
      optimism: { chainId: 10, name: "optimism" },
      "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
      "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
      arbitrum: { chainId: 42161, name: "arbitrum" },
      "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
      bnb: { chainId: 56, name: "bnb" },
      bnbt: { chainId: 97, name: "bnbt" }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/base64/lib.esm/base64.js
function decode2(textData) {
  textData = atob(textData);
  const data = [];
  for (let i4 = 0; i4 < textData.length; i4++) {
    data.push(textData.charCodeAt(i4));
  }
  return arrayify(data);
}
function encode3(data) {
  data = arrayify(data);
  let textData = "";
  for (let i4 = 0; i4 < data.length; i4++) {
    textData += String.fromCharCode(data[i4]);
  }
  return btoa(textData);
}
var init_base64 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    init_lib3();
  }
});

// node_modules/moralis/node_modules/@ethersproject/base64/lib.esm/index.js
var lib_exports3 = {};
__export(lib_exports3, {
  decode: () => decode2,
  encode: () => encode3
});
var init_lib26 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    init_base64();
  }
});

// node_modules/moralis/node_modules/@ethersproject/web/lib.esm/_version.js
var version20;
var init_version20 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/web/lib.esm/_version.js"() {
    version20 = "web/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/web/lib.esm/geturl.js
function getUrl(href, options) {
  return __awaiter7(this, void 0, void 0, function* () {
    if (options == null) {
      options = {};
    }
    const request = {
      method: options.method || "GET",
      headers: options.headers || {},
      body: options.body || void 0
    };
    if (options.skipFetchSetup !== true) {
      request.mode = "cors";
      request.cache = "no-cache";
      request.credentials = "same-origin";
      request.redirect = "follow";
      request.referrer = "client";
    }
    ;
    const response = yield fetch(href, request);
    const body = yield response.arrayBuffer();
    const headers = {};
    if (response.headers.forEach) {
      response.headers.forEach((value, key2) => {
        headers[key2.toLowerCase()] = value;
      });
    } else {
      response.headers.keys().forEach((key2) => {
        headers[key2.toLowerCase()] = response.headers.get(key2);
      });
    }
    return {
      headers,
      statusCode: response.status,
      statusMessage: response.statusText,
      body: arrayify(new Uint8Array(body))
    };
  });
}
var __awaiter7;
var init_geturl = __esm({
  "node_modules/moralis/node_modules/@ethersproject/web/lib.esm/geturl.js"() {
    "use strict";
    init_lib3();
    __awaiter7 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/web/lib.esm/index.js
function staller(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bodyify(value, type) {
  if (value == null) {
    return null;
  }
  if (typeof value === "string") {
    return value;
  }
  if (isBytesLike(value)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return toUtf8String(value);
      } catch (error) {
      }
      ;
    }
    return hexlify(value);
  }
  return value;
}
function _fetchData(connection, body, processFunc) {
  const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger27.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger27.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
  const headers = {};
  let url = null;
  const options = {
    method: "GET"
  };
  let allow304 = false;
  let timeout = 2 * 60 * 1e3;
  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger27.throwArgumentError("missing URL", "connection.url", connection);
    }
    url = connection.url;
    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }
    if (connection.headers) {
      for (const key2 in connection.headers) {
        headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
        if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }
    options.allowGzip = !!connection.allowGzip;
    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger27.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
      }
      const authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + encode3(toUtf8Bytes(authorization))
      };
    }
    if (connection.skipFetchSetup != null) {
      options.skipFetchSetup = !!connection.skipFetchSetup;
    }
  }
  const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
  const dataMatch = url ? url.match(reData) : null;
  if (dataMatch) {
    try {
      const response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: { "content-type": dataMatch[1] },
        body: decode2(dataMatch[2])
      };
      let result = response.body;
      if (processFunc) {
        result = processFunc(response.body, response);
      }
      return Promise.resolve(result);
    } catch (error) {
      logger27.throwError("processing response error", Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error,
        requestBody: null,
        requestMethod: "GET",
        url
      });
    }
  }
  if (body) {
    options.method = "POST";
    options.body = body;
    if (headers["content-type"] == null) {
      headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
    }
    if (headers["content-length"] == null) {
      headers["content-length"] = { key: "Content-Length", value: String(body.length) };
    }
  }
  const flatHeaders = {};
  Object.keys(headers).forEach((key2) => {
    const header = headers[key2];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;
  const runningTimeout = function() {
    let timer2 = null;
    const promise = new Promise(function(resolve, reject) {
      if (timeout) {
        timer2 = setTimeout(() => {
          if (timer2 == null) {
            return;
          }
          timer2 = null;
          reject(logger27.makeError("timeout", Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout,
            url
          }));
        }, timeout);
      }
    });
    const cancel = function() {
      if (timer2 == null) {
        return;
      }
      clearTimeout(timer2);
      timer2 = null;
    };
    return { promise, cancel };
  }();
  const runningFetch = function() {
    return __awaiter8(this, void 0, void 0, function* () {
      for (let attempt = 0; attempt < attemptLimit; attempt++) {
        let response = null;
        try {
          response = yield getUrl(url, options);
          if (attempt < attemptLimit) {
            if (response.statusCode === 301 || response.statusCode === 302) {
              const location = response.headers.location || "";
              if (options.method === "GET" && location.match(/^https:/)) {
                url = response.headers.location;
                continue;
              }
            } else if (response.statusCode === 429) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall3 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall3 = parseInt(retryAfter) * 1e3;
                } else {
                  stall3 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall3);
                continue;
              }
            }
          }
        } catch (error) {
          response = error.response;
          if (response == null) {
            runningTimeout.cancel();
            logger27.throwError("missing response", Logger.errors.SERVER_ERROR, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              serverError: error,
              url
            });
          }
        }
        let body2 = response.body;
        if (allow304 && response.statusCode === 304) {
          body2 = null;
        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
          runningTimeout.cancel();
          logger27.throwError("bad response", Logger.errors.SERVER_ERROR, {
            status: response.statusCode,
            headers: response.headers,
            body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url
          });
        }
        if (processFunc) {
          try {
            const result = yield processFunc(body2, response);
            runningTimeout.cancel();
            return result;
          } catch (error) {
            if (error.throttleRetry && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                yield staller(timeout2);
                continue;
              }
            }
            runningTimeout.cancel();
            logger27.throwError("processing response error", Logger.errors.SERVER_ERROR, {
              body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
              error,
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url
            });
          }
        }
        runningTimeout.cancel();
        return body2;
      }
      return logger27.throwError("failed response", Logger.errors.SERVER_ERROR, {
        requestBody: bodyify(options.body, flatHeaders["content-type"]),
        requestMethod: options.method,
        url
      });
    });
  }();
  return Promise.race([runningTimeout.promise, runningFetch]);
}
function fetchJson(connection, json, processFunc) {
  let processJsonFunc = (value, response) => {
    let result = null;
    if (value != null) {
      try {
        result = JSON.parse(toUtf8String(value));
      } catch (error) {
        logger27.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
          body: value,
          error
        });
      }
    }
    if (processFunc) {
      result = processFunc(result, response);
    }
    return result;
  };
  let body = null;
  if (json != null) {
    body = toUtf8Bytes(json);
    const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
    if (updated.headers) {
      const hasContentType = Object.keys(updated.headers).filter((k4) => k4.toLowerCase() === "content-type").length !== 0;
      if (!hasContentType) {
        updated.headers = shallowCopy(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = { "content-type": "application/json" };
    }
    connection = updated;
  }
  return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
  if (!options) {
    options = {};
  }
  options = shallowCopy(options);
  if (options.floor == null) {
    options.floor = 0;
  }
  if (options.ceiling == null) {
    options.ceiling = 1e4;
  }
  if (options.interval == null) {
    options.interval = 250;
  }
  return new Promise(function(resolve, reject) {
    let timer2 = null;
    let done = false;
    const cancel = () => {
      if (done) {
        return false;
      }
      done = true;
      if (timer2) {
        clearTimeout(timer2);
      }
      return true;
    };
    if (options.timeout) {
      timer2 = setTimeout(() => {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }
    const retryLimit = options.retryLimit;
    let attempt = 0;
    function check() {
      return func().then(function(result) {
        if (result !== void 0) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check);
        } else if (!done) {
          attempt++;
          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }
            return;
          }
          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
          if (timeout < options.floor) {
            timeout = options.floor;
          }
          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }
          setTimeout(check, timeout);
        }
        return null;
      }, function(error) {
        if (cancel()) {
          reject(error);
        }
      });
    }
    check();
  });
}
var __awaiter8, logger27;
var init_lib27 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/web/lib.esm/index.js"() {
    "use strict";
    init_lib26();
    init_lib3();
    init_lib2();
    init_lib9();
    init_lib();
    init_version20();
    init_geturl();
    __awaiter8 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger27 = new Logger(version20);
  }
});

// node_modules/bech32/index.js
var require_bech32 = __commonJS({
  "node_modules/bech32/index.js"(exports, module) {
    "use strict";
    var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var ALPHABET_MAP = {};
    for (z4 = 0; z4 < ALPHABET.length; z4++) {
      x4 = ALPHABET.charAt(z4);
      if (ALPHABET_MAP[x4] !== void 0)
        throw new TypeError(x4 + " is ambiguous");
      ALPHABET_MAP[x4] = z4;
    }
    var x4;
    var z4;
    function polymodStep(pre) {
      var b3 = pre >> 25;
      return (pre & 33554431) << 5 ^ -(b3 >> 0 & 1) & 996825010 ^ -(b3 >> 1 & 1) & 642813549 ^ -(b3 >> 2 & 1) & 513874426 ^ -(b3 >> 3 & 1) & 1027748829 ^ -(b3 >> 4 & 1) & 705979059;
    }
    function prefixChk(prefix) {
      var chk = 1;
      for (var i4 = 0; i4 < prefix.length; ++i4) {
        var c4 = prefix.charCodeAt(i4);
        if (c4 < 33 || c4 > 126)
          return "Invalid prefix (" + prefix + ")";
        chk = polymodStep(chk) ^ c4 >> 5;
      }
      chk = polymodStep(chk);
      for (i4 = 0; i4 < prefix.length; ++i4) {
        var v4 = prefix.charCodeAt(i4);
        chk = polymodStep(chk) ^ v4 & 31;
      }
      return chk;
    }
    function encode4(prefix, words2, LIMIT) {
      LIMIT = LIMIT || 90;
      if (prefix.length + 7 + words2.length > LIMIT)
        throw new TypeError("Exceeds length limit");
      prefix = prefix.toLowerCase();
      var chk = prefixChk(prefix);
      if (typeof chk === "string")
        throw new Error(chk);
      var result = prefix + "1";
      for (var i4 = 0; i4 < words2.length; ++i4) {
        var x5 = words2[i4];
        if (x5 >> 5 !== 0)
          throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x5;
        result += ALPHABET.charAt(x5);
      }
      for (i4 = 0; i4 < 6; ++i4) {
        chk = polymodStep(chk);
      }
      chk ^= 1;
      for (i4 = 0; i4 < 6; ++i4) {
        var v4 = chk >> (5 - i4) * 5 & 31;
        result += ALPHABET.charAt(v4);
      }
      return result;
    }
    function __decode(str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8)
        return str + " too short";
      if (str.length > LIMIT)
        return "Exceeds length limit";
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered)
        return "Mixed-case string " + str;
      str = lowered;
      var split = str.lastIndexOf("1");
      if (split === -1)
        return "No separator character for " + str;
      if (split === 0)
        return "Missing prefix for " + str;
      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6)
        return "Data too short";
      var chk = prefixChk(prefix);
      if (typeof chk === "string")
        return chk;
      var words2 = [];
      for (var i4 = 0; i4 < wordChars.length; ++i4) {
        var c4 = wordChars.charAt(i4);
        var v4 = ALPHABET_MAP[c4];
        if (v4 === void 0)
          return "Unknown character " + c4;
        chk = polymodStep(chk) ^ v4;
        if (i4 + 6 >= wordChars.length)
          continue;
        words2.push(v4);
      }
      if (chk !== 1)
        return "Invalid checksum for " + str;
      return { prefix, words: words2 };
    }
    function decodeUnsafe() {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
    }
    function decode3(str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
      throw new Error(res);
    }
    function convert(data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;
      var result = [];
      for (var i4 = 0; i4 < data.length; ++i4) {
        value = value << inBits | data[i4];
        bits += inBits;
        while (bits >= outBits) {
          bits -= outBits;
          result.push(value >> bits & maxV);
        }
      }
      if (pad) {
        if (bits > 0) {
          result.push(value << outBits - bits & maxV);
        }
      } else {
        if (bits >= inBits)
          return "Excess padding";
        if (value << outBits - bits & maxV)
          return "Non-zero padding";
      }
      return result;
    }
    function toWordsUnsafe(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
    }
    function toWords(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    function fromWordsUnsafe(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
    }
    function fromWords(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    module.exports = {
      decodeUnsafe,
      decode: decode3,
      encode: encode4,
      toWordsUnsafe,
      toWords,
      fromWordsUnsafe,
      fromWords
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/_version.js
var version21;
var init_version21 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/_version.js"() {
    version21 = "providers/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/formatter.js
function isCommunityResourcable(value) {
  return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
  return isCommunityResourcable(value) && value.isCommunityResource();
}
function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }
  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.io/api-keys/");
  console.log("==========================");
}
var logger28, Formatter, throttleMessage;
var init_formatter = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/formatter.js"() {
    "use strict";
    init_lib7();
    init_lib4();
    init_lib3();
    init_lib8();
    init_lib2();
    init_lib15();
    init_lib();
    init_version21();
    logger28 = new Logger(version21);
    Formatter = class {
      constructor() {
        logger28.checkNew(new.target, Formatter);
        this.formats = this.getDefaultFormats();
      }
      getDefaultFormats() {
        const formats = {};
        const address = this.address.bind(this);
        const bigNumber = this.bigNumber.bind(this);
        const blockTag = this.blockTag.bind(this);
        const data = this.data.bind(this);
        const hash3 = this.hash.bind(this);
        const hex = this.hex.bind(this);
        const number = this.number.bind(this);
        const type = this.type.bind(this);
        const strictData = (v4) => {
          return this.data(v4, true);
        };
        formats.transaction = {
          hash: hash3,
          type,
          accessList: Formatter.allowNull(this.accessList.bind(this), null),
          blockHash: Formatter.allowNull(hash3, null),
          blockNumber: Formatter.allowNull(number, null),
          transactionIndex: Formatter.allowNull(number, null),
          confirmations: Formatter.allowNull(number, null),
          from: address,
          gasPrice: Formatter.allowNull(bigNumber),
          maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
          maxFeePerGas: Formatter.allowNull(bigNumber),
          gasLimit: bigNumber,
          to: Formatter.allowNull(address, null),
          value: bigNumber,
          nonce: number,
          data,
          r: Formatter.allowNull(this.uint256),
          s: Formatter.allowNull(this.uint256),
          v: Formatter.allowNull(number),
          creates: Formatter.allowNull(address, null),
          raw: Formatter.allowNull(data)
        };
        formats.transactionRequest = {
          from: Formatter.allowNull(address),
          nonce: Formatter.allowNull(number),
          gasLimit: Formatter.allowNull(bigNumber),
          gasPrice: Formatter.allowNull(bigNumber),
          maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
          maxFeePerGas: Formatter.allowNull(bigNumber),
          to: Formatter.allowNull(address),
          value: Formatter.allowNull(bigNumber),
          data: Formatter.allowNull(strictData),
          type: Formatter.allowNull(number),
          accessList: Formatter.allowNull(this.accessList.bind(this), null)
        };
        formats.receiptLog = {
          transactionIndex: number,
          blockNumber: number,
          transactionHash: hash3,
          address,
          topics: Formatter.arrayOf(hash3),
          data,
          logIndex: number,
          blockHash: hash3
        };
        formats.receipt = {
          to: Formatter.allowNull(this.address, null),
          from: Formatter.allowNull(this.address, null),
          contractAddress: Formatter.allowNull(address, null),
          transactionIndex: number,
          root: Formatter.allowNull(hex),
          gasUsed: bigNumber,
          logsBloom: Formatter.allowNull(data),
          blockHash: hash3,
          transactionHash: hash3,
          logs: Formatter.arrayOf(this.receiptLog.bind(this)),
          blockNumber: number,
          confirmations: Formatter.allowNull(number, null),
          cumulativeGasUsed: bigNumber,
          effectiveGasPrice: Formatter.allowNull(bigNumber),
          status: Formatter.allowNull(number),
          type
        };
        formats.block = {
          hash: Formatter.allowNull(hash3),
          parentHash: hash3,
          number,
          timestamp: number,
          nonce: Formatter.allowNull(hex),
          difficulty: this.difficulty.bind(this),
          gasLimit: bigNumber,
          gasUsed: bigNumber,
          miner: Formatter.allowNull(address),
          extraData: data,
          transactions: Formatter.allowNull(Formatter.arrayOf(hash3)),
          baseFeePerGas: Formatter.allowNull(bigNumber)
        };
        formats.blockWithTransactions = shallowCopy(formats.block);
        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
        formats.filter = {
          fromBlock: Formatter.allowNull(blockTag, void 0),
          toBlock: Formatter.allowNull(blockTag, void 0),
          blockHash: Formatter.allowNull(hash3, void 0),
          address: Formatter.allowNull(address, void 0),
          topics: Formatter.allowNull(this.topics.bind(this), void 0)
        };
        formats.filterLog = {
          blockNumber: Formatter.allowNull(number),
          blockHash: Formatter.allowNull(hash3),
          transactionIndex: number,
          removed: Formatter.allowNull(this.boolean.bind(this)),
          address,
          data: Formatter.allowFalsish(data, "0x"),
          topics: Formatter.arrayOf(hash3),
          transactionHash: hash3,
          logIndex: number
        };
        return formats;
      }
      accessList(accessList) {
        return accessListify(accessList || []);
      }
      number(number) {
        if (number === "0x") {
          return 0;
        }
        return BigNumber.from(number).toNumber();
      }
      type(number) {
        if (number === "0x" || number == null) {
          return 0;
        }
        return BigNumber.from(number).toNumber();
      }
      bigNumber(value) {
        return BigNumber.from(value);
      }
      boolean(value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "string") {
          value = value.toLowerCase();
          if (value === "true") {
            return true;
          }
          if (value === "false") {
            return false;
          }
        }
        throw new Error("invalid boolean - " + value);
      }
      hex(value, strict) {
        if (typeof value === "string") {
          if (!strict && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexString(value)) {
            return value.toLowerCase();
          }
        }
        return logger28.throwArgumentError("invalid hash", "value", value);
      }
      data(value, strict) {
        const result = this.hex(value, strict);
        if (result.length % 2 !== 0) {
          throw new Error("invalid data; odd-length - " + value);
        }
        return result;
      }
      address(value) {
        return getAddress(value);
      }
      callAddress(value) {
        if (!isHexString(value, 32)) {
          return null;
        }
        const address = getAddress(hexDataSlice(value, 12));
        return address === AddressZero ? null : address;
      }
      contractAddress(value) {
        return getContractAddress(value);
      }
      blockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        if (blockTag === "earliest") {
          return "0x0";
        }
        if (blockTag === "latest" || blockTag === "pending") {
          return blockTag;
        }
        if (typeof blockTag === "number" || isHexString(blockTag)) {
          return hexValue(blockTag);
        }
        throw new Error("invalid blockTag");
      }
      hash(value, strict) {
        const result = this.hex(value, strict);
        if (hexDataLength(result) !== 32) {
          return logger28.throwArgumentError("invalid hash", "value", value);
        }
        return result;
      }
      difficulty(value) {
        if (value == null) {
          return null;
        }
        const v4 = BigNumber.from(value);
        try {
          return v4.toNumber();
        } catch (error) {
        }
        return null;
      }
      uint256(value) {
        if (!isHexString(value)) {
          throw new Error("invalid uint256");
        }
        return hexZeroPad(value, 32);
      }
      _block(value, format) {
        if (value.author != null && value.miner == null) {
          value.miner = value.author;
        }
        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
        const result = Formatter.check(format, value);
        result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);
        return result;
      }
      block(value) {
        return this._block(value, this.formats.block);
      }
      blockWithTransactions(value) {
        return this._block(value, this.formats.blockWithTransactions);
      }
      transactionRequest(value) {
        return Formatter.check(this.formats.transactionRequest, value);
      }
      transactionResponse(transaction) {
        if (transaction.gas != null && transaction.gasLimit == null) {
          transaction.gasLimit = transaction.gas;
        }
        if (transaction.to && BigNumber.from(transaction.to).isZero()) {
          transaction.to = "0x0000000000000000000000000000000000000000";
        }
        if (transaction.input != null && transaction.data == null) {
          transaction.data = transaction.input;
        }
        if (transaction.to == null && transaction.creates == null) {
          transaction.creates = this.contractAddress(transaction);
        }
        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
          transaction.accessList = [];
        }
        const result = Formatter.check(this.formats.transaction, transaction);
        if (transaction.chainId != null) {
          let chainId = transaction.chainId;
          if (isHexString(chainId)) {
            chainId = BigNumber.from(chainId).toNumber();
          }
          result.chainId = chainId;
        } else {
          let chainId = transaction.networkId;
          if (chainId == null && result.v == null) {
            chainId = transaction.chainId;
          }
          if (isHexString(chainId)) {
            chainId = BigNumber.from(chainId).toNumber();
          }
          if (typeof chainId !== "number" && result.v != null) {
            chainId = (result.v - 35) / 2;
            if (chainId < 0) {
              chainId = 0;
            }
            chainId = parseInt(chainId);
          }
          if (typeof chainId !== "number") {
            chainId = 0;
          }
          result.chainId = chainId;
        }
        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
          result.blockHash = null;
        }
        return result;
      }
      transaction(value) {
        return parse(value);
      }
      receiptLog(value) {
        return Formatter.check(this.formats.receiptLog, value);
      }
      receipt(value) {
        const result = Formatter.check(this.formats.receipt, value);
        if (result.root != null) {
          if (result.root.length <= 4) {
            const value2 = BigNumber.from(result.root).toNumber();
            if (value2 === 0 || value2 === 1) {
              if (result.status != null && result.status !== value2) {
                logger28.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
              }
              result.status = value2;
              delete result.root;
            } else {
              logger28.throwArgumentError("invalid alt-root-status", "value.root", result.root);
            }
          } else if (result.root.length !== 66) {
            logger28.throwArgumentError("invalid root hash", "value.root", result.root);
          }
        }
        if (result.status != null) {
          result.byzantium = true;
        }
        return result;
      }
      topics(value) {
        if (Array.isArray(value)) {
          return value.map((v4) => this.topics(v4));
        } else if (value != null) {
          return this.hash(value, true);
        }
        return null;
      }
      filter(value) {
        return Formatter.check(this.formats.filter, value);
      }
      filterLog(value) {
        return Formatter.check(this.formats.filterLog, value);
      }
      static check(format, object) {
        const result = {};
        for (const key2 in format) {
          try {
            const value = format[key2](object[key2]);
            if (value !== void 0) {
              result[key2] = value;
            }
          } catch (error) {
            error.checkKey = key2;
            error.checkValue = object[key2];
            throw error;
          }
        }
        return result;
      }
      static allowNull(format, nullValue) {
        return function(value) {
          if (value == null) {
            return nullValue;
          }
          return format(value);
        };
      }
      static allowFalsish(format, replaceValue) {
        return function(value) {
          if (!value) {
            return replaceValue;
          }
          return format(value);
        };
      }
      static arrayOf(format) {
        return function(array) {
          if (!Array.isArray(array)) {
            throw new Error("not an array");
          }
          const result = [];
          array.forEach(function(value) {
            result.push(format(value));
          });
          return result;
        };
      }
    };
    throttleMessage = false;
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/base-provider.js
function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }
  if (hexDataLength(topic) !== 32) {
    logger29.throwArgumentError("invalid topic", "topic", topic);
  }
  return topic.toLowerCase();
}
function serializeTopics(topics) {
  topics = topics.slice();
  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }
  return topics.map((topic) => {
    if (Array.isArray(topic)) {
      const unique = {};
      topic.forEach((topic2) => {
        unique[checkTopic(topic2)] = true;
      });
      const sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}
function deserializeTopics(data) {
  if (data === "") {
    return [];
  }
  return data.split(/&/g).map((topic) => {
    if (topic === "") {
      return [];
    }
    const comps = topic.split("|").map((topic2) => {
      return topic2 === "null" ? null : topic2;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function getEventTag2(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();
    if (hexDataLength(eventName) === 32) {
      return "tx:" + eventName;
    }
    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (ForkEvent.isForkEvent(eventName)) {
    logger29.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }
  throw new Error("invalid event - " + eventName);
}
function getTime() {
  return new Date().getTime();
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bytes32ify(value) {
  return hexZeroPad(BigNumber.from(value).toHexString(), 32);
}
function base58Encode(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function _parseString(result, start) {
  try {
    return toUtf8String(_parseBytes(result, start));
  } catch (error) {
  }
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
  return hexDataSlice(result, offset + 32, offset + 32 + length);
}
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    logger29.throwArgumentError("unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}
function numPad(value) {
  const result = arrayify(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i4 = 0; i4 < datas.length; i4++) {
    result.push(null);
    byteCount += 32;
  }
  for (let i4 = 0; i4 < datas.length; i4++) {
    const data = arrayify(datas[i4]);
    result[i4] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return hexConcat(result);
}
var import_bech32, __awaiter9, logger29, MAX_CCIP_REDIRECTS, PollableEvents, Event, coinInfos, matcherIpfs, matchers, Resolver, defaultFormatter, nextPollId, BaseProvider;
var init_base_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/base-provider.js"() {
    "use strict";
    init_lib12();
    init_lib17();
    init_lib4();
    init_lib3();
    init_lib8();
    init_lib10();
    init_lib25();
    init_lib2();
    init_lib18();
    init_lib9();
    init_lib27();
    import_bech32 = __toESM(require_bech32());
    init_lib();
    init_version21();
    init_formatter();
    __awaiter9 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger29 = new Logger(version21);
    MAX_CCIP_REDIRECTS = 10;
    PollableEvents = ["block", "network", "pending", "poll"];
    Event = class {
      constructor(tag, listener, once) {
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "listener", listener);
        defineReadOnly(this, "once", once);
        this._lastBlockNumber = -2;
        this._inflight = false;
      }
      get event() {
        switch (this.type) {
          case "tx":
            return this.hash;
          case "filter":
            return this.filter;
        }
        return this.tag;
      }
      get type() {
        return this.tag.split(":")[0];
      }
      get hash() {
        const comps = this.tag.split(":");
        if (comps[0] !== "tx") {
          return null;
        }
        return comps[1];
      }
      get filter() {
        const comps = this.tag.split(":");
        if (comps[0] !== "filter") {
          return null;
        }
        const address = comps[1];
        const topics = deserializeTopics(comps[2]);
        const filter = {};
        if (topics.length > 0) {
          filter.topics = topics;
        }
        if (address && address !== "*") {
          filter.address = address;
        }
        return filter;
      }
      pollable() {
        return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
      }
    };
    coinInfos = {
      "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
      "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
      "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
      "60": { symbol: "eth", ilk: "eth" },
      "61": { symbol: "etc", ilk: "eth" },
      "700": { symbol: "xdai", ilk: "eth" }
    };
    matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    Resolver = class {
      constructor(provider, address, name2, resolvedAddress) {
        defineReadOnly(this, "provider", provider);
        defineReadOnly(this, "name", name2);
        defineReadOnly(this, "address", provider.formatter.address(address));
        defineReadOnly(this, "_resolvedAddress", resolvedAddress);
      }
      supportsWildcard() {
        if (!this._supportsEip2544) {
          this._supportsEip2544 = this.provider.call({
            to: this.address,
            data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
          }).then((result) => {
            return BigNumber.from(result).eq(1);
          }).catch((error) => {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return false;
            }
            this._supportsEip2544 = null;
            throw error;
          });
        }
        return this._supportsEip2544;
      }
      _fetch(selector, parameters) {
        return __awaiter9(this, void 0, void 0, function* () {
          const tx = {
            to: this.address,
            ccipReadEnabled: true,
            data: hexConcat([selector, namehash(this.name), parameters || "0x"])
          };
          let parseBytes = false;
          if (yield this.supportsWildcard()) {
            parseBytes = true;
            tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
          }
          try {
            let result = yield this.provider.call(tx);
            if (arrayify(result).length % 32 === 4) {
              logger29.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                transaction: tx,
                data: result
              });
            }
            if (parseBytes) {
              result = _parseBytes(result, 0);
            }
            return result;
          } catch (error) {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return null;
            }
            throw error;
          }
        });
      }
      _fetchBytes(selector, parameters) {
        return __awaiter9(this, void 0, void 0, function* () {
          const result = yield this._fetch(selector, parameters);
          if (result != null) {
            return _parseBytes(result, 0);
          }
          return null;
        });
      }
      _getAddress(coinType, hexBytes) {
        const coinInfo = coinInfos[String(coinType)];
        if (coinInfo == null) {
          logger29.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: `getAddress(${coinType})`
          });
        }
        if (coinInfo.ilk === "eth") {
          return this.provider.formatter.address(hexBytes);
        }
        const bytes = arrayify(hexBytes);
        if (coinInfo.p2pkh != null) {
          const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
          if (p2pkh) {
            const length = parseInt(p2pkh[1], 16);
            if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
              return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
            }
          }
        }
        if (coinInfo.p2sh != null) {
          const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
          if (p2sh) {
            const length = parseInt(p2sh[1], 16);
            if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
              return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
            }
          }
        }
        if (coinInfo.prefix != null) {
          const length = bytes[1];
          let version25 = bytes[0];
          if (version25 === 0) {
            if (length !== 20 && length !== 32) {
              version25 = -1;
            }
          } else {
            version25 = -1;
          }
          if (version25 >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
            const words2 = import_bech32.default.toWords(bytes.slice(2));
            words2.unshift(version25);
            return import_bech32.default.encode(coinInfo.prefix, words2);
          }
        }
        return null;
      }
      getAddress(coinType) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (coinType == null) {
            coinType = 60;
          }
          if (coinType === 60) {
            try {
              const result = yield this._fetch("0x3b3b57de");
              if (result === "0x" || result === HashZero) {
                return null;
              }
              return this.provider.formatter.callAddress(result);
            } catch (error) {
              if (error.code === Logger.errors.CALL_EXCEPTION) {
                return null;
              }
              throw error;
            }
          }
          const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          const address = this._getAddress(coinType, hexBytes);
          if (address == null) {
            logger29.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
              operation: `getAddress(${coinType})`,
              coinType,
              data: hexBytes
            });
          }
          return address;
        });
      }
      getAvatar() {
        return __awaiter9(this, void 0, void 0, function* () {
          const linkage = [{ type: "name", content: this.name }];
          try {
            const avatar = yield this.getText("avatar");
            if (avatar == null) {
              return null;
            }
            for (let i4 = 0; i4 < matchers.length; i4++) {
              const match = avatar.match(matchers[i4]);
              if (match == null) {
                continue;
              }
              const scheme = match[1].toLowerCase();
              switch (scheme) {
                case "https":
                  linkage.push({ type: "url", content: avatar });
                  return { linkage, url: avatar };
                case "data":
                  linkage.push({ type: "data", content: avatar });
                  return { linkage, url: avatar };
                case "ipfs":
                  linkage.push({ type: "ipfs", content: avatar });
                  return { linkage, url: getIpfsLink(avatar) };
                case "erc721":
                case "erc1155": {
                  const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                  linkage.push({ type: scheme, content: avatar });
                  const owner = this._resolvedAddress || (yield this.getAddress());
                  const comps = (match[2] || "").split("/");
                  if (comps.length !== 2) {
                    return null;
                  }
                  const addr = yield this.provider.formatter.address(comps[0]);
                  const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                  if (scheme === "erc721") {
                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                      to: addr,
                      data: hexConcat(["0x6352211e", tokenId])
                    }));
                    if (owner !== tokenOwner) {
                      return null;
                    }
                    linkage.push({ type: "owner", content: tokenOwner });
                  } else if (scheme === "erc1155") {
                    const balance = BigNumber.from(yield this.provider.call({
                      to: addr,
                      data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                    }));
                    if (balance.isZero()) {
                      return null;
                    }
                    linkage.push({ type: "balance", content: balance.toString() });
                  }
                  const tx = {
                    to: this.provider.formatter.address(comps[0]),
                    data: hexConcat([selector, tokenId])
                  };
                  let metadataUrl = _parseString(yield this.provider.call(tx), 0);
                  if (metadataUrl == null) {
                    return null;
                  }
                  linkage.push({ type: "metadata-url-base", content: metadataUrl });
                  if (scheme === "erc1155") {
                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                  }
                  if (metadataUrl.match(/^ipfs:/i)) {
                    metadataUrl = getIpfsLink(metadataUrl);
                  }
                  linkage.push({ type: "metadata-url", content: metadataUrl });
                  const metadata = yield fetchJson(metadataUrl);
                  if (!metadata) {
                    return null;
                  }
                  linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                  let imageUrl = metadata.image;
                  if (typeof imageUrl !== "string") {
                    return null;
                  }
                  if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                  } else {
                    const ipfs = imageUrl.match(matcherIpfs);
                    if (ipfs == null) {
                      return null;
                    }
                    linkage.push({ type: "url-ipfs", content: imageUrl });
                    imageUrl = getIpfsLink(imageUrl);
                  }
                  linkage.push({ type: "url", content: imageUrl });
                  return { linkage, url: imageUrl };
                }
              }
            }
          } catch (error) {
          }
          return null;
        });
      }
      getContentHash() {
        return __awaiter9(this, void 0, void 0, function* () {
          const hexBytes = yield this._fetchBytes("0xbc1c58d1");
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
          if (ipfs) {
            const length = parseInt(ipfs[3], 16);
            if (ipfs[4].length === length * 2) {
              return "ipfs://" + Base58.encode("0x" + ipfs[1]);
            }
          }
          const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
          if (swarm) {
            if (swarm[1].length === 32 * 2) {
              return "bzz://" + swarm[1];
            }
          }
          return logger29.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "getContentHash()",
            data: hexBytes
          });
        });
      }
      getText(key2) {
        return __awaiter9(this, void 0, void 0, function* () {
          let keyBytes = toUtf8Bytes(key2);
          keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
          if (keyBytes.length % 32 !== 0) {
            keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key2.length % 32)]);
          }
          const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          return toUtf8String(hexBytes);
        });
      }
    };
    defaultFormatter = null;
    nextPollId = 1;
    BaseProvider = class extends Provider {
      constructor(network) {
        logger29.checkNew(new.target, Provider);
        super();
        this._events = [];
        this._emitted = { block: -2 };
        this.disableCcipRead = false;
        this.formatter = new.target.getFormatter();
        defineReadOnly(this, "anyNetwork", network === "any");
        if (this.anyNetwork) {
          network = this.detectNetwork();
        }
        if (network instanceof Promise) {
          this._networkPromise = network;
          network.catch((error) => {
          });
          this._ready().catch((error) => {
          });
        } else {
          const knownNetwork = getStatic(new.target, "getNetwork")(network);
          if (knownNetwork) {
            defineReadOnly(this, "_network", knownNetwork);
            this.emit("network", knownNetwork, null);
          } else {
            logger29.throwArgumentError("invalid network", "network", network);
          }
        }
        this._maxInternalBlockNumber = -1024;
        this._lastBlockNumber = -2;
        this._maxFilterBlockRange = 10;
        this._pollingInterval = 4e3;
        this._fastQueryDate = 0;
      }
      _ready() {
        return __awaiter9(this, void 0, void 0, function* () {
          if (this._network == null) {
            let network = null;
            if (this._networkPromise) {
              try {
                network = yield this._networkPromise;
              } catch (error) {
              }
            }
            if (network == null) {
              network = yield this.detectNetwork();
            }
            if (!network) {
              logger29.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
            }
            if (this._network == null) {
              if (this.anyNetwork) {
                this._network = network;
              } else {
                defineReadOnly(this, "_network", network);
              }
              this.emit("network", network, null);
            }
          }
          return this._network;
        });
      }
      get ready() {
        return poll(() => {
          return this._ready().then((network) => {
            return network;
          }, (error) => {
            if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
              return void 0;
            }
            throw error;
          });
        });
      }
      static getFormatter() {
        if (defaultFormatter == null) {
          defaultFormatter = new Formatter();
        }
        return defaultFormatter;
      }
      static getNetwork(network) {
        return getNetwork(network == null ? "homestead" : network);
      }
      ccipReadFetch(tx, calldata, urls) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (this.disableCcipRead || urls.length === 0) {
            return null;
          }
          const sender = (tx.from || "0x0000000000000000000000000000000000000000").toLowerCase();
          const data = calldata.toLowerCase();
          const errorMessages = [];
          for (let i4 = 0; i4 < urls.length; i4++) {
            const url = urls[i4];
            const href = url.replace("{sender}", sender).replace("{data}", data);
            const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({ data, sender });
            const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
              value.status = response.statusCode;
              return value;
            });
            if (result.data) {
              return result.data;
            }
            const errorMessage = result.message || "unknown error";
            if (result.status >= 400 && result.status < 500) {
              return logger29.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
            }
            errorMessages.push(errorMessage);
          }
          return logger29.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m3) => JSON.stringify(m3)).join(", ")}`, Logger.errors.SERVER_ERROR, {
            urls,
            errorMessages
          });
        });
      }
      _getInternalBlockNumber(maxAge) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this._ready();
          if (maxAge > 0) {
            while (this._internalBlockNumber) {
              const internalBlockNumber = this._internalBlockNumber;
              try {
                const result = yield internalBlockNumber;
                if (getTime() - result.respTime <= maxAge) {
                  return result.blockNumber;
                }
                break;
              } catch (error) {
                if (this._internalBlockNumber === internalBlockNumber) {
                  break;
                }
              }
            }
          }
          const reqTime = getTime();
          const checkInternalBlockNumber = resolveProperties({
            blockNumber: this.perform("getBlockNumber", {}),
            networkError: this.getNetwork().then((network) => null, (error) => error)
          }).then(({ blockNumber, networkError }) => {
            if (networkError) {
              if (this._internalBlockNumber === checkInternalBlockNumber) {
                this._internalBlockNumber = null;
              }
              throw networkError;
            }
            const respTime = getTime();
            blockNumber = BigNumber.from(blockNumber).toNumber();
            if (blockNumber < this._maxInternalBlockNumber) {
              blockNumber = this._maxInternalBlockNumber;
            }
            this._maxInternalBlockNumber = blockNumber;
            this._setFastBlockNumber(blockNumber);
            return { blockNumber, reqTime, respTime };
          });
          this._internalBlockNumber = checkInternalBlockNumber;
          checkInternalBlockNumber.catch((error) => {
            if (this._internalBlockNumber === checkInternalBlockNumber) {
              this._internalBlockNumber = null;
            }
          });
          return (yield checkInternalBlockNumber).blockNumber;
        });
      }
      poll() {
        return __awaiter9(this, void 0, void 0, function* () {
          const pollId = nextPollId++;
          const runners = [];
          let blockNumber = null;
          try {
            blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
          } catch (error) {
            this.emit("error", error);
            return;
          }
          this._setFastBlockNumber(blockNumber);
          this.emit("poll", pollId, blockNumber);
          if (blockNumber === this._lastBlockNumber) {
            this.emit("didPoll", pollId);
            return;
          }
          if (this._emitted.block === -2) {
            this._emitted.block = blockNumber - 1;
          }
          if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
            logger29.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
            this.emit("error", logger29.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
              blockNumber,
              event: "blockSkew",
              previousBlockNumber: this._emitted.block
            }));
            this.emit("block", blockNumber);
          } else {
            for (let i4 = this._emitted.block + 1; i4 <= blockNumber; i4++) {
              this.emit("block", i4);
            }
          }
          if (this._emitted.block !== blockNumber) {
            this._emitted.block = blockNumber;
            Object.keys(this._emitted).forEach((key2) => {
              if (key2 === "block") {
                return;
              }
              const eventBlockNumber = this._emitted[key2];
              if (eventBlockNumber === "pending") {
                return;
              }
              if (blockNumber - eventBlockNumber > 12) {
                delete this._emitted[key2];
              }
            });
          }
          if (this._lastBlockNumber === -2) {
            this._lastBlockNumber = blockNumber - 1;
          }
          this._events.forEach((event) => {
            switch (event.type) {
              case "tx": {
                const hash3 = event.hash;
                let runner = this.getTransactionReceipt(hash3).then((receipt) => {
                  if (!receipt || receipt.blockNumber == null) {
                    return null;
                  }
                  this._emitted["t:" + hash3] = receipt.blockNumber;
                  this.emit(hash3, receipt);
                  return null;
                }).catch((error) => {
                  this.emit("error", error);
                });
                runners.push(runner);
                break;
              }
              case "filter": {
                if (!event._inflight) {
                  event._inflight = true;
                  const filter = event.filter;
                  filter.fromBlock = event._lastBlockNumber + 1;
                  filter.toBlock = blockNumber;
                  if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {
                    filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
                  }
                  const runner = this.getLogs(filter).then((logs) => {
                    event._inflight = false;
                    if (logs.length === 0) {
                      return;
                    }
                    logs.forEach((log4) => {
                      if (log4.blockNumber > event._lastBlockNumber) {
                        event._lastBlockNumber = log4.blockNumber;
                      }
                      this._emitted["b:" + log4.blockHash] = log4.blockNumber;
                      this._emitted["t:" + log4.transactionHash] = log4.blockNumber;
                      this.emit(filter, log4);
                    });
                  }).catch((error) => {
                    this.emit("error", error);
                    event._inflight = false;
                  });
                  runners.push(runner);
                }
                break;
              }
            }
          });
          this._lastBlockNumber = blockNumber;
          Promise.all(runners).then(() => {
            this.emit("didPoll", pollId);
          }).catch((error) => {
            this.emit("error", error);
          });
          return;
        });
      }
      resetEventsBlock(blockNumber) {
        this._lastBlockNumber = blockNumber - 1;
        if (this.polling) {
          this.poll();
        }
      }
      get network() {
        return this._network;
      }
      detectNetwork() {
        return __awaiter9(this, void 0, void 0, function* () {
          return logger29.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "provider.detectNetwork"
          });
        });
      }
      getNetwork() {
        return __awaiter9(this, void 0, void 0, function* () {
          const network = yield this._ready();
          const currentNetwork = yield this.detectNetwork();
          if (network.chainId !== currentNetwork.chainId) {
            if (this.anyNetwork) {
              this._network = currentNetwork;
              this._lastBlockNumber = -2;
              this._fastBlockNumber = null;
              this._fastBlockNumberPromise = null;
              this._fastQueryDate = 0;
              this._emitted.block = -2;
              this._maxInternalBlockNumber = -1024;
              this._internalBlockNumber = null;
              this.emit("network", currentNetwork, network);
              yield stall(0);
              return this._network;
            }
            const error = logger29.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
              event: "changed",
              network,
              detectedNetwork: currentNetwork
            });
            this.emit("error", error);
            throw error;
          }
          return network;
        });
      }
      get blockNumber() {
        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
          this._setFastBlockNumber(blockNumber);
        }, (error) => {
        });
        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
      }
      get polling() {
        return this._poller != null;
      }
      set polling(value) {
        if (value && !this._poller) {
          this._poller = setInterval(() => {
            this.poll();
          }, this.pollingInterval);
          if (!this._bootstrapPoll) {
            this._bootstrapPoll = setTimeout(() => {
              this.poll();
              this._bootstrapPoll = setTimeout(() => {
                if (!this._poller) {
                  this.poll();
                }
                this._bootstrapPoll = null;
              }, this.pollingInterval);
            }, 0);
          }
        } else if (!value && this._poller) {
          clearInterval(this._poller);
          this._poller = null;
        }
      }
      get pollingInterval() {
        return this._pollingInterval;
      }
      set pollingInterval(value) {
        if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
          throw new Error("invalid polling interval");
        }
        this._pollingInterval = value;
        if (this._poller) {
          clearInterval(this._poller);
          this._poller = setInterval(() => {
            this.poll();
          }, this._pollingInterval);
        }
      }
      _getFastBlockNumber() {
        const now2 = getTime();
        if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
          this._fastQueryDate = now2;
          this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
            }
            return this._fastBlockNumber;
          });
        }
        return this._fastBlockNumberPromise;
      }
      _setFastBlockNumber(blockNumber) {
        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
          return;
        }
        this._fastQueryDate = getTime();
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
          this._fastBlockNumber = blockNumber;
          this._fastBlockNumberPromise = Promise.resolve(blockNumber);
        }
      }
      waitForTransaction(transactionHash, confirmations, timeout) {
        return __awaiter9(this, void 0, void 0, function* () {
          return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
        });
      }
      _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
        return __awaiter9(this, void 0, void 0, function* () {
          const receipt = yield this.getTransactionReceipt(transactionHash);
          if ((receipt ? receipt.confirmations : 0) >= confirmations) {
            return receipt;
          }
          return new Promise((resolve, reject) => {
            const cancelFuncs = [];
            let done = false;
            const alreadyDone = function() {
              if (done) {
                return true;
              }
              done = true;
              cancelFuncs.forEach((func) => {
                func();
              });
              return false;
            };
            const minedHandler = (receipt2) => {
              if (receipt2.confirmations < confirmations) {
                return;
              }
              if (alreadyDone()) {
                return;
              }
              resolve(receipt2);
            };
            this.on(transactionHash, minedHandler);
            cancelFuncs.push(() => {
              this.removeListener(transactionHash, minedHandler);
            });
            if (replaceable) {
              let lastBlockNumber = replaceable.startBlock;
              let scannedBlock = null;
              const replaceHandler = (blockNumber) => __awaiter9(this, void 0, void 0, function* () {
                if (done) {
                  return;
                }
                yield stall(1e3);
                this.getTransactionCount(replaceable.from).then((nonce) => __awaiter9(this, void 0, void 0, function* () {
                  if (done) {
                    return;
                  }
                  if (nonce <= replaceable.nonce) {
                    lastBlockNumber = blockNumber;
                  } else {
                    {
                      const mined = yield this.getTransaction(transactionHash);
                      if (mined && mined.blockNumber != null) {
                        return;
                      }
                    }
                    if (scannedBlock == null) {
                      scannedBlock = lastBlockNumber - 3;
                      if (scannedBlock < replaceable.startBlock) {
                        scannedBlock = replaceable.startBlock;
                      }
                    }
                    while (scannedBlock <= blockNumber) {
                      if (done) {
                        return;
                      }
                      const block = yield this.getBlockWithTransactions(scannedBlock);
                      for (let ti = 0; ti < block.transactions.length; ti++) {
                        const tx = block.transactions[ti];
                        if (tx.hash === transactionHash) {
                          return;
                        }
                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                          if (done) {
                            return;
                          }
                          const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);
                          if (alreadyDone()) {
                            return;
                          }
                          let reason = "replaced";
                          if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                            reason = "repriced";
                          } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                            reason = "cancelled";
                          }
                          reject(logger29.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                            cancelled: reason === "replaced" || reason === "cancelled",
                            reason,
                            replacement: this._wrapTransaction(tx),
                            hash: transactionHash,
                            receipt: receipt2
                          }));
                          return;
                        }
                      }
                      scannedBlock++;
                    }
                  }
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                }), (error) => {
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                });
              });
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
              cancelFuncs.push(() => {
                this.removeListener("block", replaceHandler);
              });
            }
            if (typeof timeout === "number" && timeout > 0) {
              const timer2 = setTimeout(() => {
                if (alreadyDone()) {
                  return;
                }
                reject(logger29.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
              }, timeout);
              if (timer2.unref) {
                timer2.unref();
              }
              cancelFuncs.push(() => {
                clearTimeout(timer2);
              });
            }
          });
        });
      }
      getBlockNumber() {
        return __awaiter9(this, void 0, void 0, function* () {
          return this._getInternalBlockNumber(0);
        });
      }
      getGasPrice() {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const result = yield this.perform("getGasPrice", {});
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getGasPrice",
              result,
              error
            });
          }
        });
      }
      getBalance(addressOrName, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getBalance", params);
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getBalance",
              params,
              result,
              error
            });
          }
        });
      }
      getTransactionCount(addressOrName, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getTransactionCount", params);
          try {
            return BigNumber.from(result).toNumber();
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getTransactionCount",
              params,
              result,
              error
            });
          }
        });
      }
      getCode(addressOrName, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getCode", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getCode",
              params,
              result,
              error
            });
          }
        });
      }
      getStorageAt(addressOrName, position, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag),
            position: Promise.resolve(position).then((p4) => hexValue(p4))
          });
          const result = yield this.perform("getStorageAt", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getStorageAt",
              params,
              result,
              error
            });
          }
        });
      }
      _wrapTransaction(tx, hash3, startBlock) {
        if (hash3 != null && hexDataLength(hash3) !== 32) {
          throw new Error("invalid response - sendTransaction");
        }
        const result = tx;
        if (hash3 != null && tx.hash !== hash3) {
          logger29.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash3 });
        }
        result.wait = (confirms, timeout) => __awaiter9(this, void 0, void 0, function* () {
          if (confirms == null) {
            confirms = 1;
          }
          if (timeout == null) {
            timeout = 0;
          }
          let replacement = void 0;
          if (confirms !== 0 && startBlock != null) {
            replacement = {
              data: tx.data,
              from: tx.from,
              nonce: tx.nonce,
              to: tx.to,
              value: tx.value,
              startBlock
            };
          }
          const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
          if (receipt == null && confirms === 0) {
            return null;
          }
          this._emitted["t:" + tx.hash] = receipt.blockNumber;
          if (receipt.status === 0) {
            logger29.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
              transactionHash: tx.hash,
              transaction: tx,
              receipt
            });
          }
          return receipt;
        });
        return result;
      }
      sendTransaction(signedTransaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const hexTx = yield Promise.resolve(signedTransaction).then((t4) => hexlify(t4));
          const tx = this.formatter.transaction(signedTransaction);
          if (tx.confirmations == null) {
            tx.confirmations = 0;
          }
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          try {
            const hash3 = yield this.perform("sendTransaction", { signedTransaction: hexTx });
            return this._wrapTransaction(tx, hash3, blockNumber);
          } catch (error) {
            error.transaction = tx;
            error.transactionHash = tx.hash;
            throw error;
          }
        });
      }
      _getTransactionRequest(transaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          const values = yield transaction;
          const tx = {};
          ["from", "to"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v4) => v4 ? this._getAddress(v4) : null);
          });
          ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v4) => v4 ? BigNumber.from(v4) : null);
          });
          ["type"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v4) => v4 != null ? v4 : null);
          });
          if (values.accessList) {
            tx.accessList = this.formatter.accessList(values.accessList);
          }
          ["data"].forEach((key2) => {
            if (values[key2] == null) {
              return;
            }
            tx[key2] = Promise.resolve(values[key2]).then((v4) => v4 ? hexlify(v4) : null);
          });
          return this.formatter.transactionRequest(yield resolveProperties(tx));
        });
      }
      _getFilter(filter) {
        return __awaiter9(this, void 0, void 0, function* () {
          filter = yield filter;
          const result = {};
          if (filter.address != null) {
            result.address = this._getAddress(filter.address);
          }
          ["blockHash", "topics"].forEach((key2) => {
            if (filter[key2] == null) {
              return;
            }
            result[key2] = filter[key2];
          });
          ["fromBlock", "toBlock"].forEach((key2) => {
            if (filter[key2] == null) {
              return;
            }
            result[key2] = this._getBlockTag(filter[key2]);
          });
          return this.formatter.filter(yield resolveProperties(result));
        });
      }
      _call(transaction, blockTag, attempt) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (attempt >= MAX_CCIP_REDIRECTS) {
            logger29.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
              redirects: attempt,
              transaction
            });
          }
          const txSender = transaction.to;
          const result = yield this.perform("call", { transaction, blockTag });
          if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && hexDataLength(result) % 32 === 4) {
            try {
              const data = hexDataSlice(result, 4);
              const sender = hexDataSlice(data, 0, 32);
              if (!BigNumber.from(sender).eq(txSender)) {
                logger29.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                  name: "OffchainLookup",
                  signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                  transaction,
                  data: result
                });
              }
              const urls = [];
              const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
              const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
              const urlsData = hexDataSlice(data, urlsOffset + 32);
              for (let u4 = 0; u4 < urlsLength; u4++) {
                const url = _parseString(urlsData, u4 * 32);
                if (url == null) {
                  logger29.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction,
                    data: result
                  });
                }
                urls.push(url);
              }
              const calldata = _parseBytes(data, 64);
              if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                logger29.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                  name: "OffchainLookup",
                  signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                  transaction,
                  data: result
                });
              }
              const callbackSelector = hexDataSlice(data, 96, 100);
              const extraData = _parseBytes(data, 128);
              const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
              if (ccipResult == null) {
                logger29.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                  name: "OffchainLookup",
                  signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                  transaction,
                  data: result
                });
              }
              const tx = {
                to: txSender,
                data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
              };
              return this._call(tx, blockTag, attempt + 1);
            } catch (error) {
              if (error.code === Logger.errors.SERVER_ERROR) {
                throw error;
              }
            }
          }
          try {
            return hexlify(result);
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "call",
              params: { transaction, blockTag },
              result,
              error
            });
          }
        });
      }
      call(transaction, blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const resolved = yield resolveProperties({
            transaction: this._getTransactionRequest(transaction),
            blockTag: this._getBlockTag(blockTag),
            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
          });
          return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
        });
      }
      estimateGas(transaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            transaction: this._getTransactionRequest(transaction)
          });
          const result = yield this.perform("estimateGas", params);
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger29.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "estimateGas",
              params,
              result,
              error
            });
          }
        });
      }
      _getAddress(addressOrName) {
        return __awaiter9(this, void 0, void 0, function* () {
          addressOrName = yield addressOrName;
          if (typeof addressOrName !== "string") {
            logger29.throwArgumentError("invalid address or ENS name", "name", addressOrName);
          }
          const address = yield this.resolveName(addressOrName);
          if (address == null) {
            logger29.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: `resolveName(${JSON.stringify(addressOrName)})`
            });
          }
          return address;
        });
      }
      _getBlock(blockHashOrBlockTag, includeTransactions) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          blockHashOrBlockTag = yield blockHashOrBlockTag;
          let blockNumber = -128;
          const params = {
            includeTransactions: !!includeTransactions
          };
          if (isHexString(blockHashOrBlockTag, 32)) {
            params.blockHash = blockHashOrBlockTag;
          } else {
            try {
              params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
              if (isHexString(params.blockTag)) {
                blockNumber = parseInt(params.blockTag.substring(2), 16);
              }
            } catch (error) {
              logger29.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
            }
          }
          return poll(() => __awaiter9(this, void 0, void 0, function* () {
            const block = yield this.perform("getBlock", params);
            if (block == null) {
              if (params.blockHash != null) {
                if (this._emitted["b:" + params.blockHash] == null) {
                  return null;
                }
              }
              if (params.blockTag != null) {
                if (blockNumber > this._emitted.block) {
                  return null;
                }
              }
              return void 0;
            }
            if (includeTransactions) {
              let blockNumber2 = null;
              for (let i4 = 0; i4 < block.transactions.length; i4++) {
                const tx = block.transactions[i4];
                if (tx.blockNumber == null) {
                  tx.confirmations = 0;
                } else if (tx.confirmations == null) {
                  if (blockNumber2 == null) {
                    blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                  }
                  let confirmations = blockNumber2 - tx.blockNumber + 1;
                  if (confirmations <= 0) {
                    confirmations = 1;
                  }
                  tx.confirmations = confirmations;
                }
              }
              const blockWithTxs = this.formatter.blockWithTransactions(block);
              blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
              return blockWithTxs;
            }
            return this.formatter.block(block);
          }), { oncePoll: this });
        });
      }
      getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
      }
      getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
      }
      getTransaction(transactionHash) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          transactionHash = yield transactionHash;
          const params = { transactionHash: this.formatter.hash(transactionHash, true) };
          return poll(() => __awaiter9(this, void 0, void 0, function* () {
            const result = yield this.perform("getTransaction", params);
            if (result == null) {
              if (this._emitted["t:" + transactionHash] == null) {
                return null;
              }
              return void 0;
            }
            const tx = this.formatter.transactionResponse(result);
            if (tx.blockNumber == null) {
              tx.confirmations = 0;
            } else if (tx.confirmations == null) {
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - tx.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              tx.confirmations = confirmations;
            }
            return this._wrapTransaction(tx);
          }), { oncePoll: this });
        });
      }
      getTransactionReceipt(transactionHash) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          transactionHash = yield transactionHash;
          const params = { transactionHash: this.formatter.hash(transactionHash, true) };
          return poll(() => __awaiter9(this, void 0, void 0, function* () {
            const result = yield this.perform("getTransactionReceipt", params);
            if (result == null) {
              if (this._emitted["t:" + transactionHash] == null) {
                return null;
              }
              return void 0;
            }
            if (result.blockHash == null) {
              return void 0;
            }
            const receipt = this.formatter.receipt(result);
            if (receipt.blockNumber == null) {
              receipt.confirmations = 0;
            } else if (receipt.confirmations == null) {
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - receipt.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              receipt.confirmations = confirmations;
            }
            return receipt;
          }), { oncePoll: this });
        });
      }
      getLogs(filter) {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({ filter: this._getFilter(filter) });
          const logs = yield this.perform("getLogs", params);
          logs.forEach((log4) => {
            if (log4.removed == null) {
              log4.removed = false;
            }
          });
          return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
        });
      }
      getEtherPrice() {
        return __awaiter9(this, void 0, void 0, function* () {
          yield this.getNetwork();
          return this.perform("getEtherPrice", {});
        });
      }
      _getBlockTag(blockTag) {
        return __awaiter9(this, void 0, void 0, function* () {
          blockTag = yield blockTag;
          if (typeof blockTag === "number" && blockTag < 0) {
            if (blockTag % 1) {
              logger29.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
            }
            let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            blockNumber += blockTag;
            if (blockNumber < 0) {
              blockNumber = 0;
            }
            return this.formatter.blockTag(blockNumber);
          }
          return this.formatter.blockTag(blockTag);
        });
      }
      getResolver(name2) {
        return __awaiter9(this, void 0, void 0, function* () {
          let currentName = name2;
          while (true) {
            if (currentName === "" || currentName === ".") {
              return null;
            }
            if (name2 !== "eth" && currentName === "eth") {
              return null;
            }
            const addr = yield this._getResolver(currentName, "getResolver");
            if (addr != null) {
              const resolver = new Resolver(this, addr, name2);
              if (currentName !== name2 && !(yield resolver.supportsWildcard())) {
                return null;
              }
              return resolver;
            }
            currentName = currentName.split(".").slice(1).join(".");
          }
        });
      }
      _getResolver(name2, operation) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (operation == null) {
            operation = "ENS";
          }
          const network = yield this.getNetwork();
          if (!network.ensAddress) {
            logger29.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
          }
          try {
            const addrData = yield this.call({
              to: network.ensAddress,
              data: "0x0178b8bf" + namehash(name2).substring(2)
            });
            return this.formatter.callAddress(addrData);
          } catch (error) {
          }
          return null;
        });
      }
      resolveName(name2) {
        return __awaiter9(this, void 0, void 0, function* () {
          name2 = yield name2;
          try {
            return Promise.resolve(this.formatter.address(name2));
          } catch (error) {
            if (isHexString(name2)) {
              throw error;
            }
          }
          if (typeof name2 !== "string") {
            logger29.throwArgumentError("invalid ENS name", "name", name2);
          }
          const resolver = yield this.getResolver(name2);
          if (!resolver) {
            return null;
          }
          return yield resolver.getAddress();
        });
      }
      lookupAddress(address) {
        return __awaiter9(this, void 0, void 0, function* () {
          address = yield address;
          address = this.formatter.address(address);
          const node = address.substring(2).toLowerCase() + ".addr.reverse";
          const resolverAddr = yield this._getResolver(node, "lookupAddress");
          if (resolverAddr == null) {
            return null;
          }
          const name2 = _parseString(yield this.call({
            to: resolverAddr,
            data: "0x691f3431" + namehash(node).substring(2)
          }), 0);
          const addr = yield this.resolveName(name2);
          if (addr != address) {
            return null;
          }
          return name2;
        });
      }
      getAvatar(nameOrAddress) {
        return __awaiter9(this, void 0, void 0, function* () {
          let resolver = null;
          if (isHexString(nameOrAddress)) {
            const address = this.formatter.address(nameOrAddress);
            const node = address.substring(2).toLowerCase() + ".addr.reverse";
            const resolverAddress = yield this._getResolver(node, "getAvatar");
            if (!resolverAddress) {
              return null;
            }
            resolver = new Resolver(this, resolverAddress, node);
            try {
              const avatar2 = yield resolver.getAvatar();
              if (avatar2) {
                return avatar2.url;
              }
            } catch (error) {
              if (error.code !== Logger.errors.CALL_EXCEPTION) {
                throw error;
              }
            }
            try {
              const name2 = _parseString(yield this.call({
                to: resolverAddress,
                data: "0x691f3431" + namehash(node).substring(2)
              }), 0);
              resolver = yield this.getResolver(name2);
            } catch (error) {
              if (error.code !== Logger.errors.CALL_EXCEPTION) {
                throw error;
              }
              return null;
            }
          } else {
            resolver = yield this.getResolver(nameOrAddress);
            if (!resolver) {
              return null;
            }
          }
          const avatar = yield resolver.getAvatar();
          if (avatar == null) {
            return null;
          }
          return avatar.url;
        });
      }
      perform(method, params) {
        return logger29.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
      }
      _startEvent(event) {
        this.polling = this._events.filter((e3) => e3.pollable()).length > 0;
      }
      _stopEvent(event) {
        this.polling = this._events.filter((e3) => e3.pollable()).length > 0;
      }
      _addEventListener(eventName, listener, once) {
        const event = new Event(getEventTag2(eventName), listener, once);
        this._events.push(event);
        this._startEvent(event);
        return this;
      }
      on(eventName, listener) {
        return this._addEventListener(eventName, listener, false);
      }
      once(eventName, listener) {
        return this._addEventListener(eventName, listener, true);
      }
      emit(eventName, ...args) {
        let result = false;
        let stopped = [];
        let eventTag = getEventTag2(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag) {
            return true;
          }
          setTimeout(() => {
            event.listener.apply(this, args);
          }, 0);
          result = true;
          if (event.once) {
            stopped.push(event);
            return false;
          }
          return true;
        });
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return result;
      }
      listenerCount(eventName) {
        if (!eventName) {
          return this._events.length;
        }
        let eventTag = getEventTag2(eventName);
        return this._events.filter((event) => {
          return event.tag === eventTag;
        }).length;
      }
      listeners(eventName) {
        if (eventName == null) {
          return this._events.map((event) => event.listener);
        }
        let eventTag = getEventTag2(eventName);
        return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
      }
      off(eventName, listener) {
        if (listener == null) {
          return this.removeAllListeners(eventName);
        }
        const stopped = [];
        let found = false;
        let eventTag = getEventTag2(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag || event.listener != listener) {
            return true;
          }
          if (found) {
            return true;
          }
          found = true;
          stopped.push(event);
          return false;
        });
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return this;
      }
      removeAllListeners(eventName) {
        let stopped = [];
        if (eventName == null) {
          stopped = this._events;
          this._events = [];
        } else {
          const eventTag = getEventTag2(eventName);
          this._events = this._events.filter((event) => {
            if (event.tag !== eventTag) {
              return true;
            }
            stopped.push(event);
            return false;
          });
        }
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return this;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js
function checkError(method, error, params) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e3 = error.error;
    if (e3 && e3.message.match("reverted") && isHexString(e3.data)) {
      return e3.data;
    }
    logger30.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
      error,
      data: "0x"
    });
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }
  message = (message || "").toLowerCase();
  const transaction = params.transaction || params.signedTransaction;
  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
    logger30.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/nonce too low/)) {
    logger30.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/replacement transaction underpriced/)) {
    logger30.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/only replay-protected/)) {
    logger30.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
      error,
      method,
      transaction
    });
  }
  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
    logger30.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
function timer(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function getResult(payload) {
  if (payload.error) {
    const error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }
  return payload.result;
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
var __awaiter10, logger30, errorGas, _constructorGuard5, JsonRpcSigner, UncheckedJsonRpcSigner, allowedTransactionKeys4, JsonRpcProvider;
var init_json_rpc_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"() {
    "use strict";
    init_lib13();
    init_lib4();
    init_lib3();
    init_lib10();
    init_lib2();
    init_lib9();
    init_lib15();
    init_lib27();
    init_lib();
    init_version21();
    init_base_provider();
    __awaiter10 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger30 = new Logger(version21);
    errorGas = ["call", "estimateGas"];
    _constructorGuard5 = {};
    JsonRpcSigner = class extends Signer {
      constructor(constructorGuard, provider, addressOrIndex) {
        logger30.checkNew(new.target, JsonRpcSigner);
        super();
        if (constructorGuard !== _constructorGuard5) {
          throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
        }
        defineReadOnly(this, "provider", provider);
        if (addressOrIndex == null) {
          addressOrIndex = 0;
        }
        if (typeof addressOrIndex === "string") {
          defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
          defineReadOnly(this, "_index", null);
        } else if (typeof addressOrIndex === "number") {
          defineReadOnly(this, "_index", addressOrIndex);
          defineReadOnly(this, "_address", null);
        } else {
          logger30.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
        }
      }
      connect(provider) {
        return logger30.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "connect"
        });
      }
      connectUnchecked() {
        return new UncheckedJsonRpcSigner(_constructorGuard5, this.provider, this._address || this._index);
      }
      getAddress() {
        if (this._address) {
          return Promise.resolve(this._address);
        }
        return this.provider.send("eth_accounts", []).then((accounts) => {
          if (accounts.length <= this._index) {
            logger30.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "getAddress"
            });
          }
          return this.provider.formatter.address(accounts[this._index]);
        });
      }
      sendUncheckedTransaction(transaction) {
        transaction = shallowCopy(transaction);
        const fromAddress = this.getAddress().then((address) => {
          if (address) {
            address = address.toLowerCase();
          }
          return address;
        });
        if (transaction.gasLimit == null) {
          const estimate = shallowCopy(transaction);
          estimate.from = fromAddress;
          transaction.gasLimit = this.provider.estimateGas(estimate);
        }
        if (transaction.to != null) {
          transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter10(this, void 0, void 0, function* () {
            if (to == null) {
              return null;
            }
            const address = yield this.provider.resolveName(to);
            if (address == null) {
              logger30.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
            }
            return address;
          }));
        }
        return resolveProperties({
          tx: resolveProperties(transaction),
          sender: fromAddress
        }).then(({ tx, sender }) => {
          if (tx.from != null) {
            if (tx.from.toLowerCase() !== sender) {
              logger30.throwArgumentError("from address mismatch", "transaction", transaction);
            }
          } else {
            tx.from = sender;
          }
          const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
          return this.provider.send("eth_sendTransaction", [hexTx]).then((hash3) => {
            return hash3;
          }, (error) => {
            return checkError("sendTransaction", error, hexTx);
          });
        });
      }
      signTransaction(transaction) {
        return logger30.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "signTransaction"
        });
      }
      sendTransaction(transaction) {
        return __awaiter10(this, void 0, void 0, function* () {
          const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
          const hash3 = yield this.sendUncheckedTransaction(transaction);
          try {
            return yield poll(() => __awaiter10(this, void 0, void 0, function* () {
              const tx = yield this.provider.getTransaction(hash3);
              if (tx === null) {
                return void 0;
              }
              return this.provider._wrapTransaction(tx, hash3, blockNumber);
            }), { oncePoll: this.provider });
          } catch (error) {
            error.transactionHash = hash3;
            throw error;
          }
        });
      }
      signMessage(message) {
        return __awaiter10(this, void 0, void 0, function* () {
          const data = typeof message === "string" ? toUtf8Bytes(message) : message;
          const address = yield this.getAddress();
          return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
        });
      }
      _legacySignMessage(message) {
        return __awaiter10(this, void 0, void 0, function* () {
          const data = typeof message === "string" ? toUtf8Bytes(message) : message;
          const address = yield this.getAddress();
          return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
        });
      }
      _signTypedData(domain, types, value) {
        return __awaiter10(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
            return this.provider.resolveName(name2);
          });
          const address = yield this.getAddress();
          return yield this.provider.send("eth_signTypedData_v4", [
            address.toLowerCase(),
            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
          ]);
        });
      }
      unlock(password) {
        return __awaiter10(this, void 0, void 0, function* () {
          const provider = this.provider;
          const address = yield this.getAddress();
          return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
        });
      }
    };
    UncheckedJsonRpcSigner = class extends JsonRpcSigner {
      sendTransaction(transaction) {
        return this.sendUncheckedTransaction(transaction).then((hash3) => {
          return {
            hash: hash3,
            nonce: null,
            gasLimit: null,
            gasPrice: null,
            data: null,
            value: null,
            chainId: null,
            confirmations: 0,
            from: null,
            wait: (confirmations) => {
              return this.provider.waitForTransaction(hash3, confirmations);
            }
          };
        });
      }
    };
    allowedTransactionKeys4 = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true
    };
    JsonRpcProvider = class extends BaseProvider {
      constructor(url, network) {
        logger30.checkNew(new.target, JsonRpcProvider);
        let networkOrReady = network;
        if (networkOrReady == null) {
          networkOrReady = new Promise((resolve, reject) => {
            setTimeout(() => {
              this.detectNetwork().then((network2) => {
                resolve(network2);
              }, (error) => {
                reject(error);
              });
            }, 0);
          });
        }
        super(networkOrReady);
        if (!url) {
          url = getStatic(this.constructor, "defaultUrl")();
        }
        if (typeof url === "string") {
          defineReadOnly(this, "connection", Object.freeze({
            url
          }));
        } else {
          defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
        }
        this._nextId = 42;
      }
      get _cache() {
        if (this._eventLoopCache == null) {
          this._eventLoopCache = {};
        }
        return this._eventLoopCache;
      }
      static defaultUrl() {
        return "http://localhost:8545";
      }
      detectNetwork() {
        if (!this._cache["detectNetwork"]) {
          this._cache["detectNetwork"] = this._uncachedDetectNetwork();
          setTimeout(() => {
            this._cache["detectNetwork"] = null;
          }, 0);
        }
        return this._cache["detectNetwork"];
      }
      _uncachedDetectNetwork() {
        return __awaiter10(this, void 0, void 0, function* () {
          yield timer(0);
          let chainId = null;
          try {
            chainId = yield this.send("eth_chainId", []);
          } catch (error) {
            try {
              chainId = yield this.send("net_version", []);
            } catch (error2) {
            }
          }
          if (chainId != null) {
            const getNetwork2 = getStatic(this.constructor, "getNetwork");
            try {
              return getNetwork2(BigNumber.from(chainId).toNumber());
            } catch (error) {
              return logger30.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                chainId,
                event: "invalidNetwork",
                serverError: error
              });
            }
          }
          return logger30.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
            event: "noNetwork"
          });
        });
      }
      getSigner(addressOrIndex) {
        return new JsonRpcSigner(_constructorGuard5, this, addressOrIndex);
      }
      getUncheckedSigner(addressOrIndex) {
        return this.getSigner(addressOrIndex).connectUnchecked();
      }
      listAccounts() {
        return this.send("eth_accounts", []).then((accounts) => {
          return accounts.map((a4) => this.formatter.address(a4));
        });
      }
      send(method, params) {
        const request = {
          method,
          params,
          id: this._nextId++,
          jsonrpc: "2.0"
        };
        this.emit("debug", {
          action: "request",
          request: deepCopy(request),
          provider: this
        });
        const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
        if (cache && this._cache[method]) {
          return this._cache[method];
        }
        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
          this.emit("debug", {
            action: "response",
            request,
            response: result2,
            provider: this
          });
          return result2;
        }, (error) => {
          this.emit("debug", {
            action: "response",
            error,
            request,
            provider: this
          });
          throw error;
        });
        if (cache) {
          this._cache[method] = result;
          setTimeout(() => {
            this._cache[method] = null;
          }, 0);
        }
        return result;
      }
      prepareRequest(method, params) {
        switch (method) {
          case "getBlockNumber":
            return ["eth_blockNumber", []];
          case "getGasPrice":
            return ["eth_gasPrice", []];
          case "getBalance":
            return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
          case "getTransactionCount":
            return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
          case "getCode":
            return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
          case "getStorageAt":
            return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
          case "sendTransaction":
            return ["eth_sendRawTransaction", [params.signedTransaction]];
          case "getBlock":
            if (params.blockTag) {
              return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
            } else if (params.blockHash) {
              return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
            }
            return null;
          case "getTransaction":
            return ["eth_getTransactionByHash", [params.transactionHash]];
          case "getTransactionReceipt":
            return ["eth_getTransactionReceipt", [params.transactionHash]];
          case "call": {
            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
          }
          case "estimateGas": {
            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
          }
          case "getLogs":
            if (params.filter && params.filter.address != null) {
              params.filter.address = getLowerCase(params.filter.address);
            }
            return ["eth_getLogs", [params.filter]];
          default:
            break;
        }
        return null;
      }
      perform(method, params) {
        return __awaiter10(this, void 0, void 0, function* () {
          if (method === "call" || method === "estimateGas") {
            const tx = params.transaction;
            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
              if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                const feeData = yield this.getFeeData();
                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                  params = shallowCopy(params);
                  params.transaction = shallowCopy(tx);
                  delete params.transaction.type;
                }
              }
            }
          }
          const args = this.prepareRequest(method, params);
          if (args == null) {
            logger30.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
          }
          try {
            return yield this.send(args[0], args[1]);
          } catch (error) {
            return checkError(method, error, params);
          }
        });
      }
      _startEvent(event) {
        if (event.tag === "pending") {
          this._startPending();
        }
        super._startEvent(event);
      }
      _startPending() {
        if (this._pendingFilter != null) {
          return;
        }
        const self2 = this;
        const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
        this._pendingFilter = pendingFilter;
        pendingFilter.then(function(filterId) {
          function poll2() {
            self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
              if (self2._pendingFilter != pendingFilter) {
                return null;
              }
              let seq = Promise.resolve();
              hashes.forEach(function(hash3) {
                self2._emitted["t:" + hash3.toLowerCase()] = "pending";
                seq = seq.then(function() {
                  return self2.getTransaction(hash3).then(function(tx) {
                    self2.emit("pending", tx);
                    return null;
                  });
                });
              });
              return seq.then(function() {
                return timer(1e3);
              });
            }).then(function() {
              if (self2._pendingFilter != pendingFilter) {
                self2.send("eth_uninstallFilter", [filterId]);
                return;
              }
              setTimeout(function() {
                poll2();
              }, 0);
              return null;
            }).catch((error) => {
            });
          }
          poll2();
          return filterId;
        }).catch((error) => {
        });
      }
      _stopEvent(event) {
        if (event.tag === "pending" && this.listenerCount("pending") === 0) {
          this._pendingFilter = null;
        }
        super._stopEvent(event);
      }
      static hexlifyTransaction(transaction, allowExtra) {
        const allowed = shallowCopy(allowedTransactionKeys4);
        if (allowExtra) {
          for (const key2 in allowExtra) {
            if (allowExtra[key2]) {
              allowed[key2] = true;
            }
          }
        }
        checkProperties(transaction, allowed);
        const result = {};
        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key2) {
          if (transaction[key2] == null) {
            return;
          }
          const value = hexValue(transaction[key2]);
          if (key2 === "gasLimit") {
            key2 = "gas";
          }
          result[key2] = value;
        });
        ["from", "to", "data"].forEach(function(key2) {
          if (transaction[key2] == null) {
            return;
          }
          result[key2] = hexlify(transaction[key2]);
        });
        if (transaction.accessList) {
          result["accessList"] = accessListify(transaction.accessList);
        }
        return result;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/ws.js
var WS;
var init_ws = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/ws.js"() {
    "use strict";
    init_lib();
    init_version21();
    WS = null;
    try {
      WS = WebSocket;
      if (WS == null) {
        throw new Error("inject please");
      }
    } catch (error) {
      const logger45 = new Logger(version21);
      WS = function() {
        logger45.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new WebSocket()"
        });
      };
    }
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
var __awaiter11, logger31, NextId, WebSocketProvider;
var init_websocket_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js"() {
    "use strict";
    init_lib4();
    init_lib2();
    init_json_rpc_provider();
    init_ws();
    init_lib();
    init_version21();
    __awaiter11 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger31 = new Logger(version21);
    NextId = 1;
    WebSocketProvider = class extends JsonRpcProvider {
      constructor(url, network) {
        if (network === "any") {
          logger31.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "network:any"
          });
        }
        if (typeof url === "string") {
          super(url, network);
        } else {
          super("_websocket", network);
        }
        this._pollingInterval = -1;
        this._wsReady = false;
        if (typeof url === "string") {
          defineReadOnly(this, "_websocket", new WS(this.connection.url));
        } else {
          defineReadOnly(this, "_websocket", url);
        }
        defineReadOnly(this, "_requests", {});
        defineReadOnly(this, "_subs", {});
        defineReadOnly(this, "_subIds", {});
        defineReadOnly(this, "_detectNetwork", super.detectNetwork());
        this.websocket.onopen = () => {
          this._wsReady = true;
          Object.keys(this._requests).forEach((id2) => {
            this.websocket.send(this._requests[id2].payload);
          });
        };
        this.websocket.onmessage = (messageEvent) => {
          const data = messageEvent.data;
          const result = JSON.parse(data);
          if (result.id != null) {
            const id2 = String(result.id);
            const request = this._requests[id2];
            delete this._requests[id2];
            if (result.result !== void 0) {
              request.callback(null, result.result);
              this.emit("debug", {
                action: "response",
                request: JSON.parse(request.payload),
                response: result.result,
                provider: this
              });
            } else {
              let error = null;
              if (result.error) {
                error = new Error(result.error.message || "unknown error");
                defineReadOnly(error, "code", result.error.code || null);
                defineReadOnly(error, "response", data);
              } else {
                error = new Error("unknown error");
              }
              request.callback(error, void 0);
              this.emit("debug", {
                action: "response",
                error,
                request: JSON.parse(request.payload),
                provider: this
              });
            }
          } else if (result.method === "eth_subscription") {
            const sub = this._subs[result.params.subscription];
            if (sub) {
              sub.processFunc(result.params.result);
            }
          } else {
            console.warn("this should not happen");
          }
        };
        const fauxPoll = setInterval(() => {
          this.emit("poll");
        }, 1e3);
        if (fauxPoll.unref) {
          fauxPoll.unref();
        }
      }
      get websocket() {
        return this._websocket;
      }
      detectNetwork() {
        return this._detectNetwork;
      }
      get pollingInterval() {
        return 0;
      }
      resetEventsBlock(blockNumber) {
        logger31.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "resetEventBlock"
        });
      }
      set pollingInterval(value) {
        logger31.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPollingInterval"
        });
      }
      poll() {
        return __awaiter11(this, void 0, void 0, function* () {
          return null;
        });
      }
      set polling(value) {
        if (!value) {
          return;
        }
        logger31.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPolling"
        });
      }
      send(method, params) {
        const rid = NextId++;
        return new Promise((resolve, reject) => {
          function callback(error, result) {
            if (error) {
              return reject(error);
            }
            return resolve(result);
          }
          const payload = JSON.stringify({
            method,
            params,
            id: rid,
            jsonrpc: "2.0"
          });
          this.emit("debug", {
            action: "request",
            request: JSON.parse(payload),
            provider: this
          });
          this._requests[String(rid)] = { callback, payload };
          if (this._wsReady) {
            this.websocket.send(payload);
          }
        });
      }
      static defaultUrl() {
        return "ws://localhost:8546";
      }
      _subscribe(tag, param, processFunc) {
        return __awaiter11(this, void 0, void 0, function* () {
          let subIdPromise = this._subIds[tag];
          if (subIdPromise == null) {
            subIdPromise = Promise.all(param).then((param2) => {
              return this.send("eth_subscribe", param2);
            });
            this._subIds[tag] = subIdPromise;
          }
          const subId = yield subIdPromise;
          this._subs[subId] = { tag, processFunc };
        });
      }
      _startEvent(event) {
        switch (event.type) {
          case "block":
            this._subscribe("block", ["newHeads"], (result) => {
              const blockNumber = BigNumber.from(result.number).toNumber();
              this._emitted.block = blockNumber;
              this.emit("block", blockNumber);
            });
            break;
          case "pending":
            this._subscribe("pending", ["newPendingTransactions"], (result) => {
              this.emit("pending", result);
            });
            break;
          case "filter":
            this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
              if (result.removed == null) {
                result.removed = false;
              }
              this.emit(event.filter, this.formatter.filterLog(result));
            });
            break;
          case "tx": {
            const emitReceipt = (event2) => {
              const hash3 = event2.hash;
              this.getTransactionReceipt(hash3).then((receipt) => {
                if (!receipt) {
                  return;
                }
                this.emit(hash3, receipt);
              });
            };
            emitReceipt(event);
            this._subscribe("tx", ["newHeads"], (result) => {
              this._events.filter((e3) => e3.type === "tx").forEach(emitReceipt);
            });
            break;
          }
          case "debug":
          case "poll":
          case "willPoll":
          case "didPoll":
          case "error":
            break;
          default:
            console.log("unhandled:", event);
            break;
        }
      }
      _stopEvent(event) {
        let tag = event.tag;
        if (event.type === "tx") {
          if (this._events.filter((e3) => e3.type === "tx").length) {
            return;
          }
          tag = "tx";
        } else if (this.listenerCount(event.event)) {
          return;
        }
        const subId = this._subIds[tag];
        if (!subId) {
          return;
        }
        delete this._subIds[tag];
        subId.then((subId2) => {
          if (!this._subs[subId2]) {
            return;
          }
          delete this._subs[subId2];
          this.send("eth_unsubscribe", [subId2]);
        });
      }
      destroy() {
        return __awaiter11(this, void 0, void 0, function* () {
          if (this.websocket.readyState === WS.CONNECTING) {
            yield new Promise((resolve) => {
              this.websocket.onopen = function() {
                resolve(true);
              };
              this.websocket.onerror = function() {
                resolve(false);
              };
            });
          }
          this.websocket.close(1e3);
        });
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js
var __awaiter12, logger32, StaticJsonRpcProvider, UrlJsonRpcProvider;
var init_url_json_rpc_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version21();
    init_json_rpc_provider();
    __awaiter12 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger32 = new Logger(version21);
    StaticJsonRpcProvider = class extends JsonRpcProvider {
      detectNetwork() {
        const _super = Object.create(null, {
          detectNetwork: { get: () => super.detectNetwork }
        });
        return __awaiter12(this, void 0, void 0, function* () {
          let network = this.network;
          if (network == null) {
            network = yield _super.detectNetwork.call(this);
            if (!network) {
              logger32.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
            }
            if (this._network == null) {
              defineReadOnly(this, "_network", network);
              this.emit("network", network, null);
            }
          }
          return network;
        });
      }
    };
    UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
      constructor(network, apiKey) {
        logger32.checkAbstract(new.target, UrlJsonRpcProvider);
        network = getStatic(new.target, "getNetwork")(network);
        apiKey = getStatic(new.target, "getApiKey")(apiKey);
        const connection = getStatic(new.target, "getUrl")(network, apiKey);
        super(connection, network);
        if (typeof apiKey === "string") {
          defineReadOnly(this, "apiKey", apiKey);
        } else if (apiKey != null) {
          Object.keys(apiKey).forEach((key2) => {
            defineReadOnly(this, key2, apiKey[key2]);
          });
        }
      }
      _startPending() {
        logger32.warn("WARNING: API provider does not support pending filters");
      }
      isCommunityResource() {
        return false;
      }
      getSigner(address) {
        return logger32.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
      }
      listAccounts() {
        return Promise.resolve([]);
      }
      static getApiKey(apiKey) {
        return apiKey;
      }
      static getUrl(network, apiKey) {
        return logger32.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
          operation: "getUrl"
        });
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
var logger33, defaultApiKey, AlchemyWebSocketProvider, AlchemyProvider;
var init_alchemy_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js"() {
    "use strict";
    init_lib2();
    init_formatter();
    init_websocket_provider();
    init_lib();
    init_version21();
    init_url_json_rpc_provider();
    logger33 = new Logger(version21);
    defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    AlchemyWebSocketProvider = class extends WebSocketProvider {
      constructor(network, apiKey) {
        const provider = new AlchemyProvider(network, apiKey);
        const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
        super(url, provider.network);
        defineReadOnly(this, "apiKey", provider.apiKey);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    AlchemyProvider = class extends UrlJsonRpcProvider {
      static getWebSocketProvider(network, apiKey) {
        return new AlchemyWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
        if (apiKey == null) {
          return defaultApiKey;
        }
        if (apiKey && typeof apiKey !== "string") {
          logger33.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "eth-mainnet.alchemyapi.io/v2/";
            break;
          case "ropsten":
            host = "eth-ropsten.alchemyapi.io/v2/";
            break;
          case "rinkeby":
            host = "eth-rinkeby.alchemyapi.io/v2/";
            break;
          case "goerli":
            host = "eth-goerli.alchemyapi.io/v2/";
            break;
          case "kovan":
            host = "eth-kovan.alchemyapi.io/v2/";
            break;
          case "matic":
            host = "polygon-mainnet.g.alchemy.com/v2/";
            break;
          case "maticmum":
            host = "polygon-mumbai.g.alchemy.com/v2/";
            break;
          case "arbitrum":
            host = "arb-mainnet.g.alchemy.com/v2/";
            break;
          case "arbitrum-rinkeby":
            host = "arb-rinkeby.g.alchemy.com/v2/";
            break;
          case "optimism":
            host = "opt-mainnet.g.alchemy.com/v2/";
            break;
          case "optimism-kovan":
            host = "opt-kovan.g.alchemy.com/v2/";
            break;
          default:
            logger33.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return {
          allowGzip: true,
          url: "https://" + host + apiKey,
          throttleCallback: (attempt, url) => {
            if (apiKey === defaultApiKey) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js
var __awaiter13, logger34, CloudflareProvider;
var init_cloudflare_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js"() {
    "use strict";
    init_url_json_rpc_provider();
    init_lib();
    init_version21();
    __awaiter13 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger34 = new Logger(version21);
    CloudflareProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        if (apiKey != null) {
          logger34.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
        }
        return null;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "https://cloudflare-eth.com/";
            break;
          default:
            logger34.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host;
      }
      perform(method, params) {
        const _super = Object.create(null, {
          perform: { get: () => super.perform }
        });
        return __awaiter13(this, void 0, void 0, function* () {
          if (method === "getBlockNumber") {
            const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
            return block.number;
          }
          return _super.perform.call(this, method, params);
        });
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js
function getTransactionPostData(transaction) {
  const result = {};
  for (let key2 in transaction) {
    if (transaction[key2] == null) {
      continue;
    }
    let value = transaction[key2];
    if (key2 === "type" && value === 0) {
      continue;
    }
    if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key2]) {
      value = hexValue(hexlify(value));
    } else if (key2 === "accessList") {
      value = "[" + accessListify(value).map((set) => {
        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
      }).join(",") + "]";
    } else {
      value = hexlify(value);
    }
    result[key2] = value;
  }
  return result;
}
function getResult2(result) {
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }
  if (result.status != 1 || result.message != "OK") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }
    throw error;
  }
  return result.result;
}
function getJsonResult(result) {
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    const error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }
  if (result.jsonrpc != "2.0") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    throw error;
  }
  if (result.error) {
    const error = new Error(result.error.message || "unknown error");
    if (result.error.code) {
      error.code = result.error.code;
    }
    if (result.error.data) {
      error.data = result.error.data;
    }
    throw error;
  }
  return result.result;
}
function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }
  if (blockTag === "latest") {
    return blockTag;
  }
  return parseInt(blockTag.substring(2), 16);
}
function checkError2(method, error, transaction) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e3 = error.error;
    if (e3 && (e3.message.match(/reverted/i) || e3.message.match(/VM execution error/i))) {
      let data = e3.data;
      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }
      if (isHexString(data)) {
        return data;
      }
      logger35.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
        error,
        data: "0x"
      });
    }
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }
  message = (message || "").toLowerCase();
  if (message.match(/insufficient funds/)) {
    logger35.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger35.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/another transaction with same nonce/)) {
    logger35.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger35.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
var __awaiter14, logger35, defaultApiKey2, EtherscanProvider;
var init_etherscan_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js"() {
    "use strict";
    init_lib3();
    init_lib2();
    init_lib15();
    init_lib27();
    init_formatter();
    init_lib();
    init_version21();
    init_base_provider();
    __awaiter14 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger35 = new Logger(version21);
    defaultApiKey2 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
    EtherscanProvider = class extends BaseProvider {
      constructor(network, apiKey) {
        logger35.checkNew(new.target, EtherscanProvider);
        super(network);
        defineReadOnly(this, "baseUrl", this.getBaseUrl());
        defineReadOnly(this, "apiKey", apiKey || defaultApiKey2);
      }
      getBaseUrl() {
        switch (this.network ? this.network.name : "invalid") {
          case "homestead":
            return "https://api.etherscan.io";
          case "ropsten":
            return "https://api-ropsten.etherscan.io";
          case "rinkeby":
            return "https://api-rinkeby.etherscan.io";
          case "kovan":
            return "https://api-kovan.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          default:
        }
        return logger35.throwArgumentError("unsupported network", "network", name);
      }
      getUrl(module, params) {
        const query = Object.keys(params).reduce((accum, key2) => {
          const value = params[key2];
          if (value != null) {
            accum += `&${key2}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
      }
      getPostUrl() {
        return `${this.baseUrl}/api`;
      }
      getPostData(module, params) {
        params.module = module;
        params.apikey = this.apiKey;
        return params;
      }
      fetch(module, params, post) {
        return __awaiter14(this, void 0, void 0, function* () {
          const url = post ? this.getPostUrl() : this.getUrl(module, params);
          const payload = post ? this.getPostData(module, params) : null;
          const procFunc = module === "proxy" ? getJsonResult : getResult2;
          this.emit("debug", {
            action: "request",
            request: url,
            provider: this
          });
          const connection = {
            url,
            throttleSlotInterval: 1e3,
            throttleCallback: (attempt, url2) => {
              if (this.isCommunityResource()) {
                showThrottleMessage();
              }
              return Promise.resolve(true);
            }
          };
          let payloadStr = null;
          if (payload) {
            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
            payloadStr = Object.keys(payload).map((key2) => {
              return `${key2}=${payload[key2]}`;
            }).join("&");
          }
          const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
          this.emit("debug", {
            action: "response",
            request: url,
            response: deepCopy(result),
            provider: this
          });
          return result;
        });
      }
      detectNetwork() {
        return __awaiter14(this, void 0, void 0, function* () {
          return this.network;
        });
      }
      perform(method, params) {
        const _super = Object.create(null, {
          perform: { get: () => super.perform }
        });
        return __awaiter14(this, void 0, void 0, function* () {
          switch (method) {
            case "getBlockNumber":
              return this.fetch("proxy", { action: "eth_blockNumber" });
            case "getGasPrice":
              return this.fetch("proxy", { action: "eth_gasPrice" });
            case "getBalance":
              return this.fetch("account", {
                action: "balance",
                address: params.address,
                tag: params.blockTag
              });
            case "getTransactionCount":
              return this.fetch("proxy", {
                action: "eth_getTransactionCount",
                address: params.address,
                tag: params.blockTag
              });
            case "getCode":
              return this.fetch("proxy", {
                action: "eth_getCode",
                address: params.address,
                tag: params.blockTag
              });
            case "getStorageAt":
              return this.fetch("proxy", {
                action: "eth_getStorageAt",
                address: params.address,
                position: params.position,
                tag: params.blockTag
              });
            case "sendTransaction":
              return this.fetch("proxy", {
                action: "eth_sendRawTransaction",
                hex: params.signedTransaction
              }, true).catch((error) => {
                return checkError2("sendTransaction", error, params.signedTransaction);
              });
            case "getBlock":
              if (params.blockTag) {
                return this.fetch("proxy", {
                  action: "eth_getBlockByNumber",
                  tag: params.blockTag,
                  boolean: params.includeTransactions ? "true" : "false"
                });
              }
              throw new Error("getBlock by blockHash not implemented");
            case "getTransaction":
              return this.fetch("proxy", {
                action: "eth_getTransactionByHash",
                txhash: params.transactionHash
              });
            case "getTransactionReceipt":
              return this.fetch("proxy", {
                action: "eth_getTransactionReceipt",
                txhash: params.transactionHash
              });
            case "call": {
              if (params.blockTag !== "latest") {
                throw new Error("EtherscanProvider does not support blockTag for call");
              }
              const postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_call";
              try {
                return yield this.fetch("proxy", postData, true);
              } catch (error) {
                return checkError2("call", error, params.transaction);
              }
            }
            case "estimateGas": {
              const postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_estimateGas";
              try {
                return yield this.fetch("proxy", postData, true);
              } catch (error) {
                return checkError2("estimateGas", error, params.transaction);
              }
            }
            case "getLogs": {
              const args = { action: "getLogs" };
              if (params.filter.fromBlock) {
                args.fromBlock = checkLogTag(params.filter.fromBlock);
              }
              if (params.filter.toBlock) {
                args.toBlock = checkLogTag(params.filter.toBlock);
              }
              if (params.filter.address) {
                args.address = params.filter.address;
              }
              if (params.filter.topics && params.filter.topics.length > 0) {
                if (params.filter.topics.length > 1) {
                  logger35.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                }
                if (params.filter.topics.length === 1) {
                  const topic0 = params.filter.topics[0];
                  if (typeof topic0 !== "string" || topic0.length !== 66) {
                    logger35.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                  }
                  args.topic0 = topic0;
                }
              }
              const logs = yield this.fetch("logs", args);
              let blocks = {};
              for (let i4 = 0; i4 < logs.length; i4++) {
                const log4 = logs[i4];
                if (log4.blockHash != null) {
                  continue;
                }
                if (blocks[log4.blockNumber] == null) {
                  const block = yield this.getBlock(log4.blockNumber);
                  if (block) {
                    blocks[log4.blockNumber] = block.hash;
                  }
                }
                log4.blockHash = blocks[log4.blockNumber];
              }
              return logs;
            }
            case "getEtherPrice":
              if (this.network.name !== "homestead") {
                return 0;
              }
              return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
            default:
              break;
          }
          return _super.perform.call(this, method, params);
        });
      }
      getHistory(addressOrName, startBlock, endBlock) {
        return __awaiter14(this, void 0, void 0, function* () {
          const params = {
            action: "txlist",
            address: yield this.resolveName(addressOrName),
            startblock: startBlock == null ? 0 : startBlock,
            endblock: endBlock == null ? 99999999 : endBlock,
            sort: "asc"
          };
          const result = yield this.fetch("account", params);
          return result.map((tx) => {
            ["contractAddress", "to"].forEach(function(key2) {
              if (tx[key2] == "") {
                delete tx[key2];
              }
            });
            if (tx.creates == null && tx.contractAddress != null) {
              tx.creates = tx.contractAddress;
            }
            const item = this.formatter.transactionResponse(tx);
            if (tx.timeStamp) {
              item.timestamp = parseInt(tx.timeStamp);
            }
            return item;
          });
        });
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey2;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js
function now() {
  return new Date().getTime();
}
function checkNetworks(networks2) {
  let result = null;
  for (let i4 = 0; i4 < networks2.length; i4++) {
    const network = networks2[i4];
    if (network == null) {
      return null;
    }
    if (result) {
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger36.throwArgumentError("provider mismatch", "networks", networks2);
      }
    } else {
      result = network;
    }
  }
  return result;
}
function median(values, maxDelta) {
  values = values.slice().sort();
  const middle = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[middle];
  }
  const a4 = values[middle - 1], b3 = values[middle];
  if (maxDelta != null && Math.abs(a4 - b3) > maxDelta) {
    return null;
  }
  return (a4 + b3) / 2;
}
function serialize2(value) {
  if (value === null) {
    return "null";
  } else if (typeof value === "number" || typeof value === "boolean") {
    return JSON.stringify(value);
  } else if (typeof value === "string") {
    return value;
  } else if (BigNumber.isBigNumber(value)) {
    return value.toString();
  } else if (Array.isArray(value)) {
    return JSON.stringify(value.map((i4) => serialize2(i4)));
  } else if (typeof value === "object") {
    const keys = Object.keys(value);
    keys.sort();
    return "{" + keys.map((key2) => {
      let v4 = value[key2];
      if (typeof v4 === "function") {
        v4 = "[function]";
      } else {
        v4 = serialize2(v4);
      }
      return JSON.stringify(key2) + ":" + v4;
    }).join(",") + "}";
  }
  throw new Error("unknown value type: " + typeof value);
}
function stall2(duration) {
  let cancel = null;
  let timer2 = null;
  let promise = new Promise((resolve) => {
    cancel = function() {
      if (timer2) {
        clearTimeout(timer2);
        timer2 = null;
      }
      resolve();
    };
    timer2 = setTimeout(cancel, duration);
  });
  const wait = (func) => {
    promise = promise.then(func);
    return promise;
  };
  function getPromise() {
    return promise;
  }
  return { cancel, getPromise, wait };
}
function exposeDebugConfig(config, now2) {
  const result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", { get: () => config.provider });
  if (config.start) {
    result.start = config.start;
  }
  if (now2) {
    result.duration = now2 - config.start;
  }
  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }
  return result;
}
function normalizedTally(normalize, quorum) {
  return function(configs) {
    const tally = {};
    configs.forEach((c4) => {
      const value = normalize(c4.result);
      if (!tally[value]) {
        tally[value] = { count: 0, result: c4.result };
      }
      tally[value].count++;
    });
    const keys = Object.keys(tally);
    for (let i4 = 0; i4 < keys.length; i4++) {
      const check = tally[keys[i4]];
      if (check.count >= quorum) {
        return check.result;
      }
    }
    return void 0;
  };
}
function getProcessFunc(provider, method, params) {
  let normalize = serialize2;
  switch (method) {
    case "getBlockNumber":
      return function(configs) {
        const values = configs.map((c4) => c4.result);
        let blockNumber = median(configs.map((c4) => c4.result), 2);
        if (blockNumber == null) {
          return void 0;
        }
        blockNumber = Math.ceil(blockNumber);
        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        }
        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }
        return provider._highestBlockNumber;
      };
    case "getGasPrice":
      return function(configs) {
        const values = configs.map((c4) => c4.result);
        values.sort();
        return values[Math.floor(values.length / 2)];
      };
    case "getEtherPrice":
      return function(configs) {
        return median(configs.map((c4) => c4.result));
      };
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function(tx) {
        if (tx == null) {
          return null;
        }
        tx = shallowCopy(tx);
        tx.confirmations = -1;
        return serialize2(tx);
      };
      break;
    case "getBlock":
      if (params.includeTransactions) {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          block = shallowCopy(block);
          block.transactions = block.transactions.map((tx) => {
            tx = shallowCopy(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize2(block);
        };
      } else {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          return serialize2(block);
        };
      }
      break;
    default:
      throw new Error("unknown method: " + method);
  }
  return normalizedTally(normalize, provider.quorum);
}
function waitForSync(config, blockNumber) {
  return __awaiter15(this, void 0, void 0, function* () {
    const provider = config.provider;
    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
      return provider;
    }
    return poll(() => {
      return new Promise((resolve, reject) => {
        setTimeout(function() {
          if (provider.blockNumber >= blockNumber) {
            return resolve(provider);
          }
          if (config.cancelled) {
            return resolve(null);
          }
          return resolve(void 0);
        }, 0);
      });
    }, { oncePoll: provider });
  });
}
function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter15(this, void 0, void 0, function* () {
    let provider = config.provider;
    switch (method) {
      case "getBlockNumber":
      case "getGasPrice":
        return provider[method]();
      case "getEtherPrice":
        if (provider.getEtherPrice) {
          return provider.getEtherPrice();
        }
        break;
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.address, params.blockTag || "latest");
      case "getStorageAt":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
      case "getBlock":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
      case "call":
      case "estimateGas":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.transaction);
      case "getTransaction":
      case "getTransactionReceipt":
        return provider[method](params.transactionHash);
      case "getLogs": {
        let filter = params.filter;
        if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getLogs(filter);
      }
    }
    return logger36.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
      method,
      params
    });
  });
}
var __awaiter15, logger36, nextRid, ForwardErrors, ForwardProperties, FallbackProvider;
var init_fallback_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/fallback-provider.js"() {
    "use strict";
    init_lib12();
    init_lib4();
    init_lib3();
    init_lib2();
    init_lib22();
    init_lib27();
    init_base_provider();
    init_formatter();
    init_lib();
    init_version21();
    __awaiter15 = function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e3) {
            reject(e3);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e3) {
            reject(e3);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger36 = new Logger(version21);
    nextRid = 1;
    ForwardErrors = [
      Logger.errors.CALL_EXCEPTION,
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED,
      Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    ForwardProperties = [
      "address",
      "args",
      "errorArgs",
      "errorSignature",
      "method",
      "transaction"
    ];
    FallbackProvider = class extends BaseProvider {
      constructor(providers, quorum) {
        logger36.checkNew(new.target, FallbackProvider);
        if (providers.length === 0) {
          logger36.throwArgumentError("missing providers", "providers", providers);
        }
        const providerConfigs = providers.map((configOrProvider, index) => {
          if (Provider.isProvider(configOrProvider)) {
            const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
            const priority = 1;
            return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
          }
          const config = shallowCopy(configOrProvider);
          if (config.priority == null) {
            config.priority = 1;
          }
          if (config.stallTimeout == null) {
            config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
          }
          if (config.weight == null) {
            config.weight = 1;
          }
          const weight = config.weight;
          if (weight % 1 || weight > 512 || weight < 1) {
            logger36.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
          }
          return Object.freeze(config);
        });
        const total = providerConfigs.reduce((accum, c4) => accum + c4.weight, 0);
        if (quorum == null) {
          quorum = total / 2;
        } else if (quorum > total) {
          logger36.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
        }
        let networkOrReady = checkNetworks(providerConfigs.map((c4) => c4.provider.network));
        if (networkOrReady == null) {
          networkOrReady = new Promise((resolve, reject) => {
            setTimeout(() => {
              this.detectNetwork().then(resolve, reject);
            }, 0);
          });
        }
        super(networkOrReady);
        defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
        defineReadOnly(this, "quorum", quorum);
        this._highestBlockNumber = -1;
      }
      detectNetwork() {
        return __awaiter15(this, void 0, void 0, function* () {
          const networks2 = yield Promise.all(this.providerConfigs.map((c4) => c4.provider.getNetwork()));
          return checkNetworks(networks2);
        });
      }
      perform(method, params) {
        return __awaiter15(this, void 0, void 0, function* () {
          if (method === "sendTransaction") {
            const results2 = yield Promise.all(this.providerConfigs.map((c4) => {
              return c4.provider.sendTransaction(params.signedTransaction).then((result) => {
                return result.hash;
              }, (error) => {
                return error;
              });
            }));
            for (let i5 = 0; i5 < results2.length; i5++) {
              const result = results2[i5];
              if (typeof result === "string") {
                return result;
              }
            }
            throw results2[0];
          }
          if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
            yield this.getBlockNumber();
          }
          const processFunc = getProcessFunc(this, method, params);
          const configs = shuffled(this.providerConfigs.map(shallowCopy));
          configs.sort((a4, b3) => a4.priority - b3.priority);
          const currentBlockNumber = this._highestBlockNumber;
          let i4 = 0;
          let first = true;
          while (true) {
            const t0 = now();
            let inflightWeight = configs.filter((c4) => c4.runner && t0 - c4.start < c4.stallTimeout).reduce((accum, c4) => accum + c4.weight, 0);
            while (inflightWeight < this.quorum && i4 < configs.length) {
              const config = configs[i4++];
              const rid = nextRid++;
              config.start = now();
              config.staller = stall2(config.stallTimeout);
              config.staller.wait(() => {
                config.staller = null;
              });
              config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                config.done = true;
                config.result = result;
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, now()),
                    request: { method, params: deepCopy(params) },
                    provider: this
                  });
                }
              }, (error) => {
                config.done = true;
                config.error = error;
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, now()),
                    request: { method, params: deepCopy(params) },
                    provider: this
                  });
                }
              });
              if (this.listenerCount("debug")) {
                this.emit("debug", {
                  action: "request",
                  rid,
                  backend: exposeDebugConfig(config, null),
                  request: { method, params: deepCopy(params) },
                  provider: this
                });
              }
              inflightWeight += config.weight;
            }
            const waiting = [];
            configs.forEach((c4) => {
              if (c4.done || !c4.runner) {
                return;
              }
              waiting.push(c4.runner);
              if (c4.staller) {
                waiting.push(c4.staller.getPromise());
              }
            });
            if (waiting.length) {
              yield Promise.race(waiting);
            }
            const results2 = configs.filter((c4) => c4.done && c4.error == null);
            if (results2.length >= this.quorum) {
              const result = processFunc(results2);
              if (result !== void 0) {
                configs.forEach((c4) => {
                  if (c4.staller) {
                    c4.staller.cancel();
                  }
                  c4.cancelled = true;
                });
                return result;
              }
              if (!first) {
                yield stall2(100).getPromise();
              }
              first = false;
            }
            const errors = configs.reduce((accum, c4) => {
              if (!c4.done || c4.error == null) {
                return accum;
              }
              const code = c4.error.code;
              if (ForwardErrors.indexOf(code) >= 0) {
                if (!accum[code]) {
                  accum[code] = { error: c4.error, weight: 0 };
                }
                accum[code].weight += c4.weight;
              }
              return accum;
            }, {});
            Object.keys(errors).forEach((errorCode) => {
              const tally = errors[errorCode];
              if (tally.weight < this.quorum) {
                return;
              }
              configs.forEach((c4) => {
                if (c4.staller) {
                  c4.staller.cancel();
                }
                c4.cancelled = true;
              });
              const e3 = tally.error;
              const props = {};
              ForwardProperties.forEach((name2) => {
                if (e3[name2] == null) {
                  return;
                }
                props[name2] = e3[name2];
              });
              logger36.throwError(e3.reason || e3.message, errorCode, props);
            });
            if (configs.filter((c4) => !c4.done).length === 0) {
              break;
            }
          }
          configs.forEach((c4) => {
            if (c4.staller) {
              c4.staller.cancel();
            }
            c4.cancelled = true;
          });
          return logger36.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
            method,
            params,
            results: configs.map((c4) => exposeDebugConfig(c4)),
            provider: this
          });
        });
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js
var IpcProvider;
var init_ipc_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/ipc-provider.js"() {
    "use strict";
    IpcProvider = null;
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/infura-provider.js
var logger37, defaultProjectId, InfuraWebSocketProvider, InfuraProvider;
var init_infura_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/infura-provider.js"() {
    "use strict";
    init_lib2();
    init_websocket_provider();
    init_formatter();
    init_lib();
    init_version21();
    init_url_json_rpc_provider();
    logger37 = new Logger(version21);
    defaultProjectId = "84842078b09946638c03157f83405213";
    InfuraWebSocketProvider = class extends WebSocketProvider {
      constructor(network, apiKey) {
        const provider = new InfuraProvider(network, apiKey);
        const connection = provider.connection;
        if (connection.password) {
          logger37.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "InfuraProvider.getWebSocketProvider()"
          });
        }
        const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, network);
        defineReadOnly(this, "apiKey", provider.projectId);
        defineReadOnly(this, "projectId", provider.projectId);
        defineReadOnly(this, "projectSecret", provider.projectSecret);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    InfuraProvider = class extends UrlJsonRpcProvider {
      static getWebSocketProvider(network, apiKey) {
        return new InfuraWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
        const apiKeyObj = {
          apiKey: defaultProjectId,
          projectId: defaultProjectId,
          projectSecret: null
        };
        if (apiKey == null) {
          return apiKeyObj;
        }
        if (typeof apiKey === "string") {
          apiKeyObj.projectId = apiKey;
        } else if (apiKey.projectSecret != null) {
          logger37.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
          logger37.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
          apiKeyObj.projectId = apiKey.projectId;
          apiKeyObj.projectSecret = apiKey.projectSecret;
        } else if (apiKey.projectId) {
          apiKeyObj.projectId = apiKey.projectId;
        }
        apiKeyObj.apiKey = apiKeyObj.projectId;
        return apiKeyObj;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network ? network.name : "unknown") {
          case "homestead":
            host = "mainnet.infura.io";
            break;
          case "ropsten":
            host = "ropsten.infura.io";
            break;
          case "rinkeby":
            host = "rinkeby.infura.io";
            break;
          case "kovan":
            host = "kovan.infura.io";
            break;
          case "goerli":
            host = "goerli.infura.io";
            break;
          case "matic":
            host = "polygon-mainnet.infura.io";
            break;
          case "maticmum":
            host = "polygon-mumbai.infura.io";
            break;
          case "optimism":
            host = "optimism-mainnet.infura.io";
            break;
          case "optimism-kovan":
            host = "optimism-kovan.infura.io";
            break;
          case "arbitrum":
            host = "arbitrum-mainnet.infura.io";
            break;
          case "arbitrum-rinkeby":
            host = "arbitrum-rinkeby.infura.io";
            break;
          default:
            logger37.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
        }
        const connection = {
          allowGzip: true,
          url: "https://" + host + "/v3/" + apiKey.projectId,
          throttleCallback: (attempt, url) => {
            if (apiKey.projectId === defaultProjectId) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
        if (apiKey.projectSecret != null) {
          connection.user = "";
          connection.password = apiKey.projectSecret;
        }
        return connection;
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js
var JsonRpcBatchProvider;
var init_json_rpc_batch_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js"() {
    init_lib2();
    init_lib27();
    init_json_rpc_provider();
    JsonRpcBatchProvider = class extends JsonRpcProvider {
      send(method, params) {
        const request = {
          method,
          params,
          id: this._nextId++,
          jsonrpc: "2.0"
        };
        if (this._pendingBatch == null) {
          this._pendingBatch = [];
        }
        const inflightRequest = { request, resolve: null, reject: null };
        const promise = new Promise((resolve, reject) => {
          inflightRequest.resolve = resolve;
          inflightRequest.reject = reject;
        });
        this._pendingBatch.push(inflightRequest);
        if (!this._pendingBatchAggregator) {
          this._pendingBatchAggregator = setTimeout(() => {
            const batch = this._pendingBatch;
            this._pendingBatch = null;
            this._pendingBatchAggregator = null;
            const request2 = batch.map((inflight) => inflight.request);
            this.emit("debug", {
              action: "requestBatch",
              request: deepCopy(request2),
              provider: this
            });
            return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
              this.emit("debug", {
                action: "response",
                request: request2,
                response: result,
                provider: this
              });
              batch.forEach((inflightRequest2, index) => {
                const payload = result[index];
                if (payload.error) {
                  const error = new Error(payload.error.message);
                  error.code = payload.error.code;
                  error.data = payload.error.data;
                  inflightRequest2.reject(error);
                } else {
                  inflightRequest2.resolve(payload.result);
                }
              });
            }, (error) => {
              this.emit("debug", {
                action: "response",
                error,
                request: request2,
                provider: this
              });
              batch.forEach((inflightRequest2) => {
                inflightRequest2.reject(error);
              });
            });
          }, 10);
        }
        return promise;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
var logger38, defaultApiKey3, NodesmithProvider;
var init_nodesmith_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js"() {
    "use strict";
    init_url_json_rpc_provider();
    init_lib();
    init_version21();
    logger38 = new Logger(version21);
    defaultApiKey3 = "ETHERS_JS_SHARED";
    NodesmithProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        if (apiKey && typeof apiKey !== "string") {
          logger38.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey || defaultApiKey3;
      }
      static getUrl(network, apiKey) {
        logger38.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
            break;
          case "ropsten":
            host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
            break;
          case "rinkeby":
            host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
            break;
          case "goerli":
            host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
            break;
          case "kovan":
            host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
            break;
          default:
            logger38.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host + "?apiKey=" + apiKey;
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js
var logger39, defaultApplicationIds, PocketProvider;
var init_pocket_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version21();
    init_url_json_rpc_provider();
    logger39 = new Logger(version21);
    defaultApplicationIds = {
      homestead: "6004bcd10040261633ade990",
      ropsten: "6004bd4d0040261633ade991",
      rinkeby: "6004bda20040261633ade994",
      goerli: "6004bd860040261633ade992"
    };
    PocketProvider = class extends UrlJsonRpcProvider {
      constructor(network, apiKey) {
        if (apiKey == null) {
          const n3 = getStatic(new.target, "getNetwork")(network);
          if (n3) {
            const applicationId = defaultApplicationIds[n3.name];
            if (applicationId) {
              apiKey = {
                applicationId,
                loadBalancer: true
              };
            }
          }
          if (apiKey == null) {
            logger39.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
          }
        }
        super(network, apiKey);
      }
      static getApiKey(apiKey) {
        if (apiKey == null) {
          logger39.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
        }
        const apiKeyObj = {
          applicationId: null,
          loadBalancer: false,
          applicationSecretKey: null
        };
        if (typeof apiKey === "string") {
          apiKeyObj.applicationId = apiKey;
        } else if (apiKey.applicationSecretKey != null) {
          logger39.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
          logger39.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
          apiKeyObj.applicationId = apiKey.applicationId;
          apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
          apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
        } else if (apiKey.applicationId) {
          logger39.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
          apiKeyObj.applicationId = apiKey.applicationId;
          apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
        } else {
          logger39.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
        }
        return apiKeyObj;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network ? network.name : "unknown") {
          case "homestead":
            host = "eth-mainnet.gateway.pokt.network";
            break;
          case "ropsten":
            host = "eth-ropsten.gateway.pokt.network";
            break;
          case "rinkeby":
            host = "eth-rinkeby.gateway.pokt.network";
            break;
          case "goerli":
            host = "eth-goerli.gateway.pokt.network";
            break;
          default:
            logger39.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
        }
        let url = null;
        if (apiKey.loadBalancer) {
          url = `https://${host}/v1/lb/${apiKey.applicationId}`;
        } else {
          url = `https://${host}/v1/${apiKey.applicationId}`;
        }
        const connection = { url };
        connection.headers = {};
        if (apiKey.applicationSecretKey != null) {
          connection.user = "";
          connection.password = apiKey.applicationSecretKey;
        }
        return connection;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationIds[this.network.name];
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/web3-provider.js
function buildWeb3LegacyFetcher(provider, sendFunc) {
  const fetcher = "Web3LegacyFetcher";
  return function(method, params) {
    const request = {
      method,
      params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise((resolve, reject) => {
      this.emit("debug", {
        action: "request",
        fetcher,
        request: deepCopy(request),
        provider: this
      });
      sendFunc(request, (error, response) => {
        if (error) {
          this.emit("debug", {
            action: "response",
            fetcher,
            error,
            request,
            provider: this
          });
          return reject(error);
        }
        this.emit("debug", {
          action: "response",
          fetcher,
          request,
          response,
          provider: this
        });
        if (response.error) {
          const error2 = new Error(response.error.message);
          error2.code = response.error.code;
          error2.data = response.error.data;
          return reject(error2);
        }
        resolve(response.result);
      });
    });
  };
}
function buildEip1193Fetcher(provider) {
  return function(method, params) {
    if (params == null) {
      params = [];
    }
    const request = { method, params };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then((response) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        response,
        provider: this
      });
      return response;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        error,
        provider: this
      });
      throw error;
    });
  };
}
var logger40, _nextId, Web3Provider;
var init_web3_provider = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/web3-provider.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version21();
    init_json_rpc_provider();
    logger40 = new Logger(version21);
    _nextId = 1;
    Web3Provider = class extends JsonRpcProvider {
      constructor(provider, network) {
        logger40.checkNew(new.target, Web3Provider);
        if (provider == null) {
          logger40.throwArgumentError("missing provider", "provider", provider);
        }
        let path = null;
        let jsonRpcFetchFunc = null;
        let subprovider = null;
        if (typeof provider === "function") {
          path = "unknown:";
          jsonRpcFetchFunc = provider;
        } else {
          path = provider.host || provider.path || "";
          if (!path && provider.isMetaMask) {
            path = "metamask";
          }
          subprovider = provider;
          if (provider.request) {
            if (path === "") {
              path = "eip-1193:";
            }
            jsonRpcFetchFunc = buildEip1193Fetcher(provider);
          } else if (provider.sendAsync) {
            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
          } else if (provider.send) {
            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
          } else {
            logger40.throwArgumentError("unsupported provider", "provider", provider);
          }
          if (!path) {
            path = "unknown:";
          }
        }
        super(path, network);
        defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
        defineReadOnly(this, "provider", subprovider);
      }
      send(method, params) {
        return this.jsonRpcFetchFunc(method, params);
      }
    };
  }
});

// node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/index.js
var lib_exports4 = {};
__export(lib_exports4, {
  AlchemyProvider: () => AlchemyProvider,
  AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,
  BaseProvider: () => BaseProvider,
  CloudflareProvider: () => CloudflareProvider,
  EtherscanProvider: () => EtherscanProvider,
  FallbackProvider: () => FallbackProvider,
  Formatter: () => Formatter,
  InfuraProvider: () => InfuraProvider,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  IpcProvider: () => IpcProvider,
  JsonRpcBatchProvider: () => JsonRpcBatchProvider,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcSigner: () => JsonRpcSigner,
  NodesmithProvider: () => NodesmithProvider,
  PocketProvider: () => PocketProvider,
  Provider: () => Provider,
  Resolver: () => Resolver,
  StaticJsonRpcProvider: () => StaticJsonRpcProvider,
  UrlJsonRpcProvider: () => UrlJsonRpcProvider,
  Web3Provider: () => Web3Provider,
  WebSocketProvider: () => WebSocketProvider,
  getDefaultProvider: () => getDefaultProvider,
  getNetwork: () => getNetwork,
  isCommunityResourcable: () => isCommunityResourcable,
  isCommunityResource: () => isCommunityResource,
  showThrottleMessage: () => showThrottleMessage
});
function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  }
  if (typeof network === "string") {
    const match = network.match(/^(ws|http)s?:/i);
    if (match) {
      switch (match[1]) {
        case "http":
          return new JsonRpcProvider(network);
        case "ws":
          return new WebSocketProvider(network);
        default:
          logger41.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }
  const n3 = getNetwork(network);
  if (!n3 || !n3._defaultProvider) {
    logger41.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network
    });
  }
  return n3._defaultProvider({
    FallbackProvider,
    AlchemyProvider,
    CloudflareProvider,
    EtherscanProvider,
    InfuraProvider,
    JsonRpcProvider,
    NodesmithProvider,
    PocketProvider,
    Web3Provider,
    IpcProvider
  }, options);
}
var logger41;
var init_lib28 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/providers/lib.esm/index.js"() {
    "use strict";
    init_lib12();
    init_lib25();
    init_base_provider();
    init_alchemy_provider();
    init_cloudflare_provider();
    init_etherscan_provider();
    init_fallback_provider();
    init_ipc_provider();
    init_infura_provider();
    init_json_rpc_provider();
    init_json_rpc_batch_provider();
    init_nodesmith_provider();
    init_pocket_provider();
    init_url_json_rpc_provider();
    init_web3_provider();
    init_websocket_provider();
    init_formatter();
    init_lib();
    init_version21();
    logger41 = new Logger(version21);
  }
});

// node_modules/moralis/node_modules/@ethersproject/solidity/lib.esm/_version.js
var version22;
var init_version22 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/solidity/lib.esm/_version.js"() {
    version22 = "solidity/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/solidity/lib.esm/index.js
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return arrayify(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger42.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size = 256;
    }
    value = BigNumber.from(value).toTwos(size);
    return zeroPad(value, size / 8);
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    if (String(size) !== match[1] || size === 0 || size > 32) {
      logger42.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value).byteLength !== size) {
      logger42.throwArgumentError(`invalid value for ${type}`, "value", value);
    }
    if (isArray) {
      return arrayify((value + Zeros2).substring(0, 66));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    if (count != value.length) {
      logger42.throwArgumentError(`invalid array length for ${type}`, "value", value);
    }
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return concat(result);
  }
  return logger42.throwArgumentError("invalid type", "type", type);
}
function pack2(types, values) {
  if (types.length != values.length) {
    logger42.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function keccak2562(types, values) {
  return keccak256(pack2(types, values));
}
function sha2562(types, values) {
  return sha256(pack2(types, values));
}
var regexBytes, regexNumber, regexArray, Zeros2, logger42;
var init_lib29 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/solidity/lib.esm/index.js"() {
    "use strict";
    init_lib4();
    init_lib3();
    init_lib5();
    init_lib18();
    init_lib9();
    init_lib();
    init_version22();
    regexBytes = new RegExp("^bytes([0-9]+)$");
    regexNumber = new RegExp("^(u?int)([0-9]*)$");
    regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    Zeros2 = "0000000000000000000000000000000000000000000000000000000000000000";
    logger42 = new Logger(version22);
  }
});

// node_modules/moralis/node_modules/@ethersproject/units/lib.esm/_version.js
var version23;
var init_version23 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/units/lib.esm/_version.js"() {
    version23 = "units/5.6.0";
  }
});

// node_modules/moralis/node_modules/@ethersproject/units/lib.esm/index.js
function commify(value) {
  const comps = String(value).split(".");
  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
    logger43.throwArgumentError("invalid value", "value", value);
  }
  let whole = comps[0];
  let negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }
  let suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }
  const formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }
  return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
  if (typeof value !== "string") {
    logger43.throwArgumentError("value must be a string", "value", value);
  }
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return parseFixed(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}
var logger43, names;
var init_lib30 = __esm({
  "node_modules/moralis/node_modules/@ethersproject/units/lib.esm/index.js"() {
    "use strict";
    init_lib4();
    init_lib();
    init_version23();
    logger43 = new Logger(version23);
    names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
  }
});

// node_modules/moralis/node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  HDNode: () => HDNode,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  Logger: () => Logger,
  ParamType: () => ParamType,
  RLP: () => lib_exports,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports3,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  dnsEncode: () => dnsEncode,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack2,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});
var init_utils2 = __esm({
  "node_modules/moralis/node_modules/ethers/lib.esm/utils.js"() {
    "use strict";
    init_lib11();
    init_lib7();
    init_lib26();
    init_lib17();
    init_lib3();
    init_lib10();
    init_lib21();
    init_lib23();
    init_lib5();
    init_lib();
    init_lib18();
    init_lib29();
    init_lib22();
    init_lib2();
    init_lib6();
    init_lib14();
    init_lib9();
    init_lib15();
    init_lib30();
    init_lib24();
    init_lib27();
    init_lib18();
    init_lib9();
  }
});

// node_modules/moralis/node_modules/ethers/lib.esm/_version.js
var version24;
var init_version24 = __esm({
  "node_modules/moralis/node_modules/ethers/lib.esm/_version.js"() {
    version24 = "ethers/5.6.0";
  }
});

// node_modules/moralis/node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger44,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version24,
  wordlists: () => wordlists
});
var logger44;
var init_ethers = __esm({
  "node_modules/moralis/node_modules/ethers/lib.esm/ethers.js"() {
    "use strict";
    init_lib16();
    init_lib4();
    init_lib13();
    init_lib24();
    init_lib8();
    init_lib28();
    init_lib28();
    init_lib20();
    init_utils2();
    init_lib();
    init_version24();
    logger44 = new Logger(version24);
  }
});

// node_modules/moralis/node_modules/ethers/lib.esm/index.js
var lib_exports5 = {};
__export(lib_exports5, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  ethers: () => ethers_exports,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger44,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version24,
  wordlists: () => wordlists
});
var init_lib31 = __esm({
  "node_modules/moralis/node_modules/ethers/lib.esm/index.js"() {
    "use strict";
    init_ethers();
    init_ethers();
    try {
      const anyGlobal2 = window;
      if (anyGlobal2._ethers == null) {
        anyGlobal2._ethers = ethers_exports;
      }
    } catch (error) {
    }
  }
});

// node_modules/moralis/lib/browser/Cloud.js
var require_Cloud = __commonJS({
  "node_modules/moralis/lib/browser/Cloud.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getJobStatus = getJobStatus;
    exports.getJobsData = getJobsData;
    exports.run = run;
    exports.startJob = startJob;
    var _keys = _interopRequireDefault(require_keys3());
    var _promise = _interopRequireDefault(require_promise3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _decode2 = _interopRequireDefault(require_decode());
    var _encode3 = _interopRequireDefault(require_encode());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function run(name2, data, options) {
      options = options || {};
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new TypeError("Cloud function name must be a string.");
      }
      var requestOptions = {};
      if (options.useMasterKey) {
        requestOptions.useMasterKey = options.useMasterKey;
      }
      if (options.sessionToken) {
        requestOptions.sessionToken = options.sessionToken;
      }
      if (options.context && (0, _typeof2.default)(options.context) === "object") {
        requestOptions.context = options.context;
      }
      return _CoreManager.default.getCloudController().run(name2, data, requestOptions);
    }
    function getJobsData() {
      return _CoreManager.default.getCloudController().getJobsData({
        useMasterKey: true
      });
    }
    function startJob(name2, data) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new TypeError("Cloud job name must be a string.");
      }
      return _CoreManager.default.getCloudController().startJob(name2, data, {
        useMasterKey: true
      });
    }
    function getJobStatus(jobStatusId) {
      var query = new _ParseQuery.default("_JobStatus");
      return query.get(jobStatusId, {
        useMasterKey: true
      });
    }
    var DefaultController = {
      run: function(name2, data, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var payload = (0, _encode3.default)(data, true);
        var request = RESTController.request("POST", "functions/".concat(name2), payload, options);
        return request.then(function(res) {
          if ((0, _typeof2.default)(res) === "object" && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty("result")) {
            throw new _ParseError.default(_ParseError.default.INVALID_JSON, "The server returned an invalid response.");
          }
          var decoded = (0, _decode2.default)(res);
          if (decoded && decoded.hasOwnProperty("result")) {
            return _promise.default.resolve(decoded.result);
          }
          return _promise.default.resolve(void 0);
        });
      },
      getJobsData: function(options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "cloud_code/jobs/data", null, options);
      },
      startJob: function(name2, data, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var payload = (0, _encode3.default)(data, true);
        return RESTController.request("POST", "jobs/".concat(name2), payload, options);
      }
    };
    _CoreManager.default.setCloudController(DefaultController);
  }
});

// node_modules/moralis/lib/browser/createSigningData.js
var require_createSigningData = __commonJS({
  "node_modules/moralis/lib/browser/createSigningData.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createSigningData;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _Cloud = require_Cloud();
    function createSigningData() {
      return _createSigningData.apply(this, arguments);
    }
    function _createSigningData() {
      _createSigningData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(message) {
        var data, _context, _context2, _yield$run, dateTime, applicationId;
        return _regenerator.default.wrap(function(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return (0, _Cloud.run)("getServerTime");
              case 3:
                _yield$run = _context3.sent;
                dateTime = _yield$run.dateTime;
                applicationId = _CoreManager.default.get("APPLICATION_ID");
                data = (0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat(message, "\n\nId: ")).call(_context2, applicationId, ":")).call(_context, dateTime);
                _context3.next = 12;
                break;
              case 9:
                _context3.prev = 9;
                _context3.t0 = _context3["catch"](0);
                data = "".concat(message);
              case 12:
                return _context3.abrupt("return", data);
              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee, null, [[0, 9]]);
      }));
      return _createSigningData.apply(this, arguments);
    }
  }
});

// node_modules/moralis/lib/browser/MoralisErd.js
var require_MoralisErd = __commonJS({
  "node_modules/moralis/lib/browser/MoralisErd.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _filter = _interopRequireDefault(require_filter4());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var INIT_ERROR = "Could not initialise ledger app, make sure Elrond app is open";
    function getErdJs() {
      return MoralisErd.getErdJs();
    }
    var MoralisErd = function() {
      function MoralisErd2() {
        (0, _classCallCheck2.default)(this, MoralisErd2);
      }
      (0, _createClass2.default)(MoralisErd2, null, [{
        key: "getErdJs",
        value: function() {
          if (typeof window !== "undefined" && window.erdjs)
            return window.erdjs;
          throw new Error("Please add erdjs scripts");
        }
      }, {
        key: "gatewayAddress",
        value: function() {
          return "https://gateway.elrond.com";
        }
      }, {
        key: "hwProxy",
        value: function() {
          var _hwProxy = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
            var _getErdJs, ProxyProvider, proxy;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!MoralisErd2._proxy) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", MoralisErd2._proxy);
                  case 2:
                    _getErdJs = getErdJs(), ProxyProvider = _getErdJs.ProxyProvider;
                    proxy = new ProxyProvider(MoralisErd2.gatewayAddress());
                    MoralisErd2._proxy = proxy;
                    return _context.abrupt("return", MoralisErd2._proxy);
                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _hwProxy.apply(this, arguments);
          };
        }()
      }, {
        key: "hwProvider",
        value: function() {
          return MoralisErd2._hw;
        }
      }, {
        key: "enable",
        value: function() {
          var _enable = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            var _getErdJs2, HWProvider, proxy, hw, success;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _getErdJs2 = getErdJs(), HWProvider = _getErdJs2.HWProvider;
                    _context2.next = 3;
                    return MoralisErd2.hwProxy();
                  case 3:
                    proxy = _context2.sent;
                    hw = new HWProvider(proxy);
                    _context2.next = 7;
                    return hw.init();
                  case 7:
                    success = _context2.sent;
                    if (success) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error(INIT_ERROR);
                  case 10:
                    MoralisErd2._hw = hw;
                    return _context2.abrupt("return", hw);
                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _enable.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
            var hw, address, erdAddress, accounts, message, data, signature2, authData, user;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return MoralisErd2.enable();
                  case 2:
                    hw = _context3.sent;
                    _context3.next = 5;
                    return hw.login();
                  case 5:
                    address = _context3.sent;
                    erdAddress = address.toLowerCase();
                    accounts = [erdAddress];
                    message = MoralisErd2.getSigningData();
                    _context3.next = 11;
                    return (0, _createSigningData.default)(message);
                  case 11:
                    data = _context3.sent;
                    _context3.next = 14;
                    return MoralisErd2.sign(data);
                  case 14:
                    signature2 = _context3.sent;
                    authData = {
                      id: erdAddress,
                      signature: signature2,
                      data
                    };
                    _context3.next = 18;
                    return _ParseUser.default.logInWith("moralisErd", {
                      authData
                    });
                  case 18:
                    user = _context3.sent;
                    if (user) {
                      _context3.next = 21;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 21:
                    _context3.next = 23;
                    return user.setACL(new _ParseACL.default(user));
                  case 23:
                    user.addAllUnique("erdAccounts", accounts);
                    user.set("erdAddress", erdAddress);
                    _context3.next = 27;
                    return user.save();
                  case 27:
                    return _context3.abrupt("return", user);
                  case 28:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(account, options) {
            var message, user, erdAddress, ErdAddress, query, erdAddressRecord, data, signature2, authData;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisErd2.getSigningData();
                    _context4.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context4.sent;
                    erdAddress = account.toLowerCase();
                    ErdAddress = _ParseObject.default.extend("_ErdAddress");
                    query = new _ParseQuery.default(ErdAddress);
                    _context4.next = 9;
                    return query.get(erdAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    erdAddressRecord = _context4.sent;
                    if (erdAddressRecord) {
                      _context4.next = 20;
                      break;
                    }
                    _context4.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context4.sent;
                    _context4.next = 16;
                    return MoralisErd2.sign(data);
                  case 16:
                    signature2 = _context4.sent;
                    authData = {
                      id: erdAddress,
                      signature: signature2,
                      data
                    };
                    _context4.next = 20;
                    return user.linkWith("moralisErd", {
                      authData
                    });
                  case 20:
                    user.addAllUnique("erdAccounts", [erdAddress]);
                    user.set("erdAddress", erdAddress);
                    _context4.next = 24;
                    return user.save();
                  case 24:
                    return _context4.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(account) {
            var _user$get;
            var accountsLower, ErdAddress, query, erdAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    accountsLower = account.toLowerCase();
                    ErdAddress = _ParseObject.default.extend("_ErdAddress");
                    query = new _ParseQuery.default(ErdAddress);
                    _context5.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    erdAddressRecord = _context5.sent;
                    _context5.next = 8;
                    return erdAddressRecord.destroy();
                  case 8:
                    _context5.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context5.sent;
                    accounts = (_user$get = user.get("erdAccounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v4) {
                      return v4 !== accountsLower;
                    });
                    user.set("erdAccounts", nextAccounts);
                    user.set("erdAddress", nextAccounts[0]);
                    _context5.next = 17;
                    return user._unlinkFrom("moralisErd");
                  case 17:
                    _context5.next = 19;
                    return user.save();
                  case 19:
                    return _context5.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(data) {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    return _context6.abrupt("return", data);
                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisErd2;
    }();
    var _default = MoralisErd;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/MoralisDot.js
var require_MoralisDot = __commonJS({
  "node_modules/moralis/lib/browser/MoralisDot.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _from = _interopRequireDefault(require_from3());
    var _slice = _interopRequireDefault(require_slice4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var web3EnablePromise = null;
    var MoralisDot = function() {
      function MoralisDot2() {
        (0, _classCallCheck2.default)(this, MoralisDot2);
      }
      (0, _createClass2.default)(MoralisDot2, null, [{
        key: "web3IsInjected",
        value: function() {
          return (0, _keys.default)(window.injectedWeb3).length !== 0;
        }
      }, {
        key: "enable",
        value: function() {
          var _enable = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(opts) {
            var _window$injectedWeb, _window$injectedWeb$t;
            var type, _args = arguments;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    type = _args.length > 1 && _args[1] !== void 0 ? _args[1] : "polkadot-js";
                    if (!web3EnablePromise) {
                      _context.next = 3;
                      break;
                    }
                    return _context.abrupt("return", web3EnablePromise);
                  case 3:
                    web3EnablePromise = (_window$injectedWeb = window.injectedWeb3) === null || _window$injectedWeb === void 0 ? void 0 : (_window$injectedWeb$t = _window$injectedWeb[type]) === null || _window$injectedWeb$t === void 0 ? void 0 : _window$injectedWeb$t.enable(opts);
                    return _context.abrupt("return", web3EnablePromise);
                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _enable.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(opts) {
            var _opts$name;
            var allAccounts, account, address, dotAddress, accounts, message, data, signature2, authData, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return MoralisDot2.enable((_opts$name = opts === null || opts === void 0 ? void 0 : opts.name) !== null && _opts$name !== void 0 ? _opts$name : "Moralis");
                  case 2:
                    MoralisDot2.web3 = _context2.sent;
                    _context2.next = 5;
                    return MoralisDot2.web3.accounts.get();
                  case 5:
                    allAccounts = _context2.sent;
                    account = allAccounts[0];
                    address = account === null || account === void 0 ? void 0 : account.address;
                    if (address) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error("Address not found");
                  case 10:
                    dotAddress = address;
                    accounts = [dotAddress];
                    message = MoralisDot2.getSigningData();
                    _context2.next = 15;
                    return (0, _createSigningData.default)(message);
                  case 15:
                    data = _context2.sent;
                    _context2.next = 18;
                    return MoralisDot2.sign(address, data);
                  case 18:
                    signature2 = _context2.sent;
                    authData = {
                      id: dotAddress,
                      signature: signature2,
                      data
                    };
                    _context2.next = 22;
                    return _ParseUser.default.logInWith("moralisDot", {
                      authData
                    });
                  case 22:
                    user = _context2.sent;
                    if (user) {
                      _context2.next = 25;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 25:
                    _context2.next = 27;
                    return user.setACL(new _ParseACL.default(user));
                  case 27:
                    user.addAllUnique("dotAccounts", accounts);
                    user.set("dotAddress", dotAddress);
                    _context2.next = 31;
                    return user.save();
                  case 31:
                    return _context2.abrupt("return", user);
                  case 32:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(account, options) {
            var message, user, dotAddress, DotAddress, query, dotAddressRecord, data, signature2, authData;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisDot2.getSigningData();
                    _context3.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context3.sent;
                    dotAddress = account;
                    DotAddress = _ParseObject.default.extend("_DotAddress");
                    query = new _ParseQuery.default(DotAddress);
                    _context3.next = 9;
                    return query.get(dotAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    dotAddressRecord = _context3.sent;
                    if (dotAddressRecord) {
                      _context3.next = 20;
                      break;
                    }
                    _context3.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context3.sent;
                    _context3.next = 16;
                    return MoralisDot2.sign(dotAddress, data);
                  case 16:
                    signature2 = _context3.sent;
                    authData = {
                      id: dotAddress,
                      signature: signature2,
                      data
                    };
                    _context3.next = 20;
                    return user.linkWith("moralisDot", {
                      authData
                    });
                  case 20:
                    user.addAllUnique("dotAccounts", [dotAddress]);
                    user.set("dotAddress", dotAddress);
                    _context3.next = 24;
                    return user.save();
                  case 24:
                    return _context3.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(account) {
            var _user$get;
            var accountsLower, DotAddress, query, dotAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    accountsLower = account;
                    DotAddress = _ParseObject.default.extend("_DotAddress");
                    query = new _ParseQuery.default(DotAddress);
                    _context4.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    dotAddressRecord = _context4.sent;
                    _context4.next = 8;
                    return dotAddressRecord.destroy();
                  case 8:
                    _context4.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context4.sent;
                    accounts = (_user$get = user.get("dotAccounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v4) {
                      return v4 !== accountsLower;
                    });
                    user.set("dotAccounts", nextAccounts);
                    user.set("dotAddress", nextAccounts[0]);
                    _context4.next = 17;
                    return user._unlinkFrom("moralisDot");
                  case 17:
                    _context4.next = 19;
                    return user.save();
                  case 19:
                    return _context4.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(address, data) {
            var web3, _yield$web3$signer$si, signature2;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (web3EnablePromise) {
                      _context5.next = 2;
                      break;
                    }
                    throw new Error("Must enable MoralisDot");
                  case 2:
                    _context5.next = 4;
                    return web3EnablePromise;
                  case 4:
                    web3 = _context5.sent;
                    if (web3.signer) {
                      _context5.next = 7;
                      break;
                    }
                    throw new Error("No signer found");
                  case 7:
                    _context5.next = 9;
                    return web3.signer.signRaw({
                      address,
                      data: stringToHex(data),
                      type: "bytes"
                    });
                  case 9:
                    _yield$web3$signer$si = _context5.sent;
                    signature2 = _yield$web3$signer$si.signature;
                    return _context5.abrupt("return", signature2);
                  case 12:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisDot2;
    }();
    var _default = MoralisDot;
    exports.default = _default;
    function stringToHex(value) {
      return toHexString(stringToU8a(value));
    }
    function stringToU8a(value) {
      var u8a = new Uint8Array(value.length);
      for (var i4 = 0; i4 < value.length; i4++) {
        u8a[i4] = value.charCodeAt(i4);
      }
      return u8a;
    }
    function toHexString(byteArray) {
      return "0x".concat((0, _from.default)(byteArray, function(byte) {
        var _context6;
        return (0, _slice.default)(_context6 = "0".concat((byte & 255).toString(16))).call(_context6, -2);
      }).join(""));
    }
  }
});

// node_modules/core-js-pure/internals/array-reduce.js
var require_array_reduce = __commonJS({
  "node_modules/core-js-pure/internals/array-reduce.js"(exports, module) {
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var $TypeError = TypeError;
    var createMethod = function(IS_RIGHT) {
      return function(that, callbackfn, argumentsLength, memo2) {
        aCallable(callbackfn);
        var O3 = toObject(that);
        var self2 = IndexedObject(O3);
        var length = lengthOfArrayLike(O3);
        var index = IS_RIGHT ? length - 1 : 0;
        var i4 = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2)
          while (true) {
            if (index in self2) {
              memo2 = self2[index];
              index += i4;
              break;
            }
            index += i4;
            if (IS_RIGHT ? index < 0 : length <= index) {
              throw $TypeError("Reduce of empty array with no initial value");
            }
          }
        for (; IS_RIGHT ? index >= 0 : length > index; index += i4)
          if (index in self2) {
            memo2 = callbackfn(memo2, self2[index], index, O3);
          }
        return memo2;
      };
    };
    module.exports = {
      left: createMethod(false),
      right: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/modules/es.array.reduce.js
var require_es_array_reduce = __commonJS({
  "node_modules/core-js-pure/modules/es.array.reduce.js"() {
    "use strict";
    var $3 = require_export();
    var $reduce = require_array_reduce().left;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var CHROME_VERSION = require_engine_v8_version();
    var IS_NODE = require_engine_is_node();
    var STRICT_METHOD = arrayMethodIsStrict("reduce");
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
    $3({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
      reduce: function reduce(callbackfn) {
        var length = arguments.length;
        return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/reduce.js
var require_reduce = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/reduce.js"(exports, module) {
    require_es_array_reduce();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").reduce;
  }
});

// node_modules/core-js-pure/es/instance/reduce.js
var require_reduce2 = __commonJS({
  "node_modules/core-js-pure/es/instance/reduce.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_reduce();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.reduce;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/reduce.js
var require_reduce3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/reduce.js"(exports, module) {
    var parent = require_reduce2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
var require_reduce4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js"(exports, module) {
    module.exports = require_reduce3();
  }
});

// node_modules/core-js-pure/internals/string-repeat.js
var require_string_repeat = __commonJS({
  "node_modules/core-js-pure/internals/string-repeat.js"(exports, module) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString2 = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var $RangeError = RangeError;
    module.exports = function repeat(count) {
      var str = toString2(requireObjectCoercible(this));
      var result = "";
      var n3 = toIntegerOrInfinity(count);
      if (n3 < 0 || n3 == Infinity)
        throw $RangeError("Wrong number of repetitions");
      for (; n3 > 0; (n3 >>>= 1) && (str += str))
        if (n3 & 1)
          result += str;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/string-pad.js
var require_string_pad = __commonJS({
  "node_modules/core-js-pure/internals/string-pad.js"(exports, module) {
    var uncurryThis = require_function_uncurry_this();
    var toLength = require_to_length();
    var toString2 = require_to_string();
    var $repeat = require_string_repeat();
    var requireObjectCoercible = require_require_object_coercible();
    var repeat = uncurryThis($repeat);
    var stringSlice = uncurryThis("".slice);
    var ceil = Math.ceil;
    var createMethod = function(IS_END) {
      return function($this, maxLength, fillString) {
        var S3 = toString2(requireObjectCoercible($this));
        var intMaxLength = toLength(maxLength);
        var stringLength = S3.length;
        var fillStr = fillString === void 0 ? " " : toString2(fillString);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr == "")
          return S3;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen)
          stringFiller = stringSlice(stringFiller, 0, fillLen);
        return IS_END ? S3 + stringFiller : stringFiller + S3;
      };
    };
    module.exports = {
      start: createMethod(false),
      end: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/internals/string-pad-webkit-bug.js
var require_string_pad_webkit_bug = __commonJS({
  "node_modules/core-js-pure/internals/string-pad-webkit-bug.js"(exports, module) {
    var userAgent = require_engine_user_agent();
    module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);
  }
});

// node_modules/core-js-pure/modules/es.string.pad-start.js
var require_es_string_pad_start = __commonJS({
  "node_modules/core-js-pure/modules/es.string.pad-start.js"() {
    "use strict";
    var $3 = require_export();
    var $padStart = require_string_pad().start;
    var WEBKIT_BUG = require_string_pad_webkit_bug();
    $3({ target: "String", proto: true, forced: WEBKIT_BUG }, {
      padStart: function padStart(maxLength) {
        return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/pad-start.js
var require_pad_start = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/pad-start.js"(exports, module) {
    require_es_string_pad_start();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").padStart;
  }
});

// node_modules/core-js-pure/es/instance/pad-start.js
var require_pad_start2 = __commonJS({
  "node_modules/core-js-pure/es/instance/pad-start.js"(exports, module) {
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_pad_start();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.padStart;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.padStart ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/pad-start.js
var require_pad_start3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/pad-start.js"(exports, module) {
    var parent = require_pad_start2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/pad-start.js
var require_pad_start4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/pad-start.js"(exports, module) {
    module.exports = require_pad_start3();
  }
});

// node_modules/moralis/lib/browser/MoralisSol.js
var require_MoralisSol = __commonJS({
  "node_modules/moralis/lib/browser/MoralisSol.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _filter = _interopRequireDefault(require_filter4());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _padStart = _interopRequireDefault(require_pad_start4());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var base64 = {
      decode: function(s4) {
        return Uint8Array.from(atob(s4), function(c4) {
          return c4.charCodeAt(0);
        });
      },
      encode: function(b3) {
        return btoa(String.fromCharCode.apply(String, (0, _toConsumableArray2.default)(new Uint8Array(b3))));
      }
    };
    var MoralisSol = function() {
      function MoralisSol2() {
        (0, _classCallCheck2.default)(this, MoralisSol2);
      }
      (0, _createClass2.default)(MoralisSol2, null, [{
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(options) {
            var _context, _user$get;
            var phantom, solAddress, accounts, message, data, signature2, authData, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return MoralisSol2.enable();
                  case 2:
                    phantom = _context2.sent;
                    if (phantom) {
                      _context2.next = 5;
                      break;
                    }
                    throw new Error("Phantom wallet not available");
                  case 5:
                    solAddress = phantom.publicKey.toString();
                    if (solAddress) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error("Address not found");
                  case 8:
                    accounts = [solAddress];
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisSol2.getSigningData();
                    _context2.next = 12;
                    return (0, _createSigningData.default)(message);
                  case 12:
                    data = _context2.sent;
                    _context2.next = 15;
                    return MoralisSol2.sign(data);
                  case 15:
                    signature2 = _context2.sent;
                    authData = {
                      id: solAddress,
                      signature: signature2,
                      data
                    };
                    _context2.next = 19;
                    return _ParseUser.default.logInWith("moralisSol", {
                      authData
                    });
                  case 19:
                    user = _context2.sent;
                    _context2.next = 22;
                    return user.setACL(new _ParseACL.default(user));
                  case 22:
                    if (user) {
                      _context2.next = 24;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 24:
                    user.set("solAccounts", uniq((0, _concat.default)(_context = []).call(_context, accounts, (_user$get = user.get("solAccounts")) !== null && _user$get !== void 0 ? _user$get : [])));
                    user.set("solAddress", solAddress);
                    _context2.next = 28;
                    return user.save();
                  case 28:
                    return _context2.abrupt("return", user);
                  case 29:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(account, options) {
            var _context3, _user$get2;
            var message, user, solAddress, SolAddress, query, solAddressRecord, data, signature2, authData;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisSol2.getSigningData();
                    _context4.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context4.sent;
                    solAddress = account;
                    SolAddress = _ParseObject.default.extend("_SolAddress");
                    query = new _ParseQuery.default(SolAddress);
                    _context4.next = 9;
                    return query.get(solAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    solAddressRecord = _context4.sent;
                    if (solAddressRecord) {
                      _context4.next = 20;
                      break;
                    }
                    _context4.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context4.sent;
                    _context4.next = 16;
                    return MoralisSol2.sign(solAddress, data);
                  case 16:
                    signature2 = _context4.sent;
                    authData = {
                      id: solAddress,
                      signature: signature2,
                      data
                    };
                    _context4.next = 20;
                    return user.linkWith("moralisSol", {
                      authData
                    });
                  case 20:
                    user.set("SolAccounts", uniq((0, _concat.default)(_context3 = [solAddress]).call(_context3, (_user$get2 = user.get("SolAccounts")) !== null && _user$get2 !== void 0 ? _user$get2 : [])));
                    user.set("solAddress", solAddress);
                    _context4.next = 24;
                    return user.save();
                  case 24:
                    return _context4.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(account) {
            var _user$get3;
            var accountsLower, SolAddress, query, solAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    accountsLower = account;
                    SolAddress = _ParseObject.default.extend("_SolAddress");
                    query = new _ParseQuery.default(SolAddress);
                    _context5.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    solAddressRecord = _context5.sent;
                    _context5.next = 8;
                    return solAddressRecord.destroy();
                  case 8:
                    _context5.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context5.sent;
                    accounts = (_user$get3 = user.get("solAccounts")) !== null && _user$get3 !== void 0 ? _user$get3 : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v4) {
                      return v4 !== accountsLower;
                    });
                    user.set("solAccounts", nextAccounts);
                    user.set("solAddress", nextAccounts[0]);
                    _context5.next = 17;
                    return user._unlinkFrom("moralisSol");
                  case 17:
                    _context5.next = 19;
                    return user.save();
                  case 19:
                    return _context5.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(message) {
            var phantom, encodedMessage, signedMessage;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return MoralisSol2.enable();
                  case 2:
                    phantom = _context6.sent;
                    encodedMessage = new TextEncoder().encode(message);
                    _context6.next = 6;
                    return phantom.signMessage(encodedMessage, "utf8");
                  case 6:
                    signedMessage = _context6.sent;
                    return _context6.abrupt("return", base64.encode(signedMessage.signature));
                  case 8:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisSol2;
    }();
    (0, _defineProperty2.default)(MoralisSol, "enable", (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5() {
      var provider;
      return _regenerator.default.wrap(function(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (!(window && "solana" in window)) {
                _context8.next = 17;
                break;
              }
              provider = window.solana;
              if (!provider.isPhantom) {
                _context8.next = 17;
                break;
              }
              _context8.prev = 3;
              _context8.next = 6;
              return provider.connect({
                onlyIfTrusted: true
              });
            case 6:
              _context8.next = 16;
              break;
            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](3);
              if (!(_context8.t0.message === "User rejected the request.")) {
                _context8.next = 15;
                break;
              }
              _context8.next = 13;
              return provider.connect();
            case 13:
              _context8.next = 16;
              break;
            case 15:
              throw _context8.t0;
            case 16:
              return _context8.abrupt("return", provider);
            case 17:
              throw new Error("Phantom wallet not available");
            case 18:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee5, null, [[3, 8]]);
    })));
    function uniq(arr) {
      return (0, _filter.default)(arr).call(arr, function(v4, i4) {
        return (0, _indexOf.default)(arr).call(arr, v4) === i4;
      });
    }
    var _default = MoralisSol;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/is-integral-number.js
var require_is_integral_number = __commonJS({
  "node_modules/core-js-pure/internals/is-integral-number.js"(exports, module) {
    var isObject = require_is_object();
    var floor = Math.floor;
    module.exports = Number.isInteger || function isInteger2(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
  }
});

// node_modules/core-js-pure/modules/es.number.is-integer.js
var require_es_number_is_integer = __commonJS({
  "node_modules/core-js-pure/modules/es.number.is-integer.js"() {
    var $3 = require_export();
    var isIntegralNumber = require_is_integral_number();
    $3({ target: "Number", stat: true }, {
      isInteger: isIntegralNumber
    });
  }
});

// node_modules/core-js-pure/es/number/is-integer.js
var require_is_integer = __commonJS({
  "node_modules/core-js-pure/es/number/is-integer.js"(exports, module) {
    require_es_number_is_integer();
    var path = require_path();
    module.exports = path.Number.isInteger;
  }
});

// node_modules/core-js-pure/stable/number/is-integer.js
var require_is_integer2 = __commonJS({
  "node_modules/core-js-pure/stable/number/is-integer.js"(exports, module) {
    var parent = require_is_integer();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js
var require_is_integer3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js"(exports, module) {
    module.exports = require_is_integer2();
  }
});

// node_modules/moralis/lib/browser/TransferUtils.js
var require_TransferUtils = __commonJS({
  "node_modules/moralis/lib/browser/TransferUtils.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _keys = _interopRequireDefault(require_keys3());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _isInteger = _interopRequireDefault(require_is_integer3());
    var supportedTypes = ["native", "erc20", "erc721", "erc1155"];
    var ERC1155TransferABI = [{
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }, {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "safeTransferFrom",
      type: "function",
      constant: false,
      payable: false
    }, {
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "transferFrom",
      type: "function",
      constant: false,
      payable: false
    }];
    var ERC721TransferABI = [{
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "safeTransferFrom",
      type: "function",
      constant: false,
      payable: false
    }, {
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "transferFrom",
      type: "function",
      constant: false,
      payable: false
    }];
    var ERC20TransferABI = [{
      constant: false,
      inputs: [{
        name: "_to",
        type: "address"
      }, {
        name: "_value",
        type: "uint256"
      }],
      name: "transfer",
      outputs: [{
        name: "",
        type: "bool"
      }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
    }, {
      constant: true,
      inputs: [{
        name: "_owner",
        type: "address"
      }],
      name: "balanceOf",
      outputs: [{
        name: "balance",
        type: "uint256"
      }],
      payable: false,
      stateMutability: "view",
      type: "function"
    }];
    var tokenParams = {
      native: {
        receiver: "",
        amount: ""
      },
      erc20: {
        contractAddress: "",
        receiver: "",
        amount: ""
      },
      erc721: {
        contractAddress: "",
        receiver: "",
        tokenId: ""
      },
      erc1155: {
        contractAddress: "",
        receiver: "",
        tokenId: "",
        amount: ""
      }
    };
    var isNotEmpty = function(value) {
      return typeof value !== "undefined" && value ? true : false;
    };
    var validateInput = function(type, payload) {
      var errors = [];
      var parameters = tokenParams[type];
      for (var _i = 0, _Object$keys = (0, _keys.default)(parameters); _i < _Object$keys.length; _i++) {
        var key2 = _Object$keys[_i];
        if (!isNotEmpty(payload[key2])) {
          errors.push("".concat(key2, " is required"));
        }
      }
      if (errors.length > 0) {
        throw errors;
      }
    };
    var isSupportedType = function(type) {
      if ((0, _indexOf.default)(supportedTypes).call(supportedTypes, type) === -1)
        throw "Unsupported type";
      return true;
    };
    var isUint256 = function(tokenId) {
      if (!(0, _isInteger.default)(+tokenId) || +tokenId < 0)
        throw new Error("Invalid token Id");
      return true;
    };
    module.exports = {
      abi: {
        erc1155: ERC1155TransferABI,
        erc721: ERC721TransferABI,
        erc20: ERC20TransferABI
      },
      validateInput,
      isSupportedType,
      isNotEmpty,
      isUint256
    };
  }
});

// node_modules/moralis/lib/browser/utils/convert.js
var require_convert = __commonJS({
  "node_modules/moralis/lib/browser/utils/convert.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    function fromDecimalToHex(number) {
      if (typeof number !== "number")
        throw "The input provided should be a number";
      return "0x".concat(number.toString(16));
    }
    function fromHexToDecimal(hex) {
      if (typeof hex !== "string")
        throw "The input provided should be a string";
      return (0, _parseInt2.default)(hex, 16);
    }
    module.exports = {
      fromDecimalToHex,
      fromHexToDecimal
    };
  }
});

// node_modules/moralis/lib/browser/utils/verifyChainId.js
var require_verifyChainId = __commonJS({
  "node_modules/moralis/lib/browser/utils/verifyChainId.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _convert = require_convert();
    function verifyChainId(chainId) {
      if (typeof chainId === "number")
        chainId = (0, _convert.fromDecimalToHex)(chainId);
      return chainId;
    }
    var _default = verifyChainId;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/events.js
var require_events2 = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/events.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EthereumEvents = exports.ConnectorEvents = void 0;
    var _freeze = _interopRequireDefault(require_freeze3());
    var EthereumEvents = (0, _freeze.default)({
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      CHAIN_CHANGED: "chainChanged",
      ACCOUNTS_CHANGED: "accountsChanged"
    });
    exports.EthereumEvents = EthereumEvents;
    var ConnectorEvents = (0, _freeze.default)({
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      CHAIN_CHANGED: "chainChanged",
      ACCOUNT_CHANGED: "accountChanged"
    });
    exports.ConnectorEvents = ConnectorEvents;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/AbstractWeb3Connector.js
var require_AbstractWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/AbstractWeb3Connector.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _bind = _interopRequireDefault(require_bind8());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _events = _interopRequireDefault(require_events());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _events2 = require_events2();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var AbstractWeb3Connector = function(_EventEmitter) {
      (0, _inherits2.default)(AbstractWeb3Connector2, _EventEmitter);
      var _super = _createSuper(AbstractWeb3Connector2);
      function AbstractWeb3Connector2() {
        var _context, _context2, _context3, _context4;
        var _this;
        (0, _classCallCheck2.default)(this, AbstractWeb3Connector2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "abstract");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "network", "evm");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "account", null);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "chainId", null);
        _this.handleAccountsChanged = (0, _bind.default)(_context = _this.handleAccountsChanged).call(_context, (0, _assertThisInitialized2.default)(_this));
        _this.handleChainChanged = (0, _bind.default)(_context2 = _this.handleChainChanged).call(_context2, (0, _assertThisInitialized2.default)(_this));
        _this.handleConnect = (0, _bind.default)(_context3 = _this.handleConnect).call(_context3, (0, _assertThisInitialized2.default)(_this));
        _this.handleDisconnect = (0, _bind.default)(_context4 = _this.handleDisconnect).call(_context4, (0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(AbstractWeb3Connector2, [{
        key: "subscribeToEvents",
        value: function(provider) {
          if (provider && provider.on) {
            provider.on(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);
            provider.on(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);
            provider.on(_events2.EthereumEvents.CONNECT, this.handleConnect);
            provider.on(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);
          }
        }
      }, {
        key: "unsubscribeToEvents",
        value: function(provider) {
          if (provider && provider.removeListener) {
            provider.removeListener(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);
            provider.removeListener(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);
            provider.removeListener(_events2.EthereumEvents.CONNECT, this.handleConnect);
            provider.removeListener(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);
          }
        }
      }, {
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    throw new Error("Not implemented: activate()");
                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "handleAccountsChanged",
        value: function(accounts) {
          var account = accounts && accounts[0] ? accounts[0].toLowerCase() : null;
          this.account = account;
          this.emit(_events2.ConnectorEvents.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleChainChanged",
        value: function(chainId) {
          var newChainId = (0, _verifyChainId.default)(chainId);
          this.chainId = newChainId;
          this.emit(_events2.ConnectorEvents.CHAIN_CHANGED, newChainId);
        }
      }, {
        key: "handleConnect",
        value: function(connectInfo) {
          this.emit(_events2.ConnectorEvents.CONNECT, connectInfo);
        }
      }, {
        key: "handleDisconnect",
        value: function(error) {
          this.emit(_events2.ConnectorEvents.DISCONNECT, error);
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.unsubscribeToEvents(this.provider);
                    this.account = null;
                    this.chainId = null;
                  case 3:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return AbstractWeb3Connector2;
    }(_events.default);
    var _default = AbstractWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/MoralisRpcs.js
var require_MoralisRpcs = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/MoralisRpcs.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getMoralisRpcs = void 0;
    var getMoralisRpcs = function(speedyNodeKey) {
      return {
        1: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/mainnet"),
        3: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/ropsten"),
        4: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/rinkeby"),
        5: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/goerli"),
        42: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/kovan"),
        137: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mainnet"),
        80001: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mumbai"),
        56: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/mainnet"),
        97: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/testnet"),
        43114: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/mainnet"),
        43113: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/testnet"),
        250: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/fantom/mainnet")
      };
    };
    exports.getMoralisRpcs = getMoralisRpcs;
  }
});

// node_modules/qrcode/lib/can-promise.js
var require_can_promise = __commonJS({
  "node_modules/qrcode/lib/can-promise.js"(exports, module) {
    module.exports = function() {
      return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
    };
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports, module) {
    var toString2 = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString2.call(arr) == "[object Array]";
    };
  }
});

// node_modules/qrcode/lib/utils/typedarray-buffer.js
var require_typedarray_buffer = __commonJS({
  "node_modules/qrcode/lib/utils/typedarray-buffer.js"(exports, module) {
    "use strict";
    var isArray = require_isarray();
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
          return 42;
        } };
        return arr.foo() === 42;
      } catch (e3) {
        return false;
      }
    }
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    var K_MAX_LENGTH = Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    function Buffer2(arg, offset, length) {
      if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
        return new Buffer2(arg, offset, length);
      }
      if (typeof arg === "number") {
        return allocUnsafe(this, arg);
      }
      return from(this, arg, offset, length);
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
        Object.defineProperty(Buffer2, Symbol.species, {
          value: null,
          configurable: true,
          enumerable: false,
          writable: false
        });
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function isnan(val) {
      return val !== val;
    }
    function createBuffer(that, length) {
      var buf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        buf = new Uint8Array(length);
        buf.__proto__ = Buffer2.prototype;
      } else {
        buf = that;
        if (buf === null) {
          buf = new Buffer2(length);
        }
        buf.length = length;
      }
      return buf;
    }
    function allocUnsafe(that, size) {
      var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT) {
        for (var i4 = 0; i4 < size; ++i4) {
          buf[i4] = 0;
        }
      }
      return buf;
    }
    function fromString(that, string) {
      var length = byteLength(string) | 0;
      var buf = createBuffer(that, length);
      var actual = buf.write(string);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(that, length);
      for (var i4 = 0; i4 < length; i4 += 1) {
        buf[i4] = array[i4] & 255;
      }
      return buf;
    }
    function fromArrayBuffer(that, array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError("'length' is out of bounds");
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        buf.__proto__ = Buffer2.prototype;
      } else {
        buf = fromArrayLike(that, buf);
      }
      return buf;
    }
    function fromObject(that, obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(that, len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
          if (typeof obj.length !== "number" || isnan(obj.length)) {
            return createBuffer(that, 0);
          }
          return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i4 = 0; i4 < length; ++i4) {
        codePoint = string.charCodeAt(i4);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i4 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function byteLength(string) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        string = "" + string;
      }
      var len = string.length;
      if (len === 0)
        return 0;
      return utf8ToBytes(string).length;
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i4 = 0; i4 < length; ++i4) {
        if (i4 + offset >= dst.length || i4 >= src.length)
          break;
        dst[i4 + offset] = src[i4];
      }
      return i4;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function from(that, value, offset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, offset, length);
      }
      if (typeof value === "string") {
        return fromString(that, value, offset);
      }
      return fromObject(that, value);
    }
    Buffer2.prototype.write = function write(string, offset, length) {
      if (offset === void 0) {
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
        } else {
          length = void 0;
        }
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      return utf8Write(this, string, offset, length);
    };
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i4 = 0; i4 < sliceLen; ++i4) {
          newBuf[i4] = this[i4 + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i4;
      if (this === target && start < targetStart && targetStart < end) {
        for (i4 = len - 1; i4 >= 0; --i4) {
          target[i4 + targetStart] = this[i4 + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i4 = 0; i4 < len; ++i4) {
          target[i4 + targetStart] = this[i4 + start];
        }
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i4;
      if (typeof val === "number") {
        for (i4 = start; i4 < end; ++i4) {
          this[i4] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : new Buffer2(val);
        var len = bytes.length;
        for (i4 = 0; i4 < end - start; ++i4) {
          this[i4 + start] = bytes[i4 % len];
        }
      }
      return this;
    };
    Buffer2.concat = function concat2(list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return createBuffer(null, 0);
      }
      var i4;
      if (length === void 0) {
        length = 0;
        for (i4 = 0; i4 < list.length; ++i4) {
          length += list[i4].length;
        }
      }
      var buffer = allocUnsafe(null, length);
      var pos = 0;
      for (i4 = 0; i4 < list.length; ++i4) {
        var buf = list[i4];
        if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.isBuffer = function isBuffer(b3) {
      return !!(b3 != null && b3._isBuffer);
    };
    module.exports.alloc = function(size) {
      var buffer = new Buffer2(size);
      buffer.fill(0);
      return buffer;
    };
    module.exports.from = function(data) {
      return new Buffer2(data);
    };
  }
});

// node_modules/qrcode/lib/core/utils.js
var require_utils = __commonJS({
  "node_modules/qrcode/lib/core/utils.js"(exports) {
    var toSJISFunction;
    var CODEWORDS_COUNT = [
      0,
      26,
      44,
      70,
      100,
      134,
      172,
      196,
      242,
      292,
      346,
      404,
      466,
      532,
      581,
      655,
      733,
      815,
      901,
      991,
      1085,
      1156,
      1258,
      1364,
      1474,
      1588,
      1706,
      1828,
      1921,
      2051,
      2185,
      2323,
      2465,
      2611,
      2761,
      2876,
      3034,
      3196,
      3362,
      3532,
      3706
    ];
    exports.getSymbolSize = function getSymbolSize(version25) {
      if (!version25)
        throw new Error('"version" cannot be null or undefined');
      if (version25 < 1 || version25 > 40)
        throw new Error('"version" should be in range from 1 to 40');
      return version25 * 4 + 17;
    };
    exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version25) {
      return CODEWORDS_COUNT[version25];
    };
    exports.getBCHDigit = function(data) {
      var digit = 0;
      while (data !== 0) {
        digit++;
        data >>>= 1;
      }
      return digit;
    };
    exports.setToSJISFunction = function setToSJISFunction(f4) {
      if (typeof f4 !== "function") {
        throw new Error('"toSJISFunc" is not a valid function.');
      }
      toSJISFunction = f4;
    };
    exports.isKanjiModeEnabled = function() {
      return typeof toSJISFunction !== "undefined";
    };
    exports.toSJIS = function toSJIS(kanji) {
      return toSJISFunction(kanji);
    };
  }
});

// node_modules/qrcode/lib/core/error-correction-level.js
var require_error_correction_level = __commonJS({
  "node_modules/qrcode/lib/core/error-correction-level.js"(exports) {
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };
    function fromString(string) {
      if (typeof string !== "string") {
        throw new Error("Param is not a string");
      }
      var lcStr = string.toLowerCase();
      switch (lcStr) {
        case "l":
        case "low":
          return exports.L;
        case "m":
        case "medium":
          return exports.M;
        case "q":
        case "quartile":
          return exports.Q;
        case "h":
        case "high":
          return exports.H;
        default:
          throw new Error("Unknown EC Level: " + string);
      }
    }
    exports.isValid = function isValid(level) {
      return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
    };
    exports.from = function from(value, defaultValue) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString(value);
      } catch (e3) {
        return defaultValue;
      }
    };
  }
});

// node_modules/qrcode/lib/core/bit-buffer.js
var require_bit_buffer = __commonJS({
  "node_modules/qrcode/lib/core/bit-buffer.js"(exports, module) {
    function BitBuffer() {
      this.buffer = [];
      this.length = 0;
    }
    BitBuffer.prototype = {
      get: function(index) {
        var bufIndex = Math.floor(index / 8);
        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
      },
      put: function(num, length) {
        for (var i4 = 0; i4 < length; i4++) {
          this.putBit((num >>> length - i4 - 1 & 1) === 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module.exports = BitBuffer;
  }
});

// node_modules/qrcode/lib/core/bit-matrix.js
var require_bit_matrix = __commonJS({
  "node_modules/qrcode/lib/core/bit-matrix.js"(exports, module) {
    var BufferUtil = require_typedarray_buffer();
    function BitMatrix(size) {
      if (!size || size < 1) {
        throw new Error("BitMatrix size must be defined and greater than 0");
      }
      this.size = size;
      this.data = BufferUtil.alloc(size * size);
      this.reservedBit = BufferUtil.alloc(size * size);
    }
    BitMatrix.prototype.set = function(row, col, value, reserved) {
      var index = row * this.size + col;
      this.data[index] = value;
      if (reserved)
        this.reservedBit[index] = true;
    };
    BitMatrix.prototype.get = function(row, col) {
      return this.data[row * this.size + col];
    };
    BitMatrix.prototype.xor = function(row, col, value) {
      this.data[row * this.size + col] ^= value;
    };
    BitMatrix.prototype.isReserved = function(row, col) {
      return this.reservedBit[row * this.size + col];
    };
    module.exports = BitMatrix;
  }
});

// node_modules/qrcode/lib/core/alignment-pattern.js
var require_alignment_pattern = __commonJS({
  "node_modules/qrcode/lib/core/alignment-pattern.js"(exports) {
    var getSymbolSize = require_utils().getSymbolSize;
    exports.getRowColCoords = function getRowColCoords(version25) {
      if (version25 === 1)
        return [];
      var posCount = Math.floor(version25 / 7) + 2;
      var size = getSymbolSize(version25);
      var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
      var positions = [size - 7];
      for (var i4 = 1; i4 < posCount - 1; i4++) {
        positions[i4] = positions[i4 - 1] - intervals;
      }
      positions.push(6);
      return positions.reverse();
    };
    exports.getPositions = function getPositions(version25) {
      var coords = [];
      var pos = exports.getRowColCoords(version25);
      var posLength = pos.length;
      for (var i4 = 0; i4 < posLength; i4++) {
        for (var j4 = 0; j4 < posLength; j4++) {
          if (i4 === 0 && j4 === 0 || i4 === 0 && j4 === posLength - 1 || i4 === posLength - 1 && j4 === 0) {
            continue;
          }
          coords.push([pos[i4], pos[j4]]);
        }
      }
      return coords;
    };
  }
});

// node_modules/qrcode/lib/core/finder-pattern.js
var require_finder_pattern = __commonJS({
  "node_modules/qrcode/lib/core/finder-pattern.js"(exports) {
    var getSymbolSize = require_utils().getSymbolSize;
    var FINDER_PATTERN_SIZE = 7;
    exports.getPositions = function getPositions(version25) {
      var size = getSymbolSize(version25);
      return [
        [0, 0],
        [size - FINDER_PATTERN_SIZE, 0],
        [0, size - FINDER_PATTERN_SIZE]
      ];
    };
  }
});

// node_modules/qrcode/lib/core/mask-pattern.js
var require_mask_pattern = __commonJS({
  "node_modules/qrcode/lib/core/mask-pattern.js"(exports) {
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };
    exports.isValid = function isValid(mask) {
      return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
    };
    exports.from = function from(value) {
      return exports.isValid(value) ? parseInt(value, 10) : void 0;
    };
    exports.getPenaltyN1 = function getPenaltyN1(data) {
      var size = data.size;
      var points = 0;
      var sameCountCol = 0;
      var sameCountRow = 0;
      var lastCol = null;
      var lastRow = null;
      for (var row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;
        for (var col = 0; col < size; col++) {
          var module2 = data.get(row, col);
          if (module2 === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5)
              points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module2;
            sameCountCol = 1;
          }
          module2 = data.get(col, row);
          if (module2 === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5)
              points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module2;
            sameCountRow = 1;
          }
        }
        if (sameCountCol >= 5)
          points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5)
          points += PenaltyScores.N1 + (sameCountRow - 5);
      }
      return points;
    };
    exports.getPenaltyN2 = function getPenaltyN2(data) {
      var size = data.size;
      var points = 0;
      for (var row = 0; row < size - 1; row++) {
        for (var col = 0; col < size - 1; col++) {
          var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
          if (last === 4 || last === 0)
            points++;
        }
      }
      return points * PenaltyScores.N2;
    };
    exports.getPenaltyN3 = function getPenaltyN3(data) {
      var size = data.size;
      var points = 0;
      var bitsCol = 0;
      var bitsRow = 0;
      for (var row = 0; row < size; row++) {
        bitsCol = bitsRow = 0;
        for (var col = 0; col < size; col++) {
          bitsCol = bitsCol << 1 & 2047 | data.get(row, col);
          if (col >= 10 && (bitsCol === 1488 || bitsCol === 93))
            points++;
          bitsRow = bitsRow << 1 & 2047 | data.get(col, row);
          if (col >= 10 && (bitsRow === 1488 || bitsRow === 93))
            points++;
        }
      }
      return points * PenaltyScores.N3;
    };
    exports.getPenaltyN4 = function getPenaltyN4(data) {
      var darkCount = 0;
      var modulesCount = data.data.length;
      for (var i4 = 0; i4 < modulesCount; i4++)
        darkCount += data.data[i4];
      var k4 = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
      return k4 * PenaltyScores.N4;
    };
    function getMaskAt(maskPattern, i4, j4) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000:
          return (i4 + j4) % 2 === 0;
        case exports.Patterns.PATTERN001:
          return i4 % 2 === 0;
        case exports.Patterns.PATTERN010:
          return j4 % 3 === 0;
        case exports.Patterns.PATTERN011:
          return (i4 + j4) % 3 === 0;
        case exports.Patterns.PATTERN100:
          return (Math.floor(i4 / 2) + Math.floor(j4 / 3)) % 2 === 0;
        case exports.Patterns.PATTERN101:
          return i4 * j4 % 2 + i4 * j4 % 3 === 0;
        case exports.Patterns.PATTERN110:
          return (i4 * j4 % 2 + i4 * j4 % 3) % 2 === 0;
        case exports.Patterns.PATTERN111:
          return (i4 * j4 % 3 + (i4 + j4) % 2) % 2 === 0;
        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    }
    exports.applyMask = function applyMask(pattern, data) {
      var size = data.size;
      for (var col = 0; col < size; col++) {
        for (var row = 0; row < size; row++) {
          if (data.isReserved(row, col))
            continue;
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };
    exports.getBestMask = function getBestMask(data, setupFormatFunc) {
      var numPatterns = Object.keys(exports.Patterns).length;
      var bestPattern = 0;
      var lowerPenalty = Infinity;
      for (var p4 = 0; p4 < numPatterns; p4++) {
        setupFormatFunc(p4);
        exports.applyMask(p4, data);
        var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);
        exports.applyMask(p4, data);
        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p4;
        }
      }
      return bestPattern;
    };
  }
});

// node_modules/qrcode/lib/core/error-correction-code.js
var require_error_correction_code = __commonJS({
  "node_modules/qrcode/lib/core/error-correction-code.js"(exports) {
    var ECLevel = require_error_correction_level();
    var EC_BLOCKS_TABLE = [
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      2,
      2,
      4,
      1,
      2,
      4,
      4,
      2,
      4,
      4,
      4,
      2,
      4,
      6,
      5,
      2,
      4,
      6,
      6,
      2,
      5,
      8,
      8,
      4,
      5,
      8,
      8,
      4,
      5,
      8,
      11,
      4,
      8,
      10,
      11,
      4,
      9,
      12,
      16,
      4,
      9,
      16,
      16,
      6,
      10,
      12,
      18,
      6,
      10,
      17,
      16,
      6,
      11,
      16,
      19,
      6,
      13,
      18,
      21,
      7,
      14,
      21,
      25,
      8,
      16,
      20,
      25,
      8,
      17,
      23,
      25,
      9,
      17,
      23,
      34,
      9,
      18,
      25,
      30,
      10,
      20,
      27,
      32,
      12,
      21,
      29,
      35,
      12,
      23,
      34,
      37,
      12,
      25,
      34,
      40,
      13,
      26,
      35,
      42,
      14,
      28,
      38,
      45,
      15,
      29,
      40,
      48,
      16,
      31,
      43,
      51,
      17,
      33,
      45,
      54,
      18,
      35,
      48,
      57,
      19,
      37,
      51,
      60,
      19,
      38,
      53,
      63,
      20,
      40,
      56,
      66,
      21,
      43,
      59,
      70,
      22,
      45,
      62,
      74,
      24,
      47,
      65,
      77,
      25,
      49,
      68,
      81
    ];
    var EC_CODEWORDS_TABLE = [
      7,
      10,
      13,
      17,
      10,
      16,
      22,
      28,
      15,
      26,
      36,
      44,
      20,
      36,
      52,
      64,
      26,
      48,
      72,
      88,
      36,
      64,
      96,
      112,
      40,
      72,
      108,
      130,
      48,
      88,
      132,
      156,
      60,
      110,
      160,
      192,
      72,
      130,
      192,
      224,
      80,
      150,
      224,
      264,
      96,
      176,
      260,
      308,
      104,
      198,
      288,
      352,
      120,
      216,
      320,
      384,
      132,
      240,
      360,
      432,
      144,
      280,
      408,
      480,
      168,
      308,
      448,
      532,
      180,
      338,
      504,
      588,
      196,
      364,
      546,
      650,
      224,
      416,
      600,
      700,
      224,
      442,
      644,
      750,
      252,
      476,
      690,
      816,
      270,
      504,
      750,
      900,
      300,
      560,
      810,
      960,
      312,
      588,
      870,
      1050,
      336,
      644,
      952,
      1110,
      360,
      700,
      1020,
      1200,
      390,
      728,
      1050,
      1260,
      420,
      784,
      1140,
      1350,
      450,
      812,
      1200,
      1440,
      480,
      868,
      1290,
      1530,
      510,
      924,
      1350,
      1620,
      540,
      980,
      1440,
      1710,
      570,
      1036,
      1530,
      1800,
      570,
      1064,
      1590,
      1890,
      600,
      1120,
      1680,
      1980,
      630,
      1204,
      1770,
      2100,
      660,
      1260,
      1860,
      2220,
      720,
      1316,
      1950,
      2310,
      750,
      1372,
      2040,
      2430
    ];
    exports.getBlocksCount = function getBlocksCount(version25, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_BLOCKS_TABLE[(version25 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_BLOCKS_TABLE[(version25 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_BLOCKS_TABLE[(version25 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_BLOCKS_TABLE[(version25 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    exports.getTotalCodewordsCount = function getTotalCodewordsCount(version25, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_CODEWORDS_TABLE[(version25 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_CODEWORDS_TABLE[(version25 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_CODEWORDS_TABLE[(version25 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_CODEWORDS_TABLE[(version25 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
  }
});

// node_modules/qrcode/lib/core/galois-field.js
var require_galois_field = __commonJS({
  "node_modules/qrcode/lib/core/galois-field.js"(exports) {
    var BufferUtil = require_typedarray_buffer();
    var EXP_TABLE = BufferUtil.alloc(512);
    var LOG_TABLE = BufferUtil.alloc(256);
    (function initTables() {
      var x4 = 1;
      for (var i4 = 0; i4 < 255; i4++) {
        EXP_TABLE[i4] = x4;
        LOG_TABLE[x4] = i4;
        x4 <<= 1;
        if (x4 & 256) {
          x4 ^= 285;
        }
      }
      for (i4 = 255; i4 < 512; i4++) {
        EXP_TABLE[i4] = EXP_TABLE[i4 - 255];
      }
    })();
    exports.log = function log4(n3) {
      if (n3 < 1)
        throw new Error("log(" + n3 + ")");
      return LOG_TABLE[n3];
    };
    exports.exp = function exp(n3) {
      return EXP_TABLE[n3];
    };
    exports.mul = function mul3(x4, y4) {
      if (x4 === 0 || y4 === 0)
        return 0;
      return EXP_TABLE[LOG_TABLE[x4] + LOG_TABLE[y4]];
    };
  }
});

// node_modules/qrcode/lib/core/polynomial.js
var require_polynomial = __commonJS({
  "node_modules/qrcode/lib/core/polynomial.js"(exports) {
    var BufferUtil = require_typedarray_buffer();
    var GF = require_galois_field();
    exports.mul = function mul3(p1, p22) {
      var coeff = BufferUtil.alloc(p1.length + p22.length - 1);
      for (var i4 = 0; i4 < p1.length; i4++) {
        for (var j4 = 0; j4 < p22.length; j4++) {
          coeff[i4 + j4] ^= GF.mul(p1[i4], p22[j4]);
        }
      }
      return coeff;
    };
    exports.mod = function mod(divident, divisor) {
      var result = BufferUtil.from(divident);
      while (result.length - divisor.length >= 0) {
        var coeff = result[0];
        for (var i4 = 0; i4 < divisor.length; i4++) {
          result[i4] ^= GF.mul(divisor[i4], coeff);
        }
        var offset = 0;
        while (offset < result.length && result[offset] === 0)
          offset++;
        result = result.slice(offset);
      }
      return result;
    };
    exports.generateECPolynomial = function generateECPolynomial(degree) {
      var poly = BufferUtil.from([1]);
      for (var i4 = 0; i4 < degree; i4++) {
        poly = exports.mul(poly, [1, GF.exp(i4)]);
      }
      return poly;
    };
  }
});

// node_modules/qrcode/lib/core/reed-solomon-encoder.js
var require_reed_solomon_encoder = __commonJS({
  "node_modules/qrcode/lib/core/reed-solomon-encoder.js"(exports, module) {
    var BufferUtil = require_typedarray_buffer();
    var Polynomial = require_polynomial();
    var Buffer2 = require_buffer().Buffer;
    function ReedSolomonEncoder(degree) {
      this.genPoly = void 0;
      this.degree = degree;
      if (this.degree)
        this.initialize(this.degree);
    }
    ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
      this.degree = degree;
      this.genPoly = Polynomial.generateECPolynomial(this.degree);
    };
    ReedSolomonEncoder.prototype.encode = function encode4(data) {
      if (!this.genPoly) {
        throw new Error("Encoder not initialized");
      }
      var pad = BufferUtil.alloc(this.degree);
      var paddedData = Buffer2.concat([data, pad], data.length + this.degree);
      var remainder = Polynomial.mod(paddedData, this.genPoly);
      var start = this.degree - remainder.length;
      if (start > 0) {
        var buff = BufferUtil.alloc(this.degree);
        remainder.copy(buff, start);
        return buff;
      }
      return remainder;
    };
    module.exports = ReedSolomonEncoder;
  }
});

// node_modules/qrcode/lib/core/version-check.js
var require_version_check = __commonJS({
  "node_modules/qrcode/lib/core/version-check.js"(exports) {
    exports.isValid = function isValid(version25) {
      return !isNaN(version25) && version25 >= 1 && version25 <= 40;
    };
  }
});

// node_modules/qrcode/lib/core/regex.js
var require_regex = __commonJS({
  "node_modules/qrcode/lib/core/regex.js"(exports) {
    var numeric = "[0-9]+";
    var alphanumeric = "[A-Z $%*+\\-./:]+";
    var kanji = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    kanji = kanji.replace(/u/g, "\\u");
    var byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";
    exports.KANJI = new RegExp(kanji, "g");
    exports.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
    exports.BYTE = new RegExp(byte, "g");
    exports.NUMERIC = new RegExp(numeric, "g");
    exports.ALPHANUMERIC = new RegExp(alphanumeric, "g");
    var TEST_KANJI = new RegExp("^" + kanji + "$");
    var TEST_NUMERIC = new RegExp("^" + numeric + "$");
    var TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
    exports.testKanji = function testKanji(str) {
      return TEST_KANJI.test(str);
    };
    exports.testNumeric = function testNumeric(str) {
      return TEST_NUMERIC.test(str);
    };
    exports.testAlphanumeric = function testAlphanumeric(str) {
      return TEST_ALPHANUMERIC.test(str);
    };
  }
});

// node_modules/qrcode/lib/core/mode.js
var require_mode = __commonJS({
  "node_modules/qrcode/lib/core/mode.js"(exports) {
    var VersionCheck = require_version_check();
    var Regex = require_regex();
    exports.NUMERIC = {
      id: "Numeric",
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };
    exports.ALPHANUMERIC = {
      id: "Alphanumeric",
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };
    exports.BYTE = {
      id: "Byte",
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };
    exports.KANJI = {
      id: "Kanji",
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };
    exports.MIXED = {
      bit: -1
    };
    exports.getCharCountIndicator = function getCharCountIndicator(mode, version25) {
      if (!mode.ccBits)
        throw new Error("Invalid mode: " + mode);
      if (!VersionCheck.isValid(version25)) {
        throw new Error("Invalid version: " + version25);
      }
      if (version25 >= 1 && version25 < 10)
        return mode.ccBits[0];
      else if (version25 < 27)
        return mode.ccBits[1];
      return mode.ccBits[2];
    };
    exports.getBestModeForData = function getBestModeForData(dataStr) {
      if (Regex.testNumeric(dataStr))
        return exports.NUMERIC;
      else if (Regex.testAlphanumeric(dataStr))
        return exports.ALPHANUMERIC;
      else if (Regex.testKanji(dataStr))
        return exports.KANJI;
      else
        return exports.BYTE;
    };
    exports.toString = function toString2(mode) {
      if (mode && mode.id)
        return mode.id;
      throw new Error("Invalid mode");
    };
    exports.isValid = function isValid(mode) {
      return mode && mode.bit && mode.ccBits;
    };
    function fromString(string) {
      if (typeof string !== "string") {
        throw new Error("Param is not a string");
      }
      var lcStr = string.toLowerCase();
      switch (lcStr) {
        case "numeric":
          return exports.NUMERIC;
        case "alphanumeric":
          return exports.ALPHANUMERIC;
        case "kanji":
          return exports.KANJI;
        case "byte":
          return exports.BYTE;
        default:
          throw new Error("Unknown mode: " + string);
      }
    }
    exports.from = function from(value, defaultValue) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString(value);
      } catch (e3) {
        return defaultValue;
      }
    };
  }
});

// node_modules/qrcode/lib/core/version.js
var require_version = __commonJS({
  "node_modules/qrcode/lib/core/version.js"(exports) {
    var Utils = require_utils();
    var ECCode = require_error_correction_code();
    var ECLevel = require_error_correction_level();
    var Mode = require_mode();
    var VersionCheck = require_version_check();
    var isArray = require_isarray();
    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
    var G18_BCH = Utils.getBCHDigit(G18);
    function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    function getReservedBitsCount(mode, version25) {
      return Mode.getCharCountIndicator(mode, version25) + 4;
    }
    function getTotalBitsFromDataArray(segments, version25) {
      var totalBits = 0;
      segments.forEach(function(data) {
        var reservedBits = getReservedBitsCount(data.mode, version25);
        totalBits += reservedBits + data.getBitsLength();
      });
      return totalBits;
    }
    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        var length = getTotalBitsFromDataArray(segments, currentVersion);
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    exports.from = function from(value, defaultValue) {
      if (VersionCheck.isValid(value)) {
        return parseInt(value, 10);
      }
      return defaultValue;
    };
    exports.getCapacity = function getCapacity(version25, errorCorrectionLevel, mode) {
      if (!VersionCheck.isValid(version25)) {
        throw new Error("Invalid QR Code version");
      }
      if (typeof mode === "undefined")
        mode = Mode.BYTE;
      var totalCodewords = Utils.getSymbolTotalCodewords(version25);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version25, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (mode === Mode.MIXED)
        return dataTotalCodewordsBits;
      var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version25);
      switch (mode) {
        case Mode.NUMERIC:
          return Math.floor(usableBits / 10 * 3);
        case Mode.ALPHANUMERIC:
          return Math.floor(usableBits / 11 * 2);
        case Mode.KANJI:
          return Math.floor(usableBits / 13);
        case Mode.BYTE:
        default:
          return Math.floor(usableBits / 8);
      }
    };
    exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
      var seg;
      var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
      if (isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl);
        }
        if (data.length === 0) {
          return 1;
        }
        seg = data[0];
      } else {
        seg = data;
      }
      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
    };
    exports.getEncodedBits = function getEncodedBits(version25) {
      if (!VersionCheck.isValid(version25) || version25 < 7) {
        throw new Error("Invalid QR Code version");
      }
      var d4 = version25 << 12;
      while (Utils.getBCHDigit(d4) - G18_BCH >= 0) {
        d4 ^= G18 << Utils.getBCHDigit(d4) - G18_BCH;
      }
      return version25 << 12 | d4;
    };
  }
});

// node_modules/qrcode/lib/core/format-info.js
var require_format_info = __commonJS({
  "node_modules/qrcode/lib/core/format-info.js"(exports) {
    var Utils = require_utils();
    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
    var G15_BCH = Utils.getBCHDigit(G15);
    exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
      var data = errorCorrectionLevel.bit << 3 | mask;
      var d4 = data << 10;
      while (Utils.getBCHDigit(d4) - G15_BCH >= 0) {
        d4 ^= G15 << Utils.getBCHDigit(d4) - G15_BCH;
      }
      return (data << 10 | d4) ^ G15_MASK;
    };
  }
});

// node_modules/qrcode/lib/core/numeric-data.js
var require_numeric_data = __commonJS({
  "node_modules/qrcode/lib/core/numeric-data.js"(exports, module) {
    var Mode = require_mode();
    function NumericData(data) {
      this.mode = Mode.NUMERIC;
      this.data = data.toString();
    }
    NumericData.getBitsLength = function getBitsLength(length) {
      return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
    };
    NumericData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    NumericData.prototype.getBitsLength = function getBitsLength() {
      return NumericData.getBitsLength(this.data.length);
    };
    NumericData.prototype.write = function write(bitBuffer) {
      var i4, group, value;
      for (i4 = 0; i4 + 3 <= this.data.length; i4 += 3) {
        group = this.data.substr(i4, 3);
        value = parseInt(group, 10);
        bitBuffer.put(value, 10);
      }
      var remainingNum = this.data.length - i4;
      if (remainingNum > 0) {
        group = this.data.substr(i4);
        value = parseInt(group, 10);
        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };
    module.exports = NumericData;
  }
});

// node_modules/qrcode/lib/core/alphanumeric-data.js
var require_alphanumeric_data = __commonJS({
  "node_modules/qrcode/lib/core/alphanumeric-data.js"(exports, module) {
    var Mode = require_mode();
    var ALPHA_NUM_CHARS = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      " ",
      "$",
      "%",
      "*",
      "+",
      "-",
      ".",
      "/",
      ":"
    ];
    function AlphanumericData(data) {
      this.mode = Mode.ALPHANUMERIC;
      this.data = data;
    }
    AlphanumericData.getBitsLength = function getBitsLength(length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2);
    };
    AlphanumericData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    AlphanumericData.prototype.getBitsLength = function getBitsLength() {
      return AlphanumericData.getBitsLength(this.data.length);
    };
    AlphanumericData.prototype.write = function write(bitBuffer) {
      var i4;
      for (i4 = 0; i4 + 2 <= this.data.length; i4 += 2) {
        var value = ALPHA_NUM_CHARS.indexOf(this.data[i4]) * 45;
        value += ALPHA_NUM_CHARS.indexOf(this.data[i4 + 1]);
        bitBuffer.put(value, 11);
      }
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i4]), 6);
      }
    };
    module.exports = AlphanumericData;
  }
});

// node_modules/qrcode/lib/core/byte-data.js
var require_byte_data = __commonJS({
  "node_modules/qrcode/lib/core/byte-data.js"(exports, module) {
    var BufferUtil = require_typedarray_buffer();
    var Mode = require_mode();
    function ByteData(data) {
      this.mode = Mode.BYTE;
      this.data = BufferUtil.from(data);
    }
    ByteData.getBitsLength = function getBitsLength(length) {
      return length * 8;
    };
    ByteData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    ByteData.prototype.getBitsLength = function getBitsLength() {
      return ByteData.getBitsLength(this.data.length);
    };
    ByteData.prototype.write = function(bitBuffer) {
      for (var i4 = 0, l4 = this.data.length; i4 < l4; i4++) {
        bitBuffer.put(this.data[i4], 8);
      }
    };
    module.exports = ByteData;
  }
});

// node_modules/qrcode/lib/core/kanji-data.js
var require_kanji_data = __commonJS({
  "node_modules/qrcode/lib/core/kanji-data.js"(exports, module) {
    var Mode = require_mode();
    var Utils = require_utils();
    function KanjiData(data) {
      this.mode = Mode.KANJI;
      this.data = data;
    }
    KanjiData.getBitsLength = function getBitsLength(length) {
      return length * 13;
    };
    KanjiData.prototype.getLength = function getLength2() {
      return this.data.length;
    };
    KanjiData.prototype.getBitsLength = function getBitsLength() {
      return KanjiData.getBitsLength(this.data.length);
    };
    KanjiData.prototype.write = function(bitBuffer) {
      var i4;
      for (i4 = 0; i4 < this.data.length; i4++) {
        var value = Utils.toSJIS(this.data[i4]);
        if (value >= 33088 && value <= 40956) {
          value -= 33088;
        } else if (value >= 57408 && value <= 60351) {
          value -= 49472;
        } else {
          throw new Error("Invalid SJIS character: " + this.data[i4] + "\nMake sure your charset is UTF-8");
        }
        value = (value >>> 8 & 255) * 192 + (value & 255);
        bitBuffer.put(value, 13);
      }
    };
    module.exports = KanjiData;
  }
});

// node_modules/dijkstrajs/dijkstra.js
var require_dijkstra = __commonJS({
  "node_modules/dijkstrajs/dijkstra.js"(exports, module) {
    "use strict";
    var dijkstra = {
      single_source_shortest_paths: function(graph, s4, d4) {
        var predecessors = {};
        var costs = {};
        costs[s4] = 0;
        var open = dijkstra.PriorityQueue.make();
        open.push(s4, 0);
        var closest, u4, v4, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;
        while (!open.empty()) {
          closest = open.pop();
          u4 = closest.value;
          cost_of_s_to_u = closest.cost;
          adjacent_nodes = graph[u4] || {};
          for (v4 in adjacent_nodes) {
            if (adjacent_nodes.hasOwnProperty(v4)) {
              cost_of_e = adjacent_nodes[v4];
              cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;
              cost_of_s_to_v = costs[v4];
              first_visit = typeof costs[v4] === "undefined";
              if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                costs[v4] = cost_of_s_to_u_plus_cost_of_e;
                open.push(v4, cost_of_s_to_u_plus_cost_of_e);
                predecessors[v4] = u4;
              }
            }
          }
        }
        if (typeof d4 !== "undefined" && typeof costs[d4] === "undefined") {
          var msg = ["Could not find a path from ", s4, " to ", d4, "."].join("");
          throw new Error(msg);
        }
        return predecessors;
      },
      extract_shortest_path_from_predecessor_list: function(predecessors, d4) {
        var nodes = [];
        var u4 = d4;
        var predecessor;
        while (u4) {
          nodes.push(u4);
          predecessor = predecessors[u4];
          u4 = predecessors[u4];
        }
        nodes.reverse();
        return nodes;
      },
      find_path: function(graph, s4, d4) {
        var predecessors = dijkstra.single_source_shortest_paths(graph, s4, d4);
        return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d4);
      },
      PriorityQueue: {
        make: function(opts) {
          var T4 = dijkstra.PriorityQueue, t4 = {}, key2;
          opts = opts || {};
          for (key2 in T4) {
            if (T4.hasOwnProperty(key2)) {
              t4[key2] = T4[key2];
            }
          }
          t4.queue = [];
          t4.sorter = opts.sorter || T4.default_sorter;
          return t4;
        },
        default_sorter: function(a4, b3) {
          return a4.cost - b3.cost;
        },
        push: function(value, cost) {
          var item = { value, cost };
          this.queue.push(item);
          this.queue.sort(this.sorter);
        },
        pop: function() {
          return this.queue.shift();
        },
        empty: function() {
          return this.queue.length === 0;
        }
      }
    };
    if (typeof module !== "undefined") {
      module.exports = dijkstra;
    }
  }
});

// node_modules/qrcode/lib/core/segments.js
var require_segments = __commonJS({
  "node_modules/qrcode/lib/core/segments.js"(exports) {
    var Mode = require_mode();
    var NumericData = require_numeric_data();
    var AlphanumericData = require_alphanumeric_data();
    var ByteData = require_byte_data();
    var KanjiData = require_kanji_data();
    var Regex = require_regex();
    var Utils = require_utils();
    var dijkstra = require_dijkstra();
    function getStringByteLength(str) {
      return unescape(encodeURIComponent(str)).length;
    }
    function getSegments(regex, mode, str) {
      var segments = [];
      var result;
      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode,
          length: result[0].length
        });
      }
      return segments;
    }
    function getSegmentsFromString(dataStr) {
      var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
      var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
      var byteSegs;
      var kanjiSegs;
      if (Utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
        kanjiSegs = [];
      }
      var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
      return segs.sort(function(s1, s22) {
        return s1.index - s22.index;
      }).map(function(obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        };
      });
    }
    function getSegmentBitsLength(length, mode) {
      switch (mode) {
        case Mode.NUMERIC:
          return NumericData.getBitsLength(length);
        case Mode.ALPHANUMERIC:
          return AlphanumericData.getBitsLength(length);
        case Mode.KANJI:
          return KanjiData.getBitsLength(length);
        case Mode.BYTE:
          return ByteData.getBitsLength(length);
      }
    }
    function mergeSegments(segs) {
      return segs.reduce(function(acc, curr) {
        var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc;
        }
        acc.push(curr);
        return acc;
      }, []);
    }
    function buildNodes(segs) {
      var nodes = [];
      for (var i4 = 0; i4 < segs.length; i4++) {
        var seg = segs[i4];
        switch (seg.mode) {
          case Mode.NUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.ALPHANUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.KANJI:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break;
          case Mode.BYTE:
            nodes.push([
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }
      return nodes;
    }
    function buildGraph(nodes, version25) {
      var table = {};
      var graph = { "start": {} };
      var prevNodeIds = ["start"];
      for (var i4 = 0; i4 < nodes.length; i4++) {
        var nodeGroup = nodes[i4];
        var currentNodeIds = [];
        for (var j4 = 0; j4 < nodeGroup.length; j4++) {
          var node = nodeGroup[j4];
          var key2 = "" + i4 + j4;
          currentNodeIds.push(key2);
          table[key2] = { node, lastCount: 0 };
          graph[key2] = {};
          for (var n3 = 0; n3 < prevNodeIds.length; n3++) {
            var prevNodeId = prevNodeIds[n3];
            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key2] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
              table[prevNodeId].lastCount += node.length;
            } else {
              if (table[prevNodeId])
                table[prevNodeId].lastCount = node.length;
              graph[prevNodeId][key2] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version25);
            }
          }
        }
        prevNodeIds = currentNodeIds;
      }
      for (n3 = 0; n3 < prevNodeIds.length; n3++) {
        graph[prevNodeIds[n3]]["end"] = 0;
      }
      return { map: graph, table };
    }
    function buildSingleSegment(data, modesHint) {
      var mode;
      var bestMode = Mode.getBestModeForData(data);
      mode = Mode.from(modesHint, bestMode);
      if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
        throw new Error('"' + data + '" cannot be encoded with mode ' + Mode.toString(mode) + ".\n Suggested mode is: " + Mode.toString(bestMode));
      }
      if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
        mode = Mode.BYTE;
      }
      switch (mode) {
        case Mode.NUMERIC:
          return new NumericData(data);
        case Mode.ALPHANUMERIC:
          return new AlphanumericData(data);
        case Mode.KANJI:
          return new KanjiData(data);
        case Mode.BYTE:
          return new ByteData(data);
      }
    }
    exports.fromArray = function fromArray(array) {
      return array.reduce(function(acc, seg) {
        if (typeof seg === "string") {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }
        return acc;
      }, []);
    };
    exports.fromString = function fromString(data, version25) {
      var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
      var nodes = buildNodes(segs);
      var graph = buildGraph(nodes, version25);
      var path = dijkstra.find_path(graph.map, "start", "end");
      var optimizedSegs = [];
      for (var i4 = 1; i4 < path.length - 1; i4++) {
        optimizedSegs.push(graph.table[path[i4]].node);
      }
      return exports.fromArray(mergeSegments(optimizedSegs));
    };
    exports.rawSplit = function rawSplit(data) {
      return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));
    };
  }
});

// node_modules/qrcode/lib/core/qrcode.js
var require_qrcode = __commonJS({
  "node_modules/qrcode/lib/core/qrcode.js"(exports) {
    var BufferUtil = require_typedarray_buffer();
    var Utils = require_utils();
    var ECLevel = require_error_correction_level();
    var BitBuffer = require_bit_buffer();
    var BitMatrix = require_bit_matrix();
    var AlignmentPattern = require_alignment_pattern();
    var FinderPattern = require_finder_pattern();
    var MaskPattern = require_mask_pattern();
    var ECCode = require_error_correction_code();
    var ReedSolomonEncoder = require_reed_solomon_encoder();
    var Version = require_version();
    var FormatInfo = require_format_info();
    var Mode = require_mode();
    var Segments = require_segments();
    var isArray = require_isarray();
    function setupFinderPattern(matrix, version25) {
      var size = matrix.size;
      var pos = FinderPattern.getPositions(version25);
      for (var i4 = 0; i4 < pos.length; i4++) {
        var row = pos[i4][0];
        var col = pos[i4][1];
        for (var r4 = -1; r4 <= 7; r4++) {
          if (row + r4 <= -1 || size <= row + r4)
            continue;
          for (var c4 = -1; c4 <= 7; c4++) {
            if (col + c4 <= -1 || size <= col + c4)
              continue;
            if (r4 >= 0 && r4 <= 6 && (c4 === 0 || c4 === 6) || c4 >= 0 && c4 <= 6 && (r4 === 0 || r4 === 6) || r4 >= 2 && r4 <= 4 && c4 >= 2 && c4 <= 4) {
              matrix.set(row + r4, col + c4, true, true);
            } else {
              matrix.set(row + r4, col + c4, false, true);
            }
          }
        }
      }
    }
    function setupTimingPattern(matrix) {
      var size = matrix.size;
      for (var r4 = 8; r4 < size - 8; r4++) {
        var value = r4 % 2 === 0;
        matrix.set(r4, 6, value, true);
        matrix.set(6, r4, value, true);
      }
    }
    function setupAlignmentPattern(matrix, version25) {
      var pos = AlignmentPattern.getPositions(version25);
      for (var i4 = 0; i4 < pos.length; i4++) {
        var row = pos[i4][0];
        var col = pos[i4][1];
        for (var r4 = -2; r4 <= 2; r4++) {
          for (var c4 = -2; c4 <= 2; c4++) {
            if (r4 === -2 || r4 === 2 || c4 === -2 || c4 === 2 || r4 === 0 && c4 === 0) {
              matrix.set(row + r4, col + c4, true, true);
            } else {
              matrix.set(row + r4, col + c4, false, true);
            }
          }
        }
      }
    }
    function setupVersionInfo(matrix, version25) {
      var size = matrix.size;
      var bits = Version.getEncodedBits(version25);
      var row, col, mod;
      for (var i4 = 0; i4 < 18; i4++) {
        row = Math.floor(i4 / 3);
        col = i4 % 3 + size - 8 - 3;
        mod = (bits >> i4 & 1) === 1;
        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }
    function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
      var size = matrix.size;
      var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      var i4, mod;
      for (i4 = 0; i4 < 15; i4++) {
        mod = (bits >> i4 & 1) === 1;
        if (i4 < 6) {
          matrix.set(i4, 8, mod, true);
        } else if (i4 < 8) {
          matrix.set(i4 + 1, 8, mod, true);
        } else {
          matrix.set(size - 15 + i4, 8, mod, true);
        }
        if (i4 < 8) {
          matrix.set(8, size - i4 - 1, mod, true);
        } else if (i4 < 9) {
          matrix.set(8, 15 - i4 - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i4 - 1, mod, true);
        }
      }
      matrix.set(size - 8, 8, 1, true);
    }
    function setupData(matrix, data) {
      var size = matrix.size;
      var inc = -1;
      var row = size - 1;
      var bitIndex = 7;
      var byteIndex = 0;
      for (var col = size - 1; col > 0; col -= 2) {
        if (col === 6)
          col--;
        while (true) {
          for (var c4 = 0; c4 < 2; c4++) {
            if (!matrix.isReserved(row, col - c4)) {
              var dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) === 1;
              }
              matrix.set(row, col - c4, dark);
              bitIndex--;
              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || size <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
    function createData(version25, errorCorrectionLevel, segments) {
      var buffer = new BitBuffer();
      segments.forEach(function(data) {
        buffer.put(data.mode.bit, 4);
        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version25));
        data.write(buffer);
      });
      var totalCodewords = Utils.getSymbolTotalCodewords(version25);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version25, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
      }
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
      }
      var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
      for (var i4 = 0; i4 < remainingByte; i4++) {
        buffer.put(i4 % 2 ? 17 : 236, 8);
      }
      return createCodewords(buffer, version25, errorCorrectionLevel);
    }
    function createCodewords(bitBuffer, version25, errorCorrectionLevel) {
      var totalCodewords = Utils.getSymbolTotalCodewords(version25);
      var ecTotalCodewords = ECCode.getTotalCodewordsCount(version25, errorCorrectionLevel);
      var dataTotalCodewords = totalCodewords - ecTotalCodewords;
      var ecTotalBlocks = ECCode.getBlocksCount(version25, errorCorrectionLevel);
      var blocksInGroup2 = totalCodewords % ecTotalBlocks;
      var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
      var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;
      var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;
      var rs = new ReedSolomonEncoder(ecCount);
      var offset = 0;
      var dcData = new Array(ecTotalBlocks);
      var ecData = new Array(ecTotalBlocks);
      var maxDataSize = 0;
      var buffer = BufferUtil.from(bitBuffer.buffer);
      for (var b3 = 0; b3 < ecTotalBlocks; b3++) {
        var dataSize = b3 < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;
        dcData[b3] = buffer.slice(offset, offset + dataSize);
        ecData[b3] = rs.encode(dcData[b3]);
        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }
      var data = BufferUtil.alloc(totalCodewords);
      var index = 0;
      var i4, r4;
      for (i4 = 0; i4 < maxDataSize; i4++) {
        for (r4 = 0; r4 < ecTotalBlocks; r4++) {
          if (i4 < dcData[r4].length) {
            data[index++] = dcData[r4][i4];
          }
        }
      }
      for (i4 = 0; i4 < ecCount; i4++) {
        for (r4 = 0; r4 < ecTotalBlocks; r4++) {
          data[index++] = ecData[r4][i4];
        }
      }
      return data;
    }
    function createSymbol(data, version25, errorCorrectionLevel, maskPattern) {
      var segments;
      if (isArray(data)) {
        segments = Segments.fromArray(data);
      } else if (typeof data === "string") {
        var estimatedVersion = version25;
        if (!estimatedVersion) {
          var rawSegments = Segments.rawSplit(data);
          estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
        }
        segments = Segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error("Invalid data");
      }
      var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);
      if (!bestVersion) {
        throw new Error("The amount of data is too big to be stored in a QR Code");
      }
      if (!version25) {
        version25 = bestVersion;
      } else if (version25 < bestVersion) {
        throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + bestVersion + ".\n");
      }
      var dataBits = createData(version25, errorCorrectionLevel, segments);
      var moduleCount = Utils.getSymbolSize(version25);
      var modules = new BitMatrix(moduleCount);
      setupFinderPattern(modules, version25);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version25);
      setupFormatInfo(modules, errorCorrectionLevel, 0);
      if (version25 >= 7) {
        setupVersionInfo(modules, version25);
      }
      setupData(modules, dataBits);
      if (isNaN(maskPattern)) {
        maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));
      }
      MaskPattern.applyMask(maskPattern, modules);
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
      return {
        modules,
        version: version25,
        errorCorrectionLevel,
        maskPattern,
        segments
      };
    }
    exports.create = function create(data, options) {
      if (typeof data === "undefined" || data === "") {
        throw new Error("No input text");
      }
      var errorCorrectionLevel = ECLevel.M;
      var version25;
      var mask;
      if (typeof options !== "undefined") {
        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
        version25 = Version.from(options.version);
        mask = MaskPattern.from(options.maskPattern);
        if (options.toSJISFunc) {
          Utils.setToSJISFunction(options.toSJISFunc);
        }
      }
      return createSymbol(data, version25, errorCorrectionLevel, mask);
    };
  }
});

// node_modules/qrcode/lib/renderer/utils.js
var require_utils2 = __commonJS({
  "node_modules/qrcode/lib/renderer/utils.js"(exports) {
    function hex2rgba(hex) {
      if (typeof hex === "number") {
        hex = hex.toString();
      }
      if (typeof hex !== "string") {
        throw new Error("Color should be defined as hex string");
      }
      var hexCode = hex.slice().replace("#", "").split("");
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error("Invalid hex color: " + hex);
      }
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c4) {
          return [c4, c4];
        }));
      }
      if (hexCode.length === 6)
        hexCode.push("F", "F");
      var hexValue2 = parseInt(hexCode.join(""), 16);
      return {
        r: hexValue2 >> 24 & 255,
        g: hexValue2 >> 16 & 255,
        b: hexValue2 >> 8 & 255,
        a: hexValue2 & 255,
        hex: "#" + hexCode.slice(0, 6).join("")
      };
    }
    exports.getOptions = function getOptions(options) {
      if (!options)
        options = {};
      if (!options.color)
        options.color = {};
      var margin = typeof options.margin === "undefined" || options.margin === null || options.margin < 0 ? 4 : options.margin;
      var width = options.width && options.width >= 21 ? options.width : void 0;
      var scale = options.scale || 4;
      return {
        width,
        scale: width ? 4 : scale,
        margin,
        color: {
          dark: hex2rgba(options.color.dark || "#000000ff"),
          light: hex2rgba(options.color.light || "#ffffffff")
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      };
    };
    exports.getScale = function getScale(qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
    };
    exports.getImageWidth = function getImageWidth(qrSize, opts) {
      var scale = exports.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale);
    };
    exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
      var size = qr.modules.size;
      var data = qr.modules.data;
      var scale = exports.getScale(size, opts);
      var symbolSize = Math.floor((size + opts.margin * 2) * scale);
      var scaledMargin = opts.margin * scale;
      var palette = [opts.color.light, opts.color.dark];
      for (var i4 = 0; i4 < symbolSize; i4++) {
        for (var j4 = 0; j4 < symbolSize; j4++) {
          var posDst = (i4 * symbolSize + j4) * 4;
          var pxColor = opts.color.light;
          if (i4 >= scaledMargin && j4 >= scaledMargin && i4 < symbolSize - scaledMargin && j4 < symbolSize - scaledMargin) {
            var iSrc = Math.floor((i4 - scaledMargin) / scale);
            var jSrc = Math.floor((j4 - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
          }
          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
  }
});

// node_modules/qrcode/lib/renderer/canvas.js
var require_canvas = __commonJS({
  "node_modules/qrcode/lib/renderer/canvas.js"(exports) {
    var Utils = require_utils2();
    function clearCanvas(ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (!canvas.style)
        canvas.style = {};
      canvas.height = size;
      canvas.width = size;
      canvas.style.height = size + "px";
      canvas.style.width = size + "px";
    }
    function getCanvasElement() {
      try {
        return document.createElement("canvas");
      } catch (e3) {
        throw new Error("You need to specify a canvas element");
      }
    }
    exports.render = function render2(qrData, canvas, options) {
      var opts = options;
      var canvasEl = canvas;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!canvas) {
        canvasEl = getCanvasElement();
      }
      opts = Utils.getOptions(opts);
      var size = Utils.getImageWidth(qrData.modules.size, opts);
      var ctx = canvasEl.getContext("2d");
      var image = ctx.createImageData(size, size);
      Utils.qrToImageData(image.data, qrData, opts);
      clearCanvas(ctx, canvasEl, size);
      ctx.putImageData(image, 0, 0);
      return canvasEl;
    };
    exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
      var opts = options;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!opts)
        opts = {};
      var canvasEl = exports.render(qrData, canvas, opts);
      var type = opts.type || "image/png";
      var rendererOpts = opts.rendererOpts || {};
      return canvasEl.toDataURL(type, rendererOpts.quality);
    };
  }
});

// node_modules/qrcode/lib/renderer/svg-tag.js
var require_svg_tag = __commonJS({
  "node_modules/qrcode/lib/renderer/svg-tag.js"(exports) {
    var Utils = require_utils2();
    function getColorAttrib(color, attrib) {
      var alpha = color.a / 255;
      var str = attrib + '="' + color.hex + '"';
      return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
    }
    function svgCmd(cmd, x4, y4) {
      var str = cmd + x4;
      if (typeof y4 !== "undefined")
        str += " " + y4;
      return str;
    }
    function qrToPath(data, size, margin) {
      var path = "";
      var moveBy = 0;
      var newRow = false;
      var lineLength = 0;
      for (var i4 = 0; i4 < data.length; i4++) {
        var col = Math.floor(i4 % size);
        var row = Math.floor(i4 / size);
        if (!col && !newRow)
          newRow = true;
        if (data[i4]) {
          lineLength++;
          if (!(i4 > 0 && col > 0 && data[i4 - 1])) {
            path += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);
            moveBy = 0;
            newRow = false;
          }
          if (!(col + 1 < size && data[i4 + 1])) {
            path += svgCmd("h", lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }
      return path;
    }
    exports.render = function render2(qrData, options, cb) {
      var opts = Utils.getOptions(options);
      var size = qrData.modules.size;
      var data = qrData.modules.data;
      var qrcodesize = size + opts.margin * 2;
      var bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';
      var path = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
      var viewBox = 'viewBox="0 0 ' + qrcodesize + " " + qrcodesize + '"';
      var width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';
      var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + "</svg>\n";
      if (typeof cb === "function") {
        cb(null, svgTag);
      }
      return svgTag;
    };
  }
});

// node_modules/qrcode/lib/browser.js
var require_browser2 = __commonJS({
  "node_modules/qrcode/lib/browser.js"(exports) {
    var canPromise = require_can_promise();
    var QRCode2 = require_qrcode();
    var CanvasRenderer = require_canvas();
    var SvgRenderer = require_svg_tag();
    function renderCanvas(renderFunc, canvas, text, opts, cb) {
      var args = [].slice.call(arguments, 1);
      var argsNum = args.length;
      var isLastArgCb = typeof args[argsNum - 1] === "function";
      if (!isLastArgCb && !canPromise()) {
        throw new Error("Callback required as last argument");
      }
      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 2) {
          cb = text;
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === "undefined") {
            cb = opts;
            opts = void 0;
          } else {
            cb = opts;
            opts = text;
            text = canvas;
            canvas = void 0;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 1) {
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text;
          text = canvas;
          canvas = void 0;
        }
        return new Promise(function(resolve, reject) {
          try {
            var data2 = QRCode2.create(text, opts);
            resolve(renderFunc(data2, canvas, opts));
          } catch (e3) {
            reject(e3);
          }
        });
      }
      try {
        var data = QRCode2.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e3) {
        cb(e3);
      }
    }
    exports.create = QRCode2.create;
    exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
    exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);
    exports.toString = renderCanvas.bind(null, function(data, _5, opts) {
      return SvgRenderer.render(data, opts);
    });
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i4 = 0; i4 < selection.rangeCount; i4++) {
        ranges.push(selection.getRangeAt(i4));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text, options) {
      var debug, message, reselectPrevious, range, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e3) {
          e3.stopPropagation();
          if (options.format) {
            e3.preventDefault();
            if (typeof e3.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text);
            } else {
              e3.clipboardData.clearData();
              e3.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e3.preventDefault();
            options.onCopy(e3.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy;
  }
});

// node_modules/preact/dist/preact.module.js
function a(n3, l4) {
  for (var u4 in l4)
    n3[u4] = l4[u4];
  return n3;
}
function v(n3) {
  var l4 = n3.parentNode;
  l4 && l4.removeChild(n3);
}
function h(n3, l4, u4) {
  var i4, t4 = arguments, r4 = {};
  for (i4 in l4)
    i4 !== "key" && i4 !== "ref" && (r4[i4] = l4[i4]);
  if (arguments.length > 3)
    for (u4 = [u4], i4 = 3; i4 < arguments.length; i4++)
      u4.push(t4[i4]);
  if (u4 != null && (r4.children = u4), typeof n3 == "function" && n3.defaultProps != null)
    for (i4 in n3.defaultProps)
      r4[i4] === void 0 && (r4[i4] = n3.defaultProps[i4]);
  return p(n3, r4, l4 && l4.key, l4 && l4.ref, null);
}
function p(l4, u4, i4, t4, r4) {
  var o4 = { type: l4, props: u4, key: i4, ref: t4, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: r4 };
  return r4 == null && (o4.__v = o4), n.vnode && n.vnode(o4), o4;
}
function y() {
  return {};
}
function d(n3) {
  return n3.children;
}
function m(n3, l4) {
  this.props = n3, this.context = l4;
}
function w(n3, l4) {
  if (l4 == null)
    return n3.__ ? w(n3.__, n3.__.__k.indexOf(n3) + 1) : null;
  for (var u4; l4 < n3.__k.length; l4++)
    if ((u4 = n3.__k[l4]) != null && u4.__e != null)
      return u4.__e;
  return typeof n3.type == "function" ? w(n3) : null;
}
function k(n3) {
  var l4, u4;
  if ((n3 = n3.__) != null && n3.__c != null) {
    for (n3.__e = n3.__c.base = null, l4 = 0; l4 < n3.__k.length; l4++)
      if ((u4 = n3.__k[l4]) != null && u4.__e != null) {
        n3.__e = n3.__c.base = u4.__e;
        break;
      }
    return k(n3);
  }
}
function g(l4) {
  (!l4.__d && (l4.__d = true) && u.push(l4) && !i++ || r !== n.debounceRendering) && ((r = n.debounceRendering) || t)(_);
}
function _() {
  for (var n3; i = u.length; )
    n3 = u.sort(function(n4, l4) {
      return n4.__v.__b - l4.__v.__b;
    }), u = [], n3.some(function(n4) {
      var l4, u4, i4, t4, r4, o4, f4;
      n4.__d && (o4 = (r4 = (l4 = n4).__v).__e, (f4 = l4.__P) && (u4 = [], (i4 = a({}, r4)).__v = i4, t4 = A(f4, r4, i4, l4.__n, f4.ownerSVGElement !== void 0, null, u4, o4 == null ? w(r4) : o4), T(u4, r4), t4 != o4 && k(r4)));
    });
}
function b(n3, l4, u4, i4, t4, r4, o4, f4, s4) {
  var a4, h4, p4, y4, d4, m3, k4, g4 = u4 && u4.__k || c, _5 = g4.length;
  if (f4 == e && (f4 = r4 != null ? r4[0] : _5 ? w(u4, 0) : null), a4 = 0, l4.__k = x(l4.__k, function(u5) {
    if (u5 != null) {
      if (u5.__ = l4, u5.__b = l4.__b + 1, (p4 = g4[a4]) === null || p4 && u5.key == p4.key && u5.type === p4.type)
        g4[a4] = void 0;
      else
        for (h4 = 0; h4 < _5; h4++) {
          if ((p4 = g4[h4]) && u5.key == p4.key && u5.type === p4.type) {
            g4[h4] = void 0;
            break;
          }
          p4 = null;
        }
      if (y4 = A(n3, u5, p4 = p4 || e, i4, t4, r4, o4, f4, s4), (h4 = u5.ref) && p4.ref != h4 && (k4 || (k4 = []), p4.ref && k4.push(p4.ref, null, u5), k4.push(h4, u5.__c || y4, u5)), y4 != null) {
        var c4;
        if (m3 == null && (m3 = y4), u5.__d !== void 0)
          c4 = u5.__d, u5.__d = void 0;
        else if (r4 == p4 || y4 != f4 || y4.parentNode == null) {
          n:
            if (f4 == null || f4.parentNode !== n3)
              n3.appendChild(y4), c4 = null;
            else {
              for (d4 = f4, h4 = 0; (d4 = d4.nextSibling) && h4 < _5; h4 += 2)
                if (d4 == y4)
                  break n;
              n3.insertBefore(y4, f4), c4 = f4;
            }
          l4.type == "option" && (n3.value = "");
        }
        f4 = c4 !== void 0 ? c4 : y4.nextSibling, typeof l4.type == "function" && (l4.__d = f4);
      } else
        f4 && p4.__e == f4 && f4.parentNode != n3 && (f4 = w(p4));
    }
    return a4++, u5;
  }), l4.__e = m3, r4 != null && typeof l4.type != "function")
    for (a4 = r4.length; a4--; )
      r4[a4] != null && v(r4[a4]);
  for (a4 = _5; a4--; )
    g4[a4] != null && D(g4[a4], g4[a4]);
  if (k4)
    for (a4 = 0; a4 < k4.length; a4++)
      j(k4[a4], k4[++a4], k4[++a4]);
}
function x(n3, l4, u4) {
  if (u4 == null && (u4 = []), n3 == null || typeof n3 == "boolean")
    l4 && u4.push(l4(null));
  else if (Array.isArray(n3))
    for (var i4 = 0; i4 < n3.length; i4++)
      x(n3[i4], l4, u4);
  else
    u4.push(l4 ? l4(typeof n3 == "string" || typeof n3 == "number" ? p(null, n3, null, null, n3) : n3.__e != null || n3.__c != null ? p(n3.type, n3.props, n3.key, null, n3.__v) : n3) : n3);
  return u4;
}
function P(n3, l4, u4, i4, t4) {
  var r4;
  for (r4 in u4)
    r4 === "children" || r4 === "key" || r4 in l4 || N2(n3, r4, null, u4[r4], i4);
  for (r4 in l4)
    t4 && typeof l4[r4] != "function" || r4 === "children" || r4 === "key" || r4 === "value" || r4 === "checked" || u4[r4] === l4[r4] || N2(n3, r4, l4[r4], u4[r4], i4);
}
function C(n3, l4, u4) {
  l4[0] === "-" ? n3.setProperty(l4, u4) : n3[l4] = typeof u4 == "number" && s.test(l4) === false ? u4 + "px" : u4 == null ? "" : u4;
}
function N2(n3, l4, u4, i4, t4) {
  var r4, o4, f4, e3, c4;
  if (t4 ? l4 === "className" && (l4 = "class") : l4 === "class" && (l4 = "className"), l4 === "style")
    if (r4 = n3.style, typeof u4 == "string")
      r4.cssText = u4;
    else {
      if (typeof i4 == "string" && (r4.cssText = "", i4 = null), i4)
        for (e3 in i4)
          u4 && e3 in u4 || C(r4, e3, "");
      if (u4)
        for (c4 in u4)
          i4 && u4[c4] === i4[c4] || C(r4, c4, u4[c4]);
    }
  else
    l4[0] === "o" && l4[1] === "n" ? (o4 = l4 !== (l4 = l4.replace(/Capture$/, "")), f4 = l4.toLowerCase(), l4 = (f4 in n3 ? f4 : l4).slice(2), u4 ? (i4 || n3.addEventListener(l4, z, o4), (n3.l || (n3.l = {}))[l4] = u4) : n3.removeEventListener(l4, z, o4)) : l4 !== "list" && l4 !== "tagName" && l4 !== "form" && l4 !== "type" && l4 !== "size" && !t4 && l4 in n3 ? n3[l4] = u4 == null ? "" : u4 : typeof u4 != "function" && l4 !== "dangerouslySetInnerHTML" && (l4 !== (l4 = l4.replace(/^xlink:?/, "")) ? u4 == null || u4 === false ? n3.removeAttributeNS("http://www.w3.org/1999/xlink", l4.toLowerCase()) : n3.setAttributeNS("http://www.w3.org/1999/xlink", l4.toLowerCase(), u4) : u4 == null || u4 === false && !/^ar/.test(l4) ? n3.removeAttribute(l4) : n3.setAttribute(l4, u4));
}
function z(l4) {
  this.l[l4.type](n.event ? n.event(l4) : l4);
}
function A(l4, u4, i4, t4, r4, o4, f4, e3, c4) {
  var s4, v4, h4, p4, y4, w5, k4, g4, _5, x4, P4 = u4.type;
  if (u4.constructor !== void 0)
    return null;
  (s4 = n.__b) && s4(u4);
  try {
    n:
      if (typeof P4 == "function") {
        if (g4 = u4.props, _5 = (s4 = P4.contextType) && t4[s4.__c], x4 = s4 ? _5 ? _5.props.value : s4.__ : t4, i4.__c ? k4 = (v4 = u4.__c = i4.__c).__ = v4.__E : ("prototype" in P4 && P4.prototype.render ? u4.__c = v4 = new P4(g4, x4) : (u4.__c = v4 = new m(g4, x4), v4.constructor = P4, v4.render = E), _5 && _5.sub(v4), v4.props = g4, v4.state || (v4.state = {}), v4.context = x4, v4.__n = t4, h4 = v4.__d = true, v4.__h = []), v4.__s == null && (v4.__s = v4.state), P4.getDerivedStateFromProps != null && (v4.__s == v4.state && (v4.__s = a({}, v4.__s)), a(v4.__s, P4.getDerivedStateFromProps(g4, v4.__s))), p4 = v4.props, y4 = v4.state, h4)
          P4.getDerivedStateFromProps == null && v4.componentWillMount != null && v4.componentWillMount(), v4.componentDidMount != null && v4.__h.push(v4.componentDidMount);
        else {
          if (P4.getDerivedStateFromProps == null && g4 !== p4 && v4.componentWillReceiveProps != null && v4.componentWillReceiveProps(g4, x4), !v4.__e && v4.shouldComponentUpdate != null && v4.shouldComponentUpdate(g4, v4.__s, x4) === false || u4.__v === i4.__v && !v4.__) {
            for (v4.props = g4, v4.state = v4.__s, u4.__v !== i4.__v && (v4.__d = false), v4.__v = u4, u4.__e = i4.__e, u4.__k = i4.__k, v4.__h.length && f4.push(v4), s4 = 0; s4 < u4.__k.length; s4++)
              u4.__k[s4] && (u4.__k[s4].__ = u4);
            break n;
          }
          v4.componentWillUpdate != null && v4.componentWillUpdate(g4, v4.__s, x4), v4.componentDidUpdate != null && v4.__h.push(function() {
            v4.componentDidUpdate(p4, y4, w5);
          });
        }
        v4.context = x4, v4.props = g4, v4.state = v4.__s, (s4 = n.__r) && s4(u4), v4.__d = false, v4.__v = u4, v4.__P = l4, s4 = v4.render(v4.props, v4.state, v4.context), u4.__k = s4 != null && s4.type == d && s4.key == null ? s4.props.children : Array.isArray(s4) ? s4 : [s4], v4.getChildContext != null && (t4 = a(a({}, t4), v4.getChildContext())), h4 || v4.getSnapshotBeforeUpdate == null || (w5 = v4.getSnapshotBeforeUpdate(p4, y4)), b(l4, u4, i4, t4, r4, o4, f4, e3, c4), v4.base = u4.__e, v4.__h.length && f4.push(v4), k4 && (v4.__E = v4.__ = null), v4.__e = false;
      } else
        o4 == null && u4.__v === i4.__v ? (u4.__k = i4.__k, u4.__e = i4.__e) : u4.__e = $(i4.__e, u4, i4, t4, r4, o4, f4, c4);
    (s4 = n.diffed) && s4(u4);
  } catch (l5) {
    u4.__v = null, n.__e(l5, u4, i4);
  }
  return u4.__e;
}
function T(l4, u4) {
  n.__c && n.__c(u4, l4), l4.some(function(u5) {
    try {
      l4 = u5.__h, u5.__h = [], l4.some(function(n3) {
        n3.call(u5);
      });
    } catch (l5) {
      n.__e(l5, u5.__v);
    }
  });
}
function $(n3, l4, u4, i4, t4, r4, o4, f4) {
  var s4, a4, v4, h4, p4, y4 = u4.props, d4 = l4.props;
  if (t4 = l4.type === "svg" || t4, r4 != null) {
    for (s4 = 0; s4 < r4.length; s4++)
      if ((a4 = r4[s4]) != null && ((l4.type === null ? a4.nodeType === 3 : a4.localName === l4.type) || n3 == a4)) {
        n3 = a4, r4[s4] = null;
        break;
      }
  }
  if (n3 == null) {
    if (l4.type === null)
      return document.createTextNode(d4);
    n3 = t4 ? document.createElementNS("http://www.w3.org/2000/svg", l4.type) : document.createElement(l4.type, d4.is && { is: d4.is }), r4 = null, f4 = false;
  }
  if (l4.type === null)
    y4 !== d4 && n3.data != d4 && (n3.data = d4);
  else {
    if (r4 != null && (r4 = c.slice.call(n3.childNodes)), v4 = (y4 = u4.props || e).dangerouslySetInnerHTML, h4 = d4.dangerouslySetInnerHTML, !f4) {
      if (y4 === e)
        for (y4 = {}, p4 = 0; p4 < n3.attributes.length; p4++)
          y4[n3.attributes[p4].name] = n3.attributes[p4].value;
      (h4 || v4) && (h4 && v4 && h4.__html == v4.__html || (n3.innerHTML = h4 && h4.__html || ""));
    }
    P(n3, d4, y4, t4, f4), h4 ? l4.__k = [] : (l4.__k = l4.props.children, b(n3, l4, u4, i4, l4.type !== "foreignObject" && t4, r4, o4, e, f4)), f4 || ("value" in d4 && (s4 = d4.value) !== void 0 && s4 !== n3.value && N2(n3, "value", s4, y4.value, false), "checked" in d4 && (s4 = d4.checked) !== void 0 && s4 !== n3.checked && N2(n3, "checked", s4, y4.checked, false));
  }
  return n3;
}
function j(l4, u4, i4) {
  try {
    typeof l4 == "function" ? l4(u4) : l4.current = u4;
  } catch (l5) {
    n.__e(l5, i4);
  }
}
function D(l4, u4, i4) {
  var t4, r4, o4;
  if (n.unmount && n.unmount(l4), (t4 = l4.ref) && (t4.current && t4.current !== l4.__e || j(t4, null, u4)), i4 || typeof l4.type == "function" || (i4 = (r4 = l4.__e) != null), l4.__e = l4.__d = void 0, (t4 = l4.__c) != null) {
    if (t4.componentWillUnmount)
      try {
        t4.componentWillUnmount();
      } catch (l5) {
        n.__e(l5, u4);
      }
    t4.base = t4.__P = null;
  }
  if (t4 = l4.__k)
    for (o4 = 0; o4 < t4.length; o4++)
      t4[o4] && D(t4[o4], u4, i4);
  r4 != null && v(r4);
}
function E(n3, l4, u4) {
  return this.constructor(n3, u4);
}
function H(l4, u4, i4) {
  var t4, r4, f4;
  n.__ && n.__(l4, u4), r4 = (t4 = i4 === o) ? null : i4 && i4.__k || u4.__k, l4 = h(d, null, [l4]), f4 = [], A(u4, (t4 ? u4 : i4 || u4).__k = l4, r4 || e, e, u4.ownerSVGElement !== void 0, i4 && !t4 ? [i4] : r4 ? null : c.slice.call(u4.childNodes), f4, i4 || e, t4), T(f4, l4);
}
function I(n3, l4) {
  H(n3, l4, o);
}
function L(n3, l4) {
  var u4, i4;
  for (i4 in l4 = a(a({}, n3.props), l4), arguments.length > 2 && (l4.children = c.slice.call(arguments, 2)), u4 = {}, l4)
    i4 !== "key" && i4 !== "ref" && (u4[i4] = l4[i4]);
  return p(n3.type, u4, l4.key || n3.key, l4.ref || n3.ref, null);
}
function M(n3) {
  var l4 = {}, u4 = { __c: "__cC" + f++, __: n3, Consumer: function(n4, l5) {
    return n4.children(l5);
  }, Provider: function(n4) {
    var i4, t4 = this;
    return this.getChildContext || (i4 = [], this.getChildContext = function() {
      return l4[u4.__c] = t4, l4;
    }, this.shouldComponentUpdate = function(n5) {
      t4.props.value !== n5.value && i4.some(function(l5) {
        l5.context = n5.value, g(l5);
      });
    }, this.sub = function(n5) {
      i4.push(n5);
      var l5 = n5.componentWillUnmount;
      n5.componentWillUnmount = function() {
        i4.splice(i4.indexOf(n5), 1), l5 && l5.call(n5);
      };
    }), n4.children;
  } };
  return u4.Consumer.contextType = u4, u4.Provider.__ = u4, u4;
}
var n, l, u, i, t, r, o, f, e, c, s;
var init_preact_module = __esm({
  "node_modules/preact/dist/preact.module.js"() {
    e = {};
    c = [];
    s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    n = { __e: function(n3, l4) {
      for (var u4, i4; l4 = l4.__; )
        if ((u4 = l4.__c) && !u4.__)
          try {
            if (u4.constructor && u4.constructor.getDerivedStateFromError != null && (i4 = true, u4.setState(u4.constructor.getDerivedStateFromError(n3))), u4.componentDidCatch != null && (i4 = true, u4.componentDidCatch(n3)), i4)
              return g(u4.__E = u4);
          } catch (l5) {
            n3 = l5;
          }
      throw n3;
    } }, l = function(n3) {
      return n3 != null && n3.constructor === void 0;
    }, m.prototype.setState = function(n3, l4) {
      var u4;
      u4 = this.__s !== this.state ? this.__s : this.__s = a({}, this.state), typeof n3 == "function" && (n3 = n3(u4, this.props)), n3 && a(u4, n3), n3 != null && this.__v && (l4 && this.__h.push(l4), g(this));
    }, m.prototype.forceUpdate = function(n3) {
      this.__v && (this.__e = true, n3 && this.__h.push(n3), g(this));
    }, m.prototype.render = d, u = [], i = 0, t = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, o = e, f = 0;
  }
});

// node_modules/preact/hooks/dist/hooks.module.js
function v2(t4, r4) {
  n.__h && n.__h(u2, t4, i2 || r4), i2 = 0;
  var o4 = u2.__H || (u2.__H = { __: [], __h: [] });
  return t4 >= o4.__.length && o4.__.push({}), o4.__[t4];
}
function m2(n3) {
  return i2 = 1, p2(E2, n3);
}
function p2(n3, r4, i4) {
  var o4 = v2(t2++, 2);
  return o4.__c || (o4.__c = u2, o4.__ = [i4 ? i4(r4) : E2(void 0, r4), function(t4) {
    var u4 = n3(o4.__[0], t4);
    o4.__[0] !== u4 && (o4.__[0] = u4, o4.__c.setState({}));
  }]), o4.__;
}
function l2(r4, i4) {
  var o4 = v2(t2++, 3);
  !n.__s && x2(o4.__H, i4) && (o4.__ = r4, o4.__H = i4, u2.__H.__h.push(o4));
}
function y2(r4, i4) {
  var o4 = v2(t2++, 4);
  !n.__s && x2(o4.__H, i4) && (o4.__ = r4, o4.__H = i4, u2.__h.push(o4));
}
function d2(n3) {
  return i2 = 5, h2(function() {
    return { current: n3 };
  }, []);
}
function s2(n3, t4, u4) {
  i2 = 6, y2(function() {
    typeof n3 == "function" ? n3(t4()) : n3 && (n3.current = t4());
  }, u4 == null ? u4 : u4.concat(n3));
}
function h2(n3, u4) {
  var r4 = v2(t2++, 7);
  return x2(r4.__H, u4) ? (r4.__H = u4, r4.__h = n3, r4.__ = n3()) : r4.__;
}
function T2(n3, t4) {
  return i2 = 8, h2(function() {
    return n3;
  }, t4);
}
function w2(n3) {
  var r4 = u2.context[n3.__c], i4 = v2(t2++, 9);
  return i4.__c = n3, r4 ? (i4.__ == null && (i4.__ = true, r4.sub(u2)), r4.props.value) : n3.__;
}
function A2(t4, u4) {
  n.useDebugValue && n.useDebugValue(u4 ? u4(t4) : t4);
}
function F(n3) {
  var r4 = v2(t2++, 10), i4 = m2();
  return r4.__ = n3, u2.componentDidCatch || (u2.componentDidCatch = function(n4) {
    r4.__ && r4.__(n4), i4[1](n4);
  }), [i4[0], function() {
    i4[1](void 0);
  }];
}
function _2() {
  o2.some(function(t4) {
    if (t4.__P)
      try {
        t4.__H.__h.forEach(g2), t4.__H.__h.forEach(q), t4.__H.__h = [];
      } catch (u4) {
        return t4.__H.__h = [], n.__e(u4, t4.__v), true;
      }
  }), o2 = [];
}
function g2(n3) {
  n3.t && n3.t();
}
function q(n3) {
  var t4 = n3.__();
  typeof t4 == "function" && (n3.t = t4);
}
function x2(n3, t4) {
  return !n3 || t4.some(function(t5, u4) {
    return t5 !== n3[u4];
  });
}
function E2(n3, t4) {
  return typeof t4 == "function" ? t4(n3) : t4;
}
var t2, u2, r2, i2, o2, c2, f2, e2, a2;
var init_hooks_module = __esm({
  "node_modules/preact/hooks/dist/hooks.module.js"() {
    init_preact_module();
    i2 = 0;
    o2 = [];
    c2 = n.__r;
    f2 = n.diffed;
    e2 = n.__c;
    a2 = n.unmount;
    n.__r = function(n3) {
      c2 && c2(n3), t2 = 0, (u2 = n3.__c).__H && (u2.__H.__h.forEach(g2), u2.__H.__h.forEach(q), u2.__H.__h = []);
    }, n.diffed = function(t4) {
      f2 && f2(t4);
      var u4 = t4.__c;
      if (u4) {
        var i4 = u4.__H;
        i4 && i4.__h.length && (o2.push(u4) !== 1 && r2 === n.requestAnimationFrame || ((r2 = n.requestAnimationFrame) || function(n3) {
          var t5, u5 = function() {
            clearTimeout(r4), cancelAnimationFrame(t5), setTimeout(n3);
          }, r4 = setTimeout(u5, 100);
          typeof window != "undefined" && (t5 = requestAnimationFrame(u5));
        })(_2));
      }
    }, n.__c = function(t4, u4) {
      u4.some(function(t5) {
        try {
          t5.__h.forEach(g2), t5.__h = t5.__h.filter(function(n3) {
            return !n3.__ || q(n3);
          });
        } catch (r4) {
          u4.some(function(n3) {
            n3.__h && (n3.__h = []);
          }), u4 = [], n.__e(r4, t5.__v);
        }
      }), e2 && e2(t4, u4);
    }, n.unmount = function(t4) {
      a2 && a2(t4);
      var u4 = t4.__c;
      if (u4) {
        var r4 = u4.__H;
        if (r4)
          try {
            r4.__.forEach(function(n3) {
              return n3.t && n3.t();
            });
          } catch (t5) {
            n.__e(t5, u4.__v);
          }
      }
    };
  }
});

// node_modules/preact/compat/dist/compat.module.js
var compat_module_exports = {};
__export(compat_module_exports, {
  Children: () => R,
  Component: () => m,
  Fragment: () => d,
  PureComponent: () => C2,
  Suspense: () => U,
  SuspenseList: () => O,
  cloneElement: () => K,
  createContext: () => M,
  createElement: () => h,
  createFactory: () => G,
  createPortal: () => z2,
  createRef: () => y,
  default: () => compat_module_default,
  findDOMNode: () => X,
  forwardRef: () => S,
  hydrate: () => V,
  isValidElement: () => J,
  lazy: () => L2,
  memo: () => _3,
  render: () => T3,
  unmountComponentAtNode: () => Q,
  unstable_batchedUpdates: () => Y,
  useCallback: () => T2,
  useContext: () => w2,
  useDebugValue: () => A2,
  useEffect: () => l2,
  useErrorBoundary: () => F,
  useImperativeHandle: () => s2,
  useLayoutEffect: () => y2,
  useMemo: () => h2,
  useReducer: () => p2,
  useRef: () => d2,
  useState: () => m2,
  version: () => B
});
function E3(n3, t4) {
  for (var e3 in t4)
    n3[e3] = t4[e3];
  return n3;
}
function w3(n3, t4) {
  for (var e3 in n3)
    if (e3 !== "__source" && !(e3 in t4))
      return true;
  for (var r4 in t4)
    if (r4 !== "__source" && n3[r4] !== t4[r4])
      return true;
  return false;
}
function _3(n3, t4) {
  function e3(n4) {
    var e4 = this.props.ref, r5 = e4 == n4.ref;
    return !r5 && e4 && (e4.call ? e4(null) : e4.current = null), t4 ? !t4(this.props, n4) || !r5 : w3(this.props, n4);
  }
  function r4(t5) {
    return this.shouldComponentUpdate = e3, h(n3, E3({}, t5));
  }
  return r4.prototype.isReactComponent = true, r4.displayName = "Memo(" + (n3.displayName || n3.name) + ")", r4.t = true, r4;
}
function S(n3) {
  function t4(t5) {
    var e3 = E3({}, t5);
    return delete e3.ref, n3(e3, t5.ref);
  }
  return t4.prototype.isReactComponent = t4.t = true, t4.displayName = "ForwardRef(" + (n3.displayName || n3.name) + ")", t4;
}
function N3(n3) {
  return n3 && ((n3 = E3({}, n3)).__c = null, n3.__k = n3.__k && n3.__k.map(N3)), n3;
}
function U() {
  this.__u = 0, this.o = null, this.__b = null;
}
function M2(n3) {
  var t4 = n3.__.__c;
  return t4 && t4.u && t4.u(n3);
}
function L2(n3) {
  var t4, e3, r4;
  function o4(o5) {
    if (t4 || (t4 = n3()).then(function(n4) {
      e3 = n4.default || n4;
    }, function(n4) {
      r4 = n4;
    }), r4)
      throw r4;
    if (!e3)
      throw t4;
    return h(e3, o5);
  }
  return o4.displayName = "Lazy", o4.t = true, o4;
}
function O() {
  this.i = null, this.l = null;
}
function j2(n3) {
  var t4 = this, e3 = n3.container, r4 = h(W, { context: t4.context }, n3.vnode);
  return t4.s && t4.s !== e3 && (t4.v.parentNode && t4.s.removeChild(t4.v), D(t4.h), t4.p = false), n3.vnode ? t4.p ? (e3.__k = t4.__k, H(r4, e3), t4.__k = e3.__k) : (t4.v = document.createTextNode(""), I("", e3), e3.appendChild(t4.v), t4.p = true, t4.s = e3, H(r4, e3, t4.v), t4.__k = t4.v.__k) : t4.p && (t4.v.parentNode && t4.s.removeChild(t4.v), D(t4.h)), t4.h = r4, t4.componentWillUnmount = function() {
    t4.v.parentNode && t4.s.removeChild(t4.v), D(t4.h);
  }, null;
}
function z2(n3, t4) {
  return h(j2, { vnode: n3, container: t4 });
}
function T3(n3, t4, e3) {
  if (t4.__k == null)
    for (; t4.firstChild; )
      t4.removeChild(t4.firstChild);
  return H(n3, t4), typeof e3 == "function" && e3(), n3 ? n3.__c : null;
}
function V(n3, t4, e3) {
  return I(n3, t4), typeof e3 == "function" && e3(), n3 ? n3.__c : null;
}
function I2(n3, t4) {
  n3["UNSAFE_" + t4] && !n3[t4] && Object.defineProperty(n3, t4, { configurable: false, get: function() {
    return this["UNSAFE_" + t4];
  }, set: function(n4) {
    this["UNSAFE_" + t4] = n4;
  } });
}
function G(n3) {
  return h.bind(null, n3);
}
function J(n3) {
  return !!n3 && n3.$$typeof === H2;
}
function K(n3) {
  return J(n3) ? L.apply(null, arguments) : n3;
}
function Q(n3) {
  return !!n3.__k && (H(null, n3), true);
}
function X(n3) {
  return n3 && (n3.base || n3.nodeType === 1 && n3) || null;
}
var C2, A3, k2, R, F2, P2, W, D2, H2, Z, $2, q2, B, Y, compat_module_default;
var init_compat_module = __esm({
  "node_modules/preact/compat/dist/compat.module.js"() {
    init_hooks_module();
    init_hooks_module();
    init_preact_module();
    init_preact_module();
    C2 = function(n3) {
      var t4, e3;
      function r4(t5) {
        var e4;
        return (e4 = n3.call(this, t5) || this).isPureReactComponent = true, e4;
      }
      return e3 = n3, (t4 = r4).prototype = Object.create(e3.prototype), t4.prototype.constructor = t4, t4.__proto__ = e3, r4.prototype.shouldComponentUpdate = function(n4, t5) {
        return w3(this.props, n4) || w3(this.state, t5);
      }, r4;
    }(m);
    A3 = n.__b;
    n.__b = function(n3) {
      n3.type && n3.type.t && n3.ref && (n3.props.ref = n3.ref, n3.ref = null), A3 && A3(n3);
    };
    k2 = function(n3, t4) {
      return n3 ? x(n3).reduce(function(n4, e3, r4) {
        return n4.concat(t4(e3, r4));
      }, []) : null;
    };
    R = { map: k2, forEach: k2, count: function(n3) {
      return n3 ? x(n3).length : 0;
    }, only: function(n3) {
      if ((n3 = x(n3)).length !== 1)
        throw new Error("Children.only() expects only one child.");
      return n3[0];
    }, toArray: x };
    F2 = n.__e;
    n.__e = function(n3, t4, e3) {
      if (n3.then) {
        for (var r4, o4 = t4; o4 = o4.__; )
          if ((r4 = o4.__c) && r4.__c)
            return r4.__c(n3, t4.__c);
      }
      F2(n3, t4, e3);
    }, (U.prototype = new m()).__c = function(n3, t4) {
      var e3 = this;
      e3.o == null && (e3.o = []), e3.o.push(t4);
      var r4 = M2(e3.__v), o4 = false, u4 = function() {
        o4 || (o4 = true, r4 ? r4(i4) : i4());
      };
      t4.__c = t4.componentWillUnmount, t4.componentWillUnmount = function() {
        u4(), t4.__c && t4.__c();
      };
      var i4 = function() {
        var n4;
        if (!--e3.__u)
          for (e3.__v.__k[0] = e3.state.u, e3.setState({ u: e3.__b = null }); n4 = e3.o.pop(); )
            n4.forceUpdate();
      };
      e3.__u++ || e3.setState({ u: e3.__b = e3.__v.__k[0] }), n3.then(u4, u4);
    }, U.prototype.render = function(n3, t4) {
      return this.__b && (this.__v.__k[0] = N3(this.__b), this.__b = null), [h(m, null, t4.u ? null : n3.children), t4.u && n3.fallback];
    };
    P2 = function(n3, t4, e3) {
      if (++e3[1] === e3[0] && n3.l.delete(t4), n3.props.revealOrder && (n3.props.revealOrder[0] !== "t" || !n3.l.size))
        for (e3 = n3.i; e3; ) {
          for (; e3.length > 3; )
            e3.pop()();
          if (e3[1] < e3[0])
            break;
          n3.i = e3 = e3[2];
        }
    };
    (O.prototype = new m()).u = function(n3) {
      var t4 = this, e3 = M2(t4.__v), r4 = t4.l.get(n3);
      return r4[0]++, function(o4) {
        var u4 = function() {
          t4.props.revealOrder ? (r4.push(o4), P2(t4, n3, r4)) : o4();
        };
        e3 ? e3(u4) : u4();
      };
    }, O.prototype.render = function(n3) {
      this.i = null, this.l = /* @__PURE__ */ new Map();
      var t4 = x(n3.children);
      n3.revealOrder && n3.revealOrder[0] === "b" && t4.reverse();
      for (var e3 = t4.length; e3--; )
        this.l.set(t4[e3], this.i = [1, 0, this.i]);
      return n3.children;
    }, O.prototype.componentDidUpdate = O.prototype.componentDidMount = function() {
      var n3 = this;
      n3.l.forEach(function(t4, e3) {
        P2(n3, e3, t4);
      });
    };
    W = function() {
      function n3() {
      }
      var t4 = n3.prototype;
      return t4.getChildContext = function() {
        return this.props.context;
      }, t4.render = function(n4) {
        return n4.children;
      }, n3;
    }();
    D2 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
    m.prototype.isReactComponent = {};
    H2 = typeof Symbol != "undefined" && Symbol.for && Symbol.for("react.element") || 60103;
    Z = n.event;
    n.event = function(n3) {
      Z && (n3 = Z(n3)), n3.persist = function() {
      };
      var t4 = false, e3 = false, r4 = n3.stopPropagation;
      n3.stopPropagation = function() {
        r4.call(n3), t4 = true;
      };
      var o4 = n3.preventDefault;
      return n3.preventDefault = function() {
        o4.call(n3), e3 = true;
      }, n3.isPropagationStopped = function() {
        return t4;
      }, n3.isDefaultPrevented = function() {
        return e3;
      }, n3.nativeEvent = n3;
    };
    $2 = { configurable: true, get: function() {
      return this.class;
    } };
    q2 = n.vnode;
    n.vnode = function(n3) {
      n3.$$typeof = H2;
      var t4 = n3.type, e3 = n3.props;
      if (t4) {
        if (e3.class != e3.className && ($2.enumerable = "className" in e3, e3.className != null && (e3.class = e3.className), Object.defineProperty(e3, "className", $2)), typeof t4 != "function") {
          var r4, o4, u4;
          for (u4 in e3.defaultValue && e3.value !== void 0 && (e3.value || e3.value === 0 || (e3.value = e3.defaultValue), delete e3.defaultValue), Array.isArray(e3.value) && e3.multiple && t4 === "select" && (x(e3.children).forEach(function(n4) {
            e3.value.indexOf(n4.props.value) != -1 && (n4.props.selected = true);
          }), delete e3.value), e3)
            if (r4 = D2.test(u4))
              break;
          if (r4)
            for (u4 in o4 = n3.props = {}, e3)
              o4[D2.test(u4) ? u4.replace(/[A-Z0-9]/, "-$&").toLowerCase() : u4] = e3[u4];
        }
        !function(t5) {
          var e4 = n3.type, r5 = n3.props;
          if (r5 && typeof e4 == "string") {
            var o5 = {};
            for (var u5 in r5)
              /^on(Ani|Tra|Tou)/.test(u5) && (r5[u5.toLowerCase()] = r5[u5], delete r5[u5]), o5[u5.toLowerCase()] = u5;
            if (o5.ondoubleclick && (r5.ondblclick = r5[o5.ondoubleclick], delete r5[o5.ondoubleclick]), o5.onbeforeinput && (r5.onbeforeinput = r5[o5.onbeforeinput], delete r5[o5.onbeforeinput]), o5.onchange && (e4 === "textarea" || e4.toLowerCase() === "input" && !/^fil|che|ra/i.test(r5.type))) {
              var i4 = o5.oninput || "oninput";
              r5[i4] || (r5[i4] = r5[o5.onchange], delete r5[o5.onchange]);
            }
          }
        }(), typeof t4 == "function" && !t4.m && t4.prototype && (I2(t4.prototype, "componentWillMount"), I2(t4.prototype, "componentWillReceiveProps"), I2(t4.prototype, "componentWillUpdate"), t4.m = true);
      }
      q2 && q2(n3);
    };
    B = "16.8.0";
    Y = function(n3, t4) {
      return n3(t4);
    };
    compat_module_default = { useState: m2, useReducer: p2, useEffect: l2, useLayoutEffect: y2, useRef: d2, useImperativeHandle: s2, useMemo: h2, useCallback: T2, useContext: w2, useDebugValue: A2, version: "16.8.0", Children: R, render: T3, hydrate: T3, unmountComponentAtNode: Q, createPortal: z2, createElement: h, createContext: M, createFactory: G, cloneElement: K, createRef: y, Fragment: d, isValidElement: J, findDOMNode: X, Component: m, PureComponent: C2, memo: _3, forwardRef: S, unstable_batchedUpdates: Y, Suspense: U, SuspenseList: O, lazy: L2 };
  }
});

// node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js"(exports, module) {
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var browserUtils = (init_esm(), __toCommonJS(esm_exports));
    var QRCode2 = _interopDefault(require_browser2());
    var copy = _interopDefault(require_copy_to_clipboard());
    var React = (init_compat_module(), __toCommonJS(compat_module_exports));
    function open(uri) {
      QRCode2.toString(uri, {
        type: "terminal"
      }).then(console.log);
    }
    var WALLETCONNECT_STYLE_SHEET = ':root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, "SF Pro Rounded", "SF Pro Text", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n    "Open Sans", "Helvetica Neue", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url("images/wc-logo.svg") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n';
    var _iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
    var _asyncIteratorSymbol = typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator";
    function _catch(body, recover) {
      try {
        var result = body();
      } catch (e3) {
        return recover(e3);
      }
      if (result && result.then) {
        return result.then(void 0, recover);
      }
      return result;
    }
    var WALLETCONNECT_LOGO_SVG_URL = "data:image/svg+xml,%3Csvg height='185' viewBox='0 0 300 185' width='300' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m61.4385429 36.2562612c48.9112241-47.8881663 128.2119871-47.8881663 177.1232091 0l5.886545 5.7634174c2.445561 2.3944081 2.445561 6.2765112 0 8.6709204l-20.136695 19.715503c-1.222781 1.1972051-3.2053 1.1972051-4.428081 0l-8.100584-7.9311479c-34.121692-33.4079817-89.443886-33.4079817-123.5655788 0l-8.6750562 8.4936051c-1.2227816 1.1972041-3.205301 1.1972041-4.4280806 0l-20.1366949-19.7155031c-2.4455612-2.3944092-2.4455612-6.2765122 0-8.6709204zm218.7677961 40.7737449 17.921697 17.546897c2.445549 2.3943969 2.445563 6.2764769.000031 8.6708899l-80.810171 79.121134c-2.445544 2.394426-6.410582 2.394453-8.85616.000062-.00001-.00001-.000022-.000022-.000032-.000032l-57.354143-56.154572c-.61139-.598602-1.60265-.598602-2.21404 0-.000004.000004-.000007.000008-.000011.000011l-57.3529212 56.154531c-2.4455368 2.394432-6.4105755 2.394472-8.8561612.000087-.0000143-.000014-.0000296-.000028-.0000449-.000044l-80.81241943-79.122185c-2.44556021-2.394408-2.44556021-6.2765115 0-8.6709197l17.92172963-17.5468673c2.4455602-2.3944082 6.4105989-2.3944082 8.8561602 0l57.3549775 56.155357c.6113908.598602 1.602649.598602 2.2140398 0 .0000092-.000009.0000174-.000017.0000265-.000024l57.3521031-56.155333c2.445505-2.3944633 6.410544-2.3945531 8.856161-.0002.000034.0000336.000068.0000673.000101.000101l57.354902 56.155432c.61139.598601 1.60265.598601 2.21404 0l57.353975-56.1543249c2.445561-2.3944092 6.410599-2.3944092 8.85616 0z' fill='%233b99fc'/%3E%3C/svg%3E";
    var WALLETCONNECT_HEADER_TEXT = "WalletConnect";
    var ANIMATION_DURATION = 300;
    var DEFAULT_BUTTON_COLOR = "rgb(64, 153, 255)";
    var WALLETCONNECT_WRAPPER_ID = "walletconnect-wrapper";
    var WALLETCONNECT_STYLE_ID = "walletconnect-style-sheet";
    var WALLETCONNECT_MODAL_ID = "walletconnect-qrcode-modal";
    var WALLETCONNECT_CLOSE_BUTTON_ID = "walletconnect-qrcode-close";
    var WALLETCONNECT_CTA_TEXT_ID = "walletconnect-qrcode-text";
    var WALLETCONNECT_CONNECT_BUTTON_ID = "walletconnect-connect-button";
    function Header2(props) {
      return React.createElement("div", {
        className: "walletconnect-modal__header"
      }, React.createElement("img", {
        src: WALLETCONNECT_LOGO_SVG_URL,
        className: "walletconnect-modal__headerLogo"
      }), React.createElement("p", null, WALLETCONNECT_HEADER_TEXT), React.createElement("div", {
        className: "walletconnect-modal__close__wrapper",
        onClick: props.onClose
      }, React.createElement("div", {
        id: WALLETCONNECT_CLOSE_BUTTON_ID,
        className: "walletconnect-modal__close__icon"
      }, React.createElement("div", {
        className: "walletconnect-modal__close__line1"
      }), React.createElement("div", {
        className: "walletconnect-modal__close__line2"
      }))));
    }
    function ConnectButton(props) {
      return React.createElement("a", {
        className: "walletconnect-connect__button",
        href: props.href,
        id: WALLETCONNECT_CONNECT_BUTTON_ID + "-" + props.name,
        onClick: props.onClick,
        rel: "noopener noreferrer",
        style: {
          backgroundColor: props.color
        },
        target: "_blank"
      }, props.name);
    }
    var CARET_SVG_URL = "data:image/svg+xml,%3Csvg fill='none' height='18' viewBox='0 0 8 18' width='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath clip-rule='evenodd' d='m.586301.213898c-.435947.33907-.5144813.967342-.175411 1.403292l4.87831 6.27212c.28087.36111.28087.86677 0 1.22788l-4.878311 6.27211c-.33907.436-.260536 1.0642.175412 1.4033.435949.3391 1.064219.2605 1.403289-.1754l4.87832-6.2721c.84259-1.08336.84259-2.60034 0-3.68367l-4.87832-6.27212c-.33907-.4359474-.96734-.514482-1.403289-.175412z' fill='%233c4252' fill-rule='evenodd'/%3E%3C/svg%3E";
    function WalletButton(props) {
      var color = props.color;
      var href = props.href;
      var name2 = props.name;
      var logo = props.logo;
      var onClick = props.onClick;
      return React.createElement("a", {
        className: "walletconnect-modal__base__row",
        href,
        onClick,
        rel: "noopener noreferrer",
        target: "_blank"
      }, React.createElement("h3", {
        className: "walletconnect-modal__base__row__h3"
      }, name2), React.createElement("div", {
        className: "walletconnect-modal__base__row__right"
      }, React.createElement("div", {
        className: "walletconnect-modal__base__row__right__app-icon",
        style: {
          background: "url('" + logo + "') " + color,
          backgroundSize: "100%"
        }
      }), React.createElement("img", {
        src: CARET_SVG_URL,
        className: "walletconnect-modal__base__row__right__caret"
      })));
    }
    function WalletIcon(props) {
      var color = props.color;
      var href = props.href;
      var name2 = props.name;
      var logo = props.logo;
      var onClick = props.onClick;
      var fontSize = window.innerWidth < 768 ? (name2.length > 8 ? 2.5 : 2.7) + "vw" : "inherit";
      return React.createElement("a", {
        className: "walletconnect-connect__button__icon_anchor",
        href,
        onClick,
        rel: "noopener noreferrer",
        target: "_blank"
      }, React.createElement("div", {
        className: "walletconnect-connect__button__icon",
        style: {
          background: "url('" + logo + "') " + color,
          backgroundSize: "100%"
        }
      }), React.createElement("div", {
        style: {
          fontSize
        },
        className: "walletconnect-connect__button__text"
      }, name2));
    }
    var GRID_MIN_COUNT = 5;
    var LINKS_PER_PAGE = 12;
    function LinkDisplay(props) {
      var android = browserUtils.isAndroid();
      var ref = React.useState("");
      var input = ref[0];
      var setInput = ref[1];
      var ref$1 = React.useState("");
      var filter = ref$1[0];
      var setFilter = ref$1[1];
      var ref$2 = React.useState(1);
      var page = ref$2[0];
      var setPage = ref$2[1];
      var links = filter ? props.links.filter(function(link) {
        return link.name.toLowerCase().includes(filter.toLowerCase());
      }) : props.links;
      var errorMessage = props.errorMessage;
      var grid = filter || links.length > GRID_MIN_COUNT;
      var pages = Math.ceil(links.length / LINKS_PER_PAGE);
      var range = [(page - 1) * LINKS_PER_PAGE + 1, page * LINKS_PER_PAGE];
      var pageLinks = links.length ? links.filter(function(_5, index2) {
        return index2 + 1 >= range[0] && index2 + 1 <= range[1];
      }) : [];
      var hasPaging = !!(!android && pages > 1);
      var filterTimeout = void 0;
      function handleInput(e3) {
        setInput(e3.target.value);
        clearTimeout(filterTimeout);
        if (e3.target.value) {
          filterTimeout = setTimeout(function() {
            setFilter(e3.target.value);
            setPage(1);
          }, 1e3);
        } else {
          setInput("");
          setFilter("");
          setPage(1);
        }
      }
      return React.createElement("div", null, React.createElement("p", {
        id: WALLETCONNECT_CTA_TEXT_ID,
        className: "walletconnect-qrcode__text"
      }, android ? props.text.connect_mobile_wallet : props.text.choose_preferred_wallet), !android && React.createElement("input", {
        className: "walletconnect-search__input",
        placeholder: "Search",
        value: input,
        onChange: handleInput
      }), React.createElement("div", {
        className: "walletconnect-connect__buttons__wrapper" + (android ? "__android" : grid && links.length ? "__wrap" : "")
      }, !android ? pageLinks.length ? pageLinks.map(function(entry) {
        var color = entry.color;
        var name2 = entry.name;
        var shortName = entry.shortName;
        var logo = entry.logo;
        var href = browserUtils.formatIOSMobile(props.uri, entry);
        var handleClickIOS = React.useCallback(function() {
          browserUtils.saveMobileLinkInfo({
            name: name2,
            href
          });
        }, [pageLinks]);
        return !grid ? React.createElement(WalletButton, {
          color,
          href,
          name: name2,
          logo,
          onClick: handleClickIOS
        }) : React.createElement(WalletIcon, {
          color,
          href,
          name: shortName || name2,
          logo,
          onClick: handleClickIOS
        });
      }) : React.createElement(React.Fragment, null, React.createElement("p", null, errorMessage.length ? props.errorMessage : !!props.links.length && !links.length ? props.text.no_wallets_found : props.text.loading)) : React.createElement(ConnectButton, {
        name: props.text.connect,
        color: DEFAULT_BUTTON_COLOR,
        href: props.uri,
        onClick: React.useCallback(function() {
          browserUtils.saveMobileLinkInfo({
            name: "Unknown",
            href: props.uri
          });
        }, [])
      })), hasPaging && React.createElement("div", {
        className: "walletconnect-modal__footer"
      }, Array(pages).fill(0).map(function(_5, index2) {
        var pageNumber = index2 + 1;
        var selected = page === pageNumber;
        return React.createElement("a", {
          style: {
            margin: "auto 10px",
            fontWeight: selected ? "bold" : "normal"
          },
          onClick: function() {
            return setPage(pageNumber);
          }
        }, pageNumber);
      })));
    }
    function Notification(props) {
      var show = !!props.message.trim();
      return React.createElement("div", {
        className: "walletconnect-qrcode__notification" + (show ? " notification__show" : "")
      }, props.message);
    }
    var formatQRCodeImage = function(data) {
      try {
        var result = "";
        return Promise.resolve(QRCode2.toString(data, {
          margin: 0,
          type: "svg"
        })).then(function(dataString) {
          if (typeof dataString === "string") {
            result = dataString.replace("<svg", '<svg class="walletconnect-qrcode__image"');
          }
          return result;
        });
      } catch (e3) {
        return Promise.reject(e3);
      }
    };
    function QRCodeDisplay(props) {
      var ref = React.useState("");
      var notification = ref[0];
      var setNotification = ref[1];
      var ref$1 = React.useState("");
      var svg = ref$1[0];
      var setSvg = ref$1[1];
      React.useEffect(function() {
        try {
          return Promise.resolve(formatQRCodeImage(props.uri)).then(function(_formatQRCodeImage) {
            setSvg(_formatQRCodeImage);
          });
        } catch (e3) {
          Promise.reject(e3);
        }
      }, []);
      var copyToClipboard = function() {
        var success = copy(props.uri);
        if (success) {
          setNotification(props.text.copied_to_clipboard);
          setInterval(function() {
            return setNotification("");
          }, 1200);
        } else {
          setNotification("Error");
          setInterval(function() {
            return setNotification("");
          }, 1200);
        }
      };
      return React.createElement("div", null, React.createElement("p", {
        id: WALLETCONNECT_CTA_TEXT_ID,
        className: "walletconnect-qrcode__text"
      }, props.text.scan_qrcode_with_wallet), React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: svg
        }
      }), React.createElement("div", {
        className: "walletconnect-modal__footer"
      }, React.createElement("a", {
        onClick: copyToClipboard
      }, props.text.copy_to_clipboard)), React.createElement(Notification, {
        message: notification
      }));
    }
    function Modal2(props) {
      var android = browserUtils.isAndroid();
      var mobile = browserUtils.isMobile();
      var whitelist = mobile ? props.qrcodeModalOptions && props.qrcodeModalOptions.mobileLinks ? props.qrcodeModalOptions.mobileLinks : void 0 : props.qrcodeModalOptions && props.qrcodeModalOptions.desktopLinks ? props.qrcodeModalOptions.desktopLinks : void 0;
      var ref = React.useState(false);
      var loading = ref[0];
      var setLoading = ref[1];
      var ref$1 = React.useState(false);
      var fetched = ref$1[0];
      var setFetched = ref$1[1];
      var ref$2 = React.useState(!mobile);
      var displayQRCode = ref$2[0];
      var setDisplayQRCode = ref$2[1];
      var displayProps = {
        mobile,
        text: props.text,
        uri: props.uri,
        qrcodeModalOptions: props.qrcodeModalOptions
      };
      var ref$3 = React.useState("");
      var singleLinkHref = ref$3[0];
      var setSingleLinkHref = ref$3[1];
      var ref$4 = React.useState(false);
      var hasSingleLink = ref$4[0];
      var setHasSingleLink = ref$4[1];
      var ref$5 = React.useState([]);
      var links = ref$5[0];
      var setLinks = ref$5[1];
      var ref$6 = React.useState("");
      var errorMessage = ref$6[0];
      var setErrorMessage = ref$6[1];
      var getLinksIfNeeded = function() {
        if (fetched || loading || whitelist && !whitelist.length || links.length > 0) {
          return;
        }
        React.useEffect(function() {
          var initLinks = function() {
            try {
              if (android) {
                return Promise.resolve();
              }
              setLoading(true);
              var _temp = _catch(function() {
                var url = props.qrcodeModalOptions && props.qrcodeModalOptions.registryUrl ? props.qrcodeModalOptions.registryUrl : browserUtils.getWalletRegistryUrl();
                return Promise.resolve(fetch(url)).then(function(registryResponse) {
                  return Promise.resolve(registryResponse.json()).then(function(_registryResponse$jso) {
                    var registry = _registryResponse$jso.listings;
                    var platform = mobile ? "mobile" : "desktop";
                    var _links = browserUtils.getMobileLinkRegistry(browserUtils.formatMobileRegistry(registry, platform), whitelist);
                    setLoading(false);
                    setFetched(true);
                    setErrorMessage(!_links.length ? props.text.no_supported_wallets : "");
                    setLinks(_links);
                    var hasSingleLink2 = _links.length === 1;
                    if (hasSingleLink2) {
                      setSingleLinkHref(browserUtils.formatIOSMobile(props.uri, _links[0]));
                      setDisplayQRCode(true);
                    }
                    setHasSingleLink(hasSingleLink2);
                  });
                });
              }, function(e3) {
                setLoading(false);
                setFetched(true);
                setErrorMessage(props.text.something_went_wrong);
                console.error(e3);
              });
              return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
              }) : void 0);
            } catch (e3) {
              return Promise.reject(e3);
            }
          };
          initLinks();
        });
      };
      getLinksIfNeeded();
      var rightSelected = mobile ? displayQRCode : !displayQRCode;
      return React.createElement("div", {
        id: WALLETCONNECT_MODAL_ID,
        className: "walletconnect-qrcode__base animated fadeIn"
      }, React.createElement("div", {
        className: "walletconnect-modal__base"
      }, React.createElement(Header2, {
        onClose: props.onClose
      }), hasSingleLink && displayQRCode ? React.createElement("div", {
        className: "walletconnect-modal__single_wallet"
      }, React.createElement("a", {
        onClick: function() {
          return browserUtils.saveMobileLinkInfo({
            name: links[0].name,
            href: singleLinkHref
          });
        },
        href: singleLinkHref,
        rel: "noopener noreferrer",
        target: "_blank"
      }, props.text.connect_with + " " + (hasSingleLink ? links[0].name : "") + " \u203A")) : android || loading || !loading && links.length ? React.createElement("div", {
        className: "walletconnect-modal__mobile__toggle" + (rightSelected ? " right__selected" : "")
      }, React.createElement("div", {
        className: "walletconnect-modal__mobile__toggle_selector"
      }), mobile ? React.createElement(React.Fragment, null, React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(false), getLinksIfNeeded();
        }
      }, props.text.mobile), React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(true);
        }
      }, props.text.qrcode)) : React.createElement(React.Fragment, null, React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(true);
        }
      }, props.text.qrcode), React.createElement("a", {
        onClick: function() {
          return setDisplayQRCode(false), getLinksIfNeeded();
        }
      }, props.text.desktop))) : null, React.createElement("div", null, displayQRCode || !android && !loading && !links.length ? React.createElement(QRCodeDisplay, Object.assign({}, displayProps)) : React.createElement(LinkDisplay, Object.assign({}, displayProps, {
        links,
        errorMessage
      })))));
    }
    var de = {
      choose_preferred_wallet: "W\xE4hle bevorzugte Wallet",
      connect_mobile_wallet: "Verbinde mit Mobile Wallet",
      scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
      connect: "Verbinden",
      qrcode: "QR-Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "In die Zwischenablage kopieren",
      copied_to_clipboard: "In die Zwischenablage kopiert!",
      connect_with: "Verbinden mit Hilfe von",
      loading: "Laden...",
      something_went_wrong: "Etwas ist schief gelaufen",
      no_supported_wallets: "Es gibt noch keine unterst\xFCtzten Wallet",
      no_wallets_found: "keine Wallet gefunden"
    };
    var en2 = {
      choose_preferred_wallet: "Choose your preferred wallet",
      connect_mobile_wallet: "Connect to Mobile Wallet",
      scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
      connect: "Connect",
      qrcode: "QR Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "Copy to clipboard",
      copied_to_clipboard: "Copied to clipboard!",
      connect_with: "Connect with",
      loading: "Loading...",
      something_went_wrong: "Something went wrong",
      no_supported_wallets: "There are no supported wallets yet",
      no_wallets_found: "No wallets found"
    };
    var es = {
      choose_preferred_wallet: "Elige tu billetera preferida",
      connect_mobile_wallet: "Conectar a billetera m\xF3vil",
      scan_qrcode_with_wallet: "Escanea el c\xF3digo QR con una billetera compatible con WalletConnect",
      connect: "Conectar",
      qrcode: "C\xF3digo QR",
      mobile: "M\xF3vil",
      desktop: "Desktop",
      copy_to_clipboard: "Copiar",
      copied_to_clipboard: "Copiado!",
      connect_with: "Conectar mediante",
      loading: "Cargando...",
      something_went_wrong: "Algo sali\xF3 mal",
      no_supported_wallets: "Todav\xEDa no hay billeteras compatibles",
      no_wallets_found: "No se encontraron billeteras"
    };
    var fr = {
      choose_preferred_wallet: "Choisissez votre portefeuille pr\xE9f\xE9r\xE9",
      connect_mobile_wallet: "Se connecter au portefeuille mobile",
      scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
      connect: "Se connecter",
      qrcode: "QR Code",
      mobile: "Mobile",
      desktop: "Desktop",
      copy_to_clipboard: "Copier",
      copied_to_clipboard: "Copi\xE9!",
      connect_with: "Connectez-vous \xE0 l'aide de",
      loading: "Chargement...",
      something_went_wrong: "Quelque chose a mal tourn\xE9",
      no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
      no_wallets_found: "Aucun portefeuille trouv\xE9"
    };
    var ko = {
      choose_preferred_wallet: "\uC6D0\uD558\uB294 \uC9C0\uAC11\uC744 \uC120\uD0DD\uD558\uC138\uC694",
      connect_mobile_wallet: "\uBAA8\uBC14\uC77C \uC9C0\uAC11\uACFC \uC5F0\uACB0",
      scan_qrcode_with_wallet: "WalletConnect \uC9C0\uC6D0 \uC9C0\uAC11\uC5D0\uC11C QR\uCF54\uB4DC\uB97C \uC2A4\uCE94\uD558\uC138\uC694",
      connect: "\uC5F0\uACB0",
      qrcode: "QR \uCF54\uB4DC",
      mobile: "\uBAA8\uBC14\uC77C",
      desktop: "\uB370\uC2A4\uD06C\uD0D1",
      copy_to_clipboard: "\uD074\uB9BD\uBCF4\uB4DC\uC5D0 \uBCF5\uC0AC",
      copied_to_clipboard: "\uD074\uB9BD\uBCF4\uB4DC\uC5D0 \uBCF5\uC0AC\uB418\uC5C8\uC2B5\uB2C8\uB2E4!",
      connect_with: "\uC640 \uC5F0\uACB0\uD558\uB2E4",
      loading: "\uB85C\uB4DC \uC911...",
      something_went_wrong: "\uBB38\uC81C\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
      no_supported_wallets: "\uC544\uC9C1 \uC9C0\uC6D0\uB418\uB294 \uC9C0\uAC11\uC774 \uC5C6\uC2B5\uB2C8\uB2E4",
      no_wallets_found: "\uC9C0\uAC11\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4"
    };
    var pt = {
      choose_preferred_wallet: "Escolha sua carteira preferida",
      connect_mobile_wallet: "Conectar-se \xE0 carteira m\xF3vel",
      scan_qrcode_with_wallet: "Ler o c\xF3digo QR com uma carteira compat\xEDvel com WalletConnect",
      connect: "Conectar",
      qrcode: "C\xF3digo QR",
      mobile: "M\xF3vel",
      desktop: "Desktop",
      copy_to_clipboard: "Copiar",
      copied_to_clipboard: "Copiado!",
      connect_with: "Ligar por meio de",
      loading: "Carregamento...",
      something_went_wrong: "Algo correu mal",
      no_supported_wallets: "Ainda n\xE3o h\xE1 carteiras suportadas",
      no_wallets_found: "Nenhuma carteira encontrada"
    };
    var zh = {
      choose_preferred_wallet: "\u9009\u62E9\u4F60\u7684\u94B1\u5305",
      connect_mobile_wallet: "\u8FDE\u63A5\u81F3\u79FB\u52A8\u7AEF\u94B1\u5305",
      scan_qrcode_with_wallet: "\u4F7F\u7528\u517C\u5BB9 WalletConnect \u7684\u94B1\u5305\u626B\u63CF\u4E8C\u7EF4\u7801",
      connect: "\u8FDE\u63A5",
      qrcode: "\u4E8C\u7EF4\u7801",
      mobile: "\u79FB\u52A8",
      desktop: "\u684C\u9762",
      copy_to_clipboard: "\u590D\u5236\u5230\u526A\u8D34\u677F",
      copied_to_clipboard: "\u590D\u5236\u5230\u526A\u8D34\u677F\u6210\u529F\uFF01",
      connect_with: "\u901A\u8FC7\u4EE5\u4E0B\u65B9\u5F0F\u8FDE\u63A5",
      loading: "\u6B63\u5728\u52A0\u8F7D...",
      something_went_wrong: "\u51FA\u4E86\u95EE\u9898",
      no_supported_wallets: "\u76EE\u524D\u8FD8\u6CA1\u6709\u652F\u6301\u7684\u94B1\u5305",
      no_wallets_found: "\u6CA1\u6709\u627E\u5230\u94B1\u5305"
    };
    var fa = {
      choose_preferred_wallet: "\u06A9\u06CC\u0641 \u067E\u0648\u0644 \u0645\u0648\u0631\u062F \u0646\u0638\u0631 \u062E\u0648\u062F \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
      connect_mobile_wallet: "\u0628\u0647 \u06A9\u06CC\u0641 \u067E\u0648\u0644 \u0645\u0648\u0628\u0627\u06CC\u0644 \u0648\u0635\u0644 \u0634\u0648\u06CC\u062F",
      scan_qrcode_with_wallet: "\u06A9\u062F QR \u0631\u0627 \u0628\u0627 \u06CC\u06A9 \u06A9\u06CC\u0641 \u067E\u0648\u0644 \u0633\u0627\u0632\u06AF\u0627\u0631 \u0628\u0627 WalletConnect \u0627\u0633\u06A9\u0646 \u06A9\u0646\u06CC\u062F",
      connect: "\u0627\u062A\u0635\u0627\u0644",
      qrcode: "\u06A9\u062F QR",
      mobile: "\u0633\u06CC\u0627\u0631",
      desktop: "\u062F\u0633\u06A9\u062A\u0627\u067E",
      copy_to_clipboard: "\u06A9\u067E\u06CC \u0628\u0647 \u06A9\u0644\u06CC\u067E \u0628\u0648\u0631\u062F",
      copied_to_clipboard: "\u062F\u0631 \u06A9\u0644\u06CC\u067E \u0628\u0648\u0631\u062F \u06A9\u067E\u06CC \u0634\u062F!",
      connect_with: "\u0627\u0631\u062A\u0628\u0627\u0637 \u0628\u0627",
      loading: "...\u0628\u0627\u0631\u06AF\u0630\u0627\u0631\u06CC",
      something_went_wrong: "\u0645\u0634\u06A9\u0644\u06CC \u067E\u06CC\u0634 \u0622\u0645\u062F",
      no_supported_wallets: "\u0647\u0646\u0648\u0632 \u0647\u06CC\u0686 \u06A9\u06CC\u0641 \u067E\u0648\u0644 \u067E\u0634\u062A\u06CC\u0628\u0627\u0646\u06CC \u0634\u062F\u0647 \u0627\u06CC \u0648\u062C\u0648\u062F \u0646\u062F\u0627\u0631\u062F",
      no_wallets_found: "\u0647\u06CC\u0686 \u06A9\u06CC\u0641 \u067E\u0648\u0644\u06CC \u067E\u06CC\u062F\u0627 \u0646\u0634\u062F"
    };
    var languages = {
      de,
      en: en2,
      es,
      fr,
      ko,
      pt,
      zh,
      fa
    };
    function injectStyleSheet() {
      var doc = browserUtils.getDocumentOrThrow();
      var prev = doc.getElementById(WALLETCONNECT_STYLE_ID);
      if (prev) {
        doc.head.removeChild(prev);
      }
      var style = doc.createElement("style");
      style.setAttribute("id", WALLETCONNECT_STYLE_ID);
      style.innerText = WALLETCONNECT_STYLE_SHEET;
      doc.head.appendChild(style);
    }
    function renderWrapper() {
      var doc = browserUtils.getDocumentOrThrow();
      var wrapper = doc.createElement("div");
      wrapper.setAttribute("id", WALLETCONNECT_WRAPPER_ID);
      doc.body.appendChild(wrapper);
      return wrapper;
    }
    function triggerCloseAnimation() {
      var doc = browserUtils.getDocumentOrThrow();
      var modal = doc.getElementById(WALLETCONNECT_MODAL_ID);
      if (modal) {
        modal.className = modal.className.replace("fadeIn", "fadeOut");
        setTimeout(function() {
          var wrapper = doc.getElementById(WALLETCONNECT_WRAPPER_ID);
          if (wrapper) {
            doc.body.removeChild(wrapper);
          }
        }, ANIMATION_DURATION);
      }
    }
    function getWrappedCallback(cb) {
      return function() {
        triggerCloseAnimation();
        if (cb) {
          cb();
        }
      };
    }
    function getText() {
      var lang = browserUtils.getNavigatorOrThrow().language.split("-")[0] || "en";
      return languages[lang] || languages["en"];
    }
    function open$1(uri, cb, qrcodeModalOptions) {
      injectStyleSheet();
      var wrapper = renderWrapper();
      React.render(React.createElement(Modal2, {
        text: getText(),
        uri,
        onClose: getWrappedCallback(cb),
        qrcodeModalOptions
      }), wrapper);
    }
    function close$1() {
      triggerCloseAnimation();
    }
    var isNode = function() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    };
    function open$2(uri, cb, qrcodeModalOptions) {
      console.log(uri);
      if (isNode()) {
        open(uri);
      } else {
        open$1(uri, cb, qrcodeModalOptions);
      }
    }
    function close$2() {
      if (isNode())
        ;
      else {
        close$1();
      }
    }
    var index = {
      open: open$2,
      close: close$2
    };
    module.exports = index;
  }
});

// node_modules/@walletconnect/http-connection/dist/esm/index.js
var import_eventemitter3, import_xhr2_cookies, XHR, HTTPConnection, esm_default2;
var init_esm4 = __esm({
  "node_modules/@walletconnect/http-connection/dist/esm/index.js"() {
    import_eventemitter3 = __toESM(require_eventemitter3());
    import_xhr2_cookies = __toESM(require_dist());
    init_esm2();
    XHR = getFromWindow("XMLHttpRequest") || import_xhr2_cookies.XMLHttpRequest;
    HTTPConnection = class extends import_eventemitter3.default {
      constructor(url) {
        super();
        this.url = url;
      }
      formatError(payload, message, code = -1) {
        return {
          error: { message, code },
          id: payload.id,
          jsonrpc: payload.jsonrpc
        };
      }
      send(payload, internal) {
        return new Promise((resolve) => {
          if (payload.method === "eth_subscribe") {
            const error = this.formatError(payload, "Subscriptions are not supported by this HTTP endpoint");
            this.emit("error", error);
            return resolve(error);
          }
          const xhr = new XHR();
          let responded = false;
          const res = (err, result) => {
            if (!responded) {
              xhr.abort();
              responded = true;
              if (internal) {
                internal(err, result);
              } else {
                const { id: id2, jsonrpc } = payload;
                const response = err ? { id: id2, jsonrpc, error: { message: err.message, code: err.code } } : { id: id2, jsonrpc, result };
                this.emit("payload", response);
                resolve(response);
              }
            }
          };
          xhr.open("POST", this.url, true);
          xhr.setRequestHeader("Content-Type", "application/json");
          xhr.timeout = 60 * 1e3;
          xhr.onerror = res;
          xhr.ontimeout = res;
          xhr.onreadystatechange = () => {
            if (xhr.readyState === 4) {
              try {
                const response = JSON.parse(xhr.responseText);
                res(response.error, response.result);
              } catch (e3) {
                res(e3);
              }
            }
          };
          xhr.send(JSON.stringify(payload));
        });
      }
    };
    esm_default2 = HTTPConnection;
  }
});

// node_modules/ethereumjs-util/dist/secp256k1-lib/index.js
var require_secp256k1_lib = __commonJS({
  "node_modules/ethereumjs-util/dist/secp256k1-lib/index.js"(exports) {
    "use strict";
    var BN3 = require_bn();
    var EC2 = require_elliptic().ec;
    var ec2 = new EC2("secp256k1");
    var ecparams = ec2.curve;
    exports.privateKeyExport = function(privateKey, compressed) {
      var d4 = new BN3(privateKey);
      if (d4.ucmp(ecparams.n) >= 0) {
        throw new Error("couldn't export to DER format");
      }
      var point3 = ec2.g.mul(d4);
      return toPublicKey(point3.getX(), point3.getY(), compressed);
    };
    exports.privateKeyModInverse = function(privateKey) {
      var bn = new BN3(privateKey);
      if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
        throw new Error("private key range is invalid");
      }
      return bn.invm(ecparams.n).toArrayLike(Buffer, "be", 32);
    };
    exports.signatureImport = function(sigObj) {
      var r4 = new BN3(sigObj.r);
      if (r4.ucmp(ecparams.n) >= 0) {
        r4 = new BN3(0);
      }
      var s4 = new BN3(sigObj.s);
      if (s4.ucmp(ecparams.n) >= 0) {
        s4 = new BN3(0);
      }
      return Buffer.concat([r4.toArrayLike(Buffer, "be", 32), s4.toArrayLike(Buffer, "be", 32)]);
    };
    exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
      var point3 = ec2.keyFromPublic(publicKey);
      var scalar = new BN3(privateKey);
      if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
        throw new Error("scalar was invalid (zero or overflow)");
      }
      var shared = point3.pub.mul(scalar);
      return toPublicKey(shared.getX(), shared.getY(), compressed);
    };
    var toPublicKey = function toPublicKey2(x4, y4, compressed) {
      var publicKey = void 0;
      if (compressed) {
        publicKey = Buffer.alloc(33);
        publicKey[0] = y4.isOdd() ? 3 : 2;
        x4.toArrayLike(Buffer, "be", 32).copy(publicKey, 1);
      } else {
        publicKey = Buffer.alloc(65);
        publicKey[0] = 4;
        x4.toArrayLike(Buffer, "be", 32).copy(publicKey, 1);
        y4.toArrayLike(Buffer, "be", 32).copy(publicKey, 33);
      }
      return publicKey;
    };
  }
});

// node_modules/ethereumjs-util/dist/secp256k1-lib/der.js
var require_der = __commonJS({
  "node_modules/ethereumjs-util/dist/secp256k1-lib/der.js"(exports) {
    "use strict";
    var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
      48,
      129,
      211,
      2,
      1,
      1,
      4,
      32,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      160,
      129,
      133,
      48,
      129,
      130,
      2,
      1,
      1,
      48,
      44,
      6,
      7,
      42,
      134,
      72,
      206,
      61,
      1,
      1,
      2,
      33,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      254,
      255,
      255,
      252,
      47,
      48,
      6,
      4,
      1,
      0,
      4,
      1,
      7,
      4,
      33,
      2,
      121,
      190,
      102,
      126,
      249,
      220,
      187,
      172,
      85,
      160,
      98,
      149,
      206,
      135,
      11,
      7,
      2,
      155,
      252,
      219,
      45,
      206,
      40,
      217,
      89,
      242,
      129,
      91,
      22,
      248,
      23,
      152,
      2,
      33,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      254,
      186,
      174,
      220,
      230,
      175,
      72,
      160,
      59,
      191,
      210,
      94,
      140,
      208,
      54,
      65,
      65,
      2,
      1,
      1,
      161,
      36,
      3,
      34,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
      48,
      130,
      1,
      19,
      2,
      1,
      1,
      4,
      32,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      160,
      129,
      165,
      48,
      129,
      162,
      2,
      1,
      1,
      48,
      44,
      6,
      7,
      42,
      134,
      72,
      206,
      61,
      1,
      1,
      2,
      33,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      254,
      255,
      255,
      252,
      47,
      48,
      6,
      4,
      1,
      0,
      4,
      1,
      7,
      4,
      65,
      4,
      121,
      190,
      102,
      126,
      249,
      220,
      187,
      172,
      85,
      160,
      98,
      149,
      206,
      135,
      11,
      7,
      2,
      155,
      252,
      219,
      45,
      206,
      40,
      217,
      89,
      242,
      129,
      91,
      22,
      248,
      23,
      152,
      72,
      58,
      218,
      119,
      38,
      163,
      196,
      101,
      93,
      164,
      251,
      252,
      14,
      17,
      8,
      168,
      253,
      23,
      180,
      72,
      166,
      133,
      84,
      25,
      156,
      71,
      208,
      143,
      251,
      16,
      212,
      184,
      2,
      33,
      0,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      255,
      254,
      186,
      174,
      220,
      230,
      175,
      72,
      160,
      59,
      191,
      210,
      94,
      140,
      208,
      54,
      65,
      65,
      2,
      1,
      1,
      161,
      68,
      3,
      66,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    exports.privateKeyExport = function(privateKey, publicKey, compressed) {
      var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
      privateKey.copy(result, compressed ? 8 : 9);
      publicKey.copy(result, compressed ? 181 : 214);
      return result;
    };
    exports.privateKeyImport = function(privateKey) {
      var length = privateKey.length;
      var index = 0;
      if (length < index + 1 || privateKey[index] !== 48)
        return null;
      index += 1;
      if (length < index + 1 || !(privateKey[index] & 128))
        return null;
      var lenb = privateKey[index] & 127;
      index += 1;
      if (lenb < 1 || lenb > 2)
        return null;
      if (length < index + lenb)
        return null;
      var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
      index += lenb;
      if (length < index + len)
        return null;
      if (length < index + 3 || privateKey[index] !== 2 || privateKey[index + 1] !== 1 || privateKey[index + 2] !== 1) {
        return null;
      }
      index += 3;
      if (length < index + 2 || privateKey[index] !== 4 || privateKey[index + 1] > 32 || length < index + 2 + privateKey[index + 1]) {
        return null;
      }
      return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
    };
    exports.signatureImportLax = function(signature2) {
      var r4 = Buffer.alloc(32, 0);
      var s4 = Buffer.alloc(32, 0);
      var length = signature2.length;
      var index = 0;
      if (signature2[index++] !== 48) {
        return null;
      }
      var lenbyte = signature2[index++];
      if (lenbyte & 128) {
        index += lenbyte - 128;
        if (index > length) {
          return null;
        }
      }
      if (signature2[index++] !== 2) {
        return null;
      }
      var rlen = signature2[index++];
      if (rlen & 128) {
        lenbyte = rlen - 128;
        if (index + lenbyte > length) {
          return null;
        }
        for (; lenbyte > 0 && signature2[index] === 0; index += 1, lenbyte -= 1) {
        }
        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
          rlen = (rlen << 8) + signature2[index];
        }
      }
      if (rlen > length - index) {
        return null;
      }
      var rindex = index;
      index += rlen;
      if (signature2[index++] !== 2) {
        return null;
      }
      var slen = signature2[index++];
      if (slen & 128) {
        lenbyte = slen - 128;
        if (index + lenbyte > length) {
          return null;
        }
        for (; lenbyte > 0 && signature2[index] === 0; index += 1, lenbyte -= 1) {
        }
        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
          slen = (slen << 8) + signature2[index];
        }
      }
      if (slen > length - index) {
        return null;
      }
      var sindex = index;
      index += slen;
      for (; rlen > 0 && signature2[rindex] === 0; rlen -= 1, rindex += 1) {
      }
      if (rlen > 32) {
        return null;
      }
      var rvalue = signature2.slice(rindex, rindex + rlen);
      rvalue.copy(r4, 32 - rvalue.length);
      for (; slen > 0 && signature2[sindex] === 0; slen -= 1, sindex += 1) {
      }
      if (slen > 32) {
        return null;
      }
      var svalue = signature2.slice(sindex, sindex + slen);
      svalue.copy(s4, 32 - svalue.length);
      return { r: r4, s: s4 };
    };
  }
});

// node_modules/ethereumjs-util/dist/secp256k1-adapter.js
var require_secp256k1_adapter = __commonJS({
  "node_modules/ethereumjs-util/dist/secp256k1-adapter.js"(exports, module) {
    "use strict";
    var secp256k1 = require_secp256k1();
    var secp256k1v3 = require_secp256k1_lib();
    var der = require_der();
    var privateKeyVerify = function privateKeyVerify2(privateKey) {
      if (privateKey.length !== 32) {
        return false;
      }
      return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
    };
    var privateKeyExport = function privateKeyExport2(privateKey, compressed) {
      if (privateKey.length !== 32) {
        throw new RangeError("private key length is invalid");
      }
      var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
      return der.privateKeyExport(privateKey, publicKey, compressed);
    };
    var privateKeyImport = function privateKeyImport2(privateKey) {
      privateKey = der.privateKeyImport(privateKey);
      if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
        return privateKey;
      }
      throw new Error("couldn't import from DER format");
    };
    var privateKeyNegate = function privateKeyNegate2(privateKey) {
      return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
    };
    var privateKeyModInverse = function privateKeyModInverse2(privateKey) {
      if (privateKey.length !== 32) {
        throw new Error("private key length is invalid");
      }
      return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
    };
    var privateKeyTweakAdd = function privateKeyTweakAdd2(privateKey, tweak) {
      return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
    };
    var privateKeyTweakMul = function privateKeyTweakMul2(privateKey, tweak) {
      return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
    };
    var publicKeyCreate = function publicKeyCreate2(privateKey, compressed) {
      return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
    };
    var publicKeyConvert = function publicKeyConvert2(publicKey, compressed) {
      return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
    };
    var publicKeyVerify = function publicKeyVerify2(publicKey) {
      if (publicKey.length !== 33 && publicKey.length !== 65) {
        return false;
      }
      return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
    };
    var publicKeyTweakAdd = function publicKeyTweakAdd2(publicKey, tweak, compressed) {
      return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    var publicKeyTweakMul = function publicKeyTweakMul2(publicKey, tweak, compressed) {
      return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    var publicKeyCombine = function publicKeyCombine2(publicKeys, compressed) {
      var keys = [];
      publicKeys.forEach(function(publicKey) {
        keys.push(Uint8Array.from(publicKey));
      });
      return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
    };
    var signatureNormalize = function signatureNormalize2(signature2) {
      return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature2)));
    };
    var signatureExport = function signatureExport2(signature2) {
      return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature2)));
    };
    var signatureImport = function signatureImport2(signature2) {
      return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature2)));
    };
    var signatureImportLax = function signatureImportLax2(signature2) {
      if (signature2.length === 0) {
        throw new RangeError("signature length is invalid");
      }
      var sigObj = der.signatureImportLax(signature2);
      if (sigObj === null) {
        throw new Error("couldn't parse DER signature");
      }
      return secp256k1v3.signatureImport(sigObj);
    };
    var sign3 = function sign4(message, privateKey, options) {
      if (options === null) {
        throw new TypeError("options should be an Object");
      }
      var signOptions = void 0;
      if (options) {
        signOptions = {};
        if (options.data === null) {
          throw new TypeError("options.data should be a Buffer");
        }
        if (options.data) {
          if (options.data.length !== 32) {
            throw new RangeError("options.data length is invalid");
          }
          signOptions.data = new Uint8Array(options.data);
        }
        if (options.noncefn === null) {
          throw new TypeError("options.noncefn should be a Function");
        }
        if (options.noncefn) {
          signOptions.noncefn = function(message2, privateKey2, algo, data, attempt) {
            var bufferAlgo = algo != null ? Buffer.from(algo) : null;
            var bufferData = data != null ? Buffer.from(data) : null;
            var buffer = Buffer.from("");
            if (options.noncefn) {
              buffer = options.noncefn(Buffer.from(message2), Buffer.from(privateKey2), bufferAlgo, bufferData, attempt);
            }
            return Uint8Array.from(buffer);
          };
        }
      }
      var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
      return {
        signature: Buffer.from(sig.signature),
        recovery: sig.recid
      };
    };
    var verify3 = function verify4(message, signature2, publicKey) {
      return secp256k1.ecdsaVerify(Uint8Array.from(signature2), Uint8Array.from(message), publicKey);
    };
    var recover = function recover2(message, signature2, recid, compressed) {
      return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature2), recid, Uint8Array.from(message), compressed));
    };
    var ecdh = function ecdh2(publicKey, privateKey) {
      return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
    };
    var ecdhUnsafe = function ecdhUnsafe2(publicKey, privateKey, compressed) {
      if (publicKey.length !== 33 && publicKey.length !== 65) {
        throw new RangeError("public key length is invalid");
      }
      if (privateKey.length !== 32) {
        throw new RangeError("private key length is invalid");
      }
      return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
    };
    module.exports = {
      privateKeyVerify,
      privateKeyExport,
      privateKeyImport,
      privateKeyNegate,
      privateKeyModInverse,
      privateKeyTweakAdd,
      privateKeyTweakMul,
      publicKeyCreate,
      publicKeyConvert,
      publicKeyVerify,
      publicKeyTweakAdd,
      publicKeyTweakMul,
      publicKeyCombine,
      signatureNormalize,
      signatureExport,
      signatureImport,
      signatureImportLax,
      sign: sign3,
      verify: verify3,
      recover,
      ecdh,
      ecdhUnsafe
    };
  }
});

// node_modules/ethereumjs-util/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/ethereumjs-util/dist/index.js"(exports) {
    "use strict";
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var _require = require_keccak();
    var keccak224 = _require.keccak224;
    var keccak384 = _require.keccak384;
    var k256 = _require.keccak256;
    var keccak512 = _require.keccak512;
    var secp256k1 = require_secp256k1_adapter();
    var assert2 = require_assert();
    var rlp = require_dist2();
    var BN3 = require_bn();
    var createHash = require_browser();
    var Buffer2 = require_safe_buffer().Buffer;
    Object.assign(exports, require_lib());
    exports.MAX_INTEGER = new BN3("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports.TWO_POW256 = new BN3("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;
    exports.KECCAK256_NULL = Buffer2.from(exports.KECCAK256_NULL_S, "hex");
    exports.SHA3_NULL = exports.KECCAK256_NULL;
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;
    exports.KECCAK256_RLP_ARRAY = Buffer2.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;
    exports.KECCAK256_RLP = Buffer2.from(exports.KECCAK256_RLP_S, "hex");
    exports.SHA3_RLP = exports.KECCAK256_RLP;
    exports.BN = BN3;
    exports.rlp = rlp;
    exports.secp256k1 = secp256k1;
    exports.zeros = function(bytes) {
      return Buffer2.allocUnsafe(bytes).fill(0);
    };
    exports.zeroAddress = function() {
      var addressLength = 20;
      var zeroAddress = exports.zeros(addressLength);
      return exports.bufferToHex(zeroAddress);
    };
    exports.setLengthLeft = exports.setLength = function(msg, length, right) {
      var buf = exports.zeros(length);
      msg = exports.toBuffer(msg);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    exports.setLengthRight = function(msg, length) {
      return exports.setLength(msg, length, true);
    };
    exports.unpad = exports.stripZeros = function(a4) {
      a4 = exports.stripHexPrefix(a4);
      var first = a4[0];
      while (a4.length > 0 && first.toString() === "0") {
        a4 = a4.slice(1);
        first = a4[0];
      }
      return a4;
    };
    exports.toBuffer = function(v4) {
      if (!Buffer2.isBuffer(v4)) {
        if (Array.isArray(v4)) {
          v4 = Buffer2.from(v4);
        } else if (typeof v4 === "string") {
          if (exports.isHexString(v4)) {
            v4 = Buffer2.from(exports.padToEven(exports.stripHexPrefix(v4)), "hex");
          } else {
            v4 = Buffer2.from(v4);
          }
        } else if (typeof v4 === "number") {
          v4 = exports.intToBuffer(v4);
        } else if (v4 === null || v4 === void 0) {
          v4 = Buffer2.allocUnsafe(0);
        } else if (BN3.isBN(v4)) {
          v4 = v4.toArrayLike(Buffer2);
        } else if (v4.toArray) {
          v4 = Buffer2.from(v4.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v4;
    };
    exports.bufferToInt = function(buf) {
      return new BN3(exports.toBuffer(buf)).toNumber();
    };
    exports.bufferToHex = function(buf) {
      buf = exports.toBuffer(buf);
      return "0x" + buf.toString("hex");
    };
    exports.fromSigned = function(num) {
      return new BN3(num).fromTwos(256);
    };
    exports.toUnsigned = function(num) {
      return Buffer2.from(num.toTwos(256).toArray());
    };
    exports.keccak = function(a4, bits) {
      a4 = exports.toBuffer(a4);
      if (!bits)
        bits = 256;
      switch (bits) {
        case 224: {
          return keccak224(a4);
        }
        case 256: {
          return k256(a4);
        }
        case 384: {
          return keccak384(a4);
        }
        case 512: {
          return keccak512(a4);
        }
        default: {
          throw new Error("Invald algorithm: keccak" + bits);
        }
      }
    };
    exports.keccak256 = function(a4) {
      return exports.keccak(a4);
    };
    exports.sha3 = exports.keccak;
    exports.sha256 = function(a4) {
      a4 = exports.toBuffer(a4);
      return createHash("sha256").update(a4).digest();
    };
    exports.ripemd160 = function(a4, padded) {
      a4 = exports.toBuffer(a4);
      var hash3 = createHash("rmd160").update(a4).digest();
      if (padded === true) {
        return exports.setLength(hash3, 32);
      } else {
        return hash3;
      }
    };
    exports.rlphash = function(a4) {
      return exports.keccak(rlp.encode(a4));
    };
    exports.isValidPrivate = function(privateKey) {
      return secp256k1.privateKeyVerify(privateKey);
    };
    exports.isValidPublic = function(publicKey, sanitize) {
      if (publicKey.length === 64) {
        return secp256k1.publicKeyVerify(Buffer2.concat([Buffer2.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return secp256k1.publicKeyVerify(publicKey);
    };
    exports.pubToAddress = exports.publicToAddress = function(pubKey, sanitize) {
      pubKey = exports.toBuffer(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
      }
      assert2(pubKey.length === 64);
      return exports.keccak(pubKey).slice(-20);
    };
    var privateToPublic = exports.privateToPublic = function(privateKey) {
      privateKey = exports.toBuffer(privateKey);
      return secp256k1.publicKeyCreate(privateKey, false).slice(1);
    };
    exports.importPublic = function(publicKey) {
      publicKey = exports.toBuffer(publicKey);
      if (publicKey.length !== 64) {
        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
      }
      return publicKey;
    };
    exports.ecsign = function(msgHash, privateKey) {
      var sig = secp256k1.sign(msgHash, privateKey);
      var ret = {};
      ret.r = sig.signature.slice(0, 32);
      ret.s = sig.signature.slice(32, 64);
      ret.v = sig.recovery + 27;
      return ret;
    };
    exports.hashPersonalMessage = function(message) {
      var prefix = exports.toBuffer("Ethereum Signed Message:\n" + message.length.toString());
      return exports.keccak(Buffer2.concat([prefix, message]));
    };
    exports.ecrecover = function(msgHash, v4, r4, s4) {
      var signature2 = Buffer2.concat([exports.setLength(r4, 32), exports.setLength(s4, 32)], 64);
      var recovery = v4 - 27;
      if (recovery !== 0 && recovery !== 1) {
        throw new Error("Invalid signature v value");
      }
      var senderPubKey = secp256k1.recover(msgHash, signature2, recovery);
      return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
    };
    exports.toRpcSig = function(v4, r4, s4) {
      if (v4 !== 27 && v4 !== 28) {
        throw new Error("Invalid recovery id");
      }
      return exports.bufferToHex(Buffer2.concat([exports.setLengthLeft(r4, 32), exports.setLengthLeft(s4, 32), exports.toBuffer(v4 - 27)]));
    };
    exports.fromRpcSig = function(sig) {
      sig = exports.toBuffer(sig);
      if (sig.length !== 65) {
        throw new Error("Invalid signature length");
      }
      var v4 = sig[64];
      if (v4 < 27) {
        v4 += 27;
      }
      return {
        v: v4,
        r: sig.slice(0, 32),
        s: sig.slice(32, 64)
      };
    };
    exports.privateToAddress = function(privateKey) {
      return exports.publicToAddress(privateToPublic(privateKey));
    };
    exports.isValidAddress = function(address) {
      return /^0x[0-9a-fA-F]{40}$/.test(address);
    };
    exports.isZeroAddress = function(address) {
      var zeroAddress = exports.zeroAddress();
      return zeroAddress === exports.addHexPrefix(address);
    };
    exports.toChecksumAddress = function(address) {
      address = exports.stripHexPrefix(address).toLowerCase();
      var hash3 = exports.keccak(address).toString("hex");
      var ret = "0x";
      for (var i4 = 0; i4 < address.length; i4++) {
        if (parseInt(hash3[i4], 16) >= 8) {
          ret += address[i4].toUpperCase();
        } else {
          ret += address[i4];
        }
      }
      return ret;
    };
    exports.isValidChecksumAddress = function(address) {
      return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
    };
    exports.generateAddress = function(from, nonce) {
      from = exports.toBuffer(from);
      nonce = new BN3(nonce);
      if (nonce.isZero()) {
        nonce = null;
      } else {
        nonce = Buffer2.from(nonce.toArray());
      }
      return exports.rlphash([from, nonce]).slice(-20);
    };
    exports.isPrecompiled = function(address) {
      var a4 = exports.unpad(address);
      return a4.length === 1 && a4[0] >= 1 && a4[0] <= 8;
    };
    exports.addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return exports.isHexPrefixed(str) ? str : "0x" + str;
    };
    exports.isValidSignature = function(v4, r4, s4, homestead2) {
      var SECP256K1_N_DIV_2 = new BN3("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      var SECP256K1_N = new BN3("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r4.length !== 32 || s4.length !== 32) {
        return false;
      }
      if (v4 !== 27 && v4 !== 28) {
        return false;
      }
      r4 = new BN3(r4);
      s4 = new BN3(s4);
      if (r4.isZero() || r4.gt(SECP256K1_N) || s4.isZero() || s4.gt(SECP256K1_N)) {
        return false;
      }
      if (homestead2 === false && new BN3(s4).cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports.baToJSON = function(ba) {
      if (Buffer2.isBuffer(ba)) {
        return "0x" + ba.toString("hex");
      } else if (ba instanceof Array) {
        var array = [];
        for (var i4 = 0; i4 < ba.length; i4++) {
          array.push(exports.baToJSON(ba[i4]));
        }
        return array;
      }
    };
    exports.defineProperties = function(self2, fields, data) {
      self2.raw = [];
      self2._fields = [];
      self2.toJSON = function(label) {
        if (label) {
          var obj = {};
          self2._fields.forEach(function(field) {
            obj[field] = "0x" + self2[field].toString("hex");
          });
          return obj;
        }
        return exports.baToJSON(this.raw);
      };
      self2.serialize = function serialize3() {
        return rlp.encode(self2.raw);
      };
      fields.forEach(function(field, i4) {
        self2._fields.push(field.name);
        function getter() {
          return self2.raw[i4];
        }
        function setter(v4) {
          v4 = exports.toBuffer(v4);
          if (v4.toString("hex") === "00" && !field.allowZero) {
            v4 = Buffer2.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v4 = exports.stripZeros(v4);
            assert2(field.length >= v4.length, "The field " + field.name + " must not have more " + field.length + " bytes");
          } else if (!(field.allowZero && v4.length === 0) && field.length) {
            assert2(field.length === v4.length, "The field " + field.name + " must have byte length of " + field.length);
          }
          self2.raw[i4] = v4;
        }
        Object.defineProperty(self2, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self2[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self2, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = Buffer2.from(exports.stripHexPrefix(data), "hex");
        }
        if (Buffer2.isBuffer(data)) {
          data = rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self2._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach(function(d4, i4) {
            self2[self2._fields[i4]] = exports.toBuffer(d4);
          });
        } else if ((typeof data === "undefined" ? "undefined" : _typeof(data)) === "object") {
          var keys = Object.keys(data);
          fields.forEach(function(field) {
            if (keys.indexOf(field.name) !== -1)
              self2[field.name] = data[field.name];
            if (keys.indexOf(field.alias) !== -1)
              self2[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
  }
});

// node_modules/pify/index.js
var require_pify = __commonJS({
  "node_modules/pify/index.js"(exports, module) {
    "use strict";
    var processFn = (fn2, opts) => function() {
      const P4 = opts.promiseModule;
      const args = new Array(arguments.length);
      for (let i4 = 0; i4 < arguments.length; i4++) {
        args[i4] = arguments[i4];
      }
      return new P4((resolve, reject) => {
        if (opts.errorFirst) {
          args.push(function(err, result) {
            if (opts.multiArgs) {
              const results2 = new Array(arguments.length - 1);
              for (let i4 = 1; i4 < arguments.length; i4++) {
                results2[i4 - 1] = arguments[i4];
              }
              if (err) {
                results2.unshift(err);
                reject(results2);
              } else {
                resolve(results2);
              }
            } else if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          });
        } else {
          args.push(function(result) {
            if (opts.multiArgs) {
              const results2 = new Array(arguments.length - 1);
              for (let i4 = 0; i4 < arguments.length; i4++) {
                results2[i4] = arguments[i4];
              }
              resolve(results2);
            } else {
              resolve(result);
            }
          });
        }
        fn2.apply(this, args);
      });
    };
    module.exports = (obj, opts) => {
      opts = Object.assign({
        exclude: [/.+(Sync|Stream)$/],
        errorFirst: true,
        promiseModule: Promise
      }, opts);
      const filter = (key2) => {
        const match = (pattern) => typeof pattern === "string" ? key2 === pattern : pattern.test(key2);
        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
      };
      let ret;
      if (typeof obj === "function") {
        ret = function() {
          if (opts.excludeMain) {
            return obj.apply(this, arguments);
          }
          return processFn(obj, opts).apply(this, arguments);
        };
      } else {
        ret = Object.create(Object.getPrototypeOf(obj));
      }
      for (const key2 in obj) {
        const x4 = obj[key2];
        ret[key2] = typeof x4 === "function" && filter(key2) ? processFn(x4, opts) : x4;
      }
      return ret;
    };
  }
});

// node_modules/eth-query/index.js
var require_eth_query = __commonJS({
  "node_modules/eth-query/index.js"(exports, module) {
    var extend = require_immutable();
    var createRandomId = require_json_rpc_random_id()();
    module.exports = EthQuery;
    function EthQuery(provider) {
      const self2 = this;
      self2.currentProvider = provider;
    }
    EthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(2, "eth_getBalance");
    EthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, "eth_getCode");
    EthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(2, "eth_getTransactionCount");
    EthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(3, "eth_getStorageAt");
    EthQuery.prototype.call = generateFnWithDefaultBlockFor(2, "eth_call");
    EthQuery.prototype.protocolVersion = generateFnFor("eth_protocolVersion");
    EthQuery.prototype.syncing = generateFnFor("eth_syncing");
    EthQuery.prototype.coinbase = generateFnFor("eth_coinbase");
    EthQuery.prototype.mining = generateFnFor("eth_mining");
    EthQuery.prototype.hashrate = generateFnFor("eth_hashrate");
    EthQuery.prototype.gasPrice = generateFnFor("eth_gasPrice");
    EthQuery.prototype.accounts = generateFnFor("eth_accounts");
    EthQuery.prototype.blockNumber = generateFnFor("eth_blockNumber");
    EthQuery.prototype.getBlockTransactionCountByHash = generateFnFor("eth_getBlockTransactionCountByHash");
    EthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor("eth_getBlockTransactionCountByNumber");
    EthQuery.prototype.getUncleCountByBlockHash = generateFnFor("eth_getUncleCountByBlockHash");
    EthQuery.prototype.getUncleCountByBlockNumber = generateFnFor("eth_getUncleCountByBlockNumber");
    EthQuery.prototype.sign = generateFnFor("eth_sign");
    EthQuery.prototype.sendTransaction = generateFnFor("eth_sendTransaction");
    EthQuery.prototype.sendRawTransaction = generateFnFor("eth_sendRawTransaction");
    EthQuery.prototype.estimateGas = generateFnFor("eth_estimateGas");
    EthQuery.prototype.getBlockByHash = generateFnFor("eth_getBlockByHash");
    EthQuery.prototype.getBlockByNumber = generateFnFor("eth_getBlockByNumber");
    EthQuery.prototype.getTransactionByHash = generateFnFor("eth_getTransactionByHash");
    EthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor("eth_getTransactionByBlockHashAndIndex");
    EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor("eth_getTransactionByBlockNumberAndIndex");
    EthQuery.prototype.getTransactionReceipt = generateFnFor("eth_getTransactionReceipt");
    EthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor("eth_getUncleByBlockHashAndIndex");
    EthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor("eth_getUncleByBlockNumberAndIndex");
    EthQuery.prototype.getCompilers = generateFnFor("eth_getCompilers");
    EthQuery.prototype.compileLLL = generateFnFor("eth_compileLLL");
    EthQuery.prototype.compileSolidity = generateFnFor("eth_compileSolidity");
    EthQuery.prototype.compileSerpent = generateFnFor("eth_compileSerpent");
    EthQuery.prototype.newFilter = generateFnFor("eth_newFilter");
    EthQuery.prototype.newBlockFilter = generateFnFor("eth_newBlockFilter");
    EthQuery.prototype.newPendingTransactionFilter = generateFnFor("eth_newPendingTransactionFilter");
    EthQuery.prototype.uninstallFilter = generateFnFor("eth_uninstallFilter");
    EthQuery.prototype.getFilterChanges = generateFnFor("eth_getFilterChanges");
    EthQuery.prototype.getFilterLogs = generateFnFor("eth_getFilterLogs");
    EthQuery.prototype.getLogs = generateFnFor("eth_getLogs");
    EthQuery.prototype.getWork = generateFnFor("eth_getWork");
    EthQuery.prototype.submitWork = generateFnFor("eth_submitWork");
    EthQuery.prototype.submitHashrate = generateFnFor("eth_submitHashrate");
    EthQuery.prototype.sendAsync = function(opts, cb) {
      const self2 = this;
      self2.currentProvider.sendAsync(createPayload(opts), function(err, response) {
        if (!err && response.error)
          err = new Error("EthQuery - RPC Error - " + response.error.message);
        if (err)
          return cb(err);
        cb(null, response.result);
      });
    };
    function generateFnFor(methodName) {
      return function() {
        const self2 = this;
        var args = [].slice.call(arguments);
        var cb = args.pop();
        self2.sendAsync({
          method: methodName,
          params: args
        }, cb);
      };
    }
    function generateFnWithDefaultBlockFor(argCount, methodName) {
      return function() {
        const self2 = this;
        var args = [].slice.call(arguments);
        var cb = args.pop();
        if (args.length < argCount)
          args.push("latest");
        self2.sendAsync({
          method: methodName,
          params: args
        }, cb);
      };
    }
    function createPayload(data) {
      return extend({
        id: createRandomId(),
        jsonrpc: "2.0",
        params: []
      }, data);
    }
  }
});

// node_modules/safe-event-emitter/index.js
var require_safe_event_emitter2 = __commonJS({
  "node_modules/safe-event-emitter/index.js"(exports, module) {
    var util = require_util();
    var EventEmitter2 = require_events();
    var R3 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R3 && typeof R3.apply === "function" ? R3.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    module.exports = SafeEventEmitter2;
    function SafeEventEmitter2() {
      EventEmitter2.call(this);
    }
    util.inherits(SafeEventEmitter2, EventEmitter2);
    SafeEventEmitter2.prototype.emit = function(type) {
      var args = [];
      for (var i4 = 1; i4 < arguments.length; i4++)
        args.push(arguments[i4]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        safeApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i4 = 0; i4 < len; ++i4)
          safeApply(listeners[i4], this, args);
      }
      return true;
    };
    function safeApply(handler, context, args) {
      try {
        ReflectApply(handler, context, args);
      } catch (err) {
        setTimeout(() => {
          throw err;
        });
      }
    }
    function arrayClone(arr, n3) {
      var copy = new Array(n3);
      for (var i4 = 0; i4 < n3; ++i4)
        copy[i4] = arr[i4];
      return copy;
    }
  }
});

// node_modules/eth-block-tracker/src/base.js
var require_base = __commonJS({
  "node_modules/eth-block-tracker/src/base.js"(exports, module) {
    var EthQuery = require_eth_query();
    var pify = require_pify();
    var SafeEventEmitter2 = require_safe_event_emitter2();
    var sec = 1e3;
    var calculateSum = (accumulator, currentValue) => accumulator + currentValue;
    var blockTrackerEvents = ["sync", "latest"];
    var BaseBlockTracker = class extends SafeEventEmitter2 {
      constructor(opts = {}) {
        super();
        this._blockResetDuration = opts.blockResetDuration || 20 * sec;
        this._blockResetTimeout;
        this._currentBlock = null;
        this._isRunning = false;
        this._onNewListener = this._onNewListener.bind(this);
        this._onRemoveListener = this._onRemoveListener.bind(this);
        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);
        this._setupInternalEvents();
      }
      isRunning() {
        return this._isRunning;
      }
      getCurrentBlock() {
        return this._currentBlock;
      }
      async getLatestBlock() {
        if (this._currentBlock)
          return this._currentBlock;
        const latestBlock = await new Promise((resolve) => this.once("latest", resolve));
        return latestBlock;
      }
      removeAllListeners(eventName) {
        if (eventName) {
          super.removeAllListeners(eventName);
        } else {
          super.removeAllListeners();
        }
        this._setupInternalEvents();
        this._onRemoveListener();
      }
      _start() {
      }
      _end() {
      }
      _setupInternalEvents() {
        this.removeListener("newListener", this._onNewListener);
        this.removeListener("removeListener", this._onRemoveListener);
        this.on("newListener", this._onNewListener);
        this.on("removeListener", this._onRemoveListener);
      }
      _onNewListener(eventName, handler) {
        if (!blockTrackerEvents.includes(eventName))
          return;
        this._maybeStart();
      }
      _onRemoveListener(eventName, handler) {
        if (this._getBlockTrackerEventCount() > 0)
          return;
        this._maybeEnd();
      }
      _maybeStart() {
        if (this._isRunning)
          return;
        this._isRunning = true;
        this._cancelBlockResetTimeout();
        this._start();
      }
      _maybeEnd() {
        if (!this._isRunning)
          return;
        this._isRunning = false;
        this._setupBlockResetTimeout();
        this._end();
      }
      _getBlockTrackerEventCount() {
        return blockTrackerEvents.map((eventName) => this.listenerCount(eventName)).reduce(calculateSum);
      }
      _newPotentialLatest(newBlock) {
        const currentBlock = this._currentBlock;
        if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock))
          return;
        this._setCurrentBlock(newBlock);
      }
      _setCurrentBlock(newBlock) {
        const oldBlock = this._currentBlock;
        this._currentBlock = newBlock;
        this.emit("latest", newBlock);
        this.emit("sync", { oldBlock, newBlock });
      }
      _setupBlockResetTimeout() {
        this._cancelBlockResetTimeout();
        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);
        if (this._blockResetTimeout.unref) {
          this._blockResetTimeout.unref();
        }
      }
      _cancelBlockResetTimeout() {
        clearTimeout(this._blockResetTimeout);
      }
      _resetCurrentBlock() {
        this._currentBlock = null;
      }
    };
    module.exports = BaseBlockTracker;
    function hexToInt(hexInt) {
      return Number.parseInt(hexInt, 16);
    }
  }
});

// node_modules/eth-block-tracker/src/polling.js
var require_polling = __commonJS({
  "node_modules/eth-block-tracker/src/polling.js"(exports, module) {
    var pify = require_pify();
    var BaseBlockTracker = require_base();
    var sec = 1e3;
    var PollingBlockTracker = class extends BaseBlockTracker {
      constructor(opts = {}) {
        if (!opts.provider)
          throw new Error("PollingBlockTracker - no provider specified.");
        const pollingInterval = opts.pollingInterval || 20 * sec;
        const retryTimeout = opts.retryTimeout || pollingInterval / 10;
        const keepEventLoopActive = opts.keepEventLoopActive !== void 0 ? opts.keepEventLoopActive : true;
        const setSkipCacheFlag = opts.setSkipCacheFlag || false;
        super(Object.assign({
          blockResetDuration: pollingInterval
        }, opts));
        this._provider = opts.provider;
        this._pollingInterval = pollingInterval;
        this._retryTimeout = retryTimeout;
        this._keepEventLoopActive = keepEventLoopActive;
        this._setSkipCacheFlag = setSkipCacheFlag;
      }
      async checkForLatestBlock() {
        await this._updateLatestBlock();
        return await this.getLatestBlock();
      }
      _start() {
        this._performSync().catch((err) => this.emit("error", err));
      }
      async _performSync() {
        while (this._isRunning) {
          try {
            await this._updateLatestBlock();
            await timeout(this._pollingInterval, !this._keepEventLoopActive);
          } catch (err) {
            const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:
${err.stack}`);
            try {
              this.emit("error", newErr);
            } catch (emitErr) {
              console.error(newErr);
            }
            await timeout(this._retryTimeout, !this._keepEventLoopActive);
          }
        }
      }
      async _updateLatestBlock() {
        const latestBlock = await this._fetchLatestBlock();
        this._newPotentialLatest(latestBlock);
      }
      async _fetchLatestBlock() {
        const req = { jsonrpc: "2.0", id: 1, method: "eth_blockNumber", params: [] };
        if (this._setSkipCacheFlag)
          req.skipCache = true;
        const res = await pify((cb) => this._provider.sendAsync(req, cb))();
        if (res.error)
          throw new Error(`PollingBlockTracker - encountered error fetching block:
${res.error}`);
        return res.result;
      }
    };
    module.exports = PollingBlockTracker;
    function timeout(duration, unref) {
      return new Promise((resolve) => {
        const timoutRef = setTimeout(resolve, duration);
        if (timoutRef.unref && unref) {
          timoutRef.unref();
        }
      });
    }
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e3) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER2 = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/async/internal/breakLoop.js
var require_breakLoop = __commonJS({
  "node_modules/async/internal/breakLoop.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {};
    module.exports = exports["default"];
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop() {
    }
    module.exports = noop;
  }
});

// node_modules/async/internal/once.js
var require_once = __commonJS({
  "node_modules/async/internal/once.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = once;
    function once(fn2) {
      return function() {
        if (fn2 === null)
          return;
        var callFn = fn2;
        fn2 = null;
        callFn.apply(this, arguments);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/getIterator.js
var require_getIterator = __commonJS({
  "node_modules/async/internal/getIterator.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
    };
    var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator;
    module.exports = exports["default"];
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n3, iteratee) {
      var index = -1, result = Array(n3);
      while (++index < n3) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER2 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER2 : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e3) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length)))) {
          result.push(key2);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/keys.js
var require_keys8 = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/async/internal/iterator.js
var require_iterator7 = __commonJS({
  "node_modules/async/internal/iterator.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = iterator;
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _getIterator = require_getIterator();
    var _getIterator2 = _interopRequireDefault(_getIterator);
    var _keys = require_keys8();
    var _keys2 = _interopRequireDefault(_keys);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function createArrayIterator(coll) {
      var i4 = -1;
      var len = coll.length;
      return function next() {
        return ++i4 < len ? { value: coll[i4], key: i4 } : null;
      };
    }
    function createES2015Iterator(iterator2) {
      var i4 = -1;
      return function next() {
        var item = iterator2.next();
        if (item.done)
          return null;
        i4++;
        return { value: item.value, key: i4 };
      };
    }
    function createObjectIterator(obj) {
      var okeys = (0, _keys2.default)(obj);
      var i4 = -1;
      var len = okeys.length;
      return function next() {
        var key2 = okeys[++i4];
        if (key2 === "__proto__") {
          return next();
        }
        return i4 < len ? { value: obj[key2], key: key2 } : null;
      };
    }
    function iterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
      }
      var iterator2 = (0, _getIterator2.default)(coll);
      return iterator2 ? createES2015Iterator(iterator2) : createObjectIterator(coll);
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/onlyOnce.js
var require_onlyOnce = __commonJS({
  "node_modules/async/internal/onlyOnce.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = onlyOnce;
    function onlyOnce(fn2) {
      return function() {
        if (fn2 === null)
          throw new Error("Callback was already called.");
        var callFn = fn2;
        fn2 = null;
        callFn.apply(this, arguments);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/eachOfLimit.js
var require_eachOfLimit = __commonJS({
  "node_modules/async/internal/eachOfLimit.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _eachOfLimit;
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _iterator = require_iterator7();
    var _iterator2 = _interopRequireDefault(_iterator);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _eachOfLimit(limit) {
      return function(obj, iteratee, callback) {
        callback = (0, _once2.default)(callback || _noop2.default);
        if (limit <= 0 || !obj) {
          return callback(null);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
          running -= 1;
          if (err) {
            done = true;
            callback(err);
          } else if (value === _breakLoop2.default || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/slice.js
var require_slice9 = __commonJS({
  "node_modules/async/internal/slice.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = slice;
    function slice(arrayLike, start) {
      start = start | 0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for (var idx = 0; idx < newLen; idx++) {
        newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/initialParams.js
var require_initialParams = __commonJS({
  "node_modules/async/internal/initialParams.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(fn2) {
      return function() {
        var args = (0, _slice2.default)(arguments);
        var callback = args.pop();
        fn2.call(this, args, callback);
      };
    };
    var _slice = require_slice9();
    var _slice2 = _interopRequireDefault(_slice);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/setImmediate.js
var require_setImmediate = __commonJS({
  "node_modules/async/internal/setImmediate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hasNextTick = exports.hasSetImmediate = void 0;
    exports.fallback = fallback;
    exports.wrap = wrap;
    var _slice = require_slice9();
    var _slice2 = _interopRequireDefault(_slice);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn2) {
      setTimeout(fn2, 0);
    }
    function wrap(defer) {
      return function(fn2) {
        var args = (0, _slice2.default)(arguments, 1);
        defer(function() {
          fn2.apply(null, args);
        });
      };
    }
    var _defer;
    if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    exports.default = wrap(_defer);
  }
});

// node_modules/async/asyncify.js
var require_asyncify = __commonJS({
  "node_modules/async/asyncify.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncify;
    var _isObject = require_isObject();
    var _isObject2 = _interopRequireDefault(_isObject);
    var _initialParams = require_initialParams();
    var _initialParams2 = _interopRequireDefault(_initialParams);
    var _setImmediate = require_setImmediate();
    var _setImmediate2 = _interopRequireDefault(_setImmediate);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncify(func) {
      return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
          result = func.apply(this, args);
        } catch (e3) {
          return callback(e3);
        }
        if ((0, _isObject2.default)(result) && typeof result.then === "function") {
          result.then(function(value) {
            invokeCallback(callback, null, value);
          }, function(err) {
            invokeCallback(callback, err.message ? err : new Error(err));
          });
        } else {
          callback(null, result);
        }
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (e3) {
        (0, _setImmediate2.default)(rethrow, e3);
      }
    }
    function rethrow(error) {
      throw error;
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/wrapAsync.js
var require_wrapAsync = __commonJS({
  "node_modules/async/internal/wrapAsync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAsync = void 0;
    var _asyncify = require_asyncify();
    var _asyncify2 = _interopRequireDefault(_asyncify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var supportsSymbol = typeof Symbol === "function";
    function isAsync(fn2) {
      return supportsSymbol && fn2[Symbol.toStringTag] === "AsyncFunction";
    }
    function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
    }
    exports.default = wrapAsync;
    exports.isAsync = isAsync;
  }
});

// node_modules/async/eachOfLimit.js
var require_eachOfLimit2 = __commonJS({
  "node_modules/async/eachOfLimit.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = eachOfLimit;
    var _eachOfLimit2 = require_eachOfLimit();
    var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfLimit(coll, limit, iteratee, callback) {
      (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/doLimit.js
var require_doLimit = __commonJS({
  "node_modules/async/internal/doLimit.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = doLimit;
    function doLimit(fn2, limit) {
      return function(iterable, iteratee, callback) {
        return fn2(iterable, limit, iteratee, callback);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/eachOf.js
var require_eachOf = __commonJS({
  "node_modules/async/eachOf.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
    };
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _doLimit = require_doLimit();
    var _doLimit2 = _interopRequireDefault(_doLimit);
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      var index = 0, completed = 0, length = coll.length;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err, value) {
        if (err) {
          callback(err);
        } else if (++completed === length || value === _breakLoop2.default) {
          callback(null);
        }
      }
      for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
    }
    var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/doParallel.js
var require_doParallel = __commonJS({
  "node_modules/async/internal/doParallel.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = doParallel;
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function doParallel(fn2) {
      return function(obj, iteratee, callback) {
        return fn2(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/map.js
var require_map11 = __commonJS({
  "node_modules/async/internal/map.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _asyncMap;
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || _noop2.default;
      arr = arr || [];
      var results2 = [];
      var counter = 0;
      var _iteratee = (0, _wrapAsync2.default)(iteratee);
      eachfn(arr, function(value, _5, callback2) {
        var index = counter++;
        _iteratee(value, function(err, v4) {
          results2[index] = v4;
          callback2(err);
        });
      }, function(err) {
        callback(err, results2);
      });
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/map.js
var require_map12 = __commonJS({
  "node_modules/async/map.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _doParallel = require_doParallel();
    var _doParallel2 = _interopRequireDefault(_doParallel);
    var _map = require_map11();
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (0, _doParallel2.default)(_map2.default);
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/withoutIndex.js
var require_withoutIndex = __commonJS({
  "node_modules/async/internal/withoutIndex.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _withoutIndex;
    function _withoutIndex(iteratee) {
      return function(value, index, callback) {
        return iteratee(value, callback);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/eachLimit.js
var require_eachLimit = __commonJS({
  "node_modules/async/eachLimit.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = eachLimit;
    var _eachOfLimit = require_eachOfLimit();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _withoutIndex = require_withoutIndex();
    var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachLimit(coll, limit, iteratee, callback) {
      (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/eachSeries.js
var require_eachSeries = __commonJS({
  "node_modules/async/eachSeries.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachLimit = require_eachLimit();
    var _eachLimit2 = _interopRequireDefault(_eachLimit);
    var _doLimit = require_doLimit();
    var _doLimit2 = _interopRequireDefault(_doLimit);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
    module.exports = exports["default"];
  }
});

// node_modules/web3-provider-engine/util/stoplight.js
var require_stoplight = __commonJS({
  "node_modules/web3-provider-engine/util/stoplight.js"(exports, module) {
    var EventEmitter2 = require_events().EventEmitter;
    var inherits = require_util().inherits;
    module.exports = Stoplight;
    inherits(Stoplight, EventEmitter2);
    function Stoplight() {
      const self2 = this;
      EventEmitter2.call(self2);
      self2.isLocked = true;
    }
    Stoplight.prototype.go = function() {
      const self2 = this;
      self2.isLocked = false;
      self2.emit("unlock");
    };
    Stoplight.prototype.stop = function() {
      const self2 = this;
      self2.isLocked = true;
      self2.emit("lock");
    };
    Stoplight.prototype.await = function(fn2) {
      const self2 = this;
      if (self2.isLocked) {
        self2.once("unlock", fn2);
      } else {
        setTimeout(fn2);
      }
    };
  }
});

// node_modules/web3-provider-engine/util/rpc-cache-utils.js
var require_rpc_cache_utils = __commonJS({
  "node_modules/web3-provider-engine/util/rpc-cache-utils.js"(exports, module) {
    var stringify = require_json_stable_stringify();
    module.exports = {
      cacheIdentifierForPayload,
      canCache,
      blockTagForPayload,
      paramsWithoutBlockTag,
      blockTagParamIndex,
      cacheTypeForPayload
    };
    function cacheIdentifierForPayload(payload, opts = {}) {
      if (!canCache(payload))
        return null;
      const { includeBlockRef } = opts;
      const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);
      return payload.method + ":" + stringify(params);
    }
    function canCache(payload) {
      return cacheTypeForPayload(payload) !== "never";
    }
    function blockTagForPayload(payload) {
      var index = blockTagParamIndex(payload);
      if (index >= payload.params.length) {
        return null;
      }
      return payload.params[index];
    }
    function paramsWithoutBlockTag(payload) {
      var index = blockTagParamIndex(payload);
      if (index >= payload.params.length) {
        return payload.params;
      }
      if (payload.method === "eth_getBlockByNumber") {
        return payload.params.slice(1);
      }
      return payload.params.slice(0, index);
    }
    function blockTagParamIndex(payload) {
      switch (payload.method) {
        case "eth_getStorageAt":
          return 2;
        case "eth_getBalance":
        case "eth_getCode":
        case "eth_getTransactionCount":
        case "eth_call":
        case "eth_estimateGas":
          return 1;
        case "eth_getBlockByNumber":
          return 0;
        default:
          return void 0;
      }
    }
    function cacheTypeForPayload(payload) {
      switch (payload.method) {
        case "web3_clientVersion":
        case "web3_sha3":
        case "eth_protocolVersion":
        case "eth_getBlockTransactionCountByHash":
        case "eth_getUncleCountByBlockHash":
        case "eth_getCode":
        case "eth_getBlockByHash":
        case "eth_getTransactionByHash":
        case "eth_getTransactionByBlockHashAndIndex":
        case "eth_getTransactionReceipt":
        case "eth_getUncleByBlockHashAndIndex":
        case "eth_getCompilers":
        case "eth_compileLLL":
        case "eth_compileSolidity":
        case "eth_compileSerpent":
        case "shh_version":
          return "perma";
        case "eth_getBlockByNumber":
        case "eth_getBlockTransactionCountByNumber":
        case "eth_getUncleCountByBlockNumber":
        case "eth_getTransactionByBlockNumberAndIndex":
        case "eth_getUncleByBlockNumberAndIndex":
          return "fork";
        case "eth_gasPrice":
        case "eth_getBalance":
        case "eth_getStorageAt":
        case "eth_getTransactionCount":
        case "eth_call":
        case "eth_estimateGas":
        case "eth_getFilterLogs":
        case "eth_getLogs":
        case "eth_blockNumber":
          return "block";
        case "net_version":
        case "net_peerCount":
        case "net_listening":
        case "eth_syncing":
        case "eth_sign":
        case "eth_coinbase":
        case "eth_mining":
        case "eth_hashrate":
        case "eth_accounts":
        case "eth_sendTransaction":
        case "eth_sendRawTransaction":
        case "eth_newFilter":
        case "eth_newBlockFilter":
        case "eth_newPendingTransactionFilter":
        case "eth_uninstallFilter":
        case "eth_getFilterChanges":
        case "eth_getWork":
        case "eth_submitWork":
        case "eth_submitHashrate":
        case "db_putString":
        case "db_getString":
        case "db_putHex":
        case "db_getHex":
        case "shh_post":
        case "shh_newIdentity":
        case "shh_hasIdentity":
        case "shh_newGroup":
        case "shh_addToGroup":
        case "shh_newFilter":
        case "shh_uninstallFilter":
        case "shh_getFilterChanges":
        case "shh_getMessages":
          return "never";
      }
    }
  }
});

// node_modules/web3-provider-engine/util/random-id.js
var require_random_id = __commonJS({
  "node_modules/web3-provider-engine/util/random-id.js"(exports, module) {
    module.exports = createRandomId;
    function createRandomId() {
      return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
    }
  }
});

// node_modules/web3-provider-engine/util/create-payload.js
var require_create_payload = __commonJS({
  "node_modules/web3-provider-engine/util/create-payload.js"(exports, module) {
    var getRandomId = require_random_id();
    var extend = require_immutable();
    module.exports = createPayload;
    function createPayload(data) {
      return extend({
        id: getRandomId(),
        jsonrpc: "2.0",
        params: []
      }, data);
    }
  }
});

// node_modules/web3-provider-engine/index.js
var require_web3_provider_engine = __commonJS({
  "node_modules/web3-provider-engine/index.js"(exports, module) {
    var EventEmitter2 = require_events().EventEmitter;
    var inherits = require_util().inherits;
    var ethUtil = require_dist4();
    var EthBlockTracker = require_polling();
    var map = require_map12();
    var eachSeries = require_eachSeries();
    var Stoplight = require_stoplight();
    var cacheUtils = require_rpc_cache_utils();
    var createPayload = require_create_payload();
    var noop = function() {
    };
    module.exports = Web3ProviderEngine;
    inherits(Web3ProviderEngine, EventEmitter2);
    function Web3ProviderEngine(opts) {
      const self2 = this;
      EventEmitter2.call(self2);
      self2.setMaxListeners(30);
      opts = opts || {};
      const directProvider = { sendAsync: self2._handleAsync.bind(self2) };
      const blockTrackerProvider = opts.blockTrackerProvider || directProvider;
      self2._blockTracker = opts.blockTracker || new EthBlockTracker({
        provider: blockTrackerProvider,
        pollingInterval: opts.pollingInterval || 4e3,
        setSkipCacheFlag: true
      });
      self2._ready = new Stoplight();
      self2.currentBlock = null;
      self2._providers = [];
    }
    Web3ProviderEngine.prototype.start = function(cb = noop) {
      const self2 = this;
      self2._ready.go();
      self2._blockTracker.on("latest", (blockNumber) => {
        self2._getBlockByNumberWithRetry(blockNumber, (err, block) => {
          if (err) {
            this.emit("error", err);
            return;
          }
          if (!block) {
            console.log(block);
            this.emit("error", new Error("Could not find block"));
            return;
          }
          const bufferBlock = toBufferBlock(block);
          self2._setCurrentBlock(bufferBlock);
          self2.emit("rawBlock", block);
          self2.emit("latest", block);
        });
      });
      self2._blockTracker.on("sync", self2.emit.bind(self2, "sync"));
      self2._blockTracker.on("error", self2.emit.bind(self2, "error"));
      self2._running = true;
      self2.emit("start");
    };
    Web3ProviderEngine.prototype.stop = function() {
      const self2 = this;
      self2._blockTracker.removeAllListeners();
      self2._running = false;
      self2.emit("stop");
    };
    Web3ProviderEngine.prototype.isRunning = function() {
      const self2 = this;
      return self2._running;
    };
    Web3ProviderEngine.prototype.addProvider = function(source, index) {
      const self2 = this;
      if (typeof index === "number") {
        self2._providers.splice(index, 0, source);
      } else {
        self2._providers.push(source);
      }
      source.setEngine(this);
    };
    Web3ProviderEngine.prototype.removeProvider = function(source) {
      const self2 = this;
      const index = self2._providers.indexOf(source);
      if (index < 0)
        throw new Error("Provider not found.");
      self2._providers.splice(index, 1);
    };
    Web3ProviderEngine.prototype.send = function(payload) {
      throw new Error("Web3ProviderEngine does not support synchronous requests.");
    };
    Web3ProviderEngine.prototype.sendAsync = function(payload, cb) {
      const self2 = this;
      self2._ready.await(function() {
        if (Array.isArray(payload)) {
          map(payload, self2._handleAsync.bind(self2), cb);
        } else {
          self2._handleAsync(payload, cb);
        }
      });
    };
    Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber, cb) {
      const self2 = this;
      let retriesRemaining = 5;
      attemptRequest();
      return;
      function attemptRequest() {
        self2._getBlockByNumber(blockNumber, afterRequest);
      }
      function afterRequest(err, block) {
        if (err)
          return cb(err);
        if (!block) {
          if (retriesRemaining > 0) {
            retriesRemaining--;
            setTimeout(function() {
              attemptRequest();
            }, 1e3);
            return;
          } else {
            cb(null, null);
            return;
          }
        }
        cb(null, block);
        return;
      }
    };
    Web3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {
      const req = createPayload({ method: "eth_getBlockByNumber", params: [blockNumber, false], skipCache: true });
      this._handleAsync(req, (err, res) => {
        if (err)
          return cb(err);
        return cb(null, res.result);
      });
    };
    Web3ProviderEngine.prototype._handleAsync = function(payload, finished) {
      var self2 = this;
      var currentProvider = -1;
      var result = null;
      var error = null;
      var stack = [];
      next();
      function next(after) {
        currentProvider += 1;
        stack.unshift(after);
        if (currentProvider >= self2._providers.length) {
          end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
        } else {
          try {
            var provider = self2._providers[currentProvider];
            provider.handleRequest(payload, next, end);
          } catch (e3) {
            end(e3);
          }
        }
      }
      function end(_error, _result) {
        error = _error;
        result = _result;
        eachSeries(stack, function(fn2, callback) {
          if (fn2) {
            fn2(error, result, callback);
          } else {
            callback();
          }
        }, function() {
          var resultObj = {
            id: payload.id,
            jsonrpc: payload.jsonrpc,
            result
          };
          if (error != null) {
            resultObj.error = {
              message: error.stack || error.message || error,
              code: -32e3
            };
            finished(error, resultObj);
          } else {
            finished(null, resultObj);
          }
        });
      }
    };
    Web3ProviderEngine.prototype._setCurrentBlock = function(block) {
      const self2 = this;
      self2.currentBlock = block;
      self2.emit("block", block);
    };
    function toBufferBlock(jsonBlock) {
      return {
        number: ethUtil.toBuffer(jsonBlock.number),
        hash: ethUtil.toBuffer(jsonBlock.hash),
        parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
        nonce: ethUtil.toBuffer(jsonBlock.nonce),
        mixHash: ethUtil.toBuffer(jsonBlock.mixHash),
        sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
        logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
        transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
        stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
        receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
        miner: ethUtil.toBuffer(jsonBlock.miner),
        difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
        totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
        size: ethUtil.toBuffer(jsonBlock.size),
        extraData: ethUtil.toBuffer(jsonBlock.extraData),
        gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
        gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
        timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
        transactions: jsonBlock.transactions
      };
    }
  }
});

// node_modules/web3-provider-engine/subproviders/subprovider.js
var require_subprovider = __commonJS({
  "node_modules/web3-provider-engine/subproviders/subprovider.js"(exports, module) {
    var createPayload = require_create_payload();
    module.exports = SubProvider;
    function SubProvider() {
    }
    SubProvider.prototype.setEngine = function(engine) {
      const self2 = this;
      if (self2.engine)
        return;
      self2.engine = engine;
      engine.on("block", function(block) {
        self2.currentBlock = block;
      });
      engine.on("start", function() {
        self2.start();
      });
      engine.on("stop", function() {
        self2.stop();
      });
    };
    SubProvider.prototype.handleRequest = function(payload, next, end) {
      throw new Error("Subproviders should override `handleRequest`.");
    };
    SubProvider.prototype.emitPayload = function(payload, cb) {
      const self2 = this;
      self2.engine.sendAsync(createPayload(payload), cb);
    };
    SubProvider.prototype.stop = function() {
    };
    SubProvider.prototype.start = function() {
    };
  }
});

// node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js
var require_json_rpc_engine_middleware = __commonJS({
  "node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js"(exports, module) {
    var Subprovider = require_subprovider();
    var JsonRpcEngineMiddlewareSubprovider = class extends Subprovider {
      constructor(constructorFn) {
        super();
        if (!constructorFn)
          throw new Error("JsonRpcEngineMiddlewareSubprovider - no constructorFn specified");
        this._constructorFn = constructorFn;
      }
      setEngine(engine) {
        if (this.middleware)
          throw new Error("JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice");
        const blockTracker = engine._blockTracker;
        const middleware = this._constructorFn({ engine, provider: engine, blockTracker });
        if (!middleware)
          throw new Error("JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware");
        if (typeof middleware !== "function")
          throw new Error("JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function");
        this.middleware = middleware;
      }
      handleRequest(req, provEngNext, provEngEnd) {
        const res = { id: req.id };
        this.middleware(req, res, middlewareNext, middlewareEnd);
        function middlewareNext(handler) {
          provEngNext((err, result, cb) => {
            if (err) {
              delete res.result;
              res.error = { message: err.message || err };
            } else {
              res.result = result;
            }
            if (handler) {
              handler(cb);
            } else {
              cb();
            }
          });
        }
        function middlewareEnd(err) {
          if (err)
            return provEngEnd(err);
          provEngEnd(null, res.result);
        }
      }
    };
    module.exports = JsonRpcEngineMiddlewareSubprovider;
  }
});

// node_modules/eth-json-rpc-middleware/cache-utils.js
var require_cache_utils = __commonJS({
  "node_modules/eth-json-rpc-middleware/cache-utils.js"(exports, module) {
    var stringify = require_json_stable_stringify();
    module.exports = {
      cacheIdentifierForPayload,
      canCache,
      blockTagForPayload,
      paramsWithoutBlockTag,
      blockTagParamIndex,
      cacheTypeForPayload
    };
    function cacheIdentifierForPayload(payload, skipBlockRef) {
      const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params;
      if (canCache(payload)) {
        return payload.method + ":" + stringify(simpleParams);
      } else {
        return null;
      }
    }
    function canCache(payload) {
      return cacheTypeForPayload(payload) !== "never";
    }
    function blockTagForPayload(payload) {
      let index = blockTagParamIndex(payload);
      if (index >= payload.params.length) {
        return null;
      }
      return payload.params[index];
    }
    function paramsWithoutBlockTag(payload) {
      const index = blockTagParamIndex(payload);
      if (index >= payload.params.length) {
        return payload.params;
      }
      if (payload.method === "eth_getBlockByNumber") {
        return payload.params.slice(1);
      }
      return payload.params.slice(0, index);
    }
    function blockTagParamIndex(payload) {
      switch (payload.method) {
        case "eth_getStorageAt":
          return 2;
        case "eth_getBalance":
        case "eth_getCode":
        case "eth_getTransactionCount":
        case "eth_call":
          return 1;
        case "eth_getBlockByNumber":
          return 0;
        default:
          return void 0;
      }
    }
    function cacheTypeForPayload(payload) {
      switch (payload.method) {
        case "web3_clientVersion":
        case "web3_sha3":
        case "eth_protocolVersion":
        case "eth_getBlockTransactionCountByHash":
        case "eth_getUncleCountByBlockHash":
        case "eth_getCode":
        case "eth_getBlockByHash":
        case "eth_getTransactionByHash":
        case "eth_getTransactionByBlockHashAndIndex":
        case "eth_getTransactionReceipt":
        case "eth_getUncleByBlockHashAndIndex":
        case "eth_getCompilers":
        case "eth_compileLLL":
        case "eth_compileSolidity":
        case "eth_compileSerpent":
        case "shh_version":
        case "test_permaCache":
          return "perma";
        case "eth_getBlockByNumber":
        case "eth_getBlockTransactionCountByNumber":
        case "eth_getUncleCountByBlockNumber":
        case "eth_getTransactionByBlockNumberAndIndex":
        case "eth_getUncleByBlockNumberAndIndex":
        case "test_forkCache":
          return "fork";
        case "eth_gasPrice":
        case "eth_blockNumber":
        case "eth_getBalance":
        case "eth_getStorageAt":
        case "eth_getTransactionCount":
        case "eth_call":
        case "eth_estimateGas":
        case "eth_getFilterLogs":
        case "eth_getLogs":
        case "test_blockCache":
          return "block";
        case "net_version":
        case "net_peerCount":
        case "net_listening":
        case "eth_syncing":
        case "eth_sign":
        case "eth_coinbase":
        case "eth_mining":
        case "eth_hashrate":
        case "eth_accounts":
        case "eth_sendTransaction":
        case "eth_sendRawTransaction":
        case "eth_newFilter":
        case "eth_newBlockFilter":
        case "eth_newPendingTransactionFilter":
        case "eth_uninstallFilter":
        case "eth_getFilterChanges":
        case "eth_getWork":
        case "eth_submitWork":
        case "eth_submitHashrate":
        case "db_putString":
        case "db_getString":
        case "db_putHex":
        case "db_getHex":
        case "shh_post":
        case "shh_newIdentity":
        case "shh_hasIdentity":
        case "shh_newGroup":
        case "shh_addToGroup":
        case "shh_newFilter":
        case "shh_uninstallFilter":
        case "shh_getFilterChanges":
        case "shh_getMessages":
        case "test_neverCache":
          return "never";
      }
    }
  }
});

// node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js
var require_createAsyncMiddleware = __commonJS({
  "node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"(exports, module) {
    module.exports = function createAsyncMiddleware(asyncMiddleware) {
      return (req, res, next, end) => {
        let resolveNextPromise;
        const nextPromise = new Promise((resolve) => {
          resolveNextPromise = resolve;
        });
        let returnHandlerCallback, nextWasCalled;
        const asyncNext = async () => {
          nextWasCalled = true;
          next((callback) => {
            returnHandlerCallback = callback;
            resolveNextPromise();
          });
          await nextPromise;
        };
        asyncMiddleware(req, res, asyncNext).then(async () => {
          if (nextWasCalled) {
            await nextPromise;
            returnHandlerCallback(null);
          } else {
            end(null);
          }
        }).catch((error) => {
          if (returnHandlerCallback) {
            returnHandlerCallback(error);
          } else {
            end(error);
          }
        });
      };
    };
  }
});

// node_modules/eth-json-rpc-middleware/block-cache.js
var require_block_cache = __commonJS({
  "node_modules/eth-json-rpc-middleware/block-cache.js"(exports, module) {
    var cacheUtils = require_cache_utils();
    var createAsyncMiddleware = require_createAsyncMiddleware();
    var emptyValues = [void 0, null, "<nil>"];
    module.exports = createBlockCacheMiddleware;
    function createBlockCacheMiddleware(opts = {}) {
      const { blockTracker } = opts;
      if (!blockTracker)
        throw new Error("createBlockCacheMiddleware - No BlockTracker specified");
      const blockCache = new BlockCacheStrategy();
      const strategies = {
        perma: blockCache,
        block: blockCache,
        fork: blockCache
      };
      return createAsyncMiddleware(async (req, res, next) => {
        if (req.skipCache) {
          return next();
        }
        const type = cacheUtils.cacheTypeForPayload(req);
        const strategy = strategies[type];
        if (!strategy) {
          return next();
        }
        if (!strategy.canCacheRequest(req)) {
          return next();
        }
        let blockTag = cacheUtils.blockTagForPayload(req);
        if (!blockTag)
          blockTag = "latest";
        let requestedBlockNumber;
        if (blockTag === "earliest") {
          requestedBlockNumber = "0x00";
        } else if (blockTag === "latest") {
          const latestBlockNumber = await blockTracker.getLatestBlock();
          blockCache.clearBefore(latestBlockNumber);
          requestedBlockNumber = latestBlockNumber;
        } else {
          requestedBlockNumber = blockTag;
        }
        const cacheResult = await strategy.get(req, requestedBlockNumber);
        if (cacheResult === void 0) {
          await next();
          await strategy.set(req, requestedBlockNumber, res.result);
        } else {
          res.result = cacheResult;
        }
      });
    }
    var BlockCacheStrategy = class {
      constructor() {
        this.cache = {};
      }
      getBlockCacheForPayload(payload, blockNumberHex) {
        const blockNumber = Number.parseInt(blockNumberHex, 16);
        let blockCache = this.cache[blockNumber];
        if (!blockCache) {
          const newCache = {};
          this.cache[blockNumber] = newCache;
          blockCache = newCache;
        }
        return blockCache;
      }
      async get(payload, requestedBlockNumber) {
        const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
        if (!blockCache)
          return;
        const identifier = cacheUtils.cacheIdentifierForPayload(payload, true);
        const cached = blockCache[identifier];
        return cached;
      }
      async set(payload, requestedBlockNumber, result) {
        const canCache = this.canCacheResult(payload, result);
        if (!canCache)
          return;
        const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
        const identifier = cacheUtils.cacheIdentifierForPayload(payload, true);
        blockCache[identifier] = result;
      }
      canCacheRequest(payload) {
        if (!cacheUtils.canCache(payload)) {
          return false;
        }
        const blockTag = cacheUtils.blockTagForPayload(payload);
        if (blockTag === "pending") {
          return false;
        }
        return true;
      }
      canCacheResult(payload, result) {
        if (emptyValues.includes(result))
          return;
        if (["eth_getTransactionByHash", "eth_getTransactionReceipt"].includes(payload.method)) {
          if (!result || !result.blockHash || result.blockHash === "0x0000000000000000000000000000000000000000000000000000000000000000") {
            return false;
          }
        }
        return true;
      }
      clearBefore(oldBlockHex) {
        const self2 = this;
        const oldBlockNumber = Number.parseInt(oldBlockHex, 16);
        Object.keys(self2.cache).map(Number).filter((num) => num < oldBlockNumber).forEach((num) => delete self2.cache[num]);
      }
    };
  }
});

// node_modules/web3-provider-engine/subproviders/cache.js
var require_cache = __commonJS({
  "node_modules/web3-provider-engine/subproviders/cache.js"(exports, module) {
    var ProviderSubprovider = require_json_rpc_engine_middleware();
    var createBlockCacheMiddleware = require_block_cache();
    var BlockCacheSubprovider = class extends ProviderSubprovider {
      constructor(opts) {
        super(({ blockTracker }) => createBlockCacheMiddleware(Object.assign({ blockTracker }, opts)));
      }
    };
    module.exports = BlockCacheSubprovider;
  }
});

// node_modules/web3-provider-engine/subproviders/fixture.js
var require_fixture = __commonJS({
  "node_modules/web3-provider-engine/subproviders/fixture.js"(exports, module) {
    var inherits = require_util().inherits;
    var Subprovider = require_subprovider();
    module.exports = FixtureProvider;
    inherits(FixtureProvider, Subprovider);
    function FixtureProvider(staticResponses) {
      const self2 = this;
      staticResponses = staticResponses || {};
      self2.staticResponses = staticResponses;
    }
    FixtureProvider.prototype.handleRequest = function(payload, next, end) {
      const self2 = this;
      var staticResponse = self2.staticResponses[payload.method];
      if (typeof staticResponse === "function") {
        staticResponse(payload, next, end);
      } else if (staticResponse !== void 0) {
        setTimeout(() => end(null, staticResponse));
      } else {
        next();
      }
    };
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter17;
    var __generator2;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray2;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id2, v4) {
          return exports2[id2] = previous ? previous(id2, v4) : v4;
        };
      }
    })(function(exporter) {
      var extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p4 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p4))
            d4[p4] = b3[p4];
      };
      __extends2 = function(d4, b3) {
        if (typeof b3 !== "function" && b3 !== null)
          throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
        extendStatics2(d4, b3);
        function __() {
          this.constructor = d4;
        }
        d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign2 = Object.assign || function(t4) {
        for (var s4, i4 = 1, n3 = arguments.length; i4 < n3; i4++) {
          s4 = arguments[i4];
          for (var p4 in s4)
            if (Object.prototype.hasOwnProperty.call(s4, p4))
              t4[p4] = s4[p4];
        }
        return t4;
      };
      __rest2 = function(s4, e3) {
        var t4 = {};
        for (var p4 in s4)
          if (Object.prototype.hasOwnProperty.call(s4, p4) && e3.indexOf(p4) < 0)
            t4[p4] = s4[p4];
        if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i4 = 0, p4 = Object.getOwnPropertySymbols(s4); i4 < p4.length; i4++) {
            if (e3.indexOf(p4[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p4[i4]))
              t4[p4[i4]] = s4[p4[i4]];
          }
        return t4;
      };
      __decorate = function(decorators, target, key2, desc) {
        var c4 = arguments.length, r4 = c4 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key2) : desc, d4;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r4 = Reflect.decorate(decorators, target, key2, desc);
        else
          for (var i4 = decorators.length - 1; i4 >= 0; i4--)
            if (d4 = decorators[i4])
              r4 = (c4 < 3 ? d4(r4) : c4 > 3 ? d4(target, key2, r4) : d4(target, key2)) || r4;
        return c4 > 3 && r4 && Object.defineProperty(target, key2, r4), r4;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key2) {
          decorator(target, key2, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter17 = function(thisArg, _arguments, P4, generator) {
        function adopt(value) {
          return value instanceof P4 ? value : new P4(function(resolve) {
            resolve(value);
          });
        }
        return new (P4 || (P4 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _5 = { label: 0, sent: function() {
          if (t4[0] & 1)
            throw t4[1];
          return t4[1];
        }, trys: [], ops: [] }, f4, y4, t4, g4;
        return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
          return this;
        }), g4;
        function verb(n3) {
          return function(v4) {
            return step([n3, v4]);
          };
        }
        function step(op) {
          if (f4)
            throw new TypeError("Generator is already executing.");
          while (_5)
            try {
              if (f4 = 1, y4 && (t4 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t4 = y4["return"]) && t4.call(y4), 0) : y4.next) && !(t4 = t4.call(y4, op[1])).done)
                return t4;
              if (y4 = 0, t4)
                op = [op[0] & 2, t4.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t4 = op;
                  break;
                case 4:
                  _5.label++;
                  return { value: op[1], done: false };
                case 5:
                  _5.label++;
                  y4 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _5.ops.pop();
                  _5.trys.pop();
                  continue;
                default:
                  if (!(t4 = _5.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _5 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
                    _5.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _5.label < t4[1]) {
                    _5.label = t4[1];
                    t4 = op;
                    break;
                  }
                  if (t4 && _5.label < t4[2]) {
                    _5.label = t4[2];
                    _5.ops.push(op);
                    break;
                  }
                  if (t4[2])
                    _5.ops.pop();
                  _5.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _5);
            } catch (e3) {
              op = [6, e3];
              y4 = 0;
            } finally {
              f4 = t4 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m3, o4) {
        for (var p4 in m3)
          if (p4 !== "default" && !Object.prototype.hasOwnProperty.call(o4, p4))
            __createBinding(o4, m3, p4);
      };
      __createBinding = Object.create ? function(o4, m3, k4, k22) {
        if (k22 === void 0)
          k22 = k4;
        var desc = Object.getOwnPropertyDescriptor(m3, k4);
        if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m3[k4];
          } };
        }
        Object.defineProperty(o4, k22, desc);
      } : function(o4, m3, k4, k22) {
        if (k22 === void 0)
          k22 = k4;
        o4[k22] = m3[k4];
      };
      __values = function(o4) {
        var s4 = typeof Symbol === "function" && Symbol.iterator, m3 = s4 && o4[s4], i4 = 0;
        if (m3)
          return m3.call(o4);
        if (o4 && typeof o4.length === "number")
          return {
            next: function() {
              if (o4 && i4 >= o4.length)
                o4 = void 0;
              return { value: o4 && o4[i4++], done: !o4 };
            }
          };
        throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o4, n3) {
        var m3 = typeof Symbol === "function" && o4[Symbol.iterator];
        if (!m3)
          return o4;
        var i4 = m3.call(o4), r4, ar = [], e3;
        try {
          while ((n3 === void 0 || n3-- > 0) && !(r4 = i4.next()).done)
            ar.push(r4.value);
        } catch (error) {
          e3 = { error };
        } finally {
          try {
            if (r4 && !r4.done && (m3 = i4["return"]))
              m3.call(i4);
          } finally {
            if (e3)
              throw e3.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i4 = 0; i4 < arguments.length; i4++)
          ar = ar.concat(__read(arguments[i4]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s4 = 0, i4 = 0, il = arguments.length; i4 < il; i4++)
          s4 += arguments[i4].length;
        for (var r4 = Array(s4), k4 = 0, i4 = 0; i4 < il; i4++)
          for (var a4 = arguments[i4], j4 = 0, jl = a4.length; j4 < jl; j4++, k4++)
            r4[k4] = a4[j4];
        return r4;
      };
      __spreadArray2 = function(to, from, pack3) {
        if (pack3 || arguments.length === 2)
          for (var i4 = 0, l4 = from.length, ar; i4 < l4; i4++) {
            if (ar || !(i4 in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i4);
              ar[i4] = from[i4];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v4) {
        return this instanceof __await ? (this.v = v4, this) : new __await(v4);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g4 = generator.apply(thisArg, _arguments || []), i4, q4 = [];
        return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
          return this;
        }, i4;
        function verb(n3) {
          if (g4[n3])
            i4[n3] = function(v4) {
              return new Promise(function(a4, b3) {
                q4.push([n3, v4, a4, b3]) > 1 || resume(n3, v4);
              });
            };
        }
        function resume(n3, v4) {
          try {
            step(g4[n3](v4));
          } catch (e3) {
            settle(q4[0][3], e3);
          }
        }
        function step(r4) {
          r4.value instanceof __await ? Promise.resolve(r4.value.v).then(fulfill, reject) : settle(q4[0][2], r4);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f4, v4) {
          if (f4(v4), q4.shift(), q4.length)
            resume(q4[0][0], q4[0][1]);
        }
      };
      __asyncDelegator = function(o4) {
        var i4, p4;
        return i4 = {}, verb("next"), verb("throw", function(e3) {
          throw e3;
        }), verb("return"), i4[Symbol.iterator] = function() {
          return this;
        }, i4;
        function verb(n3, f4) {
          i4[n3] = o4[n3] ? function(v4) {
            return (p4 = !p4) ? { value: __await(o4[n3](v4)), done: n3 === "return" } : f4 ? f4(v4) : v4;
          } : f4;
        }
      };
      __asyncValues = function(o4) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m3 = o4[Symbol.asyncIterator], i4;
        return m3 ? m3.call(o4) : (o4 = typeof __values === "function" ? __values(o4) : o4[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
          return this;
        }, i4);
        function verb(n3) {
          i4[n3] = o4[n3] && function(v4) {
            return new Promise(function(resolve, reject) {
              v4 = o4[n3](v4), settle(resolve, reject, v4.done, v4.value);
            });
          };
        }
        function settle(resolve, reject, d4, v4) {
          Promise.resolve(v4).then(function(v5) {
            resolve({ value: v5, done: d4 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o4, v4) {
        Object.defineProperty(o4, "default", { enumerable: true, value: v4 });
      } : function(o4, v4) {
        o4["default"] = v4;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k4 in mod)
            if (k4 !== "default" && Object.prototype.hasOwnProperty.call(mod, k4))
              __createBinding(result, mod, k4);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f4) {
        if (kind === "a" && !f4)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f4 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f4 : kind === "a" ? f4.call(receiver) : f4 ? f4.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f4) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f4)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f4 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f4.call(receiver, value) : f4 ? f4.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter17);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// node_modules/async-mutex/lib/Semaphore.js
var require_Semaphore = __commonJS({
  "node_modules/async-mutex/lib/Semaphore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var Semaphore = function() {
      function Semaphore2(_maxConcurrency) {
        this._maxConcurrency = _maxConcurrency;
        this._queue = [];
        if (_maxConcurrency <= 0) {
          throw new Error("semaphore must be initialized to a positive value");
        }
        this._value = _maxConcurrency;
      }
      Semaphore2.prototype.acquire = function() {
        var _this = this;
        var locked = this.isLocked();
        var ticket = new Promise(function(r4) {
          return _this._queue.push(r4);
        });
        if (!locked)
          this._dispatch();
        return ticket;
      };
      Semaphore2.prototype.runExclusive = function(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var _a, value, release;
          return tslib_1.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                return [4, this.acquire()];
              case 1:
                _a = _b.sent(), value = _a[0], release = _a[1];
                _b.label = 2;
              case 2:
                _b.trys.push([2, , 4, 5]);
                return [4, callback(value)];
              case 3:
                return [2, _b.sent()];
              case 4:
                release();
                return [7];
              case 5:
                return [2];
            }
          });
        });
      };
      Semaphore2.prototype.isLocked = function() {
        return this._value <= 0;
      };
      Semaphore2.prototype.release = function() {
        if (this._maxConcurrency > 1) {
          throw new Error("this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead");
        }
        if (this._currentReleaser) {
          var releaser = this._currentReleaser;
          this._currentReleaser = void 0;
          releaser();
        }
      };
      Semaphore2.prototype._dispatch = function() {
        var _this = this;
        var nextConsumer = this._queue.shift();
        if (!nextConsumer)
          return;
        var released = false;
        this._currentReleaser = function() {
          if (released)
            return;
          released = true;
          _this._value++;
          _this._dispatch();
        };
        nextConsumer([this._value--, this._currentReleaser]);
      };
      return Semaphore2;
    }();
    exports.default = Semaphore;
  }
});

// node_modules/async-mutex/lib/Mutex.js
var require_Mutex = __commonJS({
  "node_modules/async-mutex/lib/Mutex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    var Semaphore_1 = require_Semaphore();
    var Mutex = function() {
      function Mutex2() {
        this._semaphore = new Semaphore_1.default(1);
      }
      Mutex2.prototype.acquire = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
          var _a, releaser;
          return tslib_1.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                return [4, this._semaphore.acquire()];
              case 1:
                _a = _b.sent(), releaser = _a[1];
                return [2, releaser];
            }
          });
        });
      };
      Mutex2.prototype.runExclusive = function(callback) {
        return this._semaphore.runExclusive(function() {
          return callback();
        });
      };
      Mutex2.prototype.isLocked = function() {
        return this._semaphore.isLocked();
      };
      Mutex2.prototype.release = function() {
        this._semaphore.release();
      };
      return Mutex2;
    }();
    exports.default = Mutex;
  }
});

// node_modules/async-mutex/lib/withTimeout.js
var require_withTimeout = __commonJS({
  "node_modules/async-mutex/lib/withTimeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withTimeout = void 0;
    var tslib_1 = require_tslib();
    function withTimeout(sync, timeout, timeoutError) {
      var _this = this;
      if (timeoutError === void 0) {
        timeoutError = new Error("timeout");
      }
      return {
        acquire: function() {
          return new Promise(function(resolve, reject) {
            return tslib_1.__awaiter(_this, void 0, void 0, function() {
              var isTimeout, ticket, release;
              return tslib_1.__generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    isTimeout = false;
                    setTimeout(function() {
                      isTimeout = true;
                      reject(timeoutError);
                    }, timeout);
                    return [4, sync.acquire()];
                  case 1:
                    ticket = _a.sent();
                    if (isTimeout) {
                      release = Array.isArray(ticket) ? ticket[1] : ticket;
                      release();
                    } else {
                      resolve(ticket);
                    }
                    return [2];
                }
              });
            });
          });
        },
        runExclusive: function(callback) {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            var release, ticket;
            return tslib_1.__generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  release = function() {
                    return void 0;
                  };
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, , 7, 8]);
                  return [4, this.acquire()];
                case 2:
                  ticket = _a.sent();
                  if (!Array.isArray(ticket))
                    return [3, 4];
                  release = ticket[1];
                  return [4, callback(ticket[0])];
                case 3:
                  return [2, _a.sent()];
                case 4:
                  release = ticket;
                  return [4, callback()];
                case 5:
                  return [2, _a.sent()];
                case 6:
                  return [3, 8];
                case 7:
                  release();
                  return [7];
                case 8:
                  return [2];
              }
            });
          });
        },
        release: function() {
          sync.release();
        },
        isLocked: function() {
          return sync.isLocked();
        }
      };
    }
    exports.withTimeout = withTimeout;
  }
});

// node_modules/async-mutex/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/async-mutex/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;
    var Mutex_1 = require_Mutex();
    Object.defineProperty(exports, "Mutex", { enumerable: true, get: function() {
      return Mutex_1.default;
    } });
    var Semaphore_1 = require_Semaphore();
    Object.defineProperty(exports, "Semaphore", { enumerable: true, get: function() {
      return Semaphore_1.default;
    } });
    var withTimeout_1 = require_withTimeout();
    Object.defineProperty(exports, "withTimeout", { enumerable: true, get: function() {
      return withTimeout_1.withTimeout;
    } });
  }
});

// node_modules/json-rpc-engine/dist/getUniqueId.js
var require_getUniqueId = __commonJS({
  "node_modules/json-rpc-engine/dist/getUniqueId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUniqueId = void 0;
    var MAX = 4294967295;
    var idCounter = Math.floor(Math.random() * MAX);
    function getUniqueId() {
      idCounter = (idCounter + 1) % MAX;
      return idCounter;
    }
    exports.getUniqueId = getUniqueId;
  }
});

// node_modules/json-rpc-engine/dist/idRemapMiddleware.js
var require_idRemapMiddleware = __commonJS({
  "node_modules/json-rpc-engine/dist/idRemapMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createIdRemapMiddleware = void 0;
    var getUniqueId_1 = require_getUniqueId();
    function createIdRemapMiddleware() {
      return (req, res, next, _end) => {
        const originalId = req.id;
        const newId = getUniqueId_1.getUniqueId();
        req.id = newId;
        res.id = newId;
        next((done) => {
          req.id = originalId;
          res.id = originalId;
          done();
        });
      };
    }
    exports.createIdRemapMiddleware = createIdRemapMiddleware;
  }
});

// node_modules/json-rpc-engine/dist/createAsyncMiddleware.js
var require_createAsyncMiddleware2 = __commonJS({
  "node_modules/json-rpc-engine/dist/createAsyncMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAsyncMiddleware = void 0;
    function createAsyncMiddleware(asyncMiddleware) {
      return async (req, res, next, end) => {
        let resolveNextPromise;
        const nextPromise = new Promise((resolve) => {
          resolveNextPromise = resolve;
        });
        let returnHandlerCallback = null;
        let nextWasCalled = false;
        const asyncNext = async () => {
          nextWasCalled = true;
          next((runReturnHandlersCallback) => {
            returnHandlerCallback = runReturnHandlersCallback;
            resolveNextPromise();
          });
          await nextPromise;
        };
        try {
          await asyncMiddleware(req, res, asyncNext);
          if (nextWasCalled) {
            await nextPromise;
            returnHandlerCallback(null);
          } else {
            end(null);
          }
        } catch (error) {
          if (returnHandlerCallback) {
            returnHandlerCallback(error);
          } else {
            end(error);
          }
        }
      };
    }
    exports.createAsyncMiddleware = createAsyncMiddleware;
  }
});

// node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js
var require_createScaffoldMiddleware = __commonJS({
  "node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createScaffoldMiddleware = void 0;
    function createScaffoldMiddleware(handlers) {
      return (req, res, next, end) => {
        const handler = handlers[req.method];
        if (handler === void 0) {
          return next();
        }
        if (typeof handler === "function") {
          return handler(req, res, next, end);
        }
        res.result = handler;
        return end();
      };
    }
    exports.createScaffoldMiddleware = createScaffoldMiddleware;
  }
});

// node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/classes.js
var require_classes = __commonJS({
  "node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/classes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EthereumProviderError = exports.EthereumRpcError = void 0;
    var fast_safe_stringify_1 = require_fast_safe_stringify();
    var EthereumRpcError = class extends Error {
      constructor(code, message, data) {
        if (!Number.isInteger(code)) {
          throw new Error('"code" must be an integer.');
        }
        if (!message || typeof message !== "string") {
          throw new Error('"message" must be a nonempty string.');
        }
        super(message);
        this.code = code;
        if (data !== void 0) {
          this.data = data;
        }
      }
      serialize() {
        const serialized = {
          code: this.code,
          message: this.message
        };
        if (this.data !== void 0) {
          serialized.data = this.data;
        }
        if (this.stack) {
          serialized.stack = this.stack;
        }
        return serialized;
      }
      toString() {
        return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);
      }
    };
    exports.EthereumRpcError = EthereumRpcError;
    var EthereumProviderError = class extends EthereumRpcError {
      constructor(code, message, data) {
        if (!isValidEthProviderCode(code)) {
          throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        }
        super(code, message, data);
      }
    };
    exports.EthereumProviderError = EthereumProviderError;
    function isValidEthProviderCode(code) {
      return Number.isInteger(code) && code >= 1e3 && code <= 4999;
    }
    function stringifyReplacer(_5, value) {
      if (value === "[Circular]") {
        return void 0;
      }
      return value;
    }
  }
});

// node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/error-constants.js
var require_error_constants = __commonJS({
  "node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/error-constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorValues = exports.errorCodes = void 0;
    exports.errorCodes = {
      rpc: {
        invalidInput: -32e3,
        resourceNotFound: -32001,
        resourceUnavailable: -32002,
        transactionRejected: -32003,
        methodNotSupported: -32004,
        limitExceeded: -32005,
        parse: -32700,
        invalidRequest: -32600,
        methodNotFound: -32601,
        invalidParams: -32602,
        internal: -32603
      },
      provider: {
        userRejectedRequest: 4001,
        unauthorized: 4100,
        unsupportedMethod: 4200,
        disconnected: 4900,
        chainDisconnected: 4901
      }
    };
    exports.errorValues = {
      "-32700": {
        standard: "JSON RPC 2.0",
        message: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
      },
      "-32600": {
        standard: "JSON RPC 2.0",
        message: "The JSON sent is not a valid Request object."
      },
      "-32601": {
        standard: "JSON RPC 2.0",
        message: "The method does not exist / is not available."
      },
      "-32602": {
        standard: "JSON RPC 2.0",
        message: "Invalid method parameter(s)."
      },
      "-32603": {
        standard: "JSON RPC 2.0",
        message: "Internal JSON-RPC error."
      },
      "-32000": {
        standard: "EIP-1474",
        message: "Invalid input."
      },
      "-32001": {
        standard: "EIP-1474",
        message: "Resource not found."
      },
      "-32002": {
        standard: "EIP-1474",
        message: "Resource unavailable."
      },
      "-32003": {
        standard: "EIP-1474",
        message: "Transaction rejected."
      },
      "-32004": {
        standard: "EIP-1474",
        message: "Method not supported."
      },
      "-32005": {
        standard: "EIP-1474",
        message: "Request limit exceeded."
      },
      "4001": {
        standard: "EIP-1193",
        message: "User rejected the request."
      },
      "4100": {
        standard: "EIP-1193",
        message: "The requested account and/or method has not been authorized by the user."
      },
      "4200": {
        standard: "EIP-1193",
        message: "The requested method is not supported by this Ethereum provider."
      },
      "4900": {
        standard: "EIP-1193",
        message: "The provider is disconnected from all chains."
      },
      "4901": {
        standard: "EIP-1193",
        message: "The provider is disconnected from the specified chain."
      }
    };
  }
});

// node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/utils.js
var require_utils3 = __commonJS({
  "node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
    var error_constants_1 = require_error_constants();
    var classes_1 = require_classes();
    var FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;
    var FALLBACK_MESSAGE = "Unspecified error message. This is a bug, please report it.";
    var FALLBACK_ERROR = {
      code: FALLBACK_ERROR_CODE,
      message: getMessageFromCode(FALLBACK_ERROR_CODE)
    };
    exports.JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.";
    function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {
      if (Number.isInteger(code)) {
        const codeString = code.toString();
        if (hasKey(error_constants_1.errorValues, codeString)) {
          return error_constants_1.errorValues[codeString].message;
        }
        if (isJsonRpcServerError(code)) {
          return exports.JSON_RPC_SERVER_ERROR_MESSAGE;
        }
      }
      return fallbackMessage;
    }
    exports.getMessageFromCode = getMessageFromCode;
    function isValidCode(code) {
      if (!Number.isInteger(code)) {
        return false;
      }
      const codeString = code.toString();
      if (error_constants_1.errorValues[codeString]) {
        return true;
      }
      if (isJsonRpcServerError(code)) {
        return true;
      }
      return false;
    }
    exports.isValidCode = isValidCode;
    function serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false } = {}) {
      var _a, _b;
      if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== "string") {
        throw new Error("Must provide fallback error with integer number code and string message.");
      }
      if (error instanceof classes_1.EthereumRpcError) {
        return error.serialize();
      }
      const serialized = {};
      if (error && typeof error === "object" && !Array.isArray(error) && hasKey(error, "code") && isValidCode(error.code)) {
        const _error = error;
        serialized.code = _error.code;
        if (_error.message && typeof _error.message === "string") {
          serialized.message = _error.message;
          if (hasKey(_error, "data")) {
            serialized.data = _error.data;
          }
        } else {
          serialized.message = getMessageFromCode(serialized.code);
          serialized.data = { originalError: assignOriginalError(error) };
        }
      } else {
        serialized.code = fallbackError.code;
        const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;
        serialized.message = message && typeof message === "string" ? message : fallbackError.message;
        serialized.data = { originalError: assignOriginalError(error) };
      }
      const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;
      if (shouldIncludeStack && error && stack && typeof stack === "string") {
        serialized.stack = stack;
      }
      return serialized;
    }
    exports.serializeError = serializeError;
    function isJsonRpcServerError(code) {
      return code >= -32099 && code <= -32e3;
    }
    function assignOriginalError(error) {
      if (error && typeof error === "object" && !Array.isArray(error)) {
        return Object.assign({}, error);
      }
      return error;
    }
    function hasKey(obj, key2) {
      return Object.prototype.hasOwnProperty.call(obj, key2);
    }
  }
});

// node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/errors.js
var require_errors = __commonJS({
  "node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethErrors = void 0;
    var classes_1 = require_classes();
    var utils_12 = require_utils3();
    var error_constants_1 = require_error_constants();
    exports.ethErrors = {
      rpc: {
        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),
        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),
        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),
        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),
        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),
        server: (opts) => {
          if (!opts || typeof opts !== "object" || Array.isArray(opts)) {
            throw new Error("Ethereum RPC Server errors must provide single object argument.");
          }
          const { code } = opts;
          if (!Number.isInteger(code) || code > -32005 || code < -32099) {
            throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
          }
          return getEthJsonRpcError(code, opts);
        },
        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),
        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),
        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),
        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),
        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),
        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)
      },
      provider: {
        userRejectedRequest: (arg) => {
          return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);
        },
        unauthorized: (arg) => {
          return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);
        },
        unsupportedMethod: (arg) => {
          return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);
        },
        disconnected: (arg) => {
          return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);
        },
        chainDisconnected: (arg) => {
          return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);
        },
        custom: (opts) => {
          if (!opts || typeof opts !== "object" || Array.isArray(opts)) {
            throw new Error("Ethereum Provider custom errors must provide single object argument.");
          }
          const { code, message, data } = opts;
          if (!message || typeof message !== "string") {
            throw new Error('"message" must be a nonempty string');
          }
          return new classes_1.EthereumProviderError(code, message, data);
        }
      }
    };
    function getEthJsonRpcError(code, arg) {
      const [message, data] = parseOpts(arg);
      return new classes_1.EthereumRpcError(code, message || utils_12.getMessageFromCode(code), data);
    }
    function getEthProviderError(code, arg) {
      const [message, data] = parseOpts(arg);
      return new classes_1.EthereumProviderError(code, message || utils_12.getMessageFromCode(code), data);
    }
    function parseOpts(arg) {
      if (arg) {
        if (typeof arg === "string") {
          return [arg];
        } else if (typeof arg === "object" && !Array.isArray(arg)) {
          const { message, data } = arg;
          if (message && typeof message !== "string") {
            throw new Error("Must specify string message.");
          }
          return [message || void 0, data];
        }
      }
      return [];
    }
  }
});

// node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;
    var classes_1 = require_classes();
    Object.defineProperty(exports, "EthereumRpcError", { enumerable: true, get: function() {
      return classes_1.EthereumRpcError;
    } });
    Object.defineProperty(exports, "EthereumProviderError", { enumerable: true, get: function() {
      return classes_1.EthereumProviderError;
    } });
    var utils_12 = require_utils3();
    Object.defineProperty(exports, "serializeError", { enumerable: true, get: function() {
      return utils_12.serializeError;
    } });
    Object.defineProperty(exports, "getMessageFromCode", { enumerable: true, get: function() {
      return utils_12.getMessageFromCode;
    } });
    var errors_1 = require_errors();
    Object.defineProperty(exports, "ethErrors", { enumerable: true, get: function() {
      return errors_1.ethErrors;
    } });
    var error_constants_1 = require_error_constants();
    Object.defineProperty(exports, "errorCodes", { enumerable: true, get: function() {
      return error_constants_1.errorCodes;
    } });
  }
});

// node_modules/json-rpc-engine/dist/JsonRpcEngine.js
var require_JsonRpcEngine = __commonJS({
  "node_modules/json-rpc-engine/dist/JsonRpcEngine.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcEngine = void 0;
    var safe_event_emitter_1 = __importDefault(require_safe_event_emitter());
    var eth_rpc_errors_1 = require_dist5();
    var JsonRpcEngine = class extends safe_event_emitter_1.default {
      constructor() {
        super();
        this._middleware = [];
      }
      push(middleware) {
        this._middleware.push(middleware);
      }
      handle(req, cb) {
        if (cb && typeof cb !== "function") {
          throw new Error('"callback" must be a function if provided.');
        }
        if (Array.isArray(req)) {
          if (cb) {
            return this._handleBatch(req, cb);
          }
          return this._handleBatch(req);
        }
        if (cb) {
          return this._handle(req, cb);
        }
        return this._promiseHandle(req);
      }
      asMiddleware() {
        return async (req, res, next, end) => {
          try {
            const [middlewareError, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);
            if (isComplete) {
              await JsonRpcEngine._runReturnHandlers(returnHandlers);
              return end(middlewareError);
            }
            return next(async (handlerCallback) => {
              try {
                await JsonRpcEngine._runReturnHandlers(returnHandlers);
              } catch (error) {
                return handlerCallback(error);
              }
              return handlerCallback();
            });
          } catch (error) {
            return end(error);
          }
        };
      }
      async _handleBatch(reqs, cb) {
        try {
          const responses = await Promise.all(reqs.map(this._promiseHandle.bind(this)));
          if (cb) {
            return cb(null, responses);
          }
          return responses;
        } catch (error) {
          if (cb) {
            return cb(error);
          }
          throw error;
        }
      }
      _promiseHandle(req) {
        return new Promise((resolve) => {
          this._handle(req, (_err, res) => {
            resolve(res);
          });
        });
      }
      async _handle(callerReq, cb) {
        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== "object") {
          const error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });
          return cb(error2, { id: void 0, jsonrpc: "2.0", error: error2 });
        }
        if (typeof callerReq.method !== "string") {
          const error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });
          return cb(error2, { id: callerReq.id, jsonrpc: "2.0", error: error2 });
        }
        const req = Object.assign({}, callerReq);
        const res = {
          id: req.id,
          jsonrpc: req.jsonrpc
        };
        let error = null;
        try {
          await this._processRequest(req, res);
        } catch (_error) {
          error = _error;
        }
        if (error) {
          delete res.result;
          if (!res.error) {
            res.error = eth_rpc_errors_1.serializeError(error);
          }
        }
        return cb(error, res);
      }
      async _processRequest(req, res) {
        const [error, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);
        JsonRpcEngine._checkForCompletion(req, res, isComplete);
        await JsonRpcEngine._runReturnHandlers(returnHandlers);
        if (error) {
          throw error;
        }
      }
      static async _runAllMiddleware(req, res, middlewareStack) {
        const returnHandlers = [];
        let error = null;
        let isComplete = false;
        for (const middleware of middlewareStack) {
          [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);
          if (isComplete) {
            break;
          }
        }
        return [error, isComplete, returnHandlers.reverse()];
      }
      static _runMiddleware(req, res, middleware, returnHandlers) {
        return new Promise((resolve) => {
          const end = (err) => {
            const error = err || res.error;
            if (error) {
              res.error = eth_rpc_errors_1.serializeError(error);
            }
            resolve([error, true]);
          };
          const next = (returnHandler) => {
            if (res.error) {
              end(res.error);
            } else {
              if (returnHandler) {
                if (typeof returnHandler !== "function") {
                  end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: "next" return handlers must be functions. Received "${typeof returnHandler}" for request:
${jsonify(req)}`, { request: req }));
                }
                returnHandlers.push(returnHandler);
              }
              resolve([null, false]);
            }
          };
          try {
            middleware(req, res, next, end);
          } catch (error) {
            end(error);
          }
        });
      }
      static async _runReturnHandlers(handlers) {
        for (const handler of handlers) {
          await new Promise((resolve, reject) => {
            handler((err) => err ? reject(err) : resolve());
          });
        }
      }
      static _checkForCompletion(req, res, isComplete) {
        if (!("result" in res) && !("error" in res)) {
          throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:
${jsonify(req)}`, { request: req });
        }
        if (!isComplete) {
          throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:
${jsonify(req)}`, { request: req });
        }
      }
    };
    exports.JsonRpcEngine = JsonRpcEngine;
    function jsonify(request) {
      return JSON.stringify(request, null, 2);
    }
  }
});

// node_modules/json-rpc-engine/dist/mergeMiddleware.js
var require_mergeMiddleware = __commonJS({
  "node_modules/json-rpc-engine/dist/mergeMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeMiddleware = void 0;
    var JsonRpcEngine_1 = require_JsonRpcEngine();
    function mergeMiddleware(middlewareStack) {
      const engine = new JsonRpcEngine_1.JsonRpcEngine();
      middlewareStack.forEach((middleware) => engine.push(middleware));
      return engine.asMiddleware();
    }
    exports.mergeMiddleware = mergeMiddleware;
  }
});

// node_modules/json-rpc-engine/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/json-rpc-engine/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o4, m3, k4, k22) {
      if (k22 === void 0)
        k22 = k4;
      Object.defineProperty(o4, k22, { enumerable: true, get: function() {
        return m3[k4];
      } });
    } : function(o4, m3, k4, k22) {
      if (k22 === void 0)
        k22 = k4;
      o4[k22] = m3[k4];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p4 in m3)
        if (p4 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p4))
          __createBinding(exports2, m3, p4);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_idRemapMiddleware(), exports);
    __exportStar(require_createAsyncMiddleware2(), exports);
    __exportStar(require_createScaffoldMiddleware(), exports);
    __exportStar(require_getUniqueId(), exports);
    __exportStar(require_JsonRpcEngine(), exports);
    __exportStar(require_mergeMiddleware(), exports);
  }
});

// node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js
var require_createScaffoldMiddleware2 = __commonJS({
  "node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js"(exports, module) {
    module.exports = function createScaffoldMiddleware(handlers) {
      return (req, res, next, end) => {
        const handler = handlers[req.method];
        if (handler === void 0) {
          return next();
        }
        if (typeof handler === "function") {
          return handler(req, res, next, end);
        }
        res.result = handler;
        return end();
      };
    };
  }
});

// node_modules/eth-json-rpc-middleware/scaffold.js
var require_scaffold = __commonJS({
  "node_modules/eth-json-rpc-middleware/scaffold.js"(exports, module) {
    module.exports = require_createScaffoldMiddleware2();
  }
});

// node_modules/eth-json-rpc-filters/node_modules/pify/index.js
var require_pify2 = __commonJS({
  "node_modules/eth-json-rpc-filters/node_modules/pify/index.js"(exports, module) {
    "use strict";
    var processFn = (fn2, options, proxy, unwrapped) => function(...arguments_) {
      const P4 = options.promiseModule;
      return new P4((resolve, reject) => {
        if (options.multiArgs) {
          arguments_.push((...result) => {
            if (options.errorFirst) {
              if (result[0]) {
                reject(result);
              } else {
                result.shift();
                resolve(result);
              }
            } else {
              resolve(result);
            }
          });
        } else if (options.errorFirst) {
          arguments_.push((error, result) => {
            if (error) {
              reject(error);
            } else {
              resolve(result);
            }
          });
        } else {
          arguments_.push(resolve);
        }
        const self2 = this === proxy ? unwrapped : this;
        Reflect.apply(fn2, self2, arguments_);
      });
    };
    var filterCache = /* @__PURE__ */ new WeakMap();
    module.exports = (input, options) => {
      options = __spreadValues({
        exclude: [/.+(?:Sync|Stream)$/],
        errorFirst: true,
        promiseModule: Promise
      }, options);
      const objectType = typeof input;
      if (!(input !== null && (objectType === "object" || objectType === "function"))) {
        throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objectType}\``);
      }
      const filter = (target, key2) => {
        let cached = filterCache.get(target);
        if (!cached) {
          cached = {};
          filterCache.set(target, cached);
        }
        if (key2 in cached) {
          return cached[key2];
        }
        const match = (pattern) => typeof pattern === "string" || typeof key2 === "symbol" ? key2 === pattern : pattern.test(key2);
        const desc = Reflect.getOwnPropertyDescriptor(target, key2);
        const writableOrConfigurableOwn = desc === void 0 || desc.writable || desc.configurable;
        const included = options.include ? options.include.some(match) : !options.exclude.some(match);
        const shouldFilter = included && writableOrConfigurableOwn;
        cached[key2] = shouldFilter;
        return shouldFilter;
      };
      const cache = /* @__PURE__ */ new WeakMap();
      const proxy = new Proxy(input, {
        apply(target, thisArg, args) {
          const cached = cache.get(target);
          if (cached) {
            return Reflect.apply(cached, thisArg, args);
          }
          const pified = options.excludeMain ? target : processFn(target, options, proxy, target);
          cache.set(target, pified);
          return Reflect.apply(pified, thisArg, args);
        },
        get(target, key2) {
          const property = target[key2];
          if (!filter(target, key2) || property === Function.prototype[key2]) {
            return property;
          }
          const cached = cache.get(property);
          if (cached) {
            return cached;
          }
          if (typeof property === "function") {
            const pified = processFn(property, options, proxy, target);
            cache.set(property, pified);
            return pified;
          }
          return property;
        }
      });
      return proxy;
    };
  }
});

// node_modules/eth-json-rpc-filters/base-filter.js
var require_base_filter = __commonJS({
  "node_modules/eth-json-rpc-filters/base-filter.js"(exports, module) {
    var SafeEventEmitter2 = require_safe_event_emitter().default;
    var BaseFilter = class extends SafeEventEmitter2 {
      constructor() {
        super();
        this.updates = [];
      }
      async initialize() {
      }
      async update() {
        throw new Error("BaseFilter - no update method specified");
      }
      addResults(newResults) {
        this.updates = this.updates.concat(newResults);
        newResults.forEach((result) => this.emit("update", result));
      }
      addInitialResults(newResults) {
      }
      getChangesAndClear() {
        const updates = this.updates;
        this.updates = [];
        return updates;
      }
    };
    module.exports = BaseFilter;
  }
});

// node_modules/eth-json-rpc-filters/base-filter-history.js
var require_base_filter_history = __commonJS({
  "node_modules/eth-json-rpc-filters/base-filter-history.js"(exports, module) {
    var BaseFilter = require_base_filter();
    var BaseFilterWithHistory = class extends BaseFilter {
      constructor() {
        super();
        this.allResults = [];
      }
      async update() {
        throw new Error("BaseFilterWithHistory - no update method specified");
      }
      addResults(newResults) {
        this.allResults = this.allResults.concat(newResults);
        super.addResults(newResults);
      }
      addInitialResults(newResults) {
        this.allResults = this.allResults.concat(newResults);
        super.addInitialResults(newResults);
      }
      getAllResults() {
        return this.allResults;
      }
    };
    module.exports = BaseFilterWithHistory;
  }
});

// node_modules/eth-json-rpc-filters/hexUtils.js
var require_hexUtils = __commonJS({
  "node_modules/eth-json-rpc-filters/hexUtils.js"(exports, module) {
    module.exports = {
      minBlockRef,
      maxBlockRef,
      sortBlockRefs,
      bnToHex,
      blockRefIsNumber,
      hexToInt,
      incrementHexInt,
      intToHex,
      unsafeRandomBytes
    };
    function minBlockRef(...refs) {
      const sortedRefs = sortBlockRefs(refs);
      return sortedRefs[0];
    }
    function maxBlockRef(...refs) {
      const sortedRefs = sortBlockRefs(refs);
      return sortedRefs[sortedRefs.length - 1];
    }
    function sortBlockRefs(refs) {
      return refs.sort((refA, refB) => {
        if (refA === "latest" || refB === "earliest")
          return 1;
        if (refB === "latest" || refA === "earliest")
          return -1;
        return hexToInt(refA) - hexToInt(refB);
      });
    }
    function bnToHex(bn) {
      return "0x" + bn.toString(16);
    }
    function blockRefIsNumber(blockRef) {
      return blockRef && !["earliest", "latest", "pending"].includes(blockRef);
    }
    function hexToInt(hexString) {
      if (hexString === void 0 || hexString === null)
        return hexString;
      return Number.parseInt(hexString, 16);
    }
    function incrementHexInt(hexString) {
      if (hexString === void 0 || hexString === null)
        return hexString;
      const value = hexToInt(hexString);
      return intToHex(value + 1);
    }
    function intToHex(int) {
      if (int === void 0 || int === null)
        return int;
      let hexString = int.toString(16);
      const needsLeftPad = hexString.length % 2;
      if (needsLeftPad)
        hexString = "0" + hexString;
      return "0x" + hexString;
    }
    function unsafeRandomBytes(byteCount) {
      let result = "0x";
      for (let i4 = 0; i4 < byteCount; i4++) {
        result += unsafeRandomNibble();
        result += unsafeRandomNibble();
      }
      return result;
    }
    function unsafeRandomNibble() {
      return Math.floor(Math.random() * 16).toString(16);
    }
  }
});

// node_modules/eth-json-rpc-filters/log-filter.js
var require_log_filter = __commonJS({
  "node_modules/eth-json-rpc-filters/log-filter.js"(exports, module) {
    var EthQuery = require_eth_query();
    var pify = require_pify2();
    var BaseFilterWithHistory = require_base_filter_history();
    var { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require_hexUtils();
    var LogFilter = class extends BaseFilterWithHistory {
      constructor({ provider, params }) {
        super();
        this.type = "log";
        this.ethQuery = new EthQuery(provider);
        this.params = Object.assign({
          fromBlock: "latest",
          toBlock: "latest",
          address: void 0,
          topics: []
        }, params);
        if (this.params.address) {
          if (!Array.isArray(this.params.address)) {
            this.params.address = [this.params.address];
          }
          this.params.address = this.params.address.map((address) => address.toLowerCase());
        }
      }
      async initialize({ currentBlock }) {
        let fromBlock = this.params.fromBlock;
        if (["latest", "pending"].includes(fromBlock))
          fromBlock = currentBlock;
        if (fromBlock === "earliest")
          fromBlock = "0x0";
        this.params.fromBlock = fromBlock;
        const toBlock = minBlockRef(this.params.toBlock, currentBlock);
        const params = Object.assign({}, this.params, { toBlock });
        const newLogs = await this._fetchLogs(params);
        this.addInitialResults(newLogs);
      }
      async update({ oldBlock, newBlock }) {
        const toBlock = newBlock;
        let fromBlock;
        if (oldBlock) {
          fromBlock = incrementHexInt(oldBlock);
        } else {
          fromBlock = newBlock;
        }
        const params = Object.assign({}, this.params, { fromBlock, toBlock });
        const newLogs = await this._fetchLogs(params);
        const matchingLogs = newLogs.filter((log4) => this.matchLog(log4));
        this.addResults(matchingLogs);
      }
      async _fetchLogs(params) {
        const newLogs = await pify((cb) => this.ethQuery.getLogs(params, cb))();
        return newLogs;
      }
      matchLog(log4) {
        if (hexToInt(this.params.fromBlock) >= hexToInt(log4.blockNumber))
          return false;
        if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log4.blockNumber))
          return false;
        const normalizedLogAddress = log4.address && log4.address.toLowerCase();
        if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress))
          return false;
        const topicsMatch = this.params.topics.every((topicPattern, index) => {
          let logTopic = log4.topics[index];
          if (!logTopic)
            return false;
          logTopic = logTopic.toLowerCase();
          let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern];
          const subtopicsIncludeWildcard = subtopicsToMatch.includes(null);
          if (subtopicsIncludeWildcard)
            return true;
          subtopicsToMatch = subtopicsToMatch.map((topic) => topic.toLowerCase());
          const topicDoesMatch = subtopicsToMatch.includes(logTopic);
          return topicDoesMatch;
        });
        return topicsMatch;
      }
    };
    module.exports = LogFilter;
  }
});

// node_modules/eth-json-rpc-filters/getBlocksForRange.js
var require_getBlocksForRange = __commonJS({
  "node_modules/eth-json-rpc-filters/getBlocksForRange.js"(exports, module) {
    module.exports = getBlocksForRange;
    async function getBlocksForRange({ provider, fromBlock, toBlock }) {
      if (!fromBlock)
        fromBlock = toBlock;
      const fromBlockNumber = hexToInt(fromBlock);
      const toBlockNumber = hexToInt(toBlock);
      const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;
      const missingBlockNumbers = Array(blockCountToQuery).fill().map((_5, index) => fromBlockNumber + index).map(intToHex);
      const blockBodies = await Promise.all(missingBlockNumbers.map((blockNum) => query(provider, "eth_getBlockByNumber", [blockNum, false])));
      return blockBodies;
    }
    function hexToInt(hexString) {
      if (hexString === void 0 || hexString === null)
        return hexString;
      return Number.parseInt(hexString, 16);
    }
    function intToHex(int) {
      if (int === void 0 || int === null)
        return int;
      const hexString = int.toString(16);
      return "0x" + hexString;
    }
    function query(provider, method, params) {
      return new Promise((resolve, reject) => {
        provider.sendAsync({ id: 1, jsonrpc: "2.0", method, params }, (err, res) => {
          if (err)
            return reject(err);
          resolve(res.result);
        });
      });
    }
  }
});

// node_modules/eth-json-rpc-filters/block-filter.js
var require_block_filter = __commonJS({
  "node_modules/eth-json-rpc-filters/block-filter.js"(exports, module) {
    var BaseFilter = require_base_filter();
    var getBlocksForRange = require_getBlocksForRange();
    var { incrementHexInt } = require_hexUtils();
    var BlockFilter = class extends BaseFilter {
      constructor({ provider, params }) {
        super();
        this.type = "block";
        this.provider = provider;
      }
      async update({ oldBlock, newBlock }) {
        const toBlock = newBlock;
        const fromBlock = incrementHexInt(oldBlock);
        const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock });
        const blockHashes = blockBodies.map((block) => block.hash);
        this.addResults(blockHashes);
      }
    };
    module.exports = BlockFilter;
  }
});

// node_modules/eth-json-rpc-filters/tx-filter.js
var require_tx_filter = __commonJS({
  "node_modules/eth-json-rpc-filters/tx-filter.js"(exports, module) {
    var BaseFilter = require_base_filter();
    var getBlocksForRange = require_getBlocksForRange();
    var { incrementHexInt } = require_hexUtils();
    var TxFilter = class extends BaseFilter {
      constructor({ provider }) {
        super();
        this.type = "tx";
        this.provider = provider;
      }
      async update({ oldBlock }) {
        const toBlock = oldBlock;
        const fromBlock = incrementHexInt(oldBlock);
        const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock });
        const blockTxHashes = [];
        for (const block of blocks) {
          blockTxHashes.push(...block.transactions);
        }
        this.addResults(blockTxHashes);
      }
    };
    module.exports = TxFilter;
  }
});

// node_modules/eth-json-rpc-filters/index.js
var require_eth_json_rpc_filters = __commonJS({
  "node_modules/eth-json-rpc-filters/index.js"(exports, module) {
    var Mutex = require_lib2().Mutex;
    var { createAsyncMiddleware } = require_dist6();
    var createJsonRpcMiddleware = require_scaffold();
    var LogFilter = require_log_filter();
    var BlockFilter = require_block_filter();
    var TxFilter = require_tx_filter();
    var { intToHex, hexToInt } = require_hexUtils();
    module.exports = createEthFilterMiddleware;
    function createEthFilterMiddleware({ blockTracker, provider }) {
      let filterIndex = 0;
      let filters = {};
      const mutex = new Mutex();
      const waitForFree = mutexMiddlewareWrapper({ mutex });
      const middleware = createJsonRpcMiddleware({
        eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),
        eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),
        eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
        eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
        eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
        eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))
      });
      const filterUpdater = async ({ oldBlock, newBlock }) => {
        if (filters.length === 0)
          return;
        const releaseLock = await mutex.acquire();
        try {
          await Promise.all(objValues(filters).map(async (filter) => {
            try {
              await filter.update({ oldBlock, newBlock });
            } catch (err) {
              console.error(err);
            }
          }));
        } catch (err) {
          console.error(err);
        }
        releaseLock();
      };
      middleware.newLogFilter = newLogFilter;
      middleware.newBlockFilter = newBlockFilter;
      middleware.newPendingTransactionFilter = newPendingTransactionFilter;
      middleware.uninstallFilter = uninstallFilterHandler;
      middleware.getFilterChanges = getFilterChanges;
      middleware.getFilterLogs = getFilterLogs;
      middleware.destroy = () => {
        uninstallAllFilters();
      };
      return middleware;
      async function newLogFilter(params) {
        const filter = new LogFilter({ provider, params });
        const filterIndex2 = await installFilter(filter);
        return filter;
      }
      async function newBlockFilter() {
        const filter = new BlockFilter({ provider });
        const filterIndex2 = await installFilter(filter);
        return filter;
      }
      async function newPendingTransactionFilter() {
        const filter = new TxFilter({ provider });
        const filterIndex2 = await installFilter(filter);
        return filter;
      }
      async function getFilterChanges(filterIndexHex) {
        const filterIndex2 = hexToInt(filterIndexHex);
        const filter = filters[filterIndex2];
        if (!filter) {
          throw new Error(`No filter for index "${filterIndex2}"`);
        }
        const results2 = filter.getChangesAndClear();
        return results2;
      }
      async function getFilterLogs(filterIndexHex) {
        const filterIndex2 = hexToInt(filterIndexHex);
        const filter = filters[filterIndex2];
        if (!filter) {
          throw new Error(`No filter for index "${filterIndex2}"`);
        }
        if (filter.type === "log") {
          results = filter.getAllResults();
        } else {
          results = [];
        }
        return results;
      }
      async function uninstallFilterHandler(filterIndexHex) {
        const filterIndex2 = hexToInt(filterIndexHex);
        const filter = filters[filterIndex2];
        const result = Boolean(filter);
        if (result) {
          await uninstallFilter(filterIndex2);
        }
        return result;
      }
      async function installFilter(filter) {
        const prevFilterCount = objValues(filters).length;
        const currentBlock = await blockTracker.getLatestBlock();
        await filter.initialize({ currentBlock });
        filterIndex++;
        filters[filterIndex] = filter;
        filter.id = filterIndex;
        filter.idHex = intToHex(filterIndex);
        const newFilterCount = objValues(filters).length;
        updateBlockTrackerSubs({ prevFilterCount, newFilterCount });
        return filterIndex;
      }
      async function uninstallFilter(filterIndex2) {
        const prevFilterCount = objValues(filters).length;
        delete filters[filterIndex2];
        const newFilterCount = objValues(filters).length;
        updateBlockTrackerSubs({ prevFilterCount, newFilterCount });
      }
      async function uninstallAllFilters() {
        const prevFilterCount = objValues(filters).length;
        filters = {};
        updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 });
      }
      function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {
        if (prevFilterCount === 0 && newFilterCount > 0) {
          blockTracker.on("sync", filterUpdater);
          return;
        }
        if (prevFilterCount > 0 && newFilterCount === 0) {
          blockTracker.removeListener("sync", filterUpdater);
          return;
        }
      }
    }
    function toFilterCreationMiddleware(createFilterFn) {
      return toAsyncRpcMiddleware(async (...args) => {
        const filter = await createFilterFn(...args);
        const result = intToHex(filter.id);
        return result;
      });
    }
    function toAsyncRpcMiddleware(asyncFn) {
      return createAsyncMiddleware(async (req, res) => {
        const result = await asyncFn.apply(null, req.params);
        res.result = result;
      });
    }
    function mutexMiddlewareWrapper({ mutex }) {
      return (middleware) => {
        return async (req, res, next, end) => {
          const releaseLock = await mutex.acquire();
          releaseLock();
          middleware(req, res, next, end);
        };
      };
    }
    function objValues(obj, fn2) {
      const values = [];
      for (let key2 in obj) {
        values.push(obj[key2]);
      }
      return values;
    }
  }
});

// node_modules/web3-provider-engine/subproviders/filters.js
var require_filters = __commonJS({
  "node_modules/web3-provider-engine/subproviders/filters.js"(exports, module) {
    var ProviderSubprovider = require_json_rpc_engine_middleware();
    var createFilterMiddleware = require_eth_json_rpc_filters();
    var SubscriptionsSubprovider2 = class extends ProviderSubprovider {
      constructor() {
        super(({ blockTracker, provider, engine }) => {
          return createFilterMiddleware({ blockTracker, provider });
        });
      }
    };
    module.exports = SubscriptionsSubprovider2;
  }
});

// node_modules/async/waterfall.js
var require_waterfall = __commonJS({
  "node_modules/async/waterfall.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(tasks, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      if (!(0, _isArray2.default)(tasks))
        return callback(new Error("First argument to waterfall must be an array of functions"));
      if (!tasks.length)
        return callback();
      var taskIndex = 0;
      function nextTask(args) {
        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
        args.push((0, _onlyOnce2.default)(next));
        task.apply(null, args);
      }
      function next(err) {
        if (err || taskIndex === tasks.length) {
          return callback.apply(null, arguments);
        }
        nextTask((0, _slice2.default)(arguments, 1));
      }
      nextTask([]);
    };
    var _isArray = require_isArray();
    var _isArray2 = _interopRequireDefault(_isArray);
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _slice = require_slice9();
    var _slice2 = _interopRequireDefault(_slice);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/internal/parallel.js
var require_parallel = __commonJS({
  "node_modules/async/internal/parallel.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _parallel;
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _slice = require_slice9();
    var _slice2 = _interopRequireDefault(_slice);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _parallel(eachfn, tasks, callback) {
      callback = callback || _noop2.default;
      var results2 = (0, _isArrayLike2.default)(tasks) ? [] : {};
      eachfn(tasks, function(task, key2, callback2) {
        (0, _wrapAsync2.default)(task)(function(err, result) {
          if (arguments.length > 2) {
            result = (0, _slice2.default)(arguments, 1);
          }
          results2[key2] = result;
          callback2(err);
        });
      }, function(err) {
        callback(err, results2);
      });
    }
    module.exports = exports["default"];
  }
});

// node_modules/async/parallel.js
var require_parallel2 = __commonJS({
  "node_modules/async/parallel.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = parallelLimit;
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _parallel = require_parallel();
    var _parallel2 = _interopRequireDefault(_parallel);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parallelLimit(tasks, callback) {
      (0, _parallel2.default)(_eachOf2.default, tasks, callback);
    }
    module.exports = exports["default"];
  }
});

// node_modules/eth-sig-util/index.js
var require_eth_sig_util = __commonJS({
  "node_modules/eth-sig-util/index.js"(exports, module) {
    var ethUtil = require_dist4();
    var ethAbi = require_ethereumjs_abi();
    module.exports = {
      concatSig: function(v4, r4, s4) {
        const rSig = ethUtil.fromSigned(r4);
        const sSig = ethUtil.fromSigned(s4);
        const vSig = ethUtil.bufferToInt(v4);
        const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString("hex"), 64);
        const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString("hex"), 64);
        const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));
        return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString("hex");
      },
      normalize: function(input) {
        if (!input)
          return;
        if (typeof input === "number") {
          const buffer = ethUtil.toBuffer(input);
          input = ethUtil.bufferToHex(buffer);
        }
        if (typeof input !== "string") {
          var msg = "eth-sig-util.normalize() requires hex string or integer input.";
          msg += " received " + typeof input + ": " + input;
          throw new Error(msg);
        }
        return ethUtil.addHexPrefix(input.toLowerCase());
      },
      personalSign: function(privateKey, msgParams) {
        var message = ethUtil.toBuffer(msgParams.data);
        var msgHash = ethUtil.hashPersonalMessage(message);
        var sig = ethUtil.ecsign(msgHash, privateKey);
        var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
        return serialized;
      },
      recoverPersonalSignature: function(msgParams) {
        const publicKey = getPublicKeyFor(msgParams);
        const sender = ethUtil.publicToAddress(publicKey);
        const senderHex = ethUtil.bufferToHex(sender);
        return senderHex;
      },
      extractPublicKey: function(msgParams) {
        const publicKey = getPublicKeyFor(msgParams);
        return "0x" + publicKey.toString("hex");
      },
      typedSignatureHash: function(typedData) {
        const hashBuffer = typedSignatureHash(typedData);
        return ethUtil.bufferToHex(hashBuffer);
      },
      signTypedData: function(privateKey, msgParams) {
        const msgHash = typedSignatureHash(msgParams.data);
        const sig = ethUtil.ecsign(msgHash, privateKey);
        return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
      },
      recoverTypedSignature: function(msgParams) {
        const msgHash = typedSignatureHash(msgParams.data);
        const publicKey = recoverPublicKey2(msgHash, msgParams.sig);
        const sender = ethUtil.publicToAddress(publicKey);
        return ethUtil.bufferToHex(sender);
      }
    };
    function typedSignatureHash(typedData) {
      const error = new Error("Expect argument to be non-empty array");
      if (typeof typedData !== "object" || !typedData.length)
        throw error;
      const data = typedData.map(function(e3) {
        return e3.type === "bytes" ? ethUtil.toBuffer(e3.value) : e3.value;
      });
      const types = typedData.map(function(e3) {
        return e3.type;
      });
      const schema = typedData.map(function(e3) {
        if (!e3.name)
          throw error;
        return e3.type + " " + e3.name;
      });
      return ethAbi.soliditySHA3(["bytes32", "bytes32"], [
        ethAbi.soliditySHA3(new Array(typedData.length).fill("string"), schema),
        ethAbi.soliditySHA3(types, data)
      ]);
    }
    function recoverPublicKey2(hash3, sig) {
      const signature2 = ethUtil.toBuffer(sig);
      const sigParams = ethUtil.fromRpcSig(signature2);
      return ethUtil.ecrecover(hash3, sigParams.v, sigParams.r, sigParams.s);
    }
    function getPublicKeyFor(msgParams) {
      const message = ethUtil.toBuffer(msgParams.data);
      const msgHash = ethUtil.hashPersonalMessage(message);
      return recoverPublicKey2(msgHash, msgParams.sig);
    }
    function padWithZeroes(number, length) {
      var myString = "" + number;
      while (myString.length < length) {
        myString = "0" + myString;
      }
      return myString;
    }
  }
});

// node_modules/semaphore/lib/semaphore.js
var require_semaphore = __commonJS({
  "node_modules/semaphore/lib/semaphore.js"(exports, module) {
    (function(global2) {
      "use strict";
      var nextTick = function(fn2) {
        setTimeout(fn2, 0);
      };
      if (typeof process != "undefined" && process && typeof process.nextTick == "function") {
        nextTick = process.nextTick;
      }
      function semaphore(capacity) {
        var semaphore2 = {
          capacity: capacity || 1,
          current: 0,
          queue: [],
          firstHere: false,
          take: function() {
            if (semaphore2.firstHere === false) {
              semaphore2.current++;
              semaphore2.firstHere = true;
              var isFirst = 1;
            } else {
              var isFirst = 0;
            }
            var item = { n: 1 };
            if (typeof arguments[0] == "function") {
              item.task = arguments[0];
            } else {
              item.n = arguments[0];
            }
            if (arguments.length >= 2) {
              if (typeof arguments[1] == "function")
                item.task = arguments[1];
              else
                item.n = arguments[1];
            }
            var task = item.task;
            item.task = function() {
              task(semaphore2.leave);
            };
            if (semaphore2.current + item.n - isFirst > semaphore2.capacity) {
              if (isFirst === 1) {
                semaphore2.current--;
                semaphore2.firstHere = false;
              }
              return semaphore2.queue.push(item);
            }
            semaphore2.current += item.n - isFirst;
            item.task(semaphore2.leave);
            if (isFirst === 1)
              semaphore2.firstHere = false;
          },
          leave: function(n3) {
            n3 = n3 || 1;
            semaphore2.current -= n3;
            if (!semaphore2.queue.length) {
              if (semaphore2.current < 0) {
                throw new Error("leave called too many times.");
              }
              return;
            }
            var item = semaphore2.queue[0];
            if (item.n + semaphore2.current > semaphore2.capacity) {
              return;
            }
            semaphore2.queue.shift();
            semaphore2.current += item.n;
            nextTick(item.task);
          },
          available: function(n3) {
            n3 = n3 || 1;
            return semaphore2.current + n3 <= semaphore2.capacity;
          }
        };
        return semaphore2;
      }
      ;
      if (typeof exports === "object") {
        module.exports = semaphore;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return semaphore;
        });
      } else {
        global2.semaphore = semaphore;
      }
    })(exports);
  }
});

// node_modules/web3-provider-engine/util/estimate-gas.js
var require_estimate_gas = __commonJS({
  "node_modules/web3-provider-engine/util/estimate-gas.js"(exports, module) {
    var createPayload = require_create_payload();
    module.exports = estimateGas;
    function estimateGas(provider, txParams, cb) {
      provider.sendAsync(createPayload({
        method: "eth_estimateGas",
        params: [txParams]
      }), function(err, res) {
        if (err) {
          if (err.message === "no contract code at given address") {
            return cb(null, "0xcf08");
          } else {
            return cb(err);
          }
        }
        cb(null, res.result);
      });
    }
  }
});

// node_modules/web3-provider-engine/subproviders/hooked-wallet.js
var require_hooked_wallet = __commonJS({
  "node_modules/web3-provider-engine/subproviders/hooked-wallet.js"(exports, module) {
    var waterfall = require_waterfall();
    var parallel = require_parallel2();
    var inherits = require_util().inherits;
    var ethUtil = require_dist4();
    var sigUtil = require_eth_sig_util();
    var extend = require_immutable();
    var Semaphore = require_semaphore();
    var Subprovider = require_subprovider();
    var estimateGas = require_estimate_gas();
    var hexRegex = /^[0-9A-Fa-f]+$/g;
    module.exports = HookedWalletSubprovider2;
    inherits(HookedWalletSubprovider2, Subprovider);
    function HookedWalletSubprovider2(opts) {
      const self2 = this;
      self2.nonceLock = Semaphore(1);
      if (opts.getAccounts)
        self2.getAccounts = opts.getAccounts;
      if (opts.processTransaction)
        self2.processTransaction = opts.processTransaction;
      if (opts.processMessage)
        self2.processMessage = opts.processMessage;
      if (opts.processPersonalMessage)
        self2.processPersonalMessage = opts.processPersonalMessage;
      if (opts.processTypedMessage)
        self2.processTypedMessage = opts.processTypedMessage;
      self2.approveTransaction = opts.approveTransaction || self2.autoApprove;
      self2.approveMessage = opts.approveMessage || self2.autoApprove;
      self2.approvePersonalMessage = opts.approvePersonalMessage || self2.autoApprove;
      self2.approveDecryptMessage = opts.approveDecryptMessage || self2.autoApprove;
      self2.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self2.autoApprove;
      self2.approveTypedMessage = opts.approveTypedMessage || self2.autoApprove;
      if (opts.signTransaction)
        self2.signTransaction = opts.signTransaction || mustProvideInConstructor("signTransaction");
      if (opts.signMessage)
        self2.signMessage = opts.signMessage || mustProvideInConstructor("signMessage");
      if (opts.signPersonalMessage)
        self2.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor("signPersonalMessage");
      if (opts.decryptMessage)
        self2.decryptMessage = opts.decryptMessage || mustProvideInConstructor("decryptMessage");
      if (opts.encryptionPublicKey)
        self2.encryptionPublicKey = opts.encryptionPublicKey || mustProvideInConstructor("encryptionPublicKey");
      if (opts.signTypedMessage)
        self2.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor("signTypedMessage");
      if (opts.recoverPersonalSignature)
        self2.recoverPersonalSignature = opts.recoverPersonalSignature;
      if (opts.publishTransaction)
        self2.publishTransaction = opts.publishTransaction;
      self2.estimateGas = opts.estimateGas || self2.estimateGas;
      self2.getGasPrice = opts.getGasPrice || self2.getGasPrice;
    }
    HookedWalletSubprovider2.prototype.handleRequest = function(payload, next, end) {
      const self2 = this;
      self2._parityRequests = {};
      self2._parityRequestCount = 0;
      let txParams, msgParams, extraParams;
      let message, address;
      switch (payload.method) {
        case "eth_coinbase":
          self2.getAccounts(function(err, accounts) {
            if (err)
              return end(err);
            let result = accounts[0] || null;
            end(null, result);
          });
          return;
        case "eth_accounts":
          self2.getAccounts(function(err, accounts) {
            if (err)
              return end(err);
            end(null, accounts);
          });
          return;
        case "eth_sendTransaction":
          txParams = payload.params[0];
          waterfall([
            (cb) => self2.validateTransaction(txParams, cb),
            (cb) => self2.processTransaction(txParams, cb)
          ], end);
          return;
        case "eth_signTransaction":
          txParams = payload.params[0];
          waterfall([
            (cb) => self2.validateTransaction(txParams, cb),
            (cb) => self2.processSignTransaction(txParams, cb)
          ], end);
          return;
        case "eth_sign":
          address = payload.params[0];
          message = payload.params[1];
          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            from: address,
            data: message
          });
          waterfall([
            (cb) => self2.validateMessage(msgParams, cb),
            (cb) => self2.processMessage(msgParams, cb)
          ], end);
          return;
        case "personal_sign":
          return function() {
            const first = payload.params[0];
            const second = payload.params[1];
            if (resemblesData(second) && resemblesAddress(first)) {
              let warning = `The eth_personalSign method requires params ordered `;
              warning += `[message, address]. This was previously handled incorrectly, `;
              warning += `and has been corrected automatically. `;
              warning += `Please switch this param order for smooth behavior in the future.`;
              console.warn(warning);
              address = payload.params[0];
              message = payload.params[1];
            } else {
              message = payload.params[0];
              address = payload.params[1];
            }
            extraParams = payload.params[2] || {};
            msgParams = extend(extraParams, {
              from: address,
              data: message
            });
            waterfall([
              (cb) => self2.validatePersonalMessage(msgParams, cb),
              (cb) => self2.processPersonalMessage(msgParams, cb)
            ], end);
          }();
        case "eth_decryptMessage":
          return function() {
            const first = payload.params[0];
            const second = payload.params[1];
            if (resemblesData(second) && resemblesAddress(first)) {
              let warning = `The eth_decryptMessage method requires params ordered `;
              warning += `[message, address]. This was previously handled incorrectly, `;
              warning += `and has been corrected automatically. `;
              warning += `Please switch this param order for smooth behavior in the future.`;
              console.warn(warning);
              address = payload.params[0];
              message = payload.params[1];
            } else {
              message = payload.params[0];
              address = payload.params[1];
            }
            extraParams = payload.params[2] || {};
            msgParams = extend(extraParams, {
              from: address,
              data: message
            });
            waterfall([
              (cb) => self2.validateDecryptMessage(msgParams, cb),
              (cb) => self2.processDecryptMessage(msgParams, cb)
            ], end);
          }();
        case "encryption_public_key":
          return function() {
            const address2 = payload.params[0];
            waterfall([
              (cb) => self2.validateEncryptionPublicKey(address2, cb),
              (cb) => self2.processEncryptionPublicKey(address2, cb)
            ], end);
          }();
        case "personal_ecRecover":
          return function() {
            message = payload.params[0];
            let signature2 = payload.params[1];
            extraParams = payload.params[2] || {};
            msgParams = extend(extraParams, {
              sig: signature2,
              data: message
            });
            self2.recoverPersonalSignature(msgParams, end);
          }();
        case "eth_signTypedData":
        case "eth_signTypedData_v3":
        case "eth_signTypedData_v4":
          return function() {
            const first = payload.params[0];
            const second = payload.params[1];
            if (resemblesAddress(first)) {
              address = first;
              message = second;
            } else {
              message = first;
              address = second;
            }
            extraParams = payload.params[2] || {};
            msgParams = extend(extraParams, {
              from: address,
              data: message
            });
            waterfall([
              (cb) => self2.validateTypedMessage(msgParams, cb),
              (cb) => self2.processTypedMessage(msgParams, cb)
            ], end);
          }();
        case "parity_postTransaction":
          txParams = payload.params[0];
          self2.parityPostTransaction(txParams, end);
          return;
        case "parity_postSign":
          address = payload.params[0];
          message = payload.params[1];
          self2.parityPostSign(address, message, end);
          return;
        case "parity_checkRequest":
          return function() {
            const requestId = payload.params[0];
            self2.parityCheckRequest(requestId, end);
          }();
        case "parity_defaultAccount":
          self2.getAccounts(function(err, accounts) {
            if (err)
              return end(err);
            const account = accounts[0] || null;
            end(null, account);
          });
          return;
        default:
          next();
          return;
      }
    };
    HookedWalletSubprovider2.prototype.getAccounts = function(cb) {
      cb(null, []);
    };
    HookedWalletSubprovider2.prototype.processTransaction = function(txParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveTransaction(txParams, cb2),
        (didApprove, cb2) => self2.checkApproval("transaction", didApprove, cb2),
        (cb2) => self2.finalizeAndSubmitTx(txParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.processSignTransaction = function(txParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveTransaction(txParams, cb2),
        (didApprove, cb2) => self2.checkApproval("transaction", didApprove, cb2),
        (cb2) => self2.finalizeTx(txParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.processMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("message", didApprove, cb2),
        (cb2) => self2.signMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.processPersonalMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approvePersonalMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("message", didApprove, cb2),
        (cb2) => self2.signPersonalMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.processDecryptMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveDecryptMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("decryptMessage", didApprove, cb2),
        (cb2) => self2.decryptMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.processEncryptionPublicKey = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveEncryptionPublicKey(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("encryptionPublicKey", didApprove, cb2),
        (cb2) => self2.encryptionPublicKey(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.processTypedMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveTypedMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("message", didApprove, cb2),
        (cb2) => self2.signTypedMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider2.prototype.autoApprove = function(txParams, cb) {
      cb(null, true);
    };
    HookedWalletSubprovider2.prototype.checkApproval = function(type, didApprove, cb) {
      cb(didApprove ? null : new Error("User denied " + type + " signature."));
    };
    HookedWalletSubprovider2.prototype.parityPostTransaction = function(txParams, cb) {
      const self2 = this;
      const count = self2._parityRequestCount;
      const reqId = `0x${count.toString(16)}`;
      self2._parityRequestCount++;
      self2.emitPayload({
        method: "eth_sendTransaction",
        params: [txParams]
      }, function(error, res) {
        if (error) {
          self2._parityRequests[reqId] = { error };
          return;
        }
        const txHash = res.result;
        self2._parityRequests[reqId] = txHash;
      });
      cb(null, reqId);
    };
    HookedWalletSubprovider2.prototype.parityPostSign = function(address, message, cb) {
      const self2 = this;
      const count = self2._parityRequestCount;
      const reqId = `0x${count.toString(16)}`;
      self2._parityRequestCount++;
      self2.emitPayload({
        method: "eth_sign",
        params: [address, message]
      }, function(error, res) {
        if (error) {
          self2._parityRequests[reqId] = { error };
          return;
        }
        const result = res.result;
        self2._parityRequests[reqId] = result;
      });
      cb(null, reqId);
    };
    HookedWalletSubprovider2.prototype.parityCheckRequest = function(reqId, cb) {
      const self2 = this;
      const result = self2._parityRequests[reqId] || null;
      if (!result)
        return cb(null, null);
      if (result.error)
        return cb(result.error);
      cb(null, result);
    };
    HookedWalletSubprovider2.prototype.recoverPersonalSignature = function(msgParams, cb) {
      let senderHex;
      try {
        senderHex = sigUtil.recoverPersonalSignature(msgParams);
      } catch (err) {
        return cb(err);
      }
      cb(null, senderHex);
    };
    HookedWalletSubprovider2.prototype.validateTransaction = function(txParams, cb) {
      const self2 = this;
      if (txParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign transaction.`));
      self2.validateSender(txParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider2.prototype.validateMessage = function(msgParams, cb) {
      const self2 = this;
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign message.`));
      self2.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider2.prototype.validatePersonalMessage = function(msgParams, cb) {
      const self2 = this;
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign personal message.`));
      if (msgParams.data === void 0)
        return cb(new Error(`Undefined message - message required to sign personal message.`));
      if (!isValidHex(msgParams.data))
        return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`));
      self2.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider2.prototype.validateDecryptMessage = function(msgParams, cb) {
      const self2 = this;
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to decrypt message.`));
      if (msgParams.data === void 0)
        return cb(new Error(`Undefined message - message required to decrypt message.`));
      if (!isValidHex(msgParams.data))
        return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`));
      self2.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to decrypt message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider2.prototype.validateEncryptionPublicKey = function(address, cb) {
      const self2 = this;
      self2.validateSender(address, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: "${address}"`));
        cb();
      });
    };
    HookedWalletSubprovider2.prototype.validateTypedMessage = function(msgParams, cb) {
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign typed data.`));
      if (msgParams.data === void 0)
        return cb(new Error(`Undefined data - message required to sign typed data.`));
      this.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider2.prototype.validateSender = function(senderAddress, cb) {
      const self2 = this;
      if (!senderAddress)
        return cb(null, false);
      self2.getAccounts(function(err, accounts) {
        if (err)
          return cb(err);
        const senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;
        cb(null, senderIsValid);
      });
    };
    HookedWalletSubprovider2.prototype.finalizeAndSubmitTx = function(txParams, cb) {
      const self2 = this;
      self2.nonceLock.take(function() {
        waterfall([
          self2.fillInTxExtras.bind(self2, txParams),
          self2.signTransaction.bind(self2),
          self2.publishTransaction.bind(self2)
        ], function(err, txHash) {
          self2.nonceLock.leave();
          if (err)
            return cb(err);
          cb(null, txHash);
        });
      });
    };
    HookedWalletSubprovider2.prototype.finalizeTx = function(txParams, cb) {
      const self2 = this;
      self2.nonceLock.take(function() {
        waterfall([
          self2.fillInTxExtras.bind(self2, txParams),
          self2.signTransaction.bind(self2)
        ], function(err, signedTx) {
          self2.nonceLock.leave();
          if (err)
            return cb(err);
          cb(null, { raw: signedTx, tx: txParams });
        });
      });
    };
    HookedWalletSubprovider2.prototype.publishTransaction = function(rawTx, cb) {
      const self2 = this;
      self2.emitPayload({
        method: "eth_sendRawTransaction",
        params: [rawTx]
      }, function(err, res) {
        if (err)
          return cb(err);
        cb(null, res.result);
      });
    };
    HookedWalletSubprovider2.prototype.estimateGas = function(txParams, cb) {
      const self2 = this;
      estimateGas(self2.engine, txParams, cb);
    };
    HookedWalletSubprovider2.prototype.getGasPrice = function(cb) {
      const self2 = this;
      self2.emitPayload({ method: "eth_gasPrice", params: [] }, function(err, res) {
        if (err)
          return cb(err);
        cb(null, res.result);
      });
    };
    HookedWalletSubprovider2.prototype.fillInTxExtras = function(txParams, cb) {
      const self2 = this;
      const address = txParams.from;
      const tasks = {};
      if (txParams.gasPrice === void 0) {
        tasks.gasPrice = self2.getGasPrice.bind(self2);
      }
      if (txParams.nonce === void 0) {
        tasks.nonce = self2.emitPayload.bind(self2, { method: "eth_getTransactionCount", params: [address, "pending"] });
      }
      if (txParams.gas === void 0) {
        tasks.gas = self2.estimateGas.bind(self2, cloneTxParams(txParams));
      }
      parallel(tasks, function(err, taskResults) {
        if (err)
          return cb(err);
        const result = {};
        if (taskResults.gasPrice)
          result.gasPrice = taskResults.gasPrice;
        if (taskResults.nonce)
          result.nonce = taskResults.nonce.result;
        if (taskResults.gas)
          result.gas = taskResults.gas;
        cb(null, extend(txParams, result));
      });
    };
    function cloneTxParams(txParams) {
      return {
        from: txParams.from,
        to: txParams.to,
        value: txParams.value,
        data: txParams.data,
        gas: txParams.gas,
        gasPrice: txParams.gasPrice,
        nonce: txParams.nonce
      };
    }
    function toLowerCase(string) {
      return string.toLowerCase();
    }
    function resemblesAddress(string) {
      const fixed = ethUtil.addHexPrefix(string);
      const isValid = ethUtil.isValidAddress(fixed);
      return isValid;
    }
    function resemblesData(string) {
      const fixed = ethUtil.addHexPrefix(string);
      const isValidAddress = ethUtil.isValidAddress(fixed);
      return !isValidAddress && isValidHex(string);
    }
    function isValidHex(data) {
      const isString = typeof data === "string";
      if (!isString)
        return false;
      const isHexPrefixed = data.slice(0, 2) === "0x";
      if (!isHexPrefixed)
        return false;
      const nonPrefixed = data.slice(2);
      const isValid = nonPrefixed.match(hexRegex);
      return isValid;
    }
    function mustProvideInConstructor(methodName) {
      return function(params, cb) {
        cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'));
      };
    }
  }
});

// node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json
var require_params = __commonJS({
  "node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json"(exports, module) {
    module.exports = {
      genesisGasLimit: {
        v: 5e3,
        d: "Gas limit of the Genesis block."
      },
      genesisDifficulty: {
        v: 17179869184,
        d: "Difficulty of the Genesis block."
      },
      genesisNonce: {
        v: "0x0000000000000042",
        d: "the geneis nonce"
      },
      genesisExtraData: {
        v: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
        d: "extra data "
      },
      genesisHash: {
        v: "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
        d: "genesis hash"
      },
      genesisStateRoot: {
        v: "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
        d: "the genesis state root"
      },
      minGasLimit: {
        v: 5e3,
        d: "Minimum the gas limit may ever be."
      },
      gasLimitBoundDivisor: {
        v: 1024,
        d: "The bound divisor of the gas limit, used in update calculations."
      },
      minimumDifficulty: {
        v: 131072,
        d: "The minimum that the difficulty may ever be."
      },
      difficultyBoundDivisor: {
        v: 2048,
        d: "The bound divisor of the difficulty, used in the update calculations."
      },
      durationLimit: {
        v: 13,
        d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
      },
      maximumExtraDataSize: {
        v: 32,
        d: "Maximum size extra data may be after Genesis."
      },
      epochDuration: {
        v: 3e4,
        d: "Duration between proof-of-work epochs."
      },
      stackLimit: {
        v: 1024,
        d: "Maximum size of VM stack allowed."
      },
      callCreateDepth: {
        v: 1024,
        d: "Maximum depth of call/create stack."
      },
      tierStepGas: {
        v: [0, 2, 3, 5, 8, 10, 20],
        d: "Once per operation, for a selection of them."
      },
      expGas: {
        v: 10,
        d: "Once per EXP instuction."
      },
      expByteGas: {
        v: 10,
        d: "Times ceil(log256(exponent)) for the EXP instruction."
      },
      sha3Gas: {
        v: 30,
        d: "Once per SHA3 operation."
      },
      sha3WordGas: {
        v: 6,
        d: "Once per word of the SHA3 operation's data."
      },
      sloadGas: {
        v: 50,
        d: "Once per SLOAD operation."
      },
      sstoreSetGas: {
        v: 2e4,
        d: "Once per SSTORE operation if the zeroness changes from zero."
      },
      sstoreResetGas: {
        v: 5e3,
        d: "Once per SSTORE operation if the zeroness does not change from zero."
      },
      sstoreRefundGas: {
        v: 15e3,
        d: "Once per SSTORE operation if the zeroness changes to zero."
      },
      jumpdestGas: {
        v: 1,
        d: "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
      },
      logGas: {
        v: 375,
        d: "Per LOG* operation."
      },
      logDataGas: {
        v: 8,
        d: "Per byte in a LOG* operation's data."
      },
      logTopicGas: {
        v: 375,
        d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
      },
      createGas: {
        v: 32e3,
        d: "Once per CREATE operation & contract-creation transaction."
      },
      callGas: {
        v: 40,
        d: "Once per CALL operation & message call transaction."
      },
      callStipend: {
        v: 2300,
        d: "Free gas given at beginning of call."
      },
      callValueTransferGas: {
        v: 9e3,
        d: "Paid for CALL when the value transfor is non-zero."
      },
      callNewAccountGas: {
        v: 25e3,
        d: "Paid for CALL when the destination address didn't exist prior."
      },
      suicideRefundGas: {
        v: 24e3,
        d: "Refunded following a suicide operation."
      },
      memoryGas: {
        v: 3,
        d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
      },
      quadCoeffDiv: {
        v: 512,
        d: "Divisor for the quadratic particle of the memory cost equation."
      },
      createDataGas: {
        v: 200,
        d: ""
      },
      txGas: {
        v: 21e3,
        d: "Per transaction. NOTE: Not payable on data of calls between transactions."
      },
      txCreation: {
        v: 32e3,
        d: "the cost of creating a contract via tx"
      },
      txDataZeroGas: {
        v: 4,
        d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
      },
      txDataNonZeroGas: {
        v: 68,
        d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
      },
      copyGas: {
        v: 3,
        d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
      },
      ecrecoverGas: {
        v: 3e3,
        d: ""
      },
      sha256Gas: {
        v: 60,
        d: ""
      },
      sha256WordGas: {
        v: 12,
        d: ""
      },
      ripemd160Gas: {
        v: 600,
        d: ""
      },
      ripemd160WordGas: {
        v: 120,
        d: ""
      },
      identityGas: {
        v: 15,
        d: ""
      },
      identityWordGas: {
        v: 3,
        d: ""
      },
      minerReward: {
        v: "5000000000000000000",
        d: "the amount a miner get rewarded for mining a block"
      },
      ommerReward: {
        v: "625000000000000000",
        d: "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
      },
      niblingReward: {
        v: "156250000000000000",
        d: "the amount a miner gets for inculding a uncle"
      },
      homeSteadForkNumber: {
        v: 115e4,
        d: "the block that the Homestead fork started at"
      },
      homesteadRepriceForkNumber: {
        v: 2463e3,
        d: "the block that the Homestead Reprice (EIP150) fork started at"
      },
      timebombPeriod: {
        v: 1e5,
        d: "Exponential difficulty timebomb period"
      },
      freeBlockPeriod: {
        v: 2
      }
    };
  }
});

// node_modules/ethereumjs-tx/es5/index.js
var require_es5 = __commonJS({
  "node_modules/ethereumjs-tx/es5/index.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var ethUtil = require_dist4();
    var fees = require_params();
    var BN3 = ethUtil.BN;
    var N_DIV_2 = new BN3("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
    var Transaction = function() {
      function Transaction2(data) {
        _classCallCheck(this, Transaction2);
        data = data || {};
        var fields = [{
          name: "nonce",
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: "gasPrice",
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: "gasLimit",
          alias: "gas",
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: "to",
          allowZero: true,
          length: 20,
          default: new Buffer([])
        }, {
          name: "value",
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: "data",
          alias: "input",
          allowZero: true,
          default: new Buffer([])
        }, {
          name: "v",
          allowZero: true,
          default: new Buffer([28])
        }, {
          name: "r",
          length: 32,
          allowZero: true,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: "s",
          length: 32,
          allowZero: true,
          allowLess: true,
          default: new Buffer([])
        }];
        ethUtil.defineProperties(this, fields, data);
        Object.defineProperty(this, "from", {
          enumerable: true,
          configurable: true,
          get: this.getSenderAddress.bind(this)
        });
        var sigV = ethUtil.bufferToInt(this.v);
        var chainId = Math.floor((sigV - 35) / 2);
        if (chainId < 0)
          chainId = 0;
        this._chainId = chainId || data.chainId || 0;
        this._homestead = true;
      }
      Transaction2.prototype.toCreationAddress = function toCreationAddress() {
        return this.to.toString("hex") === "";
      };
      Transaction2.prototype.hash = function hash3(includeSignature) {
        if (includeSignature === void 0)
          includeSignature = true;
        var items = void 0;
        if (includeSignature) {
          items = this.raw;
        } else {
          if (this._chainId > 0) {
            var raw = this.raw.slice();
            this.v = this._chainId;
            this.r = 0;
            this.s = 0;
            items = this.raw;
            this.raw = raw;
          } else {
            items = this.raw.slice(0, 6);
          }
        }
        return ethUtil.rlphash(items);
      };
      Transaction2.prototype.getChainId = function getChainId() {
        return this._chainId;
      };
      Transaction2.prototype.getSenderAddress = function getSenderAddress() {
        if (this._from) {
          return this._from;
        }
        var pubkey = this.getSenderPublicKey();
        this._from = ethUtil.publicToAddress(pubkey);
        return this._from;
      };
      Transaction2.prototype.getSenderPublicKey = function getSenderPublicKey() {
        if (!this._senderPubKey || !this._senderPubKey.length) {
          if (!this.verifySignature())
            throw new Error("Invalid Signature");
        }
        return this._senderPubKey;
      };
      Transaction2.prototype.verifySignature = function verifySignature() {
        var msgHash = this.hash(false);
        if (this._homestead && new BN3(this.s).cmp(N_DIV_2) === 1) {
          return false;
        }
        try {
          var v4 = ethUtil.bufferToInt(this.v);
          if (this._chainId > 0) {
            v4 -= this._chainId * 2 + 8;
          }
          this._senderPubKey = ethUtil.ecrecover(msgHash, v4, this.r, this.s);
        } catch (e3) {
          return false;
        }
        return !!this._senderPubKey;
      };
      Transaction2.prototype.sign = function sign3(privateKey) {
        var msgHash = this.hash(false);
        var sig = ethUtil.ecsign(msgHash, privateKey);
        if (this._chainId > 0) {
          sig.v += this._chainId * 2 + 8;
        }
        Object.assign(this, sig);
      };
      Transaction2.prototype.getDataFee = function getDataFee() {
        var data = this.raw[5];
        var cost = new BN3(0);
        for (var i4 = 0; i4 < data.length; i4++) {
          data[i4] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
        }
        return cost;
      };
      Transaction2.prototype.getBaseFee = function getBaseFee() {
        var fee = this.getDataFee().iaddn(fees.txGas.v);
        if (this._homestead && this.toCreationAddress()) {
          fee.iaddn(fees.txCreation.v);
        }
        return fee;
      };
      Transaction2.prototype.getUpfrontCost = function getUpfrontCost() {
        return new BN3(this.gasLimit).imul(new BN3(this.gasPrice)).iadd(new BN3(this.value));
      };
      Transaction2.prototype.validate = function validate5(stringError) {
        var errors = [];
        if (!this.verifySignature()) {
          errors.push("Invalid Signature");
        }
        if (this.getBaseFee().cmp(new BN3(this.gasLimit)) > 0) {
          errors.push(["gas limit is too low. Need at least " + this.getBaseFee()]);
        }
        if (stringError === void 0 || stringError === false) {
          return errors.length === 0;
        } else {
          return errors.join(" ");
        }
      };
      return Transaction2;
    }();
    module.exports = Transaction;
  }
});

// node_modules/web3-provider-engine/subproviders/nonce-tracker.js
var require_nonce_tracker = __commonJS({
  "node_modules/web3-provider-engine/subproviders/nonce-tracker.js"(exports, module) {
    var inherits = require_util().inherits;
    var Transaction = require_es5();
    var ethUtil = require_dist4();
    var Subprovider = require_subprovider();
    var blockTagForPayload = require_rpc_cache_utils().blockTagForPayload;
    module.exports = NonceTrackerSubprovider;
    inherits(NonceTrackerSubprovider, Subprovider);
    function NonceTrackerSubprovider(opts) {
      const self2 = this;
      self2.nonceCache = {};
    }
    NonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end) {
      const self2 = this;
      switch (payload.method) {
        case "eth_getTransactionCount":
          var blockTag = blockTagForPayload(payload);
          var address = payload.params[0].toLowerCase();
          var cachedResult = self2.nonceCache[address];
          if (blockTag === "pending") {
            if (cachedResult) {
              end(null, cachedResult);
            } else {
              next(function(err, result, cb) {
                if (err)
                  return cb();
                if (self2.nonceCache[address] === void 0) {
                  self2.nonceCache[address] = result;
                }
                cb();
              });
            }
          } else {
            next();
          }
          return;
        case "eth_sendRawTransaction":
          next(function(err, result, cb) {
            if (err)
              return cb();
            var rawTx = payload.params[0];
            var stripped = ethUtil.stripHexPrefix(rawTx);
            var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), "hex");
            var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), "hex"));
            var address2 = "0x" + tx.getSenderAddress().toString("hex").toLowerCase();
            var nonce = ethUtil.bufferToInt(tx.nonce);
            nonce++;
            var hexNonce = nonce.toString(16);
            if (hexNonce.length % 2)
              hexNonce = "0" + hexNonce;
            hexNonce = "0x" + hexNonce;
            self2.nonceCache[address2] = hexNonce;
            cb();
          });
          return;
        case "evm_revert":
          self2.nonceCache = {};
          next();
          return;
        default:
          next();
          return;
      }
    };
  }
});

// node_modules/eth-json-rpc-filters/subscriptionManager.js
var require_subscriptionManager = __commonJS({
  "node_modules/eth-json-rpc-filters/subscriptionManager.js"(exports, module) {
    var SafeEventEmitter2 = require_safe_event_emitter().default;
    var createScaffoldMiddleware = require_scaffold();
    var { createAsyncMiddleware } = require_dist6();
    var createFilterMiddleware = require_eth_json_rpc_filters();
    var { unsafeRandomBytes, incrementHexInt } = require_hexUtils();
    var getBlocksForRange = require_getBlocksForRange();
    module.exports = createSubscriptionMiddleware;
    function createSubscriptionMiddleware({ blockTracker, provider }) {
      const subscriptions = {};
      const filterManager = createFilterMiddleware({ blockTracker, provider });
      let isDestroyed = false;
      const events = new SafeEventEmitter2();
      const middleware = createScaffoldMiddleware({
        eth_subscribe: createAsyncMiddleware(subscribe),
        eth_unsubscribe: createAsyncMiddleware(unsubscribe)
      });
      middleware.destroy = destroy;
      return { events, middleware };
      async function subscribe(req, res) {
        if (isDestroyed)
          throw new Error("SubscriptionManager - attempting to use after destroying");
        const subscriptionType = req.params[0];
        const subId = unsafeRandomBytes(16);
        let sub;
        switch (subscriptionType) {
          case "newHeads":
            sub = createSubNewHeads({ subId });
            break;
          case "logs":
            const filterParams = req.params[1];
            const filter = await filterManager.newLogFilter(filterParams);
            sub = createSubFromFilter({ subId, filter });
            break;
          default:
            throw new Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`);
        }
        subscriptions[subId] = sub;
        res.result = subId;
        return;
        function createSubNewHeads({ subId: subId2 }) {
          const sub2 = {
            type: subscriptionType,
            destroy: async () => {
              blockTracker.removeListener("sync", sub2.update);
            },
            update: async ({ oldBlock, newBlock }) => {
              const toBlock = newBlock;
              const fromBlock = incrementHexInt(oldBlock);
              const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock });
              const results2 = rawBlocks.map(normalizeBlock);
              results2.forEach((value) => {
                _emitSubscriptionResult(subId2, value);
              });
            }
          };
          blockTracker.on("sync", sub2.update);
          return sub2;
        }
        function createSubFromFilter({ subId: subId2, filter }) {
          filter.on("update", (result) => _emitSubscriptionResult(subId2, result));
          const sub2 = {
            type: subscriptionType,
            destroy: async () => {
              return await filterManager.uninstallFilter(filter.idHex);
            }
          };
          return sub2;
        }
      }
      async function unsubscribe(req, res) {
        if (isDestroyed)
          throw new Error("SubscriptionManager - attempting to use after destroying");
        const id2 = req.params[0];
        const subscription = subscriptions[id2];
        if (!subscription) {
          res.result = false;
          return;
        }
        delete subscriptions[id2];
        await subscription.destroy();
        res.result = true;
      }
      function _emitSubscriptionResult(filterIdHex, value) {
        events.emit("notification", {
          jsonrpc: "2.0",
          method: "eth_subscription",
          params: {
            subscription: filterIdHex,
            result: value
          }
        });
      }
      function destroy() {
        events.removeAllListeners();
        for (const id2 in subscriptions) {
          subscriptions[id2].destroy();
          delete subscriptions[id2];
        }
        isDestroyed = true;
      }
    }
    function normalizeBlock(block) {
      return {
        hash: block.hash,
        parentHash: block.parentHash,
        sha3Uncles: block.sha3Uncles,
        miner: block.miner,
        stateRoot: block.stateRoot,
        transactionsRoot: block.transactionsRoot,
        receiptsRoot: block.receiptsRoot,
        logsBloom: block.logsBloom,
        difficulty: block.difficulty,
        number: block.number,
        gasLimit: block.gasLimit,
        gasUsed: block.gasUsed,
        nonce: block.nonce,
        mixHash: block.mixHash,
        timestamp: block.timestamp,
        extraData: block.extraData
      };
    }
  }
});

// node_modules/web3-provider-engine/subproviders/subscriptions.js
var require_subscriptions = __commonJS({
  "node_modules/web3-provider-engine/subproviders/subscriptions.js"(exports, module) {
    var ProviderSubprovider = require_json_rpc_engine_middleware();
    var createSubscriptionManager = require_subscriptionManager();
    var SubscriptionsSubprovider2 = class extends ProviderSubprovider {
      constructor() {
        super(({ blockTracker, provider, engine }) => {
          const { events, middleware } = createSubscriptionManager({ blockTracker, provider });
          events.on("notification", (data) => engine.emit("data", null, data));
          return middleware;
        });
      }
    };
    module.exports = SubscriptionsSubprovider2;
  }
});

// node_modules/@walletconnect/web3-provider/dist/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
  default: () => esm_default3
});
var import_qrcode_modal, ProviderEngine, CacheSubprovider, FixtureSubprovider, FilterSubprovider, HookedWalletSubprovider, NonceSubprovider, SubscriptionsSubprovider, WalletConnectProvider, esm_default3;
var init_esm5 = __esm({
  "node_modules/@walletconnect/web3-provider/dist/esm/index.js"() {
    init_esm3();
    import_qrcode_modal = __toESM(require_cjs());
    init_esm4();
    init_esm2();
    ProviderEngine = require_web3_provider_engine();
    CacheSubprovider = require_cache();
    FixtureSubprovider = require_fixture();
    FilterSubprovider = require_filters();
    HookedWalletSubprovider = require_hooked_wallet();
    NonceSubprovider = require_nonce_tracker();
    SubscriptionsSubprovider = require_subscriptions();
    WalletConnectProvider = class extends ProviderEngine {
      constructor(opts) {
        super({ pollingInterval: opts.pollingInterval || 8e3 });
        this.bridge = "https://bridge.walletconnect.org";
        this.qrcode = true;
        this.qrcodeModal = import_qrcode_modal.default;
        this.qrcodeModalOptions = void 0;
        this.rpc = null;
        this.infuraId = "";
        this.http = null;
        this.isConnecting = false;
        this.connected = false;
        this.connectCallbacks = [];
        this.accounts = [];
        this.chainId = 1;
        this.rpcUrl = "";
        this.enable = async () => {
          const wc = await this.getWalletConnector();
          if (wc) {
            this.start();
            this.subscribeWalletConnector();
            return wc.accounts;
          } else {
            throw new Error("Failed to connect to WalleConnect");
          }
        };
        this.request = async (payload) => {
          return this.send(payload);
        };
        this.send = async (payload, callback) => {
          if (typeof payload === "string") {
            const method = payload;
            let params = callback;
            if (method === "personal_sign") {
              params = parsePersonalSign(params);
            }
            return this.sendAsyncPromise(method, params);
          }
          payload = Object.assign({ id: payloadId(), jsonrpc: "2.0" }, payload);
          if (payload.method === "personal_sign") {
            payload.params = parsePersonalSign(payload.params);
          }
          if (callback) {
            this.sendAsync(payload, callback);
            return;
          }
          return this.sendAsyncPromise(payload.method, payload.params);
        };
        this.onConnect = (callback) => {
          this.connectCallbacks.push(callback);
        };
        this.triggerConnect = (result) => {
          if (this.connectCallbacks && this.connectCallbacks.length) {
            this.connectCallbacks.forEach((callback) => callback(result));
          }
        };
        this.bridge = opts.connector ? opts.connector.bridge : opts.bridge || "https://bridge.walletconnect.org";
        this.qrcode = typeof opts.qrcode === "undefined" || opts.qrcode !== false;
        this.qrcodeModal = opts.qrcodeModal || this.qrcodeModal;
        this.qrcodeModalOptions = opts.qrcodeModalOptions;
        this.wc = opts.connector || new esm_default({
          bridge: this.bridge,
          qrcodeModal: this.qrcode ? this.qrcodeModal : void 0,
          qrcodeModalOptions: this.qrcodeModalOptions,
          storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,
          signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,
          clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta
        });
        this.rpc = opts.rpc || null;
        if (!this.rpc && (!opts.infuraId || typeof opts.infuraId !== "string" || !opts.infuraId.trim())) {
          throw new Error("Missing one of the required parameters: rpc or infuraId");
        }
        this.infuraId = opts.infuraId || "";
        this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;
        this.initialize();
      }
      get isWalletConnect() {
        return true;
      }
      get connector() {
        return this.wc;
      }
      get walletMeta() {
        return this.wc.peerMeta;
      }
      async disconnect() {
        this.close();
      }
      async close() {
        const wc = await this.getWalletConnector({ disableSessionCreation: true });
        await wc.killSession();
        await this.onDisconnect();
      }
      async handleRequest(payload) {
        try {
          let response;
          let result = null;
          const wc = await this.getWalletConnector();
          switch (payload.method) {
            case "wc_killSession":
              await this.close();
              result = null;
              break;
            case "eth_accounts":
              result = wc.accounts;
              break;
            case "eth_coinbase":
              result = wc.accounts[0];
              break;
            case "eth_chainId":
              result = wc.chainId;
              break;
            case "net_version":
              result = wc.chainId;
              break;
            case "eth_uninstallFilter":
              this.sendAsync(payload, (_5) => _5);
              result = true;
              break;
            default:
              response = await this.handleOtherRequests(payload);
          }
          if (response) {
            return response;
          }
          return this.formatResponse(payload, result);
        } catch (error) {
          this.emit("error", error);
          throw error;
        }
      }
      async handleOtherRequests(payload) {
        if (!signingMethods.includes(payload.method) && payload.method.startsWith("eth_")) {
          return this.handleReadRequests(payload);
        }
        const wc = await this.getWalletConnector();
        const result = await wc.sendCustomRequest(payload);
        return this.formatResponse(payload, result);
      }
      async handleReadRequests(payload) {
        if (!this.http) {
          const error = new Error("HTTP Connection not available");
          this.emit("error", error);
          throw error;
        }
        return this.http.send(payload);
      }
      formatResponse(payload, result) {
        return {
          id: payload.id,
          jsonrpc: payload.jsonrpc,
          result
        };
      }
      getWalletConnector(opts = {}) {
        const { disableSessionCreation = false } = opts;
        return new Promise((resolve, reject) => {
          const wc = this.wc;
          if (this.isConnecting) {
            this.onConnect((x4) => resolve(x4));
          } else if (!wc.connected && !disableSessionCreation) {
            this.isConnecting = true;
            wc.on("modal_closed", () => {
              reject(new Error("User closed modal"));
            });
            wc.createSession({ chainId: this.chainId }).then(() => {
              wc.on("connect", (error, payload) => {
                if (error) {
                  this.isConnecting = false;
                  return reject(error);
                }
                this.isConnecting = false;
                this.connected = true;
                if (payload) {
                  this.updateState(payload.params[0]);
                }
                this.emit("connect");
                this.triggerConnect(wc);
                resolve(wc);
              });
            }).catch((error) => {
              this.isConnecting = false;
              reject(error);
            });
          } else {
            if (!this.connected) {
              this.connected = true;
              this.updateState(wc.session);
            }
            resolve(wc);
          }
        });
      }
      async subscribeWalletConnector() {
        const wc = await this.getWalletConnector();
        wc.on("disconnect", (error) => {
          if (error) {
            this.emit("error", error);
            return;
          }
          this.onDisconnect();
        });
        wc.on("session_update", (error, payload) => {
          if (error) {
            this.emit("error", error);
            return;
          }
          this.updateState(payload.params[0]);
        });
      }
      async onDisconnect() {
        await this.stop();
        this.emit("close", 1e3, "Connection closed");
        this.emit("disconnect", 1e3, "Connection disconnected");
        this.connected = false;
      }
      async updateState(sessionParams) {
        const { accounts, chainId, networkId, rpcUrl } = sessionParams;
        if (!this.accounts || accounts && this.accounts !== accounts) {
          this.accounts = accounts;
          this.emit("accountsChanged", accounts);
        }
        if (!this.chainId || chainId && this.chainId !== chainId) {
          this.chainId = chainId;
          this.emit("chainChanged", chainId);
        }
        if (!this.networkId || networkId && this.networkId !== networkId) {
          this.networkId = networkId;
          this.emit("networkChanged", networkId);
        }
        this.updateRpcUrl(this.chainId, rpcUrl || "");
      }
      updateRpcUrl(chainId, rpcUrl = "") {
        const rpc = { infuraId: this.infuraId, custom: this.rpc || void 0 };
        rpcUrl = rpcUrl || getRpcUrl(chainId, rpc);
        if (rpcUrl) {
          this.rpcUrl = rpcUrl;
          this.updateHttpConnection();
        } else {
          this.emit("error", new Error(`No RPC Url available for chainId: ${chainId}`));
        }
      }
      updateHttpConnection() {
        if (this.rpcUrl) {
          this.http = new esm_default2(this.rpcUrl);
          this.http.on("payload", (payload) => this.emit("payload", payload));
          this.http.on("error", (error) => this.emit("error", error));
        }
      }
      sendAsyncPromise(method, params) {
        return new Promise((resolve, reject) => {
          this.sendAsync({
            id: payloadId(),
            jsonrpc: "2.0",
            method,
            params: params || []
          }, (error, response) => {
            if (error) {
              reject(error);
              return;
            }
            resolve(response.result);
          });
        });
      }
      initialize() {
        this.updateRpcUrl(this.chainId);
        this.addProvider(new FixtureSubprovider({
          eth_hashrate: "0x00",
          eth_mining: false,
          eth_syncing: true,
          net_listening: true,
          web3_clientVersion: `WalletConnect/v1.x.x/javascript`
        }));
        this.addProvider(new CacheSubprovider());
        this.addProvider(new SubscriptionsSubprovider());
        this.addProvider(new FilterSubprovider());
        this.addProvider(new NonceSubprovider());
        this.addProvider(new HookedWalletSubprovider(this.configWallet()));
        this.addProvider({
          handleRequest: async (payload, next, end) => {
            try {
              const { error, result } = await this.handleRequest(payload);
              end(error, result);
            } catch (error) {
              end(error);
            }
          },
          setEngine: (_5) => _5
        });
      }
      configWallet() {
        return {
          getAccounts: async (cb) => {
            try {
              const wc = await this.getWalletConnector();
              const accounts = wc.accounts;
              if (accounts && accounts.length) {
                cb(null, accounts);
              } else {
                cb(new Error("Failed to get accounts"));
              }
            } catch (error) {
              cb(error);
            }
          },
          processMessage: async (msgParams, cb) => {
            try {
              const wc = await this.getWalletConnector();
              const result = await wc.signMessage([msgParams.from, msgParams.data]);
              cb(null, result);
            } catch (error) {
              cb(error);
            }
          },
          processPersonalMessage: async (msgParams, cb) => {
            try {
              const wc = await this.getWalletConnector();
              const result = await wc.signPersonalMessage([msgParams.data, msgParams.from]);
              cb(null, result);
            } catch (error) {
              cb(error);
            }
          },
          processSignTransaction: async (txParams, cb) => {
            try {
              const wc = await this.getWalletConnector();
              const result = await wc.signTransaction(txParams);
              cb(null, result);
            } catch (error) {
              cb(error);
            }
          },
          processTransaction: async (txParams, cb) => {
            try {
              const wc = await this.getWalletConnector();
              const result = await wc.sendTransaction(txParams);
              cb(null, result);
            } catch (error) {
              cb(error);
            }
          },
          processTypedMessage: async (msgParams, cb) => {
            try {
              const wc = await this.getWalletConnector();
              const result = await wc.signTypedData([msgParams.from, msgParams.data]);
              cb(null, result);
            } catch (error) {
              cb(error);
            }
          }
        };
      }
    };
    esm_default3 = WalletConnectProvider;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/WalletConnectWeb3Connector.js
var require_WalletConnectWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/WalletConnectWeb3Connector.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.WalletConnectEvent = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _concat = _interopRequireDefault(require_concat4());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _events = require_events2();
    var _MoralisRpcs = require_MoralisRpcs();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var WalletConnectEvent = (0, _freeze.default)({
      ACCOUNTS_CHANGED: "accountsChanged",
      CHAIN_CHANGED: "chainChanged",
      DISCONNECT: "disconnect"
    });
    exports.WalletConnectEvent = WalletConnectEvent;
    var WalletConnectWeb3Connector = function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(WalletConnectWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(WalletConnectWeb3Connector2);
      function WalletConnectWeb3Connector2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, WalletConnectWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "WalletConnect");
        return _this;
      }
      (0, _createClass2.default)(WalletConnectWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
            var _ref, providedChainId, mobileLinks, newSession, WalletConnectProvider2, config, _require, _window, _window$WalletConnect, accounts, account, chainId, verifiedChainId, _args = arguments;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _ref = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {}, providedChainId = _ref.chainId, mobileLinks = _ref.mobileLinks, newSession = _ref.newSession;
                    if (newSession) {
                      this.cleanup();
                    }
                    if (this.provider) {
                      _context2.next = 9;
                      break;
                    }
                    config = {
                      rpc: (0, _MoralisRpcs.getMoralisRpcs)("WalletConnect"),
                      chainId: providedChainId,
                      qrcodeModalOptions: {
                        mobileLinks
                      }
                    };
                    try {
                      WalletConnectProvider2 = (_require = (init_esm5(), __toCommonJS(esm_exports2))) === null || _require === void 0 ? void 0 : _require.default;
                    } catch (error) {
                    }
                    if (!WalletConnectProvider2) {
                      WalletConnectProvider2 = (_window = window) === null || _window === void 0 ? void 0 : (_window$WalletConnect = _window.WalletConnectProvider) === null || _window$WalletConnect === void 0 ? void 0 : _window$WalletConnect.default;
                    }
                    if (WalletConnectProvider2) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error('Cannot enable via WalletConnect: dependency "@walletconnect/web3-provider" is missing');
                  case 8:
                    if (typeof WalletConnectProvider2 === "function") {
                      this.provider = new WalletConnectProvider2(config);
                    } else {
                      this.provider = new window.WalletConnectProvider(config);
                    }
                  case 9:
                    if (this.provider) {
                      _context2.next = 11;
                      break;
                    }
                    throw new Error("Could not connect via WalletConnect, error in connecting to provider");
                  case 11:
                    _context2.next = 13;
                    return this.provider.enable();
                  case 13:
                    accounts = _context2.sent;
                    account = accounts[0].toLowerCase();
                    chainId = this.provider.chainId;
                    verifiedChainId = (0, _verifyChainId.default)(chainId);
                    this.account = account;
                    this.chainId = verifiedChainId;
                    this.subscribeToEvents(this.provider);
                    return _context2.abrupt("return", {
                      provider: this.provider,
                      account,
                      chainId: verifiedChainId
                    });
                  case 21:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "cleanup",
        value: function() {
          try {
            if (window) {
              window.localStorage.removeItem("walletconnect");
            }
          } catch (error) {
          }
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.unsubscribeToEvents(this.provider);
                    if (!this.provider) {
                      _context3.next = 9;
                      break;
                    }
                    _context3.prev = 2;
                    _context3.next = 5;
                    return this.provider.close();
                  case 5:
                    _context3.next = 9;
                    break;
                  case 7:
                    _context3.prev = 7;
                    _context3.t0 = _context3["catch"](2);
                  case 9:
                    this.account = null;
                    this.chainId = null;
                    this.provider = null;
                  case 12:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 7]]);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return WalletConnectWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = WalletConnectWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/InjectedWeb3Connector.js
var require_InjectedWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/InjectedWeb3Connector.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.InjectedEvents = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _concat = _interopRequireDefault(require_concat4());
    var _promise = _interopRequireDefault(require_promise3());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _events = _interopRequireDefault(require_events());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var InjectedEvents = (0, _freeze.default)({
      ACCOUNTS_CHANGED: "accountsChanged",
      CHAIN_CHANGED: "chainChanged",
      CONNECT: "connect",
      DISCONNECT: "disconnect"
    });
    exports.InjectedEvents = InjectedEvents;
    var NoEthereumProviderError = function(_Error) {
      (0, _inherits2.default)(NoEthereumProviderError2, _Error);
      var _super = _createSuper(NoEthereumProviderError2);
      function NoEthereumProviderError2() {
        var _this;
        (0, _classCallCheck2.default)(this, NoEthereumProviderError2);
        _this = _super.call(this);
        _this.message = "Non ethereum enabled browser";
        return _this;
      }
      return (0, _createClass2.default)(NoEthereumProviderError2);
    }((0, _wrapNativeSuper2.default)(Error));
    var InjectedWeb3Connector = function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(InjectedWeb3Connector2, _AbstractWeb3Connecto);
      var _super2 = _createSuper(InjectedWeb3Connector2);
      function InjectedWeb3Connector2() {
        var _context;
        var _this2;
        (0, _classCallCheck2.default)(this, InjectedWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "type", "injected");
        return _this2;
      }
      (0, _createClass2.default)(InjectedWeb3Connector2, [{
        key: "verifyEthereumBrowser",
        value: function() {
          var _window;
          if (!((_window = window) !== null && _window !== void 0 && _window.ethereum)) {
            throw new NoEthereumProviderError();
          }
        }
      }, {
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
            var _yield$Promise$all, _yield$Promise$all2, accounts, chainId, account, provider;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    _context2.next = 3;
                    return _promise.default.all([window.ethereum.request({
                      method: "eth_requestAccounts"
                    }), window.ethereum.request({
                      method: "eth_chainId"
                    })]);
                  case 3:
                    _yield$Promise$all = _context2.sent;
                    _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
                    accounts = _yield$Promise$all2[0];
                    chainId = _yield$Promise$all2[1];
                    account = accounts[0] ? accounts[0].toLowerCase() : null;
                    provider = window.ethereum;
                    this.chainId = chainId;
                    this.account = account;
                    this.provider = provider;
                    this.subscribeToEvents(provider);
                    return _context2.abrupt("return", {
                      provider,
                      chainId,
                      account
                    });
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "switchNetwork",
        value: function() {
          var _switchNetwork = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(chainId) {
            var currentNetwork;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    chainId = (0, _verifyChainId.default)(chainId);
                    currentNetwork = this.chainId;
                    if (!(currentNetwork === chainId)) {
                      _context3.next = 5;
                      break;
                    }
                    return _context3.abrupt("return");
                  case 5:
                    _context3.next = 7;
                    return window.ethereum.request({
                      method: "wallet_switchEthereumChain",
                      params: [{
                        chainId
                      }]
                    });
                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _switchNetwork.apply(this, arguments);
          };
        }()
      }, {
        key: "addNetwork",
        value: function() {
          var _addNetwork = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(chainId, chainName, currencyName, currencySymbol, rpcUrl, blockExplorerUrl) {
            var newchainId;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    newchainId = (0, _verifyChainId.default)(chainId);
                    _context4.next = 4;
                    return window.ethereum.request({
                      method: "wallet_addEthereumChain",
                      params: [{
                        chainId: newchainId,
                        chainName,
                        nativeCurrency: {
                          name: currencyName,
                          symbol: currencySymbol,
                          decimals: 18
                        },
                        rpcUrls: [rpcUrl],
                        blockExplorerUrls: blockExplorerUrl ? [blockExplorerUrl] : null
                      }]
                    });
                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee3, this);
          }));
          return function() {
            return _addNetwork.apply(this, arguments);
          };
        }()
      }]);
      return InjectedWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = InjectedWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/native-url.js
var require_native_url = __commonJS({
  "node_modules/core-js-pure/internals/native-url.js"(exports, module) {
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = !fails(function() {
      var url = new URL("b?a=1&b=2&c=3", "http://a");
      var searchParams = url.searchParams;
      var result = "";
      url.pathname = "c%20d";
      searchParams.forEach(function(value, key2) {
        searchParams["delete"]("b");
        result += key2 + value;
      });
      return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("http://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
    });
  }
});

// node_modules/core-js-pure/internals/define-built-in-accessor.js
var require_define_built_in_accessor = __commonJS({
  "node_modules/core-js-pure/internals/define-built-in-accessor.js"(exports, module) {
    var defineProperty = require_object_define_property();
    module.exports = function(target, name2, descriptor) {
      return defineProperty.f(target, name2, descriptor);
    };
  }
});

// node_modules/core-js-pure/internals/object-assign.js
var require_object_assign = __commonJS({
  "node_modules/core-js-pure/internals/object-assign.js"(exports, module) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var uncurryThis = require_function_uncurry_this();
    var call = require_function_call();
    var fails = require_fails();
    var objectKeys = require_object_keys();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var $assign = Object.assign;
    var defineProperty = Object.defineProperty;
    var concat2 = uncurryThis([].concat);
    module.exports = !$assign || fails(function() {
      if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, "a", {
        enumerable: true,
        get: function() {
          defineProperty(this, "b", {
            value: 3,
            enumerable: false
          });
        }
      }), { b: 2 })).b !== 1)
        return true;
      var A5 = {};
      var B3 = {};
      var symbol = Symbol();
      var alphabet = "abcdefghijklmnopqrst";
      A5[symbol] = 7;
      alphabet.split("").forEach(function(chr) {
        B3[chr] = chr;
      });
      return $assign({}, A5)[symbol] != 7 || objectKeys($assign({}, B3)).join("") != alphabet;
    }) ? function assign(target, source) {
      var T4 = toObject(target);
      var argumentsLength = arguments.length;
      var index = 1;
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      var propertyIsEnumerable = propertyIsEnumerableModule.f;
      while (argumentsLength > index) {
        var S3 = IndexedObject(arguments[index++]);
        var keys = getOwnPropertySymbols ? concat2(objectKeys(S3), getOwnPropertySymbols(S3)) : objectKeys(S3);
        var length = keys.length;
        var j4 = 0;
        var key2;
        while (length > j4) {
          key2 = keys[j4++];
          if (!DESCRIPTORS || call(propertyIsEnumerable, S3, key2))
            T4[key2] = S3[key2];
        }
      }
      return T4;
    } : $assign;
  }
});

// node_modules/core-js-pure/internals/string-punycode-to-ascii.js
var require_string_punycode_to_ascii = __commonJS({
  "node_modules/core-js-pure/internals/string-punycode-to-ascii.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var maxInt = 2147483647;
    var base2 = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexNonASCII = /[^\0-\u007E]/;
    var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
    var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
    var baseMinusTMin = base2 - tMin;
    var $RangeError = RangeError;
    var exec = uncurryThis(regexSeparators.exec);
    var floor = Math.floor;
    var fromCharCode = String.fromCharCode;
    var charCodeAt = uncurryThis("".charCodeAt);
    var join = uncurryThis([].join);
    var push = uncurryThis([].push);
    var replace = uncurryThis("".replace);
    var split = uncurryThis("".split);
    var toLowerCase = uncurryThis("".toLowerCase);
    var ucs2decode = function(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var value = charCodeAt(string, counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          var extra = charCodeAt(string, counter++);
          if ((extra & 64512) == 56320) {
            push(output, ((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            push(output, value);
            counter--;
          }
        } else {
          push(output, value);
        }
      }
      return output;
    };
    var digitToBasic = function(digit) {
      return digit + 22 + 75 * (digit < 26);
    };
    var adapt = function(delta, numPoints, firstTime) {
      var k4 = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      while (delta > baseMinusTMin * tMax >> 1) {
        delta = floor(delta / baseMinusTMin);
        k4 += base2;
      }
      return floor(k4 + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var encode4 = function(input) {
      var output = [];
      input = ucs2decode(input);
      var inputLength = input.length;
      var n3 = initialN;
      var delta = 0;
      var bias = initialBias;
      var i4, currentValue;
      for (i4 = 0; i4 < input.length; i4++) {
        currentValue = input[i4];
        if (currentValue < 128) {
          push(output, fromCharCode(currentValue));
        }
      }
      var basicLength = output.length;
      var handledCPCount = basicLength;
      if (basicLength) {
        push(output, delimiter);
      }
      while (handledCPCount < inputLength) {
        var m3 = maxInt;
        for (i4 = 0; i4 < input.length; i4++) {
          currentValue = input[i4];
          if (currentValue >= n3 && currentValue < m3) {
            m3 = currentValue;
          }
        }
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m3 - n3 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          throw $RangeError(OVERFLOW_ERROR);
        }
        delta += (m3 - n3) * handledCPCountPlusOne;
        n3 = m3;
        for (i4 = 0; i4 < input.length; i4++) {
          currentValue = input[i4];
          if (currentValue < n3 && ++delta > maxInt) {
            throw $RangeError(OVERFLOW_ERROR);
          }
          if (currentValue == n3) {
            var q4 = delta;
            var k4 = base2;
            while (true) {
              var t4 = k4 <= bias ? tMin : k4 >= bias + tMax ? tMax : k4 - bias;
              if (q4 < t4)
                break;
              var qMinusT = q4 - t4;
              var baseMinusT = base2 - t4;
              push(output, fromCharCode(digitToBasic(t4 + qMinusT % baseMinusT)));
              q4 = floor(qMinusT / baseMinusT);
              k4 += base2;
            }
            push(output, fromCharCode(digitToBasic(q4)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            handledCPCount++;
          }
        }
        delta++;
        n3++;
      }
      return join(output, "");
    };
    module.exports = function(input) {
      var encoded = [];
      var labels = split(replace(toLowerCase(input), regexSeparators, "."), ".");
      var i4, label;
      for (i4 = 0; i4 < labels.length; i4++) {
        label = labels[i4];
        push(encoded, exec(regexNonASCII, label) ? "xn--" + encode4(label) : label);
      }
      return join(encoded, ".");
    };
  }
});

// node_modules/core-js-pure/modules/web.url-search-params.constructor.js
var require_web_url_search_params_constructor = __commonJS({
  "node_modules/core-js-pure/modules/web.url-search-params.constructor.js"(exports, module) {
    "use strict";
    require_es_array_iterator();
    var $3 = require_export();
    var global2 = require_global();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var DESCRIPTORS = require_descriptors();
    var USE_NATIVE_URL = require_native_url();
    var defineBuiltIn = require_define_built_in();
    var defineBuiltIns = require_define_built_ins();
    var setToStringTag = require_set_to_string_tag();
    var createIteratorConstructor = require_create_iterator_constructor();
    var InternalStateModule = require_internal_state();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var bind = require_function_bind_context();
    var classof = require_classof();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var $toString = require_to_string();
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var validateArgumentsLength = require_validate_arguments_length();
    var wellKnownSymbol = require_well_known_symbol();
    var arraySort = require_array_sort();
    var ITERATOR = wellKnownSymbol("iterator");
    var URL_SEARCH_PARAMS = "URLSearchParams";
    var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
    var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var safeGetBuiltIn = function(name2) {
      if (!DESCRIPTORS)
        return global2[name2];
      var descriptor = getOwnPropertyDescriptor(global2, name2);
      return descriptor && descriptor.value;
    };
    var nativeFetch = safeGetBuiltIn("fetch");
    var NativeRequest = safeGetBuiltIn("Request");
    var Headers = safeGetBuiltIn("Headers");
    var RequestPrototype = NativeRequest && NativeRequest.prototype;
    var HeadersPrototype = Headers && Headers.prototype;
    var RegExp2 = global2.RegExp;
    var TypeError2 = global2.TypeError;
    var decodeURIComponent2 = global2.decodeURIComponent;
    var encodeURIComponent2 = global2.encodeURIComponent;
    var charAt = uncurryThis("".charAt);
    var join = uncurryThis([].join);
    var push = uncurryThis([].push);
    var replace = uncurryThis("".replace);
    var shift = uncurryThis([].shift);
    var splice = uncurryThis([].splice);
    var split = uncurryThis("".split);
    var stringSlice = uncurryThis("".slice);
    var plus = /\+/g;
    var sequences = Array(4);
    var percentSequence = function(bytes) {
      return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp2("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
    };
    var percentDecode = function(sequence) {
      try {
        return decodeURIComponent2(sequence);
      } catch (error) {
        return sequence;
      }
    };
    var deserialize = function(it) {
      var result = replace(it, plus, " ");
      var bytes = 4;
      try {
        return decodeURIComponent2(result);
      } catch (error) {
        while (bytes) {
          result = replace(result, percentSequence(bytes--), percentDecode);
        }
        return result;
      }
    };
    var find = /[!'()~]|%20/g;
    var replacements = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+"
    };
    var replacer = function(match) {
      return replacements[match];
    };
    var serialize3 = function(it) {
      return replace(encodeURIComponent2(it), find, replacer);
    };
    var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
      setInternalState(this, {
        type: URL_SEARCH_PARAMS_ITERATOR,
        iterator: getIterator(getInternalParamsState(params).entries),
        kind
      });
    }, "Iterator", function next() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var step = state.iterator.next();
      var entry = step.value;
      if (!step.done) {
        step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [entry.key, entry.value];
      }
      return step;
    }, true);
    var URLSearchParamsState = function(init2) {
      this.entries = [];
      this.url = null;
      if (init2 !== void 0) {
        if (isObject(init2))
          this.parseObject(init2);
        else
          this.parseQuery(typeof init2 == "string" ? charAt(init2, 0) === "?" ? stringSlice(init2, 1) : init2 : $toString(init2));
      }
    };
    URLSearchParamsState.prototype = {
      type: URL_SEARCH_PARAMS,
      bindURL: function(url) {
        this.url = url;
        this.update();
      },
      parseObject: function(object) {
        var iteratorMethod = getIteratorMethod(object);
        var iterator, next, step, entryIterator, entryNext, first, second;
        if (iteratorMethod) {
          iterator = getIterator(object, iteratorMethod);
          next = iterator.next;
          while (!(step = call(next, iterator)).done) {
            entryIterator = getIterator(anObject(step.value));
            entryNext = entryIterator.next;
            if ((first = call(entryNext, entryIterator)).done || (second = call(entryNext, entryIterator)).done || !call(entryNext, entryIterator).done)
              throw TypeError2("Expected sequence with length 2");
            push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
          }
        } else
          for (var key2 in object)
            if (hasOwn(object, key2)) {
              push(this.entries, { key: key2, value: $toString(object[key2]) });
            }
      },
      parseQuery: function(query) {
        if (query) {
          var attributes = split(query, "&");
          var index = 0;
          var attribute, entry;
          while (index < attributes.length) {
            attribute = attributes[index++];
            if (attribute.length) {
              entry = split(attribute, "=");
              push(this.entries, {
                key: deserialize(shift(entry)),
                value: deserialize(join(entry, "="))
              });
            }
          }
        }
      },
      serialize: function() {
        var entries = this.entries;
        var result = [];
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          push(result, serialize3(entry.key) + "=" + serialize3(entry.value));
        }
        return join(result, "&");
      },
      update: function() {
        this.entries.length = 0;
        this.parseQuery(this.url.query);
      },
      updateURL: function() {
        if (this.url)
          this.url.update();
      }
    };
    var URLSearchParamsConstructor = function URLSearchParams2() {
      anInstance(this, URLSearchParamsPrototype);
      var init2 = arguments.length > 0 ? arguments[0] : void 0;
      setInternalState(this, new URLSearchParamsState(init2));
    };
    var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
    defineBuiltIns(URLSearchParamsPrototype, {
      append: function append(name2, value) {
        validateArgumentsLength(arguments.length, 2);
        var state = getInternalParamsState(this);
        push(state.entries, { key: $toString(name2), value: $toString(value) });
        state.updateURL();
      },
      "delete": function(name2) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var key2 = $toString(name2);
        var index = 0;
        while (index < entries.length) {
          if (entries[index].key === key2)
            splice(entries, index, 1);
          else
            index++;
        }
        state.updateURL();
      },
      get: function get(name2) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key2 = $toString(name2);
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key2)
            return entries[index].value;
        }
        return null;
      },
      getAll: function getAll(name2) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key2 = $toString(name2);
        var result = [];
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key2)
            push(result, entries[index].value);
        }
        return result;
      },
      has: function has(name2) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key2 = $toString(name2);
        var index = 0;
        while (index < entries.length) {
          if (entries[index++].key === key2)
            return true;
        }
        return false;
      },
      set: function set(name2, value) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var found = false;
        var key2 = $toString(name2);
        var val = $toString(value);
        var index = 0;
        var entry;
        for (; index < entries.length; index++) {
          entry = entries[index];
          if (entry.key === key2) {
            if (found)
              splice(entries, index--, 1);
            else {
              found = true;
              entry.value = val;
            }
          }
        }
        if (!found)
          push(entries, { key: key2, value: val });
        state.updateURL();
      },
      sort: function sort() {
        var state = getInternalParamsState(this);
        arraySort(state.entries, function(a4, b3) {
          return a4.key > b3.key ? 1 : -1;
        });
        state.updateURL();
      },
      forEach: function forEach(callback) {
        var entries = getInternalParamsState(this).entries;
        var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0);
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          boundFunction(entry.value, entry.key, this);
        }
      },
      keys: function keys() {
        return new URLSearchParamsIterator(this, "keys");
      },
      values: function values() {
        return new URLSearchParamsIterator(this, "values");
      },
      entries: function entries() {
        return new URLSearchParamsIterator(this, "entries");
      }
    }, { enumerable: true });
    defineBuiltIn(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: "entries" });
    defineBuiltIn(URLSearchParamsPrototype, "toString", function toString2() {
      return getInternalParamsState(this).serialize();
    }, { enumerable: true });
    setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
    $3({ global: true, constructor: true, forced: !USE_NATIVE_URL }, {
      URLSearchParams: URLSearchParamsConstructor
    });
    if (!USE_NATIVE_URL && isCallable(Headers)) {
      headersHas = uncurryThis(HeadersPrototype.has);
      headersSet = uncurryThis(HeadersPrototype.set);
      wrapRequestOptions = function(init2) {
        if (isObject(init2)) {
          var body = init2.body;
          var headers;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init2.headers ? new Headers(init2.headers) : new Headers();
            if (!headersHas(headers, "content-type")) {
              headersSet(headers, "content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
            return create(init2, {
              body: createPropertyDescriptor(0, $toString(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        return init2;
      };
      if (isCallable(nativeFetch)) {
        $3({ global: true, enumerable: true, dontCallGetSet: true, forced: true }, {
          fetch: function fetch2(input) {
            return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
          }
        });
      }
      if (isCallable(NativeRequest)) {
        RequestConstructor = function Request(input) {
          anInstance(this, RequestPrototype);
          return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
        };
        RequestPrototype.constructor = RequestConstructor;
        RequestConstructor.prototype = RequestPrototype;
        $3({ global: true, constructor: true, dontCallGetSet: true, forced: true }, {
          Request: RequestConstructor
        });
      }
    }
    var headersHas;
    var headersSet;
    var wrapRequestOptions;
    var RequestConstructor;
    module.exports = {
      URLSearchParams: URLSearchParamsConstructor,
      getState: getInternalParamsState
    };
  }
});

// node_modules/core-js-pure/modules/web.url.constructor.js
var require_web_url_constructor = __commonJS({
  "node_modules/core-js-pure/modules/web.url.constructor.js"() {
    "use strict";
    require_es_string_iterator();
    var $3 = require_export();
    var DESCRIPTORS = require_descriptors();
    var USE_NATIVE_URL = require_native_url();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var defineBuiltIn = require_define_built_in();
    var defineBuiltInAccessor = require_define_built_in_accessor();
    var anInstance = require_an_instance();
    var hasOwn = require_has_own_property();
    var assign = require_object_assign();
    var arrayFrom = require_array_from();
    var arraySlice = require_array_slice_simple();
    var codeAt = require_string_multibyte().codeAt;
    var toASCII = require_string_punycode_to_ascii();
    var $toString = require_to_string();
    var setToStringTag = require_set_to_string_tag();
    var validateArgumentsLength = require_validate_arguments_length();
    var URLSearchParamsModule = require_web_url_search_params_constructor();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var getInternalURLState = InternalStateModule.getterFor("URL");
    var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
    var getInternalSearchParamsState = URLSearchParamsModule.getState;
    var NativeURL = global2.URL;
    var TypeError2 = global2.TypeError;
    var parseInt2 = global2.parseInt;
    var floor = Math.floor;
    var pow = Math.pow;
    var charAt = uncurryThis("".charAt);
    var exec = uncurryThis(/./.exec);
    var join = uncurryThis([].join);
    var numberToString = uncurryThis(1 .toString);
    var pop = uncurryThis([].pop);
    var push = uncurryThis([].push);
    var replace = uncurryThis("".replace);
    var shift = uncurryThis([].shift);
    var split = uncurryThis("".split);
    var stringSlice = uncurryThis("".slice);
    var toLowerCase = uncurryThis("".toLowerCase);
    var unshift = uncurryThis([].unshift);
    var INVALID_AUTHORITY = "Invalid authority";
    var INVALID_SCHEME = "Invalid scheme";
    var INVALID_HOST = "Invalid host";
    var INVALID_PORT = "Invalid port";
    var ALPHA = /[a-z]/i;
    var ALPHANUMERIC = /[\d+-.a-z]/i;
    var DIGIT = /\d/;
    var HEX_START = /^0x/i;
    var OCT = /^[0-7]+$/;
    var DEC = /^\d+$/;
    var HEX = /^[\da-f]+$/i;
    var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
    var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
    var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
    var TAB_AND_NEW_LINE = /[\t\n\r]/g;
    var EOF;
    var parseIPv4 = function(input) {
      var parts = split(input, ".");
      var partsLength, numbers, index, part, radix, number, ipv4;
      if (parts.length && parts[parts.length - 1] == "") {
        parts.length--;
      }
      partsLength = parts.length;
      if (partsLength > 4)
        return input;
      numbers = [];
      for (index = 0; index < partsLength; index++) {
        part = parts[index];
        if (part == "")
          return input;
        radix = 10;
        if (part.length > 1 && charAt(part, 0) == "0") {
          radix = exec(HEX_START, part) ? 16 : 8;
          part = stringSlice(part, radix == 8 ? 1 : 2);
        }
        if (part === "") {
          number = 0;
        } else {
          if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part))
            return input;
          number = parseInt2(part, radix);
        }
        push(numbers, number);
      }
      for (index = 0; index < partsLength; index++) {
        number = numbers[index];
        if (index == partsLength - 1) {
          if (number >= pow(256, 5 - partsLength))
            return null;
        } else if (number > 255)
          return null;
      }
      ipv4 = pop(numbers);
      for (index = 0; index < numbers.length; index++) {
        ipv4 += numbers[index] * pow(256, 3 - index);
      }
      return ipv4;
    };
    var parseIPv6 = function(input) {
      var address = [0, 0, 0, 0, 0, 0, 0, 0];
      var pieceIndex = 0;
      var compress = null;
      var pointer = 0;
      var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
      var chr = function() {
        return charAt(input, pointer);
      };
      if (chr() == ":") {
        if (charAt(input, 1) != ":")
          return;
        pointer += 2;
        pieceIndex++;
        compress = pieceIndex;
      }
      while (chr()) {
        if (pieceIndex == 8)
          return;
        if (chr() == ":") {
          if (compress !== null)
            return;
          pointer++;
          pieceIndex++;
          compress = pieceIndex;
          continue;
        }
        value = length = 0;
        while (length < 4 && exec(HEX, chr())) {
          value = value * 16 + parseInt2(chr(), 16);
          pointer++;
          length++;
        }
        if (chr() == ".") {
          if (length == 0)
            return;
          pointer -= length;
          if (pieceIndex > 6)
            return;
          numbersSeen = 0;
          while (chr()) {
            ipv4Piece = null;
            if (numbersSeen > 0) {
              if (chr() == "." && numbersSeen < 4)
                pointer++;
              else
                return;
            }
            if (!exec(DIGIT, chr()))
              return;
            while (exec(DIGIT, chr())) {
              number = parseInt2(chr(), 10);
              if (ipv4Piece === null)
                ipv4Piece = number;
              else if (ipv4Piece == 0)
                return;
              else
                ipv4Piece = ipv4Piece * 10 + number;
              if (ipv4Piece > 255)
                return;
              pointer++;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            numbersSeen++;
            if (numbersSeen == 2 || numbersSeen == 4)
              pieceIndex++;
          }
          if (numbersSeen != 4)
            return;
          break;
        } else if (chr() == ":") {
          pointer++;
          if (!chr())
            return;
        } else if (chr())
          return;
        address[pieceIndex++] = value;
      }
      if (compress !== null) {
        swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex != 0 && swaps > 0) {
          swap = address[pieceIndex];
          address[pieceIndex--] = address[compress + swaps - 1];
          address[compress + --swaps] = swap;
        }
      } else if (pieceIndex != 8)
        return;
      return address;
    };
    var findLongestZeroSequence = function(ipv6) {
      var maxIndex = null;
      var maxLength = 1;
      var currStart = null;
      var currLength = 0;
      var index = 0;
      for (; index < 8; index++) {
        if (ipv6[index] !== 0) {
          if (currLength > maxLength) {
            maxIndex = currStart;
            maxLength = currLength;
          }
          currStart = null;
          currLength = 0;
        } else {
          if (currStart === null)
            currStart = index;
          ++currLength;
        }
      }
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      return maxIndex;
    };
    var serializeHost = function(host) {
      var result, index, compress, ignore0;
      if (typeof host == "number") {
        result = [];
        for (index = 0; index < 4; index++) {
          unshift(result, host % 256);
          host = floor(host / 256);
        }
        return join(result, ".");
      } else if (typeof host == "object") {
        result = "";
        compress = findLongestZeroSequence(host);
        for (index = 0; index < 8; index++) {
          if (ignore0 && host[index] === 0)
            continue;
          if (ignore0)
            ignore0 = false;
          if (compress === index) {
            result += index ? ":" : "::";
            ignore0 = true;
          } else {
            result += numberToString(host[index], 16);
            if (index < 7)
              result += ":";
          }
        }
        return "[" + result + "]";
      }
      return host;
    };
    var C0ControlPercentEncodeSet = {};
    var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
      " ": 1,
      '"': 1,
      "<": 1,
      ">": 1,
      "`": 1
    });
    var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
      "#": 1,
      "?": 1,
      "{": 1,
      "}": 1
    });
    var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
      "/": 1,
      ":": 1,
      ";": 1,
      "=": 1,
      "@": 1,
      "[": 1,
      "\\": 1,
      "]": 1,
      "^": 1,
      "|": 1
    });
    var percentEncode = function(chr, set) {
      var code = codeAt(chr, 0);
      return code > 32 && code < 127 && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
    };
    var specialSchemes = {
      ftp: 21,
      file: null,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var isWindowsDriveLetter = function(string, normalized) {
      var second;
      return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ":" || !normalized && second == "|");
    };
    var startsWithWindowsDriveLetter = function(string) {
      var third;
      return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || ((third = charAt(string, 2)) === "/" || third === "\\" || third === "?" || third === "#"));
    };
    var isSingleDot = function(segment) {
      return segment === "." || toLowerCase(segment) === "%2e";
    };
    var isDoubleDot = function(segment) {
      segment = toLowerCase(segment);
      return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
    };
    var SCHEME_START = {};
    var SCHEME = {};
    var NO_SCHEME = {};
    var SPECIAL_RELATIVE_OR_AUTHORITY = {};
    var PATH_OR_AUTHORITY = {};
    var RELATIVE = {};
    var RELATIVE_SLASH = {};
    var SPECIAL_AUTHORITY_SLASHES = {};
    var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
    var AUTHORITY = {};
    var HOST = {};
    var HOSTNAME = {};
    var PORT = {};
    var FILE = {};
    var FILE_SLASH = {};
    var FILE_HOST = {};
    var PATH_START = {};
    var PATH = {};
    var CANNOT_BE_A_BASE_URL_PATH = {};
    var QUERY = {};
    var FRAGMENT = {};
    var URLState = function(url, isBase, base2) {
      var urlString = $toString(url);
      var baseState, failure, searchParams;
      if (isBase) {
        failure = this.parse(urlString);
        if (failure)
          throw TypeError2(failure);
        this.searchParams = null;
      } else {
        if (base2 !== void 0)
          baseState = new URLState(base2, true);
        failure = this.parse(urlString, null, baseState);
        if (failure)
          throw TypeError2(failure);
        searchParams = getInternalSearchParamsState(new URLSearchParams2());
        searchParams.bindURL(this);
        this.searchParams = searchParams;
      }
    };
    URLState.prototype = {
      type: "URL",
      parse: function(input, stateOverride, base2) {
        var url = this;
        var state = stateOverride || SCHEME_START;
        var pointer = 0;
        var buffer = "";
        var seenAt = false;
        var seenBracket = false;
        var seenPasswordToken = false;
        var codePoints, chr, bufferCodePoints, failure;
        input = $toString(input);
        if (!stateOverride) {
          url.scheme = "";
          url.username = "";
          url.password = "";
          url.host = null;
          url.port = null;
          url.path = [];
          url.query = null;
          url.fragment = null;
          url.cannotBeABaseURL = false;
          input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
        }
        input = replace(input, TAB_AND_NEW_LINE, "");
        codePoints = arrayFrom(input);
        while (pointer <= codePoints.length) {
          chr = codePoints[pointer];
          switch (state) {
            case SCHEME_START:
              if (chr && exec(ALPHA, chr)) {
                buffer += toLowerCase(chr);
                state = SCHEME;
              } else if (!stateOverride) {
                state = NO_SCHEME;
                continue;
              } else
                return INVALID_SCHEME;
              break;
            case SCHEME:
              if (chr && (exec(ALPHANUMERIC, chr) || chr == "+" || chr == "-" || chr == ".")) {
                buffer += toLowerCase(chr);
              } else if (chr == ":") {
                if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == "file" && (url.includesCredentials() || url.port !== null) || url.scheme == "file" && !url.host))
                  return;
                url.scheme = buffer;
                if (stateOverride) {
                  if (url.isSpecial() && specialSchemes[url.scheme] == url.port)
                    url.port = null;
                  return;
                }
                buffer = "";
                if (url.scheme == "file") {
                  state = FILE;
                } else if (url.isSpecial() && base2 && base2.scheme == url.scheme) {
                  state = SPECIAL_RELATIVE_OR_AUTHORITY;
                } else if (url.isSpecial()) {
                  state = SPECIAL_AUTHORITY_SLASHES;
                } else if (codePoints[pointer + 1] == "/") {
                  state = PATH_OR_AUTHORITY;
                  pointer++;
                } else {
                  url.cannotBeABaseURL = true;
                  push(url.path, "");
                  state = CANNOT_BE_A_BASE_URL_PATH;
                }
              } else if (!stateOverride) {
                buffer = "";
                state = NO_SCHEME;
                pointer = 0;
                continue;
              } else
                return INVALID_SCHEME;
              break;
            case NO_SCHEME:
              if (!base2 || base2.cannotBeABaseURL && chr != "#")
                return INVALID_SCHEME;
              if (base2.cannotBeABaseURL && chr == "#") {
                url.scheme = base2.scheme;
                url.path = arraySlice(base2.path);
                url.query = base2.query;
                url.fragment = "";
                url.cannotBeABaseURL = true;
                state = FRAGMENT;
                break;
              }
              state = base2.scheme == "file" ? FILE : RELATIVE;
              continue;
            case SPECIAL_RELATIVE_OR_AUTHORITY:
              if (chr == "/" && codePoints[pointer + 1] == "/") {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                pointer++;
              } else {
                state = RELATIVE;
                continue;
              }
              break;
            case PATH_OR_AUTHORITY:
              if (chr == "/") {
                state = AUTHORITY;
                break;
              } else {
                state = PATH;
                continue;
              }
            case RELATIVE:
              url.scheme = base2.scheme;
              if (chr == EOF) {
                url.username = base2.username;
                url.password = base2.password;
                url.host = base2.host;
                url.port = base2.port;
                url.path = arraySlice(base2.path);
                url.query = base2.query;
              } else if (chr == "/" || chr == "\\" && url.isSpecial()) {
                state = RELATIVE_SLASH;
              } else if (chr == "?") {
                url.username = base2.username;
                url.password = base2.password;
                url.host = base2.host;
                url.port = base2.port;
                url.path = arraySlice(base2.path);
                url.query = "";
                state = QUERY;
              } else if (chr == "#") {
                url.username = base2.username;
                url.password = base2.password;
                url.host = base2.host;
                url.port = base2.port;
                url.path = arraySlice(base2.path);
                url.query = base2.query;
                url.fragment = "";
                state = FRAGMENT;
              } else {
                url.username = base2.username;
                url.password = base2.password;
                url.host = base2.host;
                url.port = base2.port;
                url.path = arraySlice(base2.path);
                url.path.length--;
                state = PATH;
                continue;
              }
              break;
            case RELATIVE_SLASH:
              if (url.isSpecial() && (chr == "/" || chr == "\\")) {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              } else if (chr == "/") {
                state = AUTHORITY;
              } else {
                url.username = base2.username;
                url.password = base2.password;
                url.host = base2.host;
                url.port = base2.port;
                state = PATH;
                continue;
              }
              break;
            case SPECIAL_AUTHORITY_SLASHES:
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              if (chr != "/" || charAt(buffer, pointer + 1) != "/")
                continue;
              pointer++;
              break;
            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
              if (chr != "/" && chr != "\\") {
                state = AUTHORITY;
                continue;
              }
              break;
            case AUTHORITY:
              if (chr == "@") {
                if (seenAt)
                  buffer = "%40" + buffer;
                seenAt = true;
                bufferCodePoints = arrayFrom(buffer);
                for (var i4 = 0; i4 < bufferCodePoints.length; i4++) {
                  var codePoint = bufferCodePoints[i4];
                  if (codePoint == ":" && !seenPasswordToken) {
                    seenPasswordToken = true;
                    continue;
                  }
                  var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                  if (seenPasswordToken)
                    url.password += encodedCodePoints;
                  else
                    url.username += encodedCodePoints;
                }
                buffer = "";
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                if (seenAt && buffer == "")
                  return INVALID_AUTHORITY;
                pointer -= arrayFrom(buffer).length + 1;
                buffer = "";
                state = HOST;
              } else
                buffer += chr;
              break;
            case HOST:
            case HOSTNAME:
              if (stateOverride && url.scheme == "file") {
                state = FILE_HOST;
                continue;
              } else if (chr == ":" && !seenBracket) {
                if (buffer == "")
                  return INVALID_HOST;
                failure = url.parseHost(buffer);
                if (failure)
                  return failure;
                buffer = "";
                state = PORT;
                if (stateOverride == HOSTNAME)
                  return;
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                if (url.isSpecial() && buffer == "")
                  return INVALID_HOST;
                if (stateOverride && buffer == "" && (url.includesCredentials() || url.port !== null))
                  return;
                failure = url.parseHost(buffer);
                if (failure)
                  return failure;
                buffer = "";
                state = PATH_START;
                if (stateOverride)
                  return;
                continue;
              } else {
                if (chr == "[")
                  seenBracket = true;
                else if (chr == "]")
                  seenBracket = false;
                buffer += chr;
              }
              break;
            case PORT:
              if (exec(DIGIT, chr)) {
                buffer += chr;
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial() || stateOverride) {
                if (buffer != "") {
                  var port = parseInt2(buffer, 10);
                  if (port > 65535)
                    return INVALID_PORT;
                  url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
                  buffer = "";
                }
                if (stateOverride)
                  return;
                state = PATH_START;
                continue;
              } else
                return INVALID_PORT;
              break;
            case FILE:
              url.scheme = "file";
              if (chr == "/" || chr == "\\")
                state = FILE_SLASH;
              else if (base2 && base2.scheme == "file") {
                if (chr == EOF) {
                  url.host = base2.host;
                  url.path = arraySlice(base2.path);
                  url.query = base2.query;
                } else if (chr == "?") {
                  url.host = base2.host;
                  url.path = arraySlice(base2.path);
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.host = base2.host;
                  url.path = arraySlice(base2.path);
                  url.query = base2.query;
                  url.fragment = "";
                  state = FRAGMENT;
                } else {
                  if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                    url.host = base2.host;
                    url.path = arraySlice(base2.path);
                    url.shortenPath();
                  }
                  state = PATH;
                  continue;
                }
              } else {
                state = PATH;
                continue;
              }
              break;
            case FILE_SLASH:
              if (chr == "/" || chr == "\\") {
                state = FILE_HOST;
                break;
              }
              if (base2 && base2.scheme == "file" && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                if (isWindowsDriveLetter(base2.path[0], true))
                  push(url.path, base2.path[0]);
                else
                  url.host = base2.host;
              }
              state = PATH;
              continue;
            case FILE_HOST:
              if (chr == EOF || chr == "/" || chr == "\\" || chr == "?" || chr == "#") {
                if (!stateOverride && isWindowsDriveLetter(buffer)) {
                  state = PATH;
                } else if (buffer == "") {
                  url.host = "";
                  if (stateOverride)
                    return;
                  state = PATH_START;
                } else {
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  if (url.host == "localhost")
                    url.host = "";
                  if (stateOverride)
                    return;
                  buffer = "";
                  state = PATH_START;
                }
                continue;
              } else
                buffer += chr;
              break;
            case PATH_START:
              if (url.isSpecial()) {
                state = PATH;
                if (chr != "/" && chr != "\\")
                  continue;
              } else if (!stateOverride && chr == "?") {
                url.query = "";
                state = QUERY;
              } else if (!stateOverride && chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                state = PATH;
                if (chr != "/")
                  continue;
              }
              break;
            case PATH:
              if (chr == EOF || chr == "/" || chr == "\\" && url.isSpecial() || !stateOverride && (chr == "?" || chr == "#")) {
                if (isDoubleDot(buffer)) {
                  url.shortenPath();
                  if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                    push(url.path, "");
                  }
                } else if (isSingleDot(buffer)) {
                  if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                    push(url.path, "");
                  }
                } else {
                  if (url.scheme == "file" && !url.path.length && isWindowsDriveLetter(buffer)) {
                    if (url.host)
                      url.host = "";
                    buffer = charAt(buffer, 0) + ":";
                  }
                  push(url.path, buffer);
                }
                buffer = "";
                if (url.scheme == "file" && (chr == EOF || chr == "?" || chr == "#")) {
                  while (url.path.length > 1 && url.path[0] === "") {
                    shift(url.path);
                  }
                }
                if (chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                }
              } else {
                buffer += percentEncode(chr, pathPercentEncodeSet);
              }
              break;
            case CANNOT_BE_A_BASE_URL_PATH:
              if (chr == "?") {
                url.query = "";
                state = QUERY;
              } else if (chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
              }
              break;
            case QUERY:
              if (!stateOverride && chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                if (chr == "'" && url.isSpecial())
                  url.query += "%27";
                else if (chr == "#")
                  url.query += "%23";
                else
                  url.query += percentEncode(chr, C0ControlPercentEncodeSet);
              }
              break;
            case FRAGMENT:
              if (chr != EOF)
                url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
              break;
          }
          pointer++;
        }
      },
      parseHost: function(input) {
        var result, codePoints, index;
        if (charAt(input, 0) == "[") {
          if (charAt(input, input.length - 1) != "]")
            return INVALID_HOST;
          result = parseIPv6(stringSlice(input, 1, -1));
          if (!result)
            return INVALID_HOST;
          this.host = result;
        } else if (!this.isSpecial()) {
          if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input))
            return INVALID_HOST;
          result = "";
          codePoints = arrayFrom(input);
          for (index = 0; index < codePoints.length; index++) {
            result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
          }
          this.host = result;
        } else {
          input = toASCII(input);
          if (exec(FORBIDDEN_HOST_CODE_POINT, input))
            return INVALID_HOST;
          result = parseIPv4(input);
          if (result === null)
            return INVALID_HOST;
          this.host = result;
        }
      },
      cannotHaveUsernamePasswordPort: function() {
        return !this.host || this.cannotBeABaseURL || this.scheme == "file";
      },
      includesCredentials: function() {
        return this.username != "" || this.password != "";
      },
      isSpecial: function() {
        return hasOwn(specialSchemes, this.scheme);
      },
      shortenPath: function() {
        var path = this.path;
        var pathSize = path.length;
        if (pathSize && (this.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
          path.length--;
        }
      },
      serialize: function() {
        var url = this;
        var scheme = url.scheme;
        var username = url.username;
        var password = url.password;
        var host = url.host;
        var port = url.port;
        var path = url.path;
        var query = url.query;
        var fragment = url.fragment;
        var output = scheme + ":";
        if (host !== null) {
          output += "//";
          if (url.includesCredentials()) {
            output += username + (password ? ":" + password : "") + "@";
          }
          output += serializeHost(host);
          if (port !== null)
            output += ":" + port;
        } else if (scheme == "file")
          output += "//";
        output += url.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
        if (query !== null)
          output += "?" + query;
        if (fragment !== null)
          output += "#" + fragment;
        return output;
      },
      setHref: function(href) {
        var failure = this.parse(href);
        if (failure)
          throw TypeError2(failure);
        this.searchParams.update();
      },
      getOrigin: function() {
        var scheme = this.scheme;
        var port = this.port;
        if (scheme == "blob")
          try {
            return new URLConstructor(scheme.path[0]).origin;
          } catch (error) {
            return "null";
          }
        if (scheme == "file" || !this.isSpecial())
          return "null";
        return scheme + "://" + serializeHost(this.host) + (port !== null ? ":" + port : "");
      },
      getProtocol: function() {
        return this.scheme + ":";
      },
      setProtocol: function(protocol) {
        this.parse($toString(protocol) + ":", SCHEME_START);
      },
      getUsername: function() {
        return this.username;
      },
      setUsername: function(username) {
        var codePoints = arrayFrom($toString(username));
        if (this.cannotHaveUsernamePasswordPort())
          return;
        this.username = "";
        for (var i4 = 0; i4 < codePoints.length; i4++) {
          this.username += percentEncode(codePoints[i4], userinfoPercentEncodeSet);
        }
      },
      getPassword: function() {
        return this.password;
      },
      setPassword: function(password) {
        var codePoints = arrayFrom($toString(password));
        if (this.cannotHaveUsernamePasswordPort())
          return;
        this.password = "";
        for (var i4 = 0; i4 < codePoints.length; i4++) {
          this.password += percentEncode(codePoints[i4], userinfoPercentEncodeSet);
        }
      },
      getHost: function() {
        var host = this.host;
        var port = this.port;
        return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
      },
      setHost: function(host) {
        if (this.cannotBeABaseURL)
          return;
        this.parse(host, HOST);
      },
      getHostname: function() {
        var host = this.host;
        return host === null ? "" : serializeHost(host);
      },
      setHostname: function(hostname) {
        if (this.cannotBeABaseURL)
          return;
        this.parse(hostname, HOSTNAME);
      },
      getPort: function() {
        var port = this.port;
        return port === null ? "" : $toString(port);
      },
      setPort: function(port) {
        if (this.cannotHaveUsernamePasswordPort())
          return;
        port = $toString(port);
        if (port == "")
          this.port = null;
        else
          this.parse(port, PORT);
      },
      getPathname: function() {
        var path = this.path;
        return this.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
      },
      setPathname: function(pathname) {
        if (this.cannotBeABaseURL)
          return;
        this.path = [];
        this.parse(pathname, PATH_START);
      },
      getSearch: function() {
        var query = this.query;
        return query ? "?" + query : "";
      },
      setSearch: function(search) {
        search = $toString(search);
        if (search == "") {
          this.query = null;
        } else {
          if (charAt(search, 0) == "?")
            search = stringSlice(search, 1);
          this.query = "";
          this.parse(search, QUERY);
        }
        this.searchParams.update();
      },
      getSearchParams: function() {
        return this.searchParams.facade;
      },
      getHash: function() {
        var fragment = this.fragment;
        return fragment ? "#" + fragment : "";
      },
      setHash: function(hash3) {
        hash3 = $toString(hash3);
        if (hash3 == "") {
          this.fragment = null;
          return;
        }
        if (charAt(hash3, 0) == "#")
          hash3 = stringSlice(hash3, 1);
        this.fragment = "";
        this.parse(hash3, FRAGMENT);
      },
      update: function() {
        this.query = this.searchParams.serialize() || null;
      }
    };
    var URLConstructor = function URL2(url) {
      var that = anInstance(this, URLPrototype);
      var base2 = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : void 0;
      var state = setInternalState(that, new URLState(url, false, base2));
      if (!DESCRIPTORS) {
        that.href = state.serialize();
        that.origin = state.getOrigin();
        that.protocol = state.getProtocol();
        that.username = state.getUsername();
        that.password = state.getPassword();
        that.host = state.getHost();
        that.hostname = state.getHostname();
        that.port = state.getPort();
        that.pathname = state.getPathname();
        that.search = state.getSearch();
        that.searchParams = state.getSearchParams();
        that.hash = state.getHash();
      }
    };
    var URLPrototype = URLConstructor.prototype;
    var accessorDescriptor = function(getter, setter) {
      return {
        get: function() {
          return getInternalURLState(this)[getter]();
        },
        set: setter && function(value) {
          return getInternalURLState(this)[setter](value);
        },
        configurable: true,
        enumerable: true
      };
    };
    if (DESCRIPTORS) {
      defineBuiltInAccessor(URLPrototype, "href", accessorDescriptor("serialize", "setHref"));
      defineBuiltInAccessor(URLPrototype, "origin", accessorDescriptor("getOrigin"));
      defineBuiltInAccessor(URLPrototype, "protocol", accessorDescriptor("getProtocol", "setProtocol"));
      defineBuiltInAccessor(URLPrototype, "username", accessorDescriptor("getUsername", "setUsername"));
      defineBuiltInAccessor(URLPrototype, "password", accessorDescriptor("getPassword", "setPassword"));
      defineBuiltInAccessor(URLPrototype, "host", accessorDescriptor("getHost", "setHost"));
      defineBuiltInAccessor(URLPrototype, "hostname", accessorDescriptor("getHostname", "setHostname"));
      defineBuiltInAccessor(URLPrototype, "port", accessorDescriptor("getPort", "setPort"));
      defineBuiltInAccessor(URLPrototype, "pathname", accessorDescriptor("getPathname", "setPathname"));
      defineBuiltInAccessor(URLPrototype, "search", accessorDescriptor("getSearch", "setSearch"));
      defineBuiltInAccessor(URLPrototype, "searchParams", accessorDescriptor("getSearchParams"));
      defineBuiltInAccessor(URLPrototype, "hash", accessorDescriptor("getHash", "setHash"));
    }
    defineBuiltIn(URLPrototype, "toJSON", function toJSON2() {
      return getInternalURLState(this).serialize();
    }, { enumerable: true });
    defineBuiltIn(URLPrototype, "toString", function toString2() {
      return getInternalURLState(this).serialize();
    }, { enumerable: true });
    if (NativeURL) {
      nativeCreateObjectURL = NativeURL.createObjectURL;
      nativeRevokeObjectURL = NativeURL.revokeObjectURL;
      if (nativeCreateObjectURL)
        defineBuiltIn(URLConstructor, "createObjectURL", bind(nativeCreateObjectURL, NativeURL));
      if (nativeRevokeObjectURL)
        defineBuiltIn(URLConstructor, "revokeObjectURL", bind(nativeRevokeObjectURL, NativeURL));
    }
    var nativeCreateObjectURL;
    var nativeRevokeObjectURL;
    setToStringTag(URLConstructor, "URL");
    $3({ global: true, constructor: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
      URL: URLConstructor
    });
  }
});

// node_modules/core-js-pure/modules/web.url.js
var require_web_url = __commonJS({
  "node_modules/core-js-pure/modules/web.url.js"() {
    require_web_url_constructor();
  }
});

// node_modules/core-js-pure/modules/web.url.to-json.js
var require_web_url_to_json = __commonJS({
  "node_modules/core-js-pure/modules/web.url.to-json.js"() {
  }
});

// node_modules/core-js-pure/modules/web.url-search-params.js
var require_web_url_search_params = __commonJS({
  "node_modules/core-js-pure/modules/web.url-search-params.js"() {
    require_web_url_search_params_constructor();
  }
});

// node_modules/core-js-pure/web/url.js
var require_url = __commonJS({
  "node_modules/core-js-pure/web/url.js"(exports, module) {
    require_web_url();
    require_web_url_to_json();
    require_web_url_search_params();
    var path = require_path();
    module.exports = path.URL;
  }
});

// node_modules/core-js-pure/stable/url/index.js
var require_url2 = __commonJS({
  "node_modules/core-js-pure/stable/url/index.js"(exports, module) {
    var parent = require_url();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/url.js
var require_url3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/url.js"(exports, module) {
    module.exports = require_url2();
  }
});

// node_modules/moralis/lib/browser/Web3Connector/NetworkWeb3Connector.js
var require_NetworkWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/NetworkWeb3Connector.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _concat = _interopRequireDefault(require_concat4());
    var _url = _interopRequireDefault(require_url3());
    var _keys = _interopRequireDefault(require_keys3());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _convert = require_convert();
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _MoralisRpcs = require_MoralisRpcs();
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var MiniRpcProvider = (0, _createClass2.default)(function MiniRpcProvider2(chainId, url) {
      var _this = this;
      (0, _classCallCheck2.default)(this, MiniRpcProvider2);
      (0, _defineProperty2.default)(this, "request", function() {
        var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(method, params) {
          var RESTController, response, _context, body, _body$error, _body$error2, _body$error3, _context2;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (typeof method !== "string") {
                    params = method.params;
                    method = method.method;
                  }
                  RESTController = _CoreManager.default.getRESTController();
                  _context3.prev = 2;
                  _context3.next = 5;
                  return RESTController.ajax("POST", _this.url, (0, _stringify.default)({
                    jsonrpc: "2.0",
                    id: 1,
                    method,
                    params
                  }), {
                    "Content-Type": "application/json"
                  });
                case 5:
                  response = _context3.sent;
                  if (response) {
                    _context3.next = 8;
                    break;
                  }
                  throw new Error("No response");
                case 8:
                  if (!(!response.status || response.status > 400)) {
                    _context3.next = 10;
                    break;
                  }
                  throw new Error((0, _concat.default)(_context = "Error response [".concat(response.status, "] ")).call(_context, response.statusText));
                case 10:
                  body = response.response;
                  if (!("error" in body)) {
                    _context3.next = 13;
                    break;
                  }
                  throw new Error(body === null || body === void 0 ? void 0 : (_body$error = body.error) === null || _body$error === void 0 ? void 0 : _body$error.message, body === null || body === void 0 ? void 0 : (_body$error2 = body.error) === null || _body$error2 === void 0 ? void 0 : _body$error2.code, body === null || body === void 0 ? void 0 : (_body$error3 = body.error) === null || _body$error3 === void 0 ? void 0 : _body$error3.data);
                case 13:
                  if ("result" in body) {
                    _context3.next = 15;
                    break;
                  }
                  throw new Error("Received unexpected JSON-RPC response");
                case 15:
                  return _context3.abrupt("return", body.result);
                case 18:
                  _context3.prev = 18;
                  _context3.t0 = _context3["catch"](2);
                  throw new Error((0, _concat.default)(_context2 = 'Failed to make "'.concat(method, '" request with networkConnector: "')).call(_context2, _context3.t0.message, '"'));
                case 21:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee, null, [[2, 18]]);
        }));
        return function() {
          return _ref.apply(this, arguments);
        };
      }());
      this.chainId = chainId;
      this.url = url;
      var parsed = new _url.default(url);
      this.host = parsed.host;
      this.path = parsed.pathname;
    });
    var NetworkWeb3Connector = function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(NetworkWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(NetworkWeb3Connector2);
      function NetworkWeb3Connector2() {
        var _ref3, _context4;
        var _this2;
        var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, urls = _ref2.urls, defaultChainId = _ref2.defaultChainId, chainId = _ref2.chainId, speedyNodeApiKey = _ref2.speedyNodeApiKey;
        (0, _classCallCheck2.default)(this, NetworkWeb3Connector2);
        _this2 = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "type", "network");
        if (!urls && speedyNodeApiKey) {
          urls = (0, _MoralisRpcs.getMoralisRpcs)(speedyNodeApiKey);
        }
        if (!urls && !speedyNodeApiKey) {
          throw new Error("Cannot connect to rpc: No urls or speedyNodeApiKey provided for NetworkWeb3Connector.");
        }
        if (speedyNodeApiKey) {
          console.warn("Moralis: Using speedyNodeApiKey on the browser enviroment is not recommended, as it is publicly visible.");
        }
        _this2.chainId = (0, _verifyChainId.default)((_ref3 = chainId !== null && chainId !== void 0 ? chainId : defaultChainId) !== null && _ref3 !== void 0 ? _ref3 : Number((0, _keys.default)(urls)[0]));
        _this2.providers = (0, _reduce.default)(_context4 = (0, _keys.default)(urls)).call(_context4, function(accumulator, chainId2) {
          accumulator[Number(chainId2)] = new MiniRpcProvider(Number(chainId2), urls[Number(chainId2)]);
          return accumulator;
        }, {});
        return _this2;
      }
      (0, _createClass2.default)(NetworkWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            var _ref4, providedChainId, _ref4$privateKey, privateKey, provider, _args2 = arguments;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _ref4 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, providedChainId = _ref4.chainId, _ref4$privateKey = _ref4.privateKey, privateKey = _ref4$privateKey === void 0 ? null : _ref4$privateKey;
                    if (providedChainId) {
                      this.chainId = (0, _verifyChainId.default)(providedChainId);
                    }
                    provider = this.providers[(0, _convert.fromHexToDecimal)(this.chainId)];
                    if (provider) {
                      _context5.next = 5;
                      break;
                    }
                    throw new Error("No rpc url provided for chainId ".concat(this.chainId));
                  case 5:
                    if (!(privateKey != null)) {
                      _context5.next = 9;
                      break;
                    }
                    _context5.next = 8;
                    return new _ethers.ethers.Wallet(privateKey).getAddress();
                  case 8:
                    this.account = _context5.sent;
                  case 9:
                    return _context5.abrupt("return", {
                      provider,
                      chainId: this.chainId,
                      account: this.account
                    });
                  case 10:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }]);
      return NetworkWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = NetworkWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/InternalWeb3Provider.js
var require_InternalWeb3Provider = __commonJS({
  "node_modules/moralis/lib/browser/InternalWeb3Provider.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.InternalWeb3Events = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _bind = _interopRequireDefault(require_bind8());
    var _events = _interopRequireDefault(require_events());
    var _events2 = require_events2();
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _convert = require_convert();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var InternalWeb3Events = (0, _freeze.default)({
      ACCOUNT_CHANGED: "accountChanged",
      CHAIN_CHANGED: "chainChanged",
      PROVIDER_CONNECT: "provider-connect",
      PROVIDER_DISCONNECT: "provider-disconnect",
      WEB3_ENABLED: "web3Enabled",
      WEB3_DEACTIVATED: "web3Deactivated"
    });
    exports.InternalWeb3Events = InternalWeb3Events;
    var InternalWeb3Provider = function(_EventEmitter) {
      (0, _inherits2.default)(InternalWeb3Provider2, _EventEmitter);
      var _super = _createSuper(InternalWeb3Provider2);
      function InternalWeb3Provider2(connector) {
        var _context, _context2, _context3, _context4;
        var _this;
        var anyNetwork = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var privateKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        (0, _classCallCheck2.default)(this, InternalWeb3Provider2);
        _this = _super.call(this);
        if (!connector) {
          throw new Error("Cannot initialize InternalWeb3Provider without a connector");
        }
        _this.connector = connector;
        _this.anyNetwork = anyNetwork;
        _this.privateKey = privateKey;
        _this.handleAccountChanged = (0, _bind.default)(_context = _this.handleAccountChanged).call(_context, (0, _assertThisInitialized2.default)(_this));
        _this.handleChainChanged = (0, _bind.default)(_context2 = _this.handleChainChanged).call(_context2, (0, _assertThisInitialized2.default)(_this));
        _this.handleConnect = (0, _bind.default)(_context3 = _this.handleConnect).call(_context3, (0, _assertThisInitialized2.default)(_this));
        _this.handleDisconnect = (0, _bind.default)(_context4 = _this.handleDisconnect).call(_context4, (0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(InternalWeb3Provider2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(options) {
            var _yield$this$connector, provider, chainId, account, network;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (this.connector) {
                      _context5.next = 2;
                      break;
                    }
                    throw new Error("Cannot activate InternalWeb3Provider without a connector");
                  case 2:
                    if (this.connector.on) {
                      this.connector.on(_events2.ConnectorEvents.ACCOUNT_CHANGED, this.handleAccountChanged);
                      this.connector.on(_events2.ConnectorEvents.CHAIN_CHANGED, this.handleChainChanged);
                      this.connector.on(_events2.ConnectorEvents.CONNECT, this.handleConnect);
                      this.connector.on(_events2.ConnectorEvents.DISCONNECT, this.handleDisconnect);
                    }
                    _context5.next = 5;
                    return this.connector.activate(options);
                  case 5:
                    _yield$this$connector = _context5.sent;
                    provider = _yield$this$connector.provider;
                    chainId = _yield$this$connector.chainId;
                    account = _yield$this$connector.account;
                    this.provider = provider;
                    this.chainId = chainId;
                    this.account = account;
                    network = this.anyNetwork ? "any" : (0, _convert.fromHexToDecimal)(chainId);
                    this.web3 = new _ethers.ethers.providers.Web3Provider(provider, network);
                    return _context5.abrupt("return", {
                      provider,
                      chainId,
                      account,
                      web3: this.web3
                    });
                  case 15:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "signer",
        get: function() {
          return this.privateKey != null ? new _ethers.ethers.Wallet(this.privateKey, this.web3) : this.web3.getSigner(this.account);
        }
      }, {
        key: "signerOrProvider",
        get: function() {
          try {
            if (this.account) {
              return this.privateKey != null ? new _ethers.ethers.Wallet(this.privateKey, this.web3) : this.web3.getSigner(this.account);
            }
            return this.web3;
          } catch (error) {
            return this.web3;
          }
        }
      }, {
        key: "handleChainChanged",
        value: function(chainId) {
          this.chainId = chainId;
          this.web3 = new _ethers.ethers.providers.Web3Provider(this.provider, (0, _convert.fromHexToDecimal)(chainId));
          this.emit(InternalWeb3Events.CHAIN_CHANGED, chainId);
        }
      }, {
        key: "handleAccountChanged",
        value: function(account) {
          this.account = account;
          this.emit(InternalWeb3Events.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleConnect",
        value: function(connectInfo) {
          this.emit(InternalWeb3Events.PROVIDER_CONNECT, connectInfo);
        }
      }, {
        key: "handleDisconnect",
        value: function(error) {
          this.emit(InternalWeb3Events.PROVIDER_DISCONNECT, error);
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.account = null;
                    this.chianId = null;
                    this.web3 = null;
                    this.provider = null;
                    this.privateKey = null;
                    if (!this.connector) {
                      _context6.next = 10;
                      break;
                    }
                    if (this.connector.removeListener) {
                      this.connector.removeListener(InternalWeb3Events.CHAIN_CHANGED, this.handleChainChanged);
                      this.connector.removeListener(InternalWeb3Events.ACCOUNT_CHANGED, this.handleAccountChanged);
                      this.connector.removeListener(InternalWeb3Events.PROVIDER_CONNECT, this.handleConnect);
                      this.connector.removeListener(InternalWeb3Events.PROVIDER_DISCONNECT, this.handleDisconnect);
                    }
                    if (!this.connector.deactivate) {
                      _context6.next = 10;
                      break;
                    }
                    _context6.next = 10;
                    return this.connector.deactivate();
                  case 10:
                    this.connector = null;
                  case 11:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return InternalWeb3Provider2;
    }(_events.default);
    var _default = InternalWeb3Provider;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/MagicWeb3Connector.js
var require_MagicWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/MagicWeb3Connector.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var MagicWeb3Connector = function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(MagicWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(MagicWeb3Connector2);
      function MagicWeb3Connector2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, MagicWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "MagicLink");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "deactivate", (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this.unsubscribeToEvents(_this.provider);
                  if (!_this.magicUser) {
                    _context2.next = 4;
                    break;
                  }
                  _context2.next = 4;
                  return _this.magicUser.user.logout();
                case 4:
                  _this.account = null;
                  _this.chainId = null;
                  _this.provider = null;
                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        })));
        return _this;
      }
      (0, _createClass2.default)(MagicWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            var _ref2, email, apiKey, network, newSession, magic, ether, Magic, _require, _window, _magic, _magic2, _magic2$user, loggedIn, signer, _yield$ether$getNetwo, chainId, address, _args2 = arguments;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _ref2 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, email = _ref2.email, apiKey = _ref2.apiKey, network = _ref2.network, newSession = _ref2.newSession;
                    magic = null;
                    ether = null;
                    if (email) {
                      _context3.next = 5;
                      break;
                    }
                    throw new Error('"email" not provided, please provide Email');
                  case 5:
                    if (apiKey) {
                      _context3.next = 7;
                      break;
                    }
                    throw new Error('"apiKey" not provided, please provide Api Key');
                  case 7:
                    if (network) {
                      _context3.next = 9;
                      break;
                    }
                    throw new Error('"network" not provided, please provide network');
                  case 9:
                    try {
                      Magic = (_require = __require("magic-sdk")) === null || _require === void 0 ? void 0 : _require.Magic;
                    } catch (error) {
                    }
                    if (!Magic) {
                      Magic = (_window = window) === null || _window === void 0 ? void 0 : _window.Magic;
                    }
                    if (Magic) {
                      _context3.next = 13;
                      break;
                    }
                    throw new Error('Cannot enable via MagicLink: dependency "magic-sdk" is missing');
                  case 13:
                    _context3.prev = 13;
                    magic = new Magic(apiKey, {
                      network
                    });
                    if (!newSession) {
                      _context3.next = 24;
                      break;
                    }
                    if (!((_magic = magic) !== null && _magic !== void 0 && _magic.user)) {
                      _context3.next = 24;
                      break;
                    }
                    _context3.prev = 17;
                    _context3.next = 20;
                    return (_magic2 = magic) === null || _magic2 === void 0 ? void 0 : (_magic2$user = _magic2.user) === null || _magic2$user === void 0 ? void 0 : _magic2$user.logout();
                  case 20:
                    _context3.next = 24;
                    break;
                  case 22:
                    _context3.prev = 22;
                    _context3.t0 = _context3["catch"](17);
                  case 24:
                    ether = new _ethers.ethers.providers.Web3Provider(magic.rpcProvider);
                    _context3.next = 27;
                    return magic.auth.loginWithMagicLink({
                      email
                    });
                  case 27:
                    _context3.next = 32;
                    break;
                  case 29:
                    _context3.prev = 29;
                    _context3.t1 = _context3["catch"](13);
                    throw new Error("Error during enable via MagicLink, please double check network and apikey");
                  case 32:
                    _context3.next = 34;
                    return magic.user.isLoggedIn();
                  case 34:
                    loggedIn = _context3.sent;
                    if (!loggedIn) {
                      _context3.next = 50;
                      break;
                    }
                    signer = ether.getSigner();
                    _context3.next = 39;
                    return ether.getNetwork();
                  case 39:
                    _yield$ether$getNetwo = _context3.sent;
                    chainId = _yield$ether$getNetwo.chainId;
                    _context3.next = 43;
                    return signer.getAddress();
                  case 43:
                    address = _context3.sent.toLowerCase();
                    this.account = address;
                    this.provider = ether.provider;
                    this.chainId = "0x".concat(chainId.toString(16));
                    this.magicUser = magic;
                    this.subscribeToEvents(this.provider);
                    return _context3.abrupt("return", {
                      provider: this.provider,
                      account: this.account,
                      chainId: this.chainId
                    });
                  case 50:
                    throw new Error("Error during enable via MagicLink, login to magic failed");
                  case 51:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[13, 29], [17, 22]]);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }]);
      return MagicWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    exports.default = MagicWeb3Connector;
  }
});

// node_modules/@web3auth/core/dist/core.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    i4 % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
var import_loglevel, ADAPTER_CACHE_KEY, Web3AuthCore;
var init_core_esm = __esm({
  "node_modules/@web3auth/core/dist/core.esm.js"() {
    init_defineProperty();
    init_openloginJrpc_esm();
    init_base_esm();
    import_loglevel = __toESM(require_loglevel());
    ADAPTER_CACHE_KEY = "Web3Auth-cachedAdapter";
    Web3AuthCore = class extends SafeEventEmitter {
      constructor(options) {
        var _options$chainConfig, _options$chainConfig2, _options$chainConfig3, _options$chainConfig4;
        super();
        _defineProperty(this, "coreOptions", void 0);
        _defineProperty(this, "connectedAdapterName", null);
        _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
        _defineProperty(this, "cachedAdapter", null);
        _defineProperty(this, "walletAdapters", {});
        if (!((_options$chainConfig = options.chainConfig) !== null && _options$chainConfig !== void 0 && _options$chainConfig.chainNamespace) || !Object.values(CHAIN_NAMESPACES).includes((_options$chainConfig2 = options.chainConfig) === null || _options$chainConfig2 === void 0 ? void 0 : _options$chainConfig2.chainNamespace))
          throw WalletInitializationError.invalidParams("Please provide a valid chainNamespace in chainConfig");
        this.cachedAdapter = storageAvailable("sessionStorage") ? window.sessionStorage.getItem(ADAPTER_CACHE_KEY) : null;
        this.coreOptions = _objectSpread(_objectSpread({}, options), {}, {
          chainConfig: _objectSpread(_objectSpread({}, getChainConfig((_options$chainConfig3 = options.chainConfig) === null || _options$chainConfig3 === void 0 ? void 0 : _options$chainConfig3.chainNamespace, (_options$chainConfig4 = options.chainConfig) === null || _options$chainConfig4 === void 0 ? void 0 : _options$chainConfig4.chainId)), options.chainConfig)
        });
        this.subscribeToAdapterEvents = this.subscribeToAdapterEvents.bind(this);
      }
      get provider() {
        if (this.status === ADAPTER_STATUS.CONNECTED && this.connectedAdapterName) {
          const adapter = this.walletAdapters[this.connectedAdapterName];
          return adapter.provider;
        }
        return null;
      }
      set provider(_5) {
        throw new Error("Not implemented");
      }
      async init() {
        const initPromises = Object.keys(this.walletAdapters).map((adapterName) => {
          this.subscribeToAdapterEvents(this.walletAdapters[adapterName]);
          if (!this.walletAdapters[adapterName].chainConfigProxy) {
            const providedChainConfig = this.coreOptions.chainConfig;
            if (!providedChainConfig.chainNamespace)
              throw WalletInitializationError.invalidParams("Please provide chainNamespace in chainConfig");
            const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, providedChainConfig.chainId)), providedChainConfig);
            this.walletAdapters[adapterName].setChainConfig(chainConfig);
          }
          return this.walletAdapters[adapterName].init({
            autoConnect: this.cachedAdapter === adapterName
          }).catch((e3) => import_loglevel.default.error(e3));
        });
        this.status = ADAPTER_STATUS.READY;
        await Promise.all(initPromises);
      }
      configureAdapter(adapter) {
        this.checkInitRequirements();
        const providedChainConfig = this.coreOptions.chainConfig;
        if (!providedChainConfig.chainNamespace)
          throw WalletInitializationError.invalidParams("Please provide chainNamespace in chainConfig");
        const adapterAlreadyExists = this.walletAdapters[adapter.name];
        if (adapterAlreadyExists)
          throw WalletInitializationError.duplicateAdapterError("Wallet adapter for ".concat(adapter.name, " already exists"));
        if (adapter.adapterNamespace !== ADAPTER_NAMESPACES.MULTICHAIN && adapter.adapterNamespace !== providedChainConfig.chainNamespace)
          throw WalletInitializationError.incompatibleChainNameSpace("This wallet adapter belongs to ".concat(adapter.adapterNamespace, " which is incompatible with currently used namespace: ").concat(providedChainConfig.chainNamespace));
        if (adapter.adapterNamespace === ADAPTER_NAMESPACES.MULTICHAIN && adapter.currentChainNamespace && providedChainConfig.chainNamespace !== adapter.currentChainNamespace) {
          adapter.setChainConfig(providedChainConfig);
        }
        this.walletAdapters[adapter.name] = adapter;
        return this;
      }
      clearCache() {
        if (!storageAvailable("sessionStorage"))
          return;
        window.sessionStorage.removeItem(ADAPTER_CACHE_KEY);
        this.cachedAdapter = null;
      }
      async connectTo(walletName, loginParams) {
        if (!this.walletAdapters[walletName])
          throw WalletInitializationError.notFound("Please add wallet adapter for ".concat(walletName, " wallet, before connecting"));
        return this.walletAdapters[walletName].connect(loginParams);
      }
      async logout() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          cleanup: false
        };
        if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName)
          throw WalletLoginError.notConnectedError("No wallet is connected");
        await this.walletAdapters[this.connectedAdapterName].disconnect(options);
      }
      async getUserInfo() {
        import_loglevel.default.debug("Getting user info", this.status, this.connectedAdapterName);
        if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName)
          throw WalletLoginError.notConnectedError("No wallet is connected");
        return this.walletAdapters[this.connectedAdapterName].getUserInfo();
      }
      subscribeToAdapterEvents(walletAdapter) {
        walletAdapter.on(ADAPTER_EVENTS.CONNECTED, (data) => {
          this.status = ADAPTER_STATUS.CONNECTED;
          this.connectedAdapterName = data.adapter;
          this.cacheWallet(data.adapter);
          this.emit(ADAPTER_EVENTS.CONNECTED, _objectSpread({}, data));
          import_loglevel.default.debug("connected", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.DISCONNECTED, (data) => {
          this.status = ADAPTER_STATUS.READY;
          this.emit(ADAPTER_EVENTS.DISCONNECTED, data);
          if (storageAvailable("sessionStorage")) {
            const cachedAdapter = window.sessionStorage.getItem(ADAPTER_CACHE_KEY);
            if (this.connectedAdapterName === cachedAdapter) {
              this.clearCache();
            }
          }
          import_loglevel.default.debug("disconnected", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.CONNECTING, (data) => {
          this.status = ADAPTER_STATUS.CONNECTING;
          this.emit(ADAPTER_EVENTS.CONNECTING, data);
          import_loglevel.default.debug("connecting", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.ERRORED, (data) => {
          this.status = ADAPTER_STATUS.ERRORED;
          this.clearCache();
          this.emit(ADAPTER_EVENTS.ERRORED, data);
          import_loglevel.default.debug("errored", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (data) => {
          import_loglevel.default.debug("adapter data updated", data);
          this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, data);
        });
      }
      checkInitRequirements() {
        if (this.status === ADAPTER_STATUS.CONNECTING)
          throw WalletInitializationError.notReady("Already pending connection");
        if (this.status === ADAPTER_STATUS.CONNECTED)
          throw WalletInitializationError.notReady("Already connected");
        if (this.status === ADAPTER_STATUS.READY)
          throw WalletInitializationError.notReady("Adapter is already initialized");
      }
      cacheWallet(walletName) {
        if (!storageAvailable("sessionStorage"))
          return;
        window.sessionStorage.setItem(ADAPTER_CACHE_KEY, walletName);
        this.cachedAdapter = walletName;
      }
    };
  }
});

// node_modules/lodash.clonedeep/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.clonedeep/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_SAFE_INTEGER2 = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reFlags = /\w*$/;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    function addMapEntry(map, pair) {
      map.set(pair[0], pair[1]);
      return map;
    }
    function addSetEntry(set, value) {
      set.add(value);
      return set;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function baseTimes(n3, iteratee) {
      var index = -1, result = Array(n3);
      while (++index < n3) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e3) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key2) {
        result[++index] = [key2, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key2) {
      return this.has(key2) && delete this.__data__[key2];
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        data.push([key2, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      return getMapData(this, key2)["delete"](key2);
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      getMapData(this, key2).set(key2, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key2) {
      return this.__data__["delete"](key2);
    }
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    function stackSet(key2, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key2, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && (key2 == "length" || isIndex(key2, length)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function assignValue(object, key2, value) {
      var objValue = object[key2];
      if (!(hasOwnProperty.call(object, key2) && eq4(objValue, value)) || value === void 0 && !(key2 in object)) {
        object[key2] = value;
      }
    }
    function assocIndexOf(array, key2) {
      var length = array.length;
      while (length--) {
        if (eq4(array[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseClone(value, isDeep, isFull, customizer, key2, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key2, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key3) {
        if (props) {
          key3 = subValue;
          subValue = value[key3];
        }
        assignValue(result, key3, baseClone(subValue, isDeep, isFull, customizer, key3, value, stack));
      });
      return result;
    }
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key2 = props[index];
        var newValue = customizer ? customizer(object[key2], source[key2], key2, object, source) : void 0;
        assignValue(object, key2, newValue === void 0 ? source[key2] : newValue);
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key2) {
      var value = getValue(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function initCloneArray(array) {
      var length = array.length, result = array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER2 : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e3) {
        }
        try {
          return func + "";
        } catch (e3) {
        }
      }
      return "";
    }
    function cloneDeep2(value) {
      return baseClone(value, true, true);
    }
    function eq4(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = cloneDeep2;
  }
});

// node_modules/qr.js/lib/mode.js
var require_mode2 = __commonJS({
  "node_modules/qr.js/lib/mode.js"(exports, module) {
    module.exports = {
      MODE_NUMBER: 1 << 0,
      MODE_ALPHA_NUM: 1 << 1,
      MODE_8BIT_BYTE: 1 << 2,
      MODE_KANJI: 1 << 3
    };
  }
});

// node_modules/qr.js/lib/8BitByte.js
var require_BitByte = __commonJS({
  "node_modules/qr.js/lib/8BitByte.js"(exports, module) {
    var mode = require_mode2();
    function QR8bitByte(data) {
      this.mode = mode.MODE_8BIT_BYTE;
      this.data = data;
    }
    QR8bitByte.prototype = {
      getLength: function(buffer) {
        return this.data.length;
      },
      write: function(buffer) {
        for (var i4 = 0; i4 < this.data.length; i4++) {
          buffer.put(this.data.charCodeAt(i4), 8);
        }
      }
    };
    module.exports = QR8bitByte;
  }
});

// node_modules/qr.js/lib/ErrorCorrectLevel.js
var require_ErrorCorrectLevel = __commonJS({
  "node_modules/qr.js/lib/ErrorCorrectLevel.js"(exports, module) {
    module.exports = {
      L: 1,
      M: 0,
      Q: 3,
      H: 2
    };
  }
});

// node_modules/qr.js/lib/RSBlock.js
var require_RSBlock = __commonJS({
  "node_modules/qr.js/lib/RSBlock.js"(exports, module) {
    var ECL = require_ErrorCorrectLevel();
    function QRRSBlock(totalCount, dataCount) {
      this.totalCount = totalCount;
      this.dataCount = dataCount;
    }
    QRRSBlock.RS_BLOCK_TABLE = [
      [1, 26, 19],
      [1, 26, 16],
      [1, 26, 13],
      [1, 26, 9],
      [1, 44, 34],
      [1, 44, 28],
      [1, 44, 22],
      [1, 44, 16],
      [1, 70, 55],
      [1, 70, 44],
      [2, 35, 17],
      [2, 35, 13],
      [1, 100, 80],
      [2, 50, 32],
      [2, 50, 24],
      [4, 25, 9],
      [1, 134, 108],
      [2, 67, 43],
      [2, 33, 15, 2, 34, 16],
      [2, 33, 11, 2, 34, 12],
      [2, 86, 68],
      [4, 43, 27],
      [4, 43, 19],
      [4, 43, 15],
      [2, 98, 78],
      [4, 49, 31],
      [2, 32, 14, 4, 33, 15],
      [4, 39, 13, 1, 40, 14],
      [2, 121, 97],
      [2, 60, 38, 2, 61, 39],
      [4, 40, 18, 2, 41, 19],
      [4, 40, 14, 2, 41, 15],
      [2, 146, 116],
      [3, 58, 36, 2, 59, 37],
      [4, 36, 16, 4, 37, 17],
      [4, 36, 12, 4, 37, 13],
      [2, 86, 68, 2, 87, 69],
      [4, 69, 43, 1, 70, 44],
      [6, 43, 19, 2, 44, 20],
      [6, 43, 15, 2, 44, 16],
      [4, 101, 81],
      [1, 80, 50, 4, 81, 51],
      [4, 50, 22, 4, 51, 23],
      [3, 36, 12, 8, 37, 13],
      [2, 116, 92, 2, 117, 93],
      [6, 58, 36, 2, 59, 37],
      [4, 46, 20, 6, 47, 21],
      [7, 42, 14, 4, 43, 15],
      [4, 133, 107],
      [8, 59, 37, 1, 60, 38],
      [8, 44, 20, 4, 45, 21],
      [12, 33, 11, 4, 34, 12],
      [3, 145, 115, 1, 146, 116],
      [4, 64, 40, 5, 65, 41],
      [11, 36, 16, 5, 37, 17],
      [11, 36, 12, 5, 37, 13],
      [5, 109, 87, 1, 110, 88],
      [5, 65, 41, 5, 66, 42],
      [5, 54, 24, 7, 55, 25],
      [11, 36, 12],
      [5, 122, 98, 1, 123, 99],
      [7, 73, 45, 3, 74, 46],
      [15, 43, 19, 2, 44, 20],
      [3, 45, 15, 13, 46, 16],
      [1, 135, 107, 5, 136, 108],
      [10, 74, 46, 1, 75, 47],
      [1, 50, 22, 15, 51, 23],
      [2, 42, 14, 17, 43, 15],
      [5, 150, 120, 1, 151, 121],
      [9, 69, 43, 4, 70, 44],
      [17, 50, 22, 1, 51, 23],
      [2, 42, 14, 19, 43, 15],
      [3, 141, 113, 4, 142, 114],
      [3, 70, 44, 11, 71, 45],
      [17, 47, 21, 4, 48, 22],
      [9, 39, 13, 16, 40, 14],
      [3, 135, 107, 5, 136, 108],
      [3, 67, 41, 13, 68, 42],
      [15, 54, 24, 5, 55, 25],
      [15, 43, 15, 10, 44, 16],
      [4, 144, 116, 4, 145, 117],
      [17, 68, 42],
      [17, 50, 22, 6, 51, 23],
      [19, 46, 16, 6, 47, 17],
      [2, 139, 111, 7, 140, 112],
      [17, 74, 46],
      [7, 54, 24, 16, 55, 25],
      [34, 37, 13],
      [4, 151, 121, 5, 152, 122],
      [4, 75, 47, 14, 76, 48],
      [11, 54, 24, 14, 55, 25],
      [16, 45, 15, 14, 46, 16],
      [6, 147, 117, 4, 148, 118],
      [6, 73, 45, 14, 74, 46],
      [11, 54, 24, 16, 55, 25],
      [30, 46, 16, 2, 47, 17],
      [8, 132, 106, 4, 133, 107],
      [8, 75, 47, 13, 76, 48],
      [7, 54, 24, 22, 55, 25],
      [22, 45, 15, 13, 46, 16],
      [10, 142, 114, 2, 143, 115],
      [19, 74, 46, 4, 75, 47],
      [28, 50, 22, 6, 51, 23],
      [33, 46, 16, 4, 47, 17],
      [8, 152, 122, 4, 153, 123],
      [22, 73, 45, 3, 74, 46],
      [8, 53, 23, 26, 54, 24],
      [12, 45, 15, 28, 46, 16],
      [3, 147, 117, 10, 148, 118],
      [3, 73, 45, 23, 74, 46],
      [4, 54, 24, 31, 55, 25],
      [11, 45, 15, 31, 46, 16],
      [7, 146, 116, 7, 147, 117],
      [21, 73, 45, 7, 74, 46],
      [1, 53, 23, 37, 54, 24],
      [19, 45, 15, 26, 46, 16],
      [5, 145, 115, 10, 146, 116],
      [19, 75, 47, 10, 76, 48],
      [15, 54, 24, 25, 55, 25],
      [23, 45, 15, 25, 46, 16],
      [13, 145, 115, 3, 146, 116],
      [2, 74, 46, 29, 75, 47],
      [42, 54, 24, 1, 55, 25],
      [23, 45, 15, 28, 46, 16],
      [17, 145, 115],
      [10, 74, 46, 23, 75, 47],
      [10, 54, 24, 35, 55, 25],
      [19, 45, 15, 35, 46, 16],
      [17, 145, 115, 1, 146, 116],
      [14, 74, 46, 21, 75, 47],
      [29, 54, 24, 19, 55, 25],
      [11, 45, 15, 46, 46, 16],
      [13, 145, 115, 6, 146, 116],
      [14, 74, 46, 23, 75, 47],
      [44, 54, 24, 7, 55, 25],
      [59, 46, 16, 1, 47, 17],
      [12, 151, 121, 7, 152, 122],
      [12, 75, 47, 26, 76, 48],
      [39, 54, 24, 14, 55, 25],
      [22, 45, 15, 41, 46, 16],
      [6, 151, 121, 14, 152, 122],
      [6, 75, 47, 34, 76, 48],
      [46, 54, 24, 10, 55, 25],
      [2, 45, 15, 64, 46, 16],
      [17, 152, 122, 4, 153, 123],
      [29, 74, 46, 14, 75, 47],
      [49, 54, 24, 10, 55, 25],
      [24, 45, 15, 46, 46, 16],
      [4, 152, 122, 18, 153, 123],
      [13, 74, 46, 32, 75, 47],
      [48, 54, 24, 14, 55, 25],
      [42, 45, 15, 32, 46, 16],
      [20, 147, 117, 4, 148, 118],
      [40, 75, 47, 7, 76, 48],
      [43, 54, 24, 22, 55, 25],
      [10, 45, 15, 67, 46, 16],
      [19, 148, 118, 6, 149, 119],
      [18, 75, 47, 31, 76, 48],
      [34, 54, 24, 34, 55, 25],
      [20, 45, 15, 61, 46, 16]
    ];
    QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
      var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
      if (rsBlock == void 0) {
        throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
      }
      var length = rsBlock.length / 3;
      var list = new Array();
      for (var i4 = 0; i4 < length; i4++) {
        var count = rsBlock[i4 * 3 + 0];
        var totalCount = rsBlock[i4 * 3 + 1];
        var dataCount = rsBlock[i4 * 3 + 2];
        for (var j4 = 0; j4 < count; j4++) {
          list.push(new QRRSBlock(totalCount, dataCount));
        }
      }
      return list;
    };
    QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {
      switch (errorCorrectLevel) {
        case ECL.L:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
        case ECL.M:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
        case ECL.Q:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
        case ECL.H:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    module.exports = QRRSBlock;
  }
});

// node_modules/qr.js/lib/BitBuffer.js
var require_BitBuffer = __commonJS({
  "node_modules/qr.js/lib/BitBuffer.js"(exports, module) {
    function QRBitBuffer() {
      this.buffer = new Array();
      this.length = 0;
    }
    QRBitBuffer.prototype = {
      get: function(index) {
        var bufIndex = Math.floor(index / 8);
        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
      },
      put: function(num, length) {
        for (var i4 = 0; i4 < length; i4++) {
          this.putBit((num >>> length - i4 - 1 & 1) == 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module.exports = QRBitBuffer;
  }
});

// node_modules/qr.js/lib/math.js
var require_math = __commonJS({
  "node_modules/qr.js/lib/math.js"(exports, module) {
    var QRMath = {
      glog: function(n3) {
        if (n3 < 1) {
          throw new Error("glog(" + n3 + ")");
        }
        return QRMath.LOG_TABLE[n3];
      },
      gexp: function(n3) {
        while (n3 < 0) {
          n3 += 255;
        }
        while (n3 >= 256) {
          n3 -= 255;
        }
        return QRMath.EXP_TABLE[n3];
      },
      EXP_TABLE: new Array(256),
      LOG_TABLE: new Array(256)
    };
    for (i4 = 0; i4 < 8; i4++) {
      QRMath.EXP_TABLE[i4] = 1 << i4;
    }
    var i4;
    for (i4 = 8; i4 < 256; i4++) {
      QRMath.EXP_TABLE[i4] = QRMath.EXP_TABLE[i4 - 4] ^ QRMath.EXP_TABLE[i4 - 5] ^ QRMath.EXP_TABLE[i4 - 6] ^ QRMath.EXP_TABLE[i4 - 8];
    }
    var i4;
    for (i4 = 0; i4 < 255; i4++) {
      QRMath.LOG_TABLE[QRMath.EXP_TABLE[i4]] = i4;
    }
    var i4;
    module.exports = QRMath;
  }
});

// node_modules/qr.js/lib/Polynomial.js
var require_Polynomial = __commonJS({
  "node_modules/qr.js/lib/Polynomial.js"(exports, module) {
    var math = require_math();
    function QRPolynomial(num, shift) {
      if (num.length == void 0) {
        throw new Error(num.length + "/" + shift);
      }
      var offset = 0;
      while (offset < num.length && num[offset] == 0) {
        offset++;
      }
      this.num = new Array(num.length - offset + shift);
      for (var i4 = 0; i4 < num.length - offset; i4++) {
        this.num[i4] = num[i4 + offset];
      }
    }
    QRPolynomial.prototype = {
      get: function(index) {
        return this.num[index];
      },
      getLength: function() {
        return this.num.length;
      },
      multiply: function(e3) {
        var num = new Array(this.getLength() + e3.getLength() - 1);
        for (var i4 = 0; i4 < this.getLength(); i4++) {
          for (var j4 = 0; j4 < e3.getLength(); j4++) {
            num[i4 + j4] ^= math.gexp(math.glog(this.get(i4)) + math.glog(e3.get(j4)));
          }
        }
        return new QRPolynomial(num, 0);
      },
      mod: function(e3) {
        if (this.getLength() - e3.getLength() < 0) {
          return this;
        }
        var ratio = math.glog(this.get(0)) - math.glog(e3.get(0));
        var num = new Array(this.getLength());
        for (var i4 = 0; i4 < this.getLength(); i4++) {
          num[i4] = this.get(i4);
        }
        for (var i4 = 0; i4 < e3.getLength(); i4++) {
          num[i4] ^= math.gexp(math.glog(e3.get(i4)) + ratio);
        }
        return new QRPolynomial(num, 0).mod(e3);
      }
    };
    module.exports = QRPolynomial;
  }
});

// node_modules/qr.js/lib/util.js
var require_util2 = __commonJS({
  "node_modules/qr.js/lib/util.js"(exports, module) {
    var Mode = require_mode2();
    var Polynomial = require_Polynomial();
    var math = require_math();
    var QRMaskPattern = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var QRUtil = {
      PATTERN_POSITION_TABLE: [
        [],
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
      ],
      G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
      G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
      G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
      getBCHTypeInfo: function(data) {
        var d4 = data << 10;
        while (QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
          d4 ^= QRUtil.G15 << QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G15);
        }
        return (data << 10 | d4) ^ QRUtil.G15_MASK;
      },
      getBCHTypeNumber: function(data) {
        var d4 = data << 12;
        while (QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
          d4 ^= QRUtil.G18 << QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G18);
        }
        return data << 12 | d4;
      },
      getBCHDigit: function(data) {
        var digit = 0;
        while (data != 0) {
          digit++;
          data >>>= 1;
        }
        return digit;
      },
      getPatternPosition: function(typeNumber) {
        return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
      },
      getMask: function(maskPattern, i4, j4) {
        switch (maskPattern) {
          case QRMaskPattern.PATTERN000:
            return (i4 + j4) % 2 == 0;
          case QRMaskPattern.PATTERN001:
            return i4 % 2 == 0;
          case QRMaskPattern.PATTERN010:
            return j4 % 3 == 0;
          case QRMaskPattern.PATTERN011:
            return (i4 + j4) % 3 == 0;
          case QRMaskPattern.PATTERN100:
            return (Math.floor(i4 / 2) + Math.floor(j4 / 3)) % 2 == 0;
          case QRMaskPattern.PATTERN101:
            return i4 * j4 % 2 + i4 * j4 % 3 == 0;
          case QRMaskPattern.PATTERN110:
            return (i4 * j4 % 2 + i4 * j4 % 3) % 2 == 0;
          case QRMaskPattern.PATTERN111:
            return (i4 * j4 % 3 + (i4 + j4) % 2) % 2 == 0;
          default:
            throw new Error("bad maskPattern:" + maskPattern);
        }
      },
      getErrorCorrectPolynomial: function(errorCorrectLength) {
        var a4 = new Polynomial([1], 0);
        for (var i4 = 0; i4 < errorCorrectLength; i4++) {
          a4 = a4.multiply(new Polynomial([1, math.gexp(i4)], 0));
        }
        return a4;
      },
      getLengthInBits: function(mode, type) {
        if (1 <= type && type < 10) {
          switch (mode) {
            case Mode.MODE_NUMBER:
              return 10;
            case Mode.MODE_ALPHA_NUM:
              return 9;
            case Mode.MODE_8BIT_BYTE:
              return 8;
            case Mode.MODE_KANJI:
              return 8;
            default:
              throw new Error("mode:" + mode);
          }
        } else if (type < 27) {
          switch (mode) {
            case Mode.MODE_NUMBER:
              return 12;
            case Mode.MODE_ALPHA_NUM:
              return 11;
            case Mode.MODE_8BIT_BYTE:
              return 16;
            case Mode.MODE_KANJI:
              return 10;
            default:
              throw new Error("mode:" + mode);
          }
        } else if (type < 41) {
          switch (mode) {
            case Mode.MODE_NUMBER:
              return 14;
            case Mode.MODE_ALPHA_NUM:
              return 13;
            case Mode.MODE_8BIT_BYTE:
              return 16;
            case Mode.MODE_KANJI:
              return 12;
            default:
              throw new Error("mode:" + mode);
          }
        } else {
          throw new Error("type:" + type);
        }
      },
      getLostPoint: function(qrCode) {
        var moduleCount = qrCode.getModuleCount();
        var lostPoint = 0;
        for (var row = 0; row < moduleCount; row++) {
          for (var col = 0; col < moduleCount; col++) {
            var sameCount = 0;
            var dark = qrCode.isDark(row, col);
            for (var r4 = -1; r4 <= 1; r4++) {
              if (row + r4 < 0 || moduleCount <= row + r4) {
                continue;
              }
              for (var c4 = -1; c4 <= 1; c4++) {
                if (col + c4 < 0 || moduleCount <= col + c4) {
                  continue;
                }
                if (r4 == 0 && c4 == 0) {
                  continue;
                }
                if (dark == qrCode.isDark(row + r4, col + c4)) {
                  sameCount++;
                }
              }
            }
            if (sameCount > 5) {
              lostPoint += 3 + sameCount - 5;
            }
          }
        }
        for (var row = 0; row < moduleCount - 1; row++) {
          for (var col = 0; col < moduleCount - 1; col++) {
            var count = 0;
            if (qrCode.isDark(row, col))
              count++;
            if (qrCode.isDark(row + 1, col))
              count++;
            if (qrCode.isDark(row, col + 1))
              count++;
            if (qrCode.isDark(row + 1, col + 1))
              count++;
            if (count == 0 || count == 4) {
              lostPoint += 3;
            }
          }
        }
        for (var row = 0; row < moduleCount; row++) {
          for (var col = 0; col < moduleCount - 6; col++) {
            if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
              lostPoint += 40;
            }
          }
        }
        for (var col = 0; col < moduleCount; col++) {
          for (var row = 0; row < moduleCount - 6; row++) {
            if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
              lostPoint += 40;
            }
          }
        }
        var darkCount = 0;
        for (var col = 0; col < moduleCount; col++) {
          for (var row = 0; row < moduleCount; row++) {
            if (qrCode.isDark(row, col)) {
              darkCount++;
            }
          }
        }
        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
        lostPoint += ratio * 10;
        return lostPoint;
      }
    };
    module.exports = QRUtil;
  }
});

// node_modules/qr.js/lib/QRCode.js
var require_QRCode = __commonJS({
  "node_modules/qr.js/lib/QRCode.js"(exports, module) {
    var BitByte = require_BitByte();
    var RSBlock = require_RSBlock();
    var BitBuffer = require_BitBuffer();
    var util = require_util2();
    var Polynomial = require_Polynomial();
    function QRCode2(typeNumber, errorCorrectLevel) {
      this.typeNumber = typeNumber;
      this.errorCorrectLevel = errorCorrectLevel;
      this.modules = null;
      this.moduleCount = 0;
      this.dataCache = null;
      this.dataList = [];
    }
    var proto = QRCode2.prototype;
    proto.addData = function(data) {
      var newData = new BitByte(data);
      this.dataList.push(newData);
      this.dataCache = null;
    };
    proto.isDark = function(row, col) {
      if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
        throw new Error(row + "," + col);
      }
      return this.modules[row][col];
    };
    proto.getModuleCount = function() {
      return this.moduleCount;
    };
    proto.make = function() {
      if (this.typeNumber < 1) {
        var typeNumber = 1;
        for (typeNumber = 1; typeNumber < 40; typeNumber++) {
          var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
          var buffer = new BitBuffer();
          var totalDataCount = 0;
          for (var i4 = 0; i4 < rsBlocks.length; i4++) {
            totalDataCount += rsBlocks[i4].dataCount;
          }
          for (var i4 = 0; i4 < this.dataList.length; i4++) {
            var data = this.dataList[i4];
            buffer.put(data.mode, 4);
            buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
            data.write(buffer);
          }
          if (buffer.getLengthInBits() <= totalDataCount * 8)
            break;
        }
        this.typeNumber = typeNumber;
      }
      this.makeImpl(false, this.getBestMaskPattern());
    };
    proto.makeImpl = function(test, maskPattern) {
      this.moduleCount = this.typeNumber * 4 + 17;
      this.modules = new Array(this.moduleCount);
      for (var row = 0; row < this.moduleCount; row++) {
        this.modules[row] = new Array(this.moduleCount);
        for (var col = 0; col < this.moduleCount; col++) {
          this.modules[row][col] = null;
        }
      }
      this.setupPositionProbePattern(0, 0);
      this.setupPositionProbePattern(this.moduleCount - 7, 0);
      this.setupPositionProbePattern(0, this.moduleCount - 7);
      this.setupPositionAdjustPattern();
      this.setupTimingPattern();
      this.setupTypeInfo(test, maskPattern);
      if (this.typeNumber >= 7) {
        this.setupTypeNumber(test);
      }
      if (this.dataCache == null) {
        this.dataCache = QRCode2.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
      }
      this.mapData(this.dataCache, maskPattern);
    };
    proto.setupPositionProbePattern = function(row, col) {
      for (var r4 = -1; r4 <= 7; r4++) {
        if (row + r4 <= -1 || this.moduleCount <= row + r4)
          continue;
        for (var c4 = -1; c4 <= 7; c4++) {
          if (col + c4 <= -1 || this.moduleCount <= col + c4)
            continue;
          if (0 <= r4 && r4 <= 6 && (c4 == 0 || c4 == 6) || 0 <= c4 && c4 <= 6 && (r4 == 0 || r4 == 6) || 2 <= r4 && r4 <= 4 && 2 <= c4 && c4 <= 4) {
            this.modules[row + r4][col + c4] = true;
          } else {
            this.modules[row + r4][col + c4] = false;
          }
        }
      }
    };
    proto.getBestMaskPattern = function() {
      var minLostPoint = 0;
      var pattern = 0;
      for (var i4 = 0; i4 < 8; i4++) {
        this.makeImpl(true, i4);
        var lostPoint = util.getLostPoint(this);
        if (i4 == 0 || minLostPoint > lostPoint) {
          minLostPoint = lostPoint;
          pattern = i4;
        }
      }
      return pattern;
    };
    proto.createMovieClip = function(target_mc, instance_name, depth) {
      var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
      var cs = 1;
      this.make();
      for (var row = 0; row < this.modules.length; row++) {
        var y4 = row * cs;
        for (var col = 0; col < this.modules[row].length; col++) {
          var x4 = col * cs;
          var dark = this.modules[row][col];
          if (dark) {
            qr_mc.beginFill(0, 100);
            qr_mc.moveTo(x4, y4);
            qr_mc.lineTo(x4 + cs, y4);
            qr_mc.lineTo(x4 + cs, y4 + cs);
            qr_mc.lineTo(x4, y4 + cs);
            qr_mc.endFill();
          }
        }
      }
      return qr_mc;
    };
    proto.setupTimingPattern = function() {
      for (var r4 = 8; r4 < this.moduleCount - 8; r4++) {
        if (this.modules[r4][6] != null) {
          continue;
        }
        this.modules[r4][6] = r4 % 2 == 0;
      }
      for (var c4 = 8; c4 < this.moduleCount - 8; c4++) {
        if (this.modules[6][c4] != null) {
          continue;
        }
        this.modules[6][c4] = c4 % 2 == 0;
      }
    };
    proto.setupPositionAdjustPattern = function() {
      var pos = util.getPatternPosition(this.typeNumber);
      for (var i4 = 0; i4 < pos.length; i4++) {
        for (var j4 = 0; j4 < pos.length; j4++) {
          var row = pos[i4];
          var col = pos[j4];
          if (this.modules[row][col] != null) {
            continue;
          }
          for (var r4 = -2; r4 <= 2; r4++) {
            for (var c4 = -2; c4 <= 2; c4++) {
              if (r4 == -2 || r4 == 2 || c4 == -2 || c4 == 2 || r4 == 0 && c4 == 0) {
                this.modules[row + r4][col + c4] = true;
              } else {
                this.modules[row + r4][col + c4] = false;
              }
            }
          }
        }
      }
    };
    proto.setupTypeNumber = function(test) {
      var bits = util.getBCHTypeNumber(this.typeNumber);
      for (var i4 = 0; i4 < 18; i4++) {
        var mod = !test && (bits >> i4 & 1) == 1;
        this.modules[Math.floor(i4 / 3)][i4 % 3 + this.moduleCount - 8 - 3] = mod;
      }
      for (var i4 = 0; i4 < 18; i4++) {
        var mod = !test && (bits >> i4 & 1) == 1;
        this.modules[i4 % 3 + this.moduleCount - 8 - 3][Math.floor(i4 / 3)] = mod;
      }
    };
    proto.setupTypeInfo = function(test, maskPattern) {
      var data = this.errorCorrectLevel << 3 | maskPattern;
      var bits = util.getBCHTypeInfo(data);
      for (var i4 = 0; i4 < 15; i4++) {
        var mod = !test && (bits >> i4 & 1) == 1;
        if (i4 < 6) {
          this.modules[i4][8] = mod;
        } else if (i4 < 8) {
          this.modules[i4 + 1][8] = mod;
        } else {
          this.modules[this.moduleCount - 15 + i4][8] = mod;
        }
      }
      for (var i4 = 0; i4 < 15; i4++) {
        var mod = !test && (bits >> i4 & 1) == 1;
        if (i4 < 8) {
          this.modules[8][this.moduleCount - i4 - 1] = mod;
        } else if (i4 < 9) {
          this.modules[8][15 - i4 - 1 + 1] = mod;
        } else {
          this.modules[8][15 - i4 - 1] = mod;
        }
      }
      this.modules[this.moduleCount - 8][8] = !test;
    };
    proto.mapData = function(data, maskPattern) {
      var inc = -1;
      var row = this.moduleCount - 1;
      var bitIndex = 7;
      var byteIndex = 0;
      for (var col = this.moduleCount - 1; col > 0; col -= 2) {
        if (col == 6)
          col--;
        while (true) {
          for (var c4 = 0; c4 < 2; c4++) {
            if (this.modules[row][col - c4] == null) {
              var dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) == 1;
              }
              var mask = util.getMask(maskPattern, row, col - c4);
              if (mask) {
                dark = !dark;
              }
              this.modules[row][col - c4] = dark;
              bitIndex--;
              if (bitIndex == -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || this.moduleCount <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    };
    QRCode2.PAD0 = 236;
    QRCode2.PAD1 = 17;
    QRCode2.createData = function(typeNumber, errorCorrectLevel, dataList) {
      var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
      var buffer = new BitBuffer();
      for (var i4 = 0; i4 < dataList.length; i4++) {
        var data = dataList[i4];
        buffer.put(data.mode, 4);
        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
        data.write(buffer);
      }
      var totalDataCount = 0;
      for (var i4 = 0; i4 < rsBlocks.length; i4++) {
        totalDataCount += rsBlocks[i4].dataCount;
      }
      if (buffer.getLengthInBits() > totalDataCount * 8) {
        throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
      }
      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
        buffer.put(0, 4);
      }
      while (buffer.getLengthInBits() % 8 != 0) {
        buffer.putBit(false);
      }
      while (true) {
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
          break;
        }
        buffer.put(QRCode2.PAD0, 8);
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
          break;
        }
        buffer.put(QRCode2.PAD1, 8);
      }
      return QRCode2.createBytes(buffer, rsBlocks);
    };
    QRCode2.createBytes = function(buffer, rsBlocks) {
      var offset = 0;
      var maxDcCount = 0;
      var maxEcCount = 0;
      var dcdata = new Array(rsBlocks.length);
      var ecdata = new Array(rsBlocks.length);
      for (var r4 = 0; r4 < rsBlocks.length; r4++) {
        var dcCount = rsBlocks[r4].dataCount;
        var ecCount = rsBlocks[r4].totalCount - dcCount;
        maxDcCount = Math.max(maxDcCount, dcCount);
        maxEcCount = Math.max(maxEcCount, ecCount);
        dcdata[r4] = new Array(dcCount);
        for (var i4 = 0; i4 < dcdata[r4].length; i4++) {
          dcdata[r4][i4] = 255 & buffer.buffer[i4 + offset];
        }
        offset += dcCount;
        var rsPoly = util.getErrorCorrectPolynomial(ecCount);
        var rawPoly = new Polynomial(dcdata[r4], rsPoly.getLength() - 1);
        var modPoly = rawPoly.mod(rsPoly);
        ecdata[r4] = new Array(rsPoly.getLength() - 1);
        for (var i4 = 0; i4 < ecdata[r4].length; i4++) {
          var modIndex = i4 + modPoly.getLength() - ecdata[r4].length;
          ecdata[r4][i4] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
        }
      }
      var totalCodeCount = 0;
      for (var i4 = 0; i4 < rsBlocks.length; i4++) {
        totalCodeCount += rsBlocks[i4].totalCount;
      }
      var data = new Array(totalCodeCount);
      var index = 0;
      for (var i4 = 0; i4 < maxDcCount; i4++) {
        for (var r4 = 0; r4 < rsBlocks.length; r4++) {
          if (i4 < dcdata[r4].length) {
            data[index++] = dcdata[r4][i4];
          }
        }
      }
      for (var i4 = 0; i4 < maxEcCount; i4++) {
        for (var r4 = 0; r4 < rsBlocks.length; r4++) {
          if (i4 < ecdata[r4].length) {
            data[index++] = ecdata[r4][i4];
          }
        }
      }
      return data;
    };
    module.exports = QRCode2;
  }
});

// node_modules/react-qr-code/lib/components/QRCodeCell/index.js
var require_QRCodeCell = __commonJS({
  "node_modules/react-qr-code/lib/components/QRCodeCell/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypes = {
      d: _propTypes2.default.string.isRequired,
      fill: _propTypes2.default.string.isRequired,
      transformX: _propTypes2.default.number.isRequired,
      transformY: _propTypes2.default.number.isRequired
    };
    var defaultProps = {};
    var QRCodeCell = function QRCodeCell2(_ref) {
      var d4 = _ref.d, fill = _ref.fill, transformX = _ref.transformX, transformY = _ref.transformY;
      return _react2.default.createElement("path", { d: d4, fill, transform: "matrix(" + [1, 0, 0, 1, transformX, transformY] + ")" });
    };
    QRCodeCell.propTypes = propTypes;
    QRCodeCell.defaultProps = defaultProps;
    exports.default = QRCodeCell;
  }
});

// node_modules/react-qr-code/lib/components/QRCodeSurface/index.js
var require_QRCodeSurface = __commonJS({
  "node_modules/react-qr-code/lib/components/QRCodeSurface/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i4 in obj) {
        if (keys.indexOf(i4) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i4))
          continue;
        target[i4] = obj[i4];
      }
      return target;
    }
    var propTypes = {
      children: _propTypes2.default.array.isRequired,
      size: _propTypes2.default.number.isRequired,
      title: _propTypes2.default.string,
      xmlns: _propTypes2.default.string
    };
    var defaultProps = {
      title: void 0,
      xmlns: "http://www.w3.org/2000/svg"
    };
    var QRCodeSurface = function QRCodeSurface2(_ref) {
      var children = _ref.children, size = _ref.size, title = _ref.title, xmlns = _ref.xmlns, props = _objectWithoutProperties(_ref, ["children", "size", "title", "xmlns"]);
      return _react2.default.createElement("svg", _extends({}, props, { height: size, width: size, xmlns }), title ? _react2.default.createElement("title", null, title) : null, children);
    };
    QRCodeSurface.propTypes = propTypes;
    QRCodeSurface.defaultProps = defaultProps;
    exports.default = QRCodeSurface;
  }
});

// node_modules/react-qr-code/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/react-qr-code/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var source = arguments[i4];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    var _QRCode = require_QRCode();
    var _QRCode2 = _interopRequireDefault(_QRCode);
    var _ErrorCorrectLevel = require_ErrorCorrectLevel();
    var _ErrorCorrectLevel2 = _interopRequireDefault(_ErrorCorrectLevel);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _QRCodeCell = require_QRCodeCell();
    var _QRCodeCell2 = _interopRequireDefault(_QRCodeCell);
    var _QRCodeSurface = require_QRCodeSurface();
    var _QRCodeSurface2 = _interopRequireDefault(_QRCodeSurface);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i4 in obj) {
        if (keys.indexOf(i4) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i4))
          continue;
        target[i4] = obj[i4];
      }
      return target;
    }
    var propTypes = {
      bgColor: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
      fgColor: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
      level: _propTypes2.default.oneOf(["L", "M", "Q", "H"]),
      size: _propTypes2.default.number,
      value: _propTypes2.default.string.isRequired
    };
    var defaultProps = {
      bgColor: "#FFFFFF",
      fgColor: "#000000",
      level: "L",
      size: 256
    };
    var QRCode2 = function QRCode3(_ref) {
      var bgColor = _ref.bgColor, fgColor = _ref.fgColor, level = _ref.level, size = _ref.size, value = _ref.value, props = _objectWithoutProperties(_ref, ["bgColor", "fgColor", "level", "size", "value"]);
      var qrcode = new _QRCode2.default(-1, _ErrorCorrectLevel2.default[level]);
      qrcode.addData(value);
      qrcode.make();
      var cells = qrcode.modules;
      var tileSize = size / cells.length;
      return _react2.default.createElement(_QRCodeSurface2.default, _extends({}, props, { size }), cells.map(function(row, rowIndex) {
        return row.map(function(cell, cellIndex) {
          var transformX = Math.round(cellIndex * tileSize);
          var transformY = Math.round(rowIndex * tileSize);
          var qrItemWidth = Math.round((cellIndex + 1) * tileSize) - transformX;
          var qrItemHeight = Math.round((rowIndex + 1) * tileSize) - transformY;
          return _react2.default.createElement(_QRCodeCell2.default, {
            key: "rectangle-" + rowIndex + "-" + cellIndex,
            d: "M 0 0 L " + qrItemWidth + " 0 L " + qrItemWidth + " " + qrItemHeight + " L 0 " + qrItemHeight + " Z",
            fill: cell ? fgColor : bgColor,
            transformX,
            transformY
          });
        });
      }));
    };
    QRCode2.propTypes = propTypes;
    QRCode2.defaultProps = defaultProps;
    exports.default = (0, _react.memo)(QRCode2);
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames2() {
        var classes = [];
        for (var i4 = 0; i4 < arguments.length; i4++) {
          var arg = arguments[i4];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames2.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString === Object.prototype.toString) {
              for (var key2 in arg) {
                if (hasOwn.call(arg, key2) && arg[key2]) {
                  classes.push(key2);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames2.default = classNames2;
        module.exports = classNames2;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames2;
        });
      } else {
        window.classNames = classNames2;
      }
    })();
  }
});

// node_modules/@web3auth/ui/dist/ui.esm.js
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
function Icon(props) {
  const {
    iconName,
    height = "auto",
    width = "auto"
  } = props;
  return icons[iconName] ? (0, import_jsx_runtime.jsx)("img", {
    height,
    width,
    src: icons[iconName].image,
    alt: iconName
  }, void 0) : null;
}
function Image(props) {
  const {
    imageId,
    height = "auto",
    width = "auto"
  } = props;
  return (0, import_jsx_runtime.jsx)("img", {
    src: "https://images.web3auth.io/".concat(imageId, ".svg"),
    height,
    width,
    alt: imageId
  }, void 0);
}
function DetailedLoader(props) {
  const {
    adapter,
    appLogo = DEFAULT_LOGO_URL$2,
    message,
    modalStatus,
    onClose
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth"
  }, void 0);
  const providerIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "login-".concat(adapter)
  }, void 0);
  (0, import_react.useEffect)(() => {
    import_loglevel2.default.debug("adapter loader re-rendering");
    if (modalStatus === MODAL_STATUS.CONNECTED) {
      setTimeout(() => {
        onClose();
      }, 3e3);
    }
  }, [modalStatus, onClose]);
  return modalStatus !== MODAL_STATUS.INITIALIZED ? (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-modal-loader w3a-modal__loader",
    children: [(0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-modal__loader-content",
      children: [(0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-modal__loader-info",
        children: [modalStatus === MODAL_STATUS.CONNECTING && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [(0, import_jsx_runtime.jsxs)("div", {
            className: "w3a-modal__loader-bridge",
            children: [(0, import_jsx_runtime.jsx)("div", {
              className: "w3a-modal__loader-app-logo",
              children: (0, import_jsx_runtime.jsx)("img", {
                src: appLogo,
                alt: ""
              }, void 0)
            }, void 0), (0, import_jsx_runtime.jsx)("div", {
              className: "w3a-modal__connector",
              children: (0, import_jsx_runtime.jsxs)("div", {
                className: "w3a-modal__connector-beat",
                children: [(0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0)]
              }, void 0)
            }, void 0), (0, import_jsx_runtime.jsx)("div", {
              className: "w3a-modal__loader-adapter",
              children: providerIcon
            }, void 0)]
          }, void 0), (0, import_jsx_runtime.jsx)("div", {
            children: (0, import_jsx_runtime.jsxs)("div", {
              className: "w3a-modal__loader-bridge-message",
              children: ["Verify on your ", (0, import_jsx_runtime.jsx)("span", {
                children: adapter
              }, void 0), " account to continue"]
            }, void 0)
          }, void 0)]
        }, void 0), modalStatus === ADAPTER_STATUS.CONNECTED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message",
          children: message
        }, void 0), modalStatus === ADAPTER_STATUS.ERRORED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message w3a-spinner-message--error",
          children: message
        }, void 0)]
      }, void 0), (0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-spinner-power",
        children: [(0, import_jsx_runtime.jsx)("div", {
          children: "Secured by"
        }, void 0), web3authIcon]
      }, void 0)]
    }, void 0), (modalStatus === ADAPTER_STATUS.CONNECTED || modalStatus === ADAPTER_STATUS.ERRORED) && (0, import_jsx_runtime.jsx)("button", {
      type: "button",
      className: "w3a-header__button w3ajs-loader-close-btn",
      onClick: onClose,
      children: closeIcon$1
    }, void 0)]
  }, void 0) : null;
}
function Loader(props) {
  const {
    message,
    modalStatus,
    label,
    onClose,
    canEmit = true
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth"
  }, void 0);
  (0, import_react.useEffect)(() => {
    import_loglevel2.default.debug("loader re-rendering");
    if (modalStatus === MODAL_STATUS.CONNECTED && canEmit) {
      setTimeout(() => {
        onClose();
      }, 3e3);
    }
  }, [canEmit, modalStatus, onClose]);
  return modalStatus !== MODAL_STATUS.INITIALIZED ? (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-modal-loader w3a-modal__loader",
    children: [(0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-modal__loader-content",
      children: [(0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-modal__loader-info",
        children: [modalStatus === MODAL_STATUS.CONNECTING && (0, import_jsx_runtime.jsxs)("div", {
          className: "w3ajs-modal-loader__spinner w3a-spinner",
          children: [(0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0)]
        }, void 0), (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__label w3a-spinner-label",
          children: label
        }, void 0), modalStatus === ADAPTER_STATUS.CONNECTED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message",
          children: message
        }, void 0), modalStatus === ADAPTER_STATUS.ERRORED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message w3a-spinner-message--error",
          children: message
        }, void 0)]
      }, void 0), (0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-spinner-power",
        children: [(0, import_jsx_runtime.jsx)("div", {
          children: "Secured by"
        }, void 0), web3authIcon]
      }, void 0)]
    }, void 0), (modalStatus === ADAPTER_STATUS.CONNECTED || modalStatus === ADAPTER_STATUS.ERRORED) && (0, import_jsx_runtime.jsx)("button", {
      type: "button",
      className: "w3a-header__button w3ajs-loader-close-btn",
      onClick: onClose,
      children: closeIcon
    }, void 0)]
  }, void 0) : null;
}
function WalletConnect(props) {
  const {
    walletConnectUri
  } = props;
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-wallet-connect w3a-wallet-connect",
    children: [(0, import_jsx_runtime.jsx)("i", {
      className: "w3a-wallet-connect__logo",
      children: walletConnectIcon
    }, void 0), (0, import_jsx_runtime.jsxs)("div", {
      className: "w3ajs-wallet-connect__container w3a-wallet-connect__container",
      children: [(0, import_jsx_runtime.jsx)("div", {
        children: "Scan QR code with a WalletConnect-compatible wallet"
      }, void 0), (0, import_jsx_runtime.jsx)("div", {
        className: "w3ajs-wallet-connect-qr w3a-wallet-connect-qr",
        children: (0, import_jsx_runtime.jsx)(import_react_qr_code.default, {
          size: 200,
          value: walletConnectUri
        }, void 0)
      }, void 0)]
    }, void 0)]
  }, void 0);
}
function ExternalWallet(props) {
  const {
    hideExternalWallets,
    handleExternalWalletClick,
    config = {},
    walletConnectUri,
    showBackButton,
    modalStatus
  } = props;
  const [isLoaded, setIsLoaded] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    var _config$WALLET_ADAPTE;
    import_loglevel2.default.debug("loaded external wallets", config);
    const wcAvailable = (((_config$WALLET_ADAPTE = config[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _config$WALLET_ADAPTE === void 0 ? void 0 : _config$WALLET_ADAPTE.showOnModal) || false) !== false;
    if (wcAvailable && !walletConnectUri) {
      handleExternalWalletClick({
        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1
      });
    } else if (Object.keys(config).length > 0) {
      setIsLoaded(true);
    }
  }, [config, handleExternalWalletClick, walletConnectUri]);
  return (0, import_jsx_runtime.jsx)("div", {
    className: "w3ajs-external-wallet w3a-group",
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-external-container w3ajs-external-container",
      children: [showBackButton && (0, import_jsx_runtime.jsxs)("button", {
        type: "button",
        className: "w3a-external-back w3ajs-external-back",
        onClick: hideExternalWallets,
        children: [(0, import_jsx_runtime.jsx)(Icon, {
          iconName: "arrow-left"
        }, void 0), (0, import_jsx_runtime.jsx)("h6", {
          className: "w3a-group__title",
          children: "Back"
        }, void 0)]
      }, void 0), !isLoaded && (0, import_jsx_runtime.jsx)(Loader, {
        modalStatus: MODAL_STATUS.CONNECTING,
        canEmit: false
      }, void 0), Object.keys(config).map((adapter) => {
        if (adapter === WALLET_ADAPTERS.WALLET_CONNECT_V1 || adapter === WALLET_ADAPTERS.WALLET_CONNECT_V2) {
          return (0, import_jsx_runtime.jsx)(WalletConnect$1, {
            walletConnectUri
          }, adapter);
        }
        return null;
      }), modalStatus === MODAL_STATUS.INITIALIZED && (0, import_jsx_runtime.jsx)("ul", {
        className: "w3a-adapter-list w3ajs-wallet-adapters",
        children: Object.keys(config).map((adapter) => {
          var _config$adapter;
          if (adapter === WALLET_ADAPTERS.WALLET_CONNECT_V1 || adapter === WALLET_ADAPTERS.WALLET_CONNECT_V2) {
            return null;
          }
          const providerIcon = (0, import_jsx_runtime.jsx)(Image, {
            imageId: "login-".concat(adapter)
          }, void 0);
          return (0, import_jsx_runtime.jsxs)("li", {
            className: "w3a-adapter-item",
            children: [(0, import_jsx_runtime.jsx)("button", {
              type: "button",
              onClick: () => handleExternalWalletClick({
                adapter
              }),
              className: "w3a-button w3a-button--icon",
              children: providerIcon
            }, void 0), (0, import_jsx_runtime.jsx)("p", {
              className: "w3a-adapter-item__label",
              children: ((_config$adapter = config[adapter]) === null || _config$adapter === void 0 ? void 0 : _config$adapter.label) || adapter
            }, void 0)]
          }, adapter);
        })
      }, void 0)]
    }, void 0)
  }, void 0);
}
function Footer(props) {
  const {
    version: version25
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth",
    height: "14px",
    width: "auto"
  }, void 0);
  return (0, import_jsx_runtime.jsx)("div", {
    className: "w3a-modal__footer",
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-footer",
      children: [(0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsxs)("div", {
          className: "w3a-footer__links",
          children: [(0, import_jsx_runtime.jsx)("a", {
            href: "https://docs.web3auth.io/legal/terms-and-conditions",
            children: "Terms of use"
          }, void 0), (0, import_jsx_runtime.jsx)("span", {
            children: "|"
          }, void 0), (0, import_jsx_runtime.jsx)("a", {
            href: "https://docs.web3auth.io/legal/privacy-policy",
            children: "Privacy policy"
          }, void 0)]
        }, void 0), (0, import_jsx_runtime.jsx)("p", {
          children: version25
        }, void 0)]
      }, void 0), (0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-footer__secured",
        children: [(0, import_jsx_runtime.jsx)("div", {
          children: "Secured by"
        }, void 0), web3authIcon]
      }, void 0)]
    }, void 0)
  }, void 0);
}
function Header(props) {
  const {
    isDark
  } = (0, import_react.useContext)(ThemedContext);
  const {
    appLogo = DEFAULT_LOGO_URL$1,
    onClose
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth".concat(isDark ? "-light" : "")
  }, void 0);
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3a-modal__header",
    children: [(0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-header",
      children: [appLogo ? (0, import_jsx_runtime.jsx)("img", {
        className: "w3a-header__logo",
        src: appLogo,
        alt: ""
      }, void 0) : web3authIcon, (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)("h1", {
          className: "w3a-header__title",
          children: "Sign in"
        }, void 0), (0, import_jsx_runtime.jsx)("p", {
          className: "w3a-header__subtitle",
          children: "Select one of the following to continue"
        }, void 0)]
      }, void 0)]
    }, void 0), (0, import_jsx_runtime.jsx)("button", {
      type: "button",
      onClick: onClose,
      className: "w3a-header__button w3ajs-close-btn",
      children: (0, import_jsx_runtime.jsx)(Icon, {
        iconName: "close"
      }, void 0)
    }, void 0)]
  }, void 0);
}
function SocialLoginEmail(props) {
  const {
    handleSocialLoginClick,
    adapter
  } = props;
  const handleEmailSubmit = (e3) => {
    e3.preventDefault();
    const email = e3.target[0].value;
    if (email)
      handleSocialLoginClick({
        adapter,
        loginParams: {
          loginProvider: "email_passwordless",
          login_hint: email
        }
      });
  };
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-email-passwordless w3a-group w3a-group--email",
    children: [(0, import_jsx_runtime.jsx)("h6", {
      className: "w3a-group__title",
      children: "EMAIL"
    }, void 0), (0, import_jsx_runtime.jsxs)("form", {
      className: "w3ajs-email-passwordless-form",
      onSubmit: (e3) => handleEmailSubmit(e3),
      children: [(0, import_jsx_runtime.jsx)("input", {
        className: "w3a-text-field",
        type: "email",
        name: "email",
        required: true,
        placeholder: "Email"
      }, void 0), (0, import_jsx_runtime.jsx)("button", {
        className: "w3a-button",
        type: "submit",
        children: "Continue with Email"
      }, void 0)]
    }, void 0)]
  }, void 0);
}
function SocialLogins(props) {
  const {
    socialLoginsConfig = {
      loginMethods: {},
      loginMethodsOrder: [],
      adapter: ""
    },
    handleSocialLoginClick
  } = props;
  const {
    isDark
  } = (0, import_react.useContext)(ThemedContext);
  const [isExpanded, setIsExpanded] = (0, import_react.useState)(false);
  const expandClickHandler = () => {
    setIsExpanded(!isExpanded);
  };
  const adapterListClass = (0, import_classnames.default)("w3a-adapter-list", "w3ajs-socials-adapters", !isExpanded ? " w3a-adapter-list--shrink" : "");
  const adapterButtonClass = (0, import_classnames.default)("w3a-button-expand", "w3ajs-button-expand", isExpanded ? "w3a-button--rotate" : "");
  const adapterExpandText = isExpanded ? "View less options" : "View more options";
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-social-logins w3a-group",
    children: [(0, import_jsx_runtime.jsx)("h6", {
      className: "w3a-group__title",
      children: "CONTINUE WITH"
    }, void 0), (0, import_jsx_runtime.jsx)("ul", {
      className: adapterListClass,
      children: Object.keys(socialLoginsConfig.loginMethods).map((method) => {
        const providerIcon = (0, import_jsx_runtime.jsx)(Image, {
          imageId: "login-".concat(method).concat(isDark && hasLightIcons.includes(method) ? "-light" : "")
        }, void 0);
        if (socialLoginsConfig.loginMethods[method].showOnModal === false || method === "webauthn" || method === "jwt" || method === "email_passwordless") {
          return null;
        }
        const orderIndex = socialLoginsConfig.loginMethodsOrder.indexOf(method) + 1;
        const order = orderIndex || Object.keys(socialLoginsConfig.loginMethods).length + 1;
        return (0, import_jsx_runtime.jsx)("li", {
          className: "w3a-adapter-item",
          style: {
            order
          },
          children: (0, import_jsx_runtime.jsx)("button", {
            type: "button",
            onClick: () => handleSocialLoginClick({
              adapter: socialLoginsConfig.adapter,
              loginParams: {
                loginProvider: method
              }
            }),
            className: "w3a-button w3a-button--icon",
            children: providerIcon
          }, void 0)
        }, method);
      })
    }, void 0), (0, import_jsx_runtime.jsxs)("button", {
      type: "button",
      className: adapterButtonClass,
      style: {
        display: Object.keys(socialLoginsConfig.loginMethods).length > 5 ? "flex" : "none"
      },
      onClick: expandClickHandler,
      children: [(0, import_jsx_runtime.jsx)(Icon, {
        iconName: "expand".concat(isDark ? "-light" : "")
      }, void 0), (0, import_jsx_runtime.jsx)("span", {
        className: "w3ajs-button-expand-text",
        children: adapterExpandText
      }, void 0)]
    }, void 0)]
  }, void 0);
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    i4 % 2 ? ownKeys2(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
function Modal(props) {
  var _modalState$socialLog3, _modalState$socialLog4;
  const {
    isDark
  } = (0, import_react.useContext)(ThemedContext);
  const [modalTransitionClasses, setModalTransitionClasses] = (0, import_react.useState)(["w3a-modal__inner"]);
  const [modalState, setModalState] = (0, import_react.useState)({
    externalWalletsVisibility: false,
    status: MODAL_STATUS.INITIALIZED,
    hasExternalWallets: false,
    externalWalletsInitialized: false,
    modalVisibility: false,
    modalVisibilityDelayed: false,
    postLoadingMessage: "",
    walletConnectUri: "",
    socialLoginsConfig: {
      loginMethods: {},
      loginMethodsOrder: [],
      adapter: ""
    },
    externalWalletsConfig: {},
    detailedLoaderAdapter: "",
    showExternalWalletsOnly: false
  });
  const {
    stateListener,
    appLogo,
    version: version25,
    handleSocialLoginClick,
    handleExternalWalletClick,
    handleShowExternalWallets,
    closeModal
  } = props;
  const DETAILED_ADAPTERS = [WALLET_ADAPTERS.PHANTOM, WALLET_ADAPTERS.METAMASK];
  (0, import_react.useEffect)(() => {
    stateListener.emit("MOUNTED");
    stateListener.on("STATE_UPDATED", (newModalState) => {
      import_loglevel2.default.debug("state updated", newModalState);
      setModalState((prevState) => {
        const mergedState = (0, import_lodash.default)((0, import_lodash2.default)(prevState, newModalState));
        return mergedState;
      });
    });
  }, [stateListener]);
  (0, import_react.useEffect)(() => {
    let timeOutId;
    if (modalState.modalVisibility) {
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          modalVisibilityDelayed: modalState.modalVisibility
        });
      });
      timeOutId = setTimeout(() => {
        setModalTransitionClasses(["w3a-modal__inner", modalState.modalVisibility ? "w3a-modal__inner--active" : ""]);
      }, 100);
    } else {
      setModalTransitionClasses(["w3a-modal__inner", modalState.modalVisibility ? "w3a-modal__inner--active" : ""]);
      timeOutId = setTimeout(() => {
        setModalState((prevState) => {
          return _objectSpread2(_objectSpread2({}, prevState), {}, {
            modalVisibilityDelayed: modalState.modalVisibility
          });
        });
      }, 250);
    }
    return () => {
      clearTimeout(timeOutId);
    };
  }, [modalState.modalVisibility]);
  const onCloseLoader = (0, import_react.useCallback)(() => {
    if (modalState.status === MODAL_STATUS.CONNECTED) {
      closeModal();
    }
    if (modalState.status === MODAL_STATUS.ERRORED) {
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          modalVisibility: true,
          status: MODAL_STATUS.INITIALIZED
        });
      });
    }
  }, [closeModal, modalState.status]);
  const preHandleExternalWalletClick = (params) => {
    const {
      adapter
    } = params;
    if (DETAILED_ADAPTERS.includes(adapter))
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          detailedLoaderAdapter: adapter
        });
      });
    else if (adapter !== WALLET_ADAPTERS.WALLET_CONNECT_V1)
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          detailedLoaderAdapter: ""
        });
      });
    handleExternalWalletClick(params);
  };
  const preHandleSocialWalletClick = (params) => {
    setModalState((prevState) => {
      return _objectSpread2(_objectSpread2({}, prevState), {}, {
        detailedLoaderAdapter: ""
      });
    });
    handleSocialLoginClick(params);
  };
  const externalWalletButton = (0, import_jsx_runtime.jsx)("div", {
    className: "w3ajs-external-wallet w3a-group",
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-external-toggle w3ajs-external-toggle",
      children: [(0, import_jsx_runtime.jsx)("h6", {
        className: "w3a-group__title",
        children: "EXTERNAL WALLET"
      }, void 0), (0, import_jsx_runtime.jsx)("button", {
        type: "button",
        className: "w3a-button w3ajs-external-toggle__button",
        onClick: () => {
          handleShowExternalWallets(modalState.externalWalletsInitialized);
          setModalState((prevState) => {
            return _objectSpread2(_objectSpread2({}, prevState), {}, {
              externalWalletsVisibility: true
            });
          });
        },
        children: "Connect with Wallet"
      }, void 0)]
    }, void 0)
  }, void 0);
  const areSocialLoginsVisible = (0, import_react.useMemo)(() => {
    var _modalState$socialLog, _modalState$socialLog2;
    if (modalState.showExternalWalletsOnly)
      return false;
    if (Object.keys(((_modalState$socialLog = modalState.socialLoginsConfig) === null || _modalState$socialLog === void 0 ? void 0 : _modalState$socialLog.loginMethods) || {}).length === 0)
      return false;
    const isAnySocialLoginVisible = Object.values(((_modalState$socialLog2 = modalState.socialLoginsConfig) === null || _modalState$socialLog2 === void 0 ? void 0 : _modalState$socialLog2.loginMethods) || {}).some((x4) => x4.showOnModal !== false);
    if (isAnySocialLoginVisible)
      return true;
    return false;
  }, [modalState.showExternalWalletsOnly, (_modalState$socialLog3 = modalState.socialLoginsConfig) === null || _modalState$socialLog3 === void 0 ? void 0 : _modalState$socialLog3.loginMethods]);
  import_loglevel2.default.info("modal state", modalState, areSocialLoginsVisible);
  const modalClassName = "w3a-modal ".concat(isDark ? "" : " w3a-modal--light");
  return (0, import_jsx_runtime.jsx)("div", {
    id: "w3a-modal",
    className: modalClassName,
    style: {
      display: !modalState.modalVisibilityDelayed ? "none" : "flex"
    },
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: modalTransitionClasses.join(" "),
      children: [(0, import_jsx_runtime.jsx)(Header$1, {
        onClose: closeModal,
        appLogo
      }, void 0), modalState.status !== MODAL_STATUS.INITIALIZED ? (0, import_jsx_runtime.jsx)("div", {
        className: "w3a-modal__content w3ajs-content",
        children: modalState.detailedLoaderAdapter ? (0, import_jsx_runtime.jsx)(DetailedLoader, {
          onClose: onCloseLoader,
          appLogo,
          modalStatus: modalState.status,
          message: modalState.postLoadingMessage,
          adapter: modalState.detailedLoaderAdapter
        }, void 0) : (0, import_jsx_runtime.jsx)(Loader, {
          onClose: onCloseLoader,
          modalStatus: modalState.status,
          message: modalState.postLoadingMessage
        }, void 0)
      }, void 0) : (0, import_jsx_runtime.jsx)("div", {
        className: "w3a-modal__content w3ajs-content",
        children: areSocialLoginsVisible && !modalState.externalWalletsVisibility ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [(0, import_jsx_runtime.jsx)(SocialLogins, {
            handleSocialLoginClick: (params) => preHandleSocialWalletClick(params),
            socialLoginsConfig: modalState.socialLoginsConfig
          }, void 0), (0, import_jsx_runtime.jsx)(SocialLoginEmail, {
            adapter: (_modalState$socialLog4 = modalState.socialLoginsConfig) === null || _modalState$socialLog4 === void 0 ? void 0 : _modalState$socialLog4.adapter,
            handleSocialLoginClick: (params) => preHandleSocialWalletClick(params)
          }, void 0), modalState.hasExternalWallets && externalWalletButton]
        }, void 0) : (0, import_jsx_runtime.jsx)(ExternalWallet, {
          modalStatus: modalState.status,
          showBackButton: areSocialLoginsVisible,
          handleExternalWalletClick: (params) => preHandleExternalWalletClick(params),
          walletConnectUri: modalState.walletConnectUri,
          config: modalState.externalWalletsConfig,
          hideExternalWallets: () => setModalState((prevState) => {
            return _objectSpread2(_objectSpread2({}, prevState), {}, {
              externalWalletsVisibility: false
            });
          })
        }, void 0)
      }, void 0), (0, import_jsx_runtime.jsx)(Footer$1, {
        version: version25
      }, void 0)]
    }, void 0)
  }, void 0);
}
function createWrapper() {
  const wrapper = document.createElement("div");
  wrapper.setAttribute("id", "w3a-container");
  document.body.appendChild(wrapper);
  return wrapper;
}
var import_jsx_runtime, import_loglevel2, import_react_dom, import_lodash, import_lodash2, import_react, import_react_qr_code, import_classnames, LOGIN_MODAL_EVENTS, MODAL_STATUS, css_248z, ThemedContext, CircleArrowLeft, Close, Expand, ExpandLight, icons, DEFAULT_LOGO_URL$2, closeIcon$1, closeIcon, walletConnectIcon, WalletConnect$1, Footer$1, DEFAULT_LOGO_URL$1, Header$1, hasLightIcons, DEFAULT_LOGO_URL, LoginModal;
var init_ui_esm = __esm({
  "node_modules/@web3auth/ui/dist/ui.esm.js"() {
    init_defineProperty();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    init_openloginJrpc_esm();
    init_base_esm();
    import_loglevel2 = __toESM(require_loglevel());
    import_react_dom = __toESM(require_react_dom());
    import_lodash = __toESM(require_lodash2());
    import_lodash2 = __toESM(require_lodash());
    import_react = __toESM(require_react());
    import_react_qr_code = __toESM(require_lib3());
    import_classnames = __toESM(require_classnames());
    LOGIN_MODAL_EVENTS = {
      INIT_EXTERNAL_WALLETS: "INIT_EXTERNAL_WALLETS",
      LOGIN: "LOGIN",
      DISCONNECT: "DISCONNECT",
      MODAL_VISIBILITY: "MODAL_VISIBILITY"
    };
    MODAL_STATUS = {
      INITIALIZED: "initialized",
      CONNECTED: "connected",
      CONNECTING: "connecting",
      ERRORED: "errored"
    };
    css_248z = '/* devanagari */\n@font-face {\n    font-family: "Poppins";\n    font-style: normal;\n    font-weight: 600;\n    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z11lFd2JQEl8qw.woff2) format("woff2");\n    unicode-range: U+0900-097F, U+1CD0-1CF6, U+1CF8-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FB;\n}\n/* latin-ext */\n@font-face {\n    font-family: "Poppins";\n    font-style: normal;\n    font-weight: 600;\n    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1JlFd2JQEl8qw.woff2) format("woff2");\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n    font-family: "Poppins";\n    font-style: normal;\n    font-weight: 600;\n    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1xlFd2JQEk.woff2) format("woff2");\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC,\n        U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: "DM Sans";\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/dmsans/v6/rP2Hp2ywxg089UriCZ2IHTWEBlwu8Q.woff2) format("woff2");\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n    font-family: "DM Sans";\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/dmsans/v6/rP2Hp2ywxg089UriCZOIHTWEBlw.woff2) format("woff2");\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC,\n        U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* Modal */\n#w3a-modal {\n    --bg1: #0f1222;\n    --bg2: #24262e;\n    --text-color1: #d3d3d4;\n    --text-color2: #ffffff;\n\n    --text-header: "Poppins", Helvetica, sans-serif;\n    --text-body: "DM Sans", Helvetica, sans-serif;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    padding: 15px;\n    background: rgba(33, 33, 33, 0.46);\n    color: var(--text-color1);\n    font-family: var(--text-body);\n}\n\n#w3a-modal.w3a-modal--hidden {\n    display: none;\n}\n\n#w3a-modal p,\n#w3a-modal form,\n#w3a-modal h1,\n#w3a-modal h6,\n#w3a-modal button {\n    margin: 0;\n    padding: 0;\n}\n\n#w3a-modal .w3a-modal__inner {\n    width: 100%;\n    max-width: 375px;\n    overflow: hidden;\n    border-radius: 6px;\n    position: relative;\n    max-height: 95%;\n    overflow-y: auto;\n    opacity: 0;\n    transition: 200ms cubic-bezier(0.25, 0.8, 0.25, 1);\n    transform-origin: center center;\n    min-height: 350px;\n}\n\n#w3a-modal .w3a-modal__inner.w3a-modal__inner--active {\n    opacity: 1;\n    transition: 200ms cubic-bezier(0.25, 0.8, 0.25, 1);\n    transform-origin: center center;\n}\n\n#w3a-modal .w3a-modal__header {\n    padding: 25px 34px;\n    background: var(--bg1);\n    box-shadow: 0px 4px 28px rgba(3, 100, 255, 0.05);\n    position: relative;\n}\n#w3a-modal .w3a-modal__content {\n    padding: 30px 34px;\n    background: var(--bg2);\n}\n#w3a-modal .w3a-modal__footer {\n    padding: 16px 34px;\n    background: var(--bg1);\n}\n\n/* SPINNER */\n/* Loader */\n#w3a-modal .w3a-modal__loader {\n    background: var(--bg1);\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 10;\n}\n\n#w3a-modal .w3a-modal__loader.w3a-modal__loader--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-modal__loader-content {\n    text-align: center;\n    margin-bottom: 80px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n#w3a-modal .w3a-modal__loader-info {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 30px;\n}\n\n#w3a-modal .w3a-spinner-label {\n    margin-top: 10px;\n    font-size: 16px;\n    font-weight: 500;\n    color: #0364ff;\n}\n\n#w3a-modal .w3a-spinner-message {\n    margin-top: 10px;\n    font-size: 16px;\n}\n#w3a-modal .w3a-spinner-message:first-letter {\n    text-transform: capitalize;\n}\n#w3a-modal .w3a-spinner-message.w3a-spinner-message--error {\n    color: #fb4a61;\n}\n\n#w3a-modal button.w3a-logout {\n    background: none;\n    border: 0;\n    padding: 0;\n    display: inline-flex;\n    align-items: center;\n    margin-bottom: 30px;\n    cursor: pointer;\n    margin-top: 20px;\n    color: #0364ff;\n}\n\n#w3a-modal .w3a-spinner-power {\n    margin-top: auto;\n    font-size: 12px;\n    line-height: 1.2em;\n    color: #b7b8bd;\n}\n#w3a-modal .w3a-spinner-power > img {\n    height: 32px;\n    width: auto;\n}\n\n.w3a-spinner {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n}\n.w3a-spinner div {\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: 64px;\n    height: 64px;\n    margin: 8px;\n    border: 6px solid #0364ff;\n    border-radius: 50%;\n    animation: w3a-spinner 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: #0364ff transparent transparent transparent;\n}\n.w3a-spinner div:nth-child(1) {\n    animation-delay: -0.45s;\n}\n.w3a-spinner div:nth-child(2) {\n    animation-delay: -0.3s;\n}\n.w3a-spinner div:nth-child(3) {\n    animation-delay: -0.15s;\n}\n.w3a-spinner.w3a-spinner--small {\n    width: 64px;\n    height: 64px;\n}\n.w3a-spinner.w3a-spinner--small div {\n    width: 48px;\n    height: 48px;\n    border: 4px solid #0364ff;\n    border-color: #0364ff transparent transparent transparent;\n}\n@keyframes w3a-spinner {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n/* Header */\n#w3a-modal .w3a-header {\n    display: flex;\n    color: var(--text-color2);\n    align-items: center;\n}\n#w3a-modal .w3a-header__logo {\n    height: auto;\n    width: 40px;\n    margin-right: 16px;\n}\n#w3a-modal h1.w3a-header__title {\n    font-family: var(--text-header);\n    font-weight: 600;\n    font-size: 20px;\n    line-height: 1.5em;\n}\n#w3a-modal p.w3a-header__subtitle {\n    font-size: 14px;\n    line-height: 1.5em;\n    font-weight: 400;\n}\n#w3a-modal button.w3a-header__button {\n    cursor: pointer;\n    position: absolute;\n    background: none;\n    padding: 0;\n    border: 0;\n    top: 20px;\n    right: 26px;\n}\n\n/* BODY */\n#w3a-modal .w3a-group {\n    margin-bottom: 24px;\n}\n#w3a-modal .w3a-group:last-child {\n    margin-bottom: 0;\n}\n\n#w3a-modal .w3a-group.w3a-group--hidden,\n#w3a-modal .w3a-group.w3a-group--social-hidden,\n#w3a-modal .w3a-group.w3a-group--email-hidden,\n#w3a-modal .w3a-group.w3a-group--ext-wallet-hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-group:not(.w3a-group--hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--social-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--email-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--ext-wallet-hidden):not(:last-child) {\n    border-bottom: 0.5px solid #5c6c7f;\n    padding-bottom: 24px;\n}\n\n#w3a-modal h6.w3a-group__title {\n    font-family: var(--text-header);\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.5em;\n    margin-bottom: 8px;\n}\n\n/* Adapter List */\n#w3a-modal ul.w3a-adapter-list {\n    display: flex;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n    gap: 16px;\n    overflow-y: hidden;\n    flex-wrap: wrap;\n    margin-bottom: 16px;\n    max-height: 500px;\n    transition: max-height 0.4s ease-in;\n}\n\n#w3a-modal ul.w3a-adapter-list.w3a-adapter-list--shrink {\n    max-height: 48px;\n    transition: max-height 0.4s ease-out;\n}\n\n#w3a-modal ul.w3a-adapter-list.w3a-adapter-list--hidden {\n    display: none;\n}\n\n#w3a-modal li.w3a-adapter-item {\n    list-style: none;\n}\n\n#w3a-modal .w3a-adapter-item--hide {\n    display: none;\n}\n\n#w3a-modal .w3a-adapter-item__label {\n    font-size: 12px;\n    color: #5c6c7f;\n    text-align: center;\n    margin-top: 8px;\n    text-transform: capitalize;\n    position: absolute;\n    transform: translate(-6px);\n    width: 60px;\n}\n\n/* Buttons */\n#w3a-modal button.w3a-button {\n    background-color: #2f3136;\n    border: 1px solid #404145;\n    box-sizing: border-box;\n    box-shadow: 2px 2px 12px rgba(3, 100, 255, 0.05);\n    border-radius: 24px;\n    height: 48px;\n    width: 100%;\n    padding: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-family: var(--text-body);\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    color: var(--text-color2);\n    cursor: pointer;\n}\n\n#w3a-modal button.w3a-button:hover {\n    background: #595857;\n}\n\n#w3a-modal button.w3a-button:active {\n    background: #6f717a;\n}\n\n#w3a-modal button.w3a-button:focus-visible {\n    outline: 1px solid #daf0ff;\n    outline-offset: -1px;\n}\n\n#w3a-modal button.w3a-button--icon {\n    width: 48px;\n}\n\n#w3a-modal button.w3a-button--left {\n    justify-content: start;\n    padding: 8px 16px;\n}\n\n#w3a-modal button.w3a-button--left > img {\n    height: 30px;\n    width: auto;\n}\n\n#w3a-modal button.w3a-button--left > div.w3a-button__name {\n    max-width: 180px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    text-transform: capitalize;\n}\n\n#w3a-modal button.w3a-button--left > div.w3a-button__note {\n    margin-left: 8px;\n    color: #b7b8bd;\n    margin-left: auto;\n}\n\n#w3a-modal .w3a-button__image {\n    max-width: 100%;\n    max-height: 100%;\n    transition: 0.3s cubic-bezier(0.25, 0.8, 0.5, 1), visibility 0s;\n}\n\n#w3a-modal button.w3a-button.w3a-button--rotate .w3a-button__image {\n    transform: rotate(180deg);\n}\n\n#w3a-modal .w3a-button--left .w3a-button__image {\n    margin-right: 12px;\n}\n\n#w3a-modal button.w3a-button-expand {\n    height: unset;\n    width: auto;\n    margin-left: auto;\n    font-size: 12px;\n    margin-top: 16px;\n    display: flex;\n    border: 8px;\n    color: var(--text-color2);\n    align-items: center;\n    cursor: pointer;\n    border-radius: 12px;\n    cursor: pointer;\n    padding: 0 10px 0 8px;\n    background: transparent;\n}\n\n#w3a-modal button.w3a-button-expand svg {\n    width: 12px;\n    height: auto;\n    margin-right: 4px;\n}\n\n#w3a-modal .w3a-external-toggle {\n    display: block;\n}\n\n#w3a-modal .w3a-external-toggle.w3a-external-toggle--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-external-container {\n    display: block;\n    margin-bottom: 34px;\n}\n\n#w3a-modal .w3a-external-container.w3a-external-container--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-external-group {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 12px;\n    margin-bottom: 16px;\n}\n\n#w3a-modal .w3a-external-group__left {\n    flex-grow: 1;\n}\n\n#w3a-modal button.w3a-external-back {\n    background: none;\n    border: 0;\n    padding: 0;\n    display: inline-flex;\n    align-items: center;\n    margin-bottom: 30px;\n    cursor: pointer;\n    color: var(--text-color1);\n}\n\n#w3a-modal .w3a-external-back:focus-visible {\n    outline: 1px solid #daf0ff;\n}\n\n#w3a-modal .w3a-external-back .w3a-group__title {\n    margin-bottom: 0;\n    margin-left: 5px;\n}\n\n#w3a-modal .w3a-external-loader {\n    display: flex;\n    justify-content: center;\n}\n\n#w3a-modal .w3a-wallet-connect {\n    display: block;\n    text-align: center;\n    margin-bottom: 16px;\n}\n\n#w3a-modal .w3a-wallet-connect.w3a-wallet-connect--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-wallet-connect__container {\n    padding: 10px;\n    background: #ffffff;\n    border-radius: 10px;\n    color: var(--text-color1);\n    font-size: 10px;\n    width: fit-content;\n    margin: auto;\n}\n\n.w3a-wallet-connect-qr {\n    width: 200px;\n    margin: 16px 16px;\n    padding: inherit;\n}\n\n#w3a-modal .w3a-wallet-connect__logo > img {\n    text-align: center;\n    width: 115px;\n    margin-bottom: 16px;\n}\n\n/* Text Field */\n#w3a-modal .w3a-text-field {\n    background: #393938;\n    border: 1px solid #27282d;\n    box-sizing: border-box;\n    box-shadow: inset 2px 2px 10px rgba(0, 0, 0, 0.4);\n    border-radius: 24px;\n    padding: 0 28px;\n    height: 48px;\n    width: 100%;\n    font-family: var(--text-body);\n    font-size: 16px;\n    color: var(--text-color2);\n    margin-bottom: 16px;\n}\n\n#w3a-modal .w3a-text-field:active {\n    background: #0f1222;\n}\n\n#w3a-modal .w3a-text-field:focus-visible {\n    outline: 1px solid #daf0ff;\n    outline-offset: -1px;\n}\n\n/* Footer Components */\n#w3a-modal .w3a-footer {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 10px;\n    line-height: 150%;\n    color: var(--text-color2);\n}\n\n#w3a-modal .w3a-footer__links {\n    padding: 0;\n    margin: 0;\n}\n\n#w3a-modal .w3a-footer__links a {\n    color: var(--text-color1);\n    text-decoration: none;\n}\n\n#w3a-modal .w3a-footer__links a:focus-visible {\n    outline: 1px solid #daf0ff;\n}\n\n#w3a-modal .w3a-footer__links span {\n    margin: 0 2px;\n}\n\n#w3a-modal .w3a-footer__secured {\n    text-align: right;\n    color: #b7b8bd;\n}\n#w3a-modal .w3a-footer__secured > img {\n    height: 14px;\n    width: auto;\n}\n\n/* Loader Bridge */\n#w3a-modal .w3a-modal__loader-bridge {\n    display: flex;\n    margin-bottom: 14px;\n}\n\n#w3a-modal .w3a-modal__loader-bridge-message span {\n    text-transform: capitalize;\n}\n\n#w3a-modal .w3a-modal__loader-app-logo {\n    display: flex;\n    padding: 8px;\n}\n\n#w3a-modal .w3a-modal__loader-app-logo img {\n    width: 64px;\n    height: auto;\n}\n\n#w3a-modal .w3a-modal__loader-adapter img {\n    width: 84px;\n    height: auto;\n}\n\n#w3a-modal .w3a-modal__connector {\n    display: flex;\n    align-items: center;\n}\n\n.w3a-modal__connector-beat {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n}\n\n.w3a-modal__connector-beat div {\n    position: absolute;\n    top: 33px;\n    width: 13px;\n    height: 13px;\n    border-radius: 50%;\n    background: #808080;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n}\n\n.w3a-modal__connector-beat div:nth-child(1) {\n    left: 8px;\n    animation: beat1 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(2) {\n    left: 8px;\n    animation: beat2 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(3) {\n    left: 8px;\n    animation: beat3 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(4) {\n    left: 32px;\n    animation: beat4 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(5) {\n    left: 56px;\n    animation: beat5 2.4s infinite;\n}\n\n@keyframes beat1 {\n    0% {\n        transform: scale(0);\n    }\n\n    25% {\n        transform: scale(0);\n    }\n\n    50% {\n        transform: scale(1);\n    }\n\n    75% {\n        transform: scale(0);\n    }\n\n    100% {\n        transform: scale(0);\n    }\n}\n\n@keyframes beat2 {\n    0% {\n        transform: scale(0);\n    }\n\n    25% {\n        transform: scale(1);\n    }\n\n    50% {\n        transform: translate(24px, 0);\n    }\n\n    75% {\n        transform: translate(0, 0);\n    }\n\n    100% {\n        transform: translate(0, 0) scale(0);\n    }\n}\n\n@keyframes beat3 {\n    0% {\n        transform: translate(0, 0);\n    }\n\n    25% {\n        transform: translate(24px, 0);\n    }\n\n    50% {\n        transform: translate(48px, 0);\n    }\n\n    75% {\n        transform: translate(24px, 0);\n    }\n\n    100% {\n        transform: translate(0, 0);\n    }\n}\n\n@keyframes beat4 {\n    0% {\n        transform: translate(0, 0);\n    }\n\n    25% {\n        transform: translate(24px, 0);\n    }\n\n    50% {\n        transform: translate(24px, 0) scale(0);\n    }\n\n    75% {\n        transform: translate(24px, 0) scale(1);\n    }\n\n    100% {\n        transform: translate(0, 0);\n    }\n}\n\n@keyframes beat5 {\n    0% {\n        transform: scale(1);\n    }\n\n    25% {\n        transform: scale(0);\n    }\n\n    50% {\n        transform: scale(0);\n    }\n\n    75% {\n        transform: scale(0);\n    }\n\n    100% {\n        transform: scale(1);\n    }\n}\n\n/* LIGHT MODE */\n#w3a-modal.w3a-modal--light {\n    --bg1: #ffffff;\n    --bg2: #f9f9fb;\n    --text-color1: #a2a5b5;\n    --text-color2: #5c6c7f;\n}\n\n#w3a-modal .w3a-group:not(.w3a-group--hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--social-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--email-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--ext-wallet-hidden):not(:last-child) {\n    border-bottom: 0.5px solid #b7b8bd;\n    padding-bottom: 24px;\n}\n\n#w3a-modal.w3a-modal--light button.w3a-button {\n    background-color: #ffffff;\n    border: 1px solid #f3f3f4;\n    box-shadow: none;\n    color: #b7b8bd;\n}\n\n#w3a-modal.w3a-modal--light button.w3a-button:focus-visible {\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-text-field {\n    background: #ffffff;\n    border: 1px solid #ffffff;\n    box-shadow: inset 2px 2px 10px rgba(0, 0, 0, 0.1);\n    color: #b7b8bd;\n}\n\n#w3a-modal.w3a-modal--light .w3a-text-field:active {\n    color: #0f1222;\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-text-field:focus-visible {\n    color: #0f1222;\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-footer__links a:focus-visible {\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-external-back:focus-visible {\n    outline: 1px solid #0f1222;\n}\n';
    styleInject(css_248z);
    ThemedContext = (0, import_react.createContext)({
      isDark: true
    });
    CircleArrowLeft = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20id%3D%2224%20%2F%20arrows%20%2F%20circle-arrow-left%22%3E%3Cpath%20id%3D%22icon%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M12%2023C5.92487%2023%201%2018.0751%201%2012C1%205.92487%205.92487%201%2012%201C18.0751%201%2023%205.92487%2023%2012C23%2018.0751%2018.0751%2023%2012%2023ZM12%2021C16.9706%2021%2021%2016.9706%2021%2012C21%207.02944%2016.9706%203%2012%203C7.02944%203%203%207.02944%203%2012C3%2016.9706%207.02944%2021%2012%2021ZM17%2011H10.4142L12.7071%208.70711L11.2929%207.29289L6.58579%2012L11.2929%2016.7071L12.7071%2015.2929L10.4142%2013H17V11Z%22%20fill%3D%22%23D3D3D4%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E";
    Close = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M13.4142%2012L19.7782%2018.364L18.364%2019.7782L12%2013.4143L5.63604%2019.7782L4.22183%2018.364L10.5858%2012L4.22183%205.63608L5.63604%204.22187L12%2010.5858L18.364%204.22187L19.7782%205.63608L13.4142%2012Z%22%20fill%3D%22%23DFDFDF%22%2F%3E%3C%2Fsvg%3E";
    Expand = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12.0991%2015.6785C11.694%2016.1072%2011.0119%2016.1072%2010.6068%2015.6785L4.98828%209.73136C4.36988%209.0768%204.83393%208%205.73441%208L16.9715%208C17.872%208%2018.336%209.0768%2017.7176%209.73136L12.0991%2015.6785Z%22%20fill%3D%22%23B7B8BD%22%2F%3E%3C%2Fsvg%3E";
    ExpandLight = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12.0991%2015.6785C11.694%2016.1072%2011.0119%2016.1072%2010.6068%2015.6785L4.98828%209.73136C4.36988%209.0768%204.83393%208%205.73441%208L16.9715%208C17.872%208%2018.336%209.0768%2017.7176%209.73136L12.0991%2015.6785Z%22%20fill%3D%22%23FFFFFF%22%2F%3E%3C%2Fsvg%3E";
    icons = {
      "arrow-left": {
        image: CircleArrowLeft
      },
      close: {
        image: Close
      },
      "expand-light": {
        image: ExpandLight
      },
      expand: {
        image: Expand
      }
    };
    DEFAULT_LOGO_URL$2 = "https://images.web3auth.io/web3auth-logo.svg";
    closeIcon$1 = (0, import_jsx_runtime.jsx)(Icon, {
      iconName: "close"
    }, void 0);
    closeIcon = (0, import_jsx_runtime.jsx)(Icon, {
      iconName: "close"
    }, void 0);
    walletConnectIcon = (0, import_jsx_runtime.jsx)(Image, {
      imageId: "wallet-connect",
      width: "114px"
    }, void 0);
    WalletConnect$1 = (0, import_react.memo)(WalletConnect);
    Footer$1 = (0, import_react.memo)(Footer);
    DEFAULT_LOGO_URL$1 = "https://images.web3auth.io/web3auth-logo.svg";
    Header$1 = (0, import_react.memo)(Header, (prevProps, nextProps) => {
      if (prevProps.appLogo !== nextProps.appLogo) {
        return true;
      }
      return false;
    });
    hasLightIcons = ["apple", "github"];
    import_loglevel2.default.enableAll();
    DEFAULT_LOGO_URL = "https://images.web3auth.io/web3auth-logo.svg";
    LoginModal = class extends SafeEventEmitter {
      constructor(_ref) {
        let {
          appLogo,
          version: version25,
          adapterListener,
          theme = "light"
        } = _ref;
        super();
        _defineProperty(this, "appLogo", void 0);
        _defineProperty(this, "version", void 0);
        _defineProperty(this, "isDark", void 0);
        _defineProperty(this, "wrapper", void 0);
        _defineProperty(this, "stateEmitter", void 0);
        _defineProperty(this, "initModal", async () => {
          const darkState = {
            isDark: this.isDark
          };
          return new Promise((resolve) => {
            this.stateEmitter.once("MOUNTED", () => {
              import_loglevel2.default.info("rendered");
              this.setState({
                status: MODAL_STATUS.INITIALIZED
              });
              return resolve();
            });
            (0, import_react_dom.render)((0, import_jsx_runtime.jsx)(ThemedContext.Provider, {
              value: darkState,
              children: (0, import_jsx_runtime.jsx)(Modal, {
                closeModal: this.closeModal,
                stateListener: this.stateEmitter,
                handleShowExternalWallets: (externalWalletsInitialized) => this.handleShowExternalWallets(externalWalletsInitialized),
                handleExternalWalletClick: (params) => this.handleExternalWalletClick(params),
                handleSocialLoginClick: (params) => this.handleSocialLoginClick(params),
                appLogo: this.appLogo,
                version: this.version
              }, void 0)
            }, void 0), this.wrapper);
          });
        });
        _defineProperty(this, "addSocialLogins", (adapter, loginMethods, loginMethodsOrder) => {
          this.setState({
            socialLoginsConfig: {
              adapter,
              loginMethods,
              loginMethodsOrder
            }
          });
          import_loglevel2.default.info("addSocialLogins", adapter, loginMethods, loginMethodsOrder);
        });
        _defineProperty(this, "addWalletLogins", (externalWalletsConfig, options) => {
          this.setState({
            externalWalletsConfig,
            externalWalletsInitialized: true,
            showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly),
            externalWalletsVisibility: true
          });
        });
        _defineProperty(this, "open", () => {
          this.setState({
            modalVisibility: true
          });
          this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, true);
        });
        _defineProperty(this, "closeModal", () => {
          this.setState({
            modalVisibility: false,
            externalWalletsVisibility: false
          });
          this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, false);
        });
        _defineProperty(this, "initExternalWalletContainer", () => {
          this.setState({
            hasExternalWallets: true
          });
        });
        _defineProperty(this, "handleShowExternalWallets", (status) => {
          this.emit(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, {
            externalWalletsInitialized: status
          });
        });
        _defineProperty(this, "handleExternalWalletClick", (params) => {
          import_loglevel2.default.info("external wallet clicked", params);
          const {
            adapter
          } = params;
          this.emit(LOGIN_MODAL_EVENTS.LOGIN, {
            adapter
          });
        });
        _defineProperty(this, "handleSocialLoginClick", (params) => {
          import_loglevel2.default.info("social login clicked", params);
          const {
            adapter,
            loginParams
          } = params;
          this.emit(LOGIN_MODAL_EVENTS.LOGIN, {
            adapter,
            loginParams: {
              loginProvider: loginParams.loginProvider,
              login_hint: loginParams.login_hint
            }
          });
        });
        _defineProperty(this, "setState", (newState) => {
          this.stateEmitter.emit("STATE_UPDATED", newState);
        });
        _defineProperty(this, "updateWalletConnect", (walletConnectUri) => {
          if (!walletConnectUri)
            return;
          this.setState({
            walletConnectUri
          });
        });
        _defineProperty(this, "handleAdapterData", (adapterData) => {
          if (adapterData.adapterName === WALLET_ADAPTERS.WALLET_CONNECT_V1) {
            const walletConnectData = adapterData.data;
            this.updateWalletConnect(walletConnectData.uri);
          }
        });
        _defineProperty(this, "subscribeCoreEvents", (listener) => {
          listener.on(ADAPTER_EVENTS.CONNECTING, (data) => {
            import_loglevel2.default.info("connecting with adapter", data);
            if ((data === null || data === void 0 ? void 0 : data.adapter) !== WALLET_ADAPTERS.WALLET_CONNECT_V1 && (data === null || data === void 0 ? void 0 : data.adapter) !== WALLET_ADAPTERS.WALLET_CONNECT_V2) {
              this.setState({
                status: MODAL_STATUS.CONNECTING
              });
            }
          });
          listener.on(ADAPTER_EVENTS.CONNECTED, (data) => {
            import_loglevel2.default.debug("connected with adapter", data);
            if (!data.reconnected) {
              this.setState({
                status: MODAL_STATUS.CONNECTED,
                modalVisibility: true,
                postLoadingMessage: "You are connected with your account"
              });
            } else {
              this.setState({
                status: MODAL_STATUS.CONNECTED
              });
            }
          });
          listener.on(ADAPTER_EVENTS.ERRORED, (error) => {
            import_loglevel2.default.error("error", error, error.message);
            if (error.code === 5e3) {
              this.setState({
                modalVisibility: true,
                postLoadingMessage: error.message || "Something went wrong!",
                status: MODAL_STATUS.ERRORED
              });
            } else {
              this.setState({
                modalVisibility: true,
                status: MODAL_STATUS.INITIALIZED
              });
            }
          });
          listener.on(ADAPTER_EVENTS.DISCONNECTED, () => {
            this.setState({
              status: MODAL_STATUS.INITIALIZED,
              externalWalletsVisibility: false
            });
          });
          listener.on(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (adapterData) => {
            this.handleAdapterData(adapterData);
          });
        });
        this.appLogo = appLogo || DEFAULT_LOGO_URL;
        this.version = version25;
        this.isDark = theme === "dark";
        this.wrapper = createWrapper();
        this.stateEmitter = new SafeEventEmitter();
        this.subscribeCoreEvents(adapterListener);
      }
    };
  }
});

// node_modules/@web3auth/web3auth/dist/web3auth.esm.js
var web3auth_esm_exports = {};
__export(web3auth_esm_exports, {
  OPENLOGIN_PROVIDERS: () => OPENLOGIN_PROVIDERS,
  Web3Auth: () => Web3Auth,
  defaultEvmDappModalConfig: () => defaultEvmDappModalConfig,
  defaultEvmWalletModalConfig: () => defaultEvmWalletModalConfig,
  defaultSolanaDappModalConfig: () => defaultSolanaDappModalConfig,
  defaultSolanaWalletModalConfig: () => defaultSolanaWalletModalConfig
});
function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    i4 % 2 ? ownKeys$2(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    i4 % 2 ? ownKeys$1(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    i4 % 2 ? ownKeys3(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
var import_loglevel3, defaultSolanaDappModalConfig, defaultEvmDappModalConfig, defaultSolanaWalletModalConfig, defaultEvmWalletModalConfig, OPENLOGIN_PROVIDERS, getDefaultAdapterModule, getAdapterSocialLogins, Web3Auth;
var init_web3auth_esm = __esm({
  "node_modules/@web3auth/web3auth/dist/web3auth.esm.js"() {
    init_openlogin_esm();
    init_base_esm();
    init_defineProperty();
    init_core_esm();
    init_ui_esm();
    import_loglevel3 = __toESM(require_loglevel());
    defaultSolanaDappModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.SOLANA,
      adapters: {
        [SOLANA_ADAPTERS.TORUS_SOLANA]: {
          label: "Torus Solana Wallet",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [SOLANA_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [SOLANA_ADAPTERS.PHANTOM]: {
          label: "Phantom",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    defaultEvmDappModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.EIP155,
      adapters: {
        [EVM_ADAPTERS.TORUS_EVM]: {
          label: "Torus Wallet",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [EVM_ADAPTERS.METAMASK]: {
          label: "MetaMask",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [EVM_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [EVM_ADAPTERS.WALLET_CONNECT_V1]: {
          label: "Wallet Connect",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    defaultSolanaWalletModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.SOLANA,
      adapters: {
        [SOLANA_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    defaultEvmWalletModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.EIP155,
      adapters: {
        [EVM_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    OPENLOGIN_PROVIDERS = [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.FACEBOOK, LOGIN_PROVIDER.TWITTER, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD, LOGIN_PROVIDER.TWITCH, LOGIN_PROVIDER.APPLE, LOGIN_PROVIDER.LINE, LOGIN_PROVIDER.GITHUB, LOGIN_PROVIDER.KAKAO, LOGIN_PROVIDER.LINKEDIN, LOGIN_PROVIDER.WEIBO, LOGIN_PROVIDER.WECHAT, LOGIN_PROVIDER.EMAIL_PASSWORDLESS];
    getDefaultAdapterModule = async (params) => {
      const {
        name: name2,
        customChainConfig,
        clientId
      } = params;
      if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace))
        throw new Error("Invalid chainNamespace: ".concat(customChainConfig.chainNamespace));
      const finalChainConfig = _objectSpread$2(_objectSpread$2({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});
      if (name2 === WALLET_ADAPTERS.TORUS_EVM) {
        const {
          TorusWalletAdapter
        } = await import("./torusEvmAdapter.esm-6RSJAG6Y.js");
        const adapter = new TorusWalletAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.TORUS_SOLANA) {
        const {
          SolanaWalletAdapter
        } = await import("./torusSolanaAdapter.esm-VBNHNG5L.js");
        const adapter = new SolanaWalletAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.METAMASK) {
        const {
          MetamaskAdapter
        } = await import("./metamaskAdapter.esm-YKE62ELY.js");
        const adapter = new MetamaskAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.PHANTOM) {
        const {
          PhantomAdapter
        } = await import("./phantomAdapter.esm-GMVOJGSZ.js");
        const adapter = new PhantomAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.WALLET_CONNECT_V1) {
        const {
          WalletConnectV1Adapter
        } = await import("./walletConnectV1Adapter.esm-ILODC6AI.js");
        const adapter = new WalletConnectV1Adapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.OPENLOGIN) {
        const {
          OpenloginAdapter,
          getOpenloginDefaultOptions
        } = await import("./openloginAdapter.esm-3KISNGON.js");
        const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId);
        const adapter = new OpenloginAdapter(_objectSpread$2(_objectSpread$2({}, defaultOptions), {}, {
          chainConfig: _objectSpread$2(_objectSpread$2({}, defaultOptions.chainConfig || {}), finalChainConfig),
          adapterSettings: _objectSpread$2(_objectSpread$2({}, defaultOptions.adapterSettings), {}, {
            clientId
          })
        }));
        return adapter;
      }
      throw new Error("Invalid wallet adapter name");
    };
    getAdapterSocialLogins = function(adapterName, adapter) {
      let loginMethodsConfig = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      const finalLoginMethodsConfig = {};
      if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {
        OPENLOGIN_PROVIDERS.forEach((loginMethod) => {
          const currentLoginMethodConfig = loginMethodsConfig[loginMethod] || {
            name: loginMethod,
            showOnMobile: true,
            showOnModal: true,
            showOnDesktop: true
          };
          finalLoginMethodsConfig[loginMethod] = _objectSpread$1({}, currentLoginMethodConfig);
          import_loglevel3.default.debug("OpenLogin login method ui config", finalLoginMethodsConfig);
        });
      } else {
        throw new Error("".concat(adapterName, " is not a valid adapter"));
      }
      return finalLoginMethodsConfig;
    };
    import_loglevel3.default.enableAll();
    import_loglevel3.default.setLevel("debug");
    Web3Auth = class extends Web3AuthCore {
      constructor(options) {
        var _this$options$uiConfi, _this$options$uiConfi2;
        super(options);
        _defineProperty(this, "loginModal", void 0);
        _defineProperty(this, "options", void 0);
        _defineProperty(this, "modalConfig", defaultEvmDappModalConfig);
        this.options = _objectSpread3({}, options);
        const providedChainConfig = this.options.chainConfig;
        if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
          if (options.authMode === "WALLET") {
            this.modalConfig = defaultSolanaWalletModalConfig;
          } else {
            this.modalConfig = defaultSolanaDappModalConfig;
          }
        } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {
          if (options.authMode === "WALLET") {
            this.modalConfig = defaultEvmWalletModalConfig;
          } else {
            this.modalConfig = defaultEvmDappModalConfig;
          }
        } else {
          throw new Error("Invalid chainNamespace provided: ".concat(providedChainConfig.chainNamespace));
        }
        this.loginModal = new LoginModal({
          theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,
          appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || "",
          version: "",
          adapterListener: this
        });
        this.subscribeToLoginModalEvents();
      }
      async initModal(params) {
        super.checkInitRequirements();
        await this.loginModal.initModal();
        const providedChainConfig = this.options.chainConfig;
        const allAdapters = [.../* @__PURE__ */ new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];
        const adapterConfigurationPromises = allAdapters.map(async (adapterName) => {
          var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;
          let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {
            label: adapterName,
            showOnModal: true,
            showOnMobile: true,
            showOnDesktop: true
          };
          if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {
            adapterConfig = _objectSpread3(_objectSpread3({}, adapterConfig), params.modalConfig[adapterName]);
          }
          this.modalConfig.adapters[adapterName] = adapterConfig;
          const adapter = this.walletAdapters[adapterName];
          import_loglevel3.default.debug("adapter config", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal);
          if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {
            const ad = await getDefaultAdapterModule({
              name: adapterName,
              customChainConfig: this.options.chainConfig,
              clientId: this.options.clientId
            });
            this.walletAdapters[adapterName] = ad;
            return adapterName;
          } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {
            var _this$modalConfig$ada4;
            if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal))
              return;
            if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {
              this.walletAdapters[adapterName].setAdapterSettings({
                clientId: this.options.clientId
              });
            }
            if (!adapter.chainConfigProxy) {
              var _this$coreOptions$cha;
              const chainConfig = _objectSpread3(_objectSpread3({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);
              this.walletAdapters[adapterName].setChainConfig(chainConfig);
            }
            return adapterName;
          }
        });
        const adapterNames = await Promise.all(adapterConfigurationPromises);
        const hasInAppWallets = Object.values(this.walletAdapters).some((adapter) => {
          if (adapter.type !== ADAPTER_CATEGORY.IN_APP)
            return false;
          if (this.modalConfig.adapters[adapter.name].showOnModal !== true)
            return false;
          if (!this.modalConfig.adapters[adapter.name].loginMethods)
            return true;
          if (Object.values(this.modalConfig.adapters[adapter.name].loginMethods).some((method) => method.showOnModal))
            return true;
          return false;
        });
        import_loglevel3.default.debug(hasInAppWallets, this.walletAdapters, "hasInAppWallets");
        const initPromises = adapterNames.map(async (adapterName) => {
          if (!adapterName)
            return;
          try {
            const adapter = this.walletAdapters[adapterName];
            if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {
              return;
            }
            this.subscribeToAdapterEvents(adapter);
            if (adapter.status === ADAPTER_STATUS.NOT_READY)
              await adapter.init({
                autoConnect: this.cachedAdapter === adapterName
              });
            if (adapter.type === ADAPTER_CATEGORY.IN_APP) {
              this.initializeInAppWallet(adapterName);
            }
          } catch (error) {
            import_loglevel3.default.error(error, "error while initializing adapter");
          }
        });
        this.status = ADAPTER_STATUS.READY;
        await Promise.all(initPromises);
        const hasExternalWallets = allAdapters.some((adapterName) => {
          var _this$walletAdapters$, _this$modalConfig$ada5;
          return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5[adapterName].showOnModal);
        });
        if (hasExternalWallets) {
          this.loginModal.initExternalWalletContainer();
        }
        if (!hasInAppWallets && hasExternalWallets) {
          await this.initExternalWalletAdapters(false, {
            showExternalWalletsOnly: true
          });
        }
      }
      async connect() {
        if (this.provider)
          return this.provider;
        this.loginModal.open();
        return new Promise((resolve, reject) => {
          this.once(ADAPTER_EVENTS.CONNECTED, () => {
            return resolve(this.provider);
          });
          this.once(ADAPTER_EVENTS.ERRORED, (err) => {
            return reject(err);
          });
        });
      }
      async initExternalWalletAdapters(externalWalletsInitialized, options) {
        if (externalWalletsInitialized)
          return;
        const adaptersConfig = {};
        const adaptersData = {};
        const adapterPromises = Object.keys(this.walletAdapters).map(async (adapterName) => {
          try {
            const adapter = this.walletAdapters[adapterName];
            if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {
              import_loglevel3.default.debug("init external wallet", this.cachedAdapter, adapterName);
              this.subscribeToAdapterEvents(adapter);
              if (this.cachedAdapter === adapterName) {
                return;
              }
              if (adapter.status === ADAPTER_STATUS.NOT_READY)
                await adapter.init({
                  autoConnect: this.cachedAdapter === adapterName
                });
              adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];
              adaptersData[adapterName] = adapter.adapterData || {};
              return adapterName;
            }
          } catch (error) {
            import_loglevel3.default.error(error, "error while initializing adapter");
          }
        });
        const adapterInitResults = await Promise.all(adapterPromises);
        const finalAdaptersConfig = {};
        adapterInitResults.forEach((result) => {
          if (result) {
            finalAdaptersConfig[result] = adaptersConfig[result];
          }
        });
        this.loginModal.addWalletLogins(finalAdaptersConfig, {
          showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)
        });
      }
      initializeInAppWallet(adapterName) {
        import_loglevel3.default.info("adapterInitResults", adapterName);
        if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {
          var _this$modalConfig$ada6, _this$options$uiConfi3;
          this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada6 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6.loginMethods), ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodsOrder) || OPENLOGIN_PROVIDERS);
        }
      }
      subscribeToLoginModalEvents() {
        this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async (params) => {
          try {
            await this.connectTo(params.adapter, params.loginParams);
          } catch (error) {
            import_loglevel3.default.error("Error while connecting to adapter: ".concat(params.adapter), error);
          }
        });
        this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async (params) => {
          await this.initExternalWalletAdapters(params.externalWalletsInitialized);
        });
        this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {
          try {
            await this.logout();
          } catch (error) {
            import_loglevel3.default.error("Error while disconnecting", error);
          }
        });
        this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async (visibility) => {
          var _this$walletAdapters$2;
          import_loglevel3.default.debug("is login modal visible", visibility);
          this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);
          const walletConnectStatus = (_this$walletAdapters$2 = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _this$walletAdapters$2 === void 0 ? void 0 : _this$walletAdapters$2.status;
          if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {
            try {
              this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();
            } catch (error) {
              import_loglevel3.default.error("Error while disconnecting to wallet connect in core", error);
            }
          }
        });
      }
    };
  }
});

// node_modules/moralis/lib/browser/Web3Connector/Web3AuthConnector.js
var require_Web3AuthConnector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/Web3AuthConnector.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Web3Auth = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _promise = _interopRequireDefault(require_promise3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var Web3Auth2 = function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(Web3Auth3, _AbstractWeb3Connecto);
      var _super = _createSuper(Web3Auth3);
      function Web3Auth3() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, Web3Auth3);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "web3Auth");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "connect", function(web3auth) {
          return new _promise.default(function(resolve, reject) {
            (function(web3auth2) {
              web3auth2.loginModal.on("MODAL_VISIBILITY", function() {
                var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(visibility) {
                  return _regenerator.default.wrap(function(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          if (!visibility) {
                            reject(new Error("Web3Auth: User closed login modal."));
                          }
                        case 1:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee);
                }));
                return function() {
                  return _ref.apply(this, arguments);
                };
              }());
            })(web3auth);
            web3auth.connect().then(resolve).catch(reject);
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "activate", (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
          var _ref3, _ref3$chainId, chainId, clientId, theme, appLogo, loginMethodsOrder, _Web3Auth, _require, _window, _window$Web3auth, ethChainConfig, web3auth, provider, _web3auth, _web3auth2, _web3auth3, isSocialLogin, ether, signer, values, providerChainId, _args2 = arguments;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _ref3 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, _ref3$chainId = _ref3.chainId, chainId = _ref3$chainId === void 0 ? "0x1" : _ref3$chainId, clientId = _ref3.clientId, theme = _ref3.theme, appLogo = _ref3.appLogo, loginMethodsOrder = _ref3.loginMethodsOrder;
                  if (clientId) {
                    _context3.next = 3;
                    break;
                  }
                  throw new Error('"clientId" not provided, please provide clientId');
                case 3:
                  try {
                    _Web3Auth = (_require = (init_web3auth_esm(), __toCommonJS(web3auth_esm_exports))) === null || _require === void 0 ? void 0 : _require.Web3Auth;
                  } catch (_unused) {
                  }
                  if (!_Web3Auth) {
                    _Web3Auth = (_window = window) === null || _window === void 0 ? void 0 : (_window$Web3auth = _window.Web3auth) === null || _window$Web3auth === void 0 ? void 0 : _window$Web3auth.Web3Auth;
                  }
                  if (_Web3Auth) {
                    _context3.next = 7;
                    break;
                  }
                  throw new Error('"@web3auth/web3auth" not installed, please install');
                case 7:
                  ethChainConfig = {
                    chainNamespace: "eip155",
                    chainId: (0, _verifyChainId.default)(chainId)
                  };
                  try {
                    web3auth = new _Web3Auth({
                      chainConfig: ethChainConfig,
                      uiConfig: {
                        theme: theme !== null && theme !== void 0 ? theme : "dark",
                        appLogo: appLogo !== null && appLogo !== void 0 ? appLogo : "https://moralis.io/wp-content/uploads/2021/05/moralisWhiteLogo.svg",
                        loginMethodsOrder
                      },
                      clientId
                    });
                  } catch (_unused2) {
                  }
                  if (web3auth) {
                    _context3.next = 11;
                    break;
                  }
                  throw new Error("Could not connect via Web3Auth, error during initializing Web3Auth");
                case 11:
                  _context3.next = 13;
                  return web3auth.initModal();
                case 13:
                  provider = null;
                  _context3.next = 16;
                  return _this.connect(web3auth);
                case 16:
                  provider = _context3.sent;
                  if (provider) {
                    _context3.next = 19;
                    break;
                  }
                  throw new Error("Could not connect via Web3Auth, error in connecting to provider");
                case 19:
                  _context3.prev = 19;
                  isSocialLogin = (_web3auth = web3auth) !== null && _web3auth !== void 0 && _web3auth.provider ? false : true;
                  ether = new _ethers.ethers.providers.Web3Provider((_web3auth2 = web3auth) !== null && _web3auth2 !== void 0 && _web3auth2.provider ? web3auth.provider : web3auth);
                  signer = ether.getSigner();
                  _context3.next = 25;
                  return _promise.default.all([ether.getNetwork(), signer.getAddress()]);
                case 25:
                  values = _context3.sent;
                  providerChainId = values[0].chainId;
                  _this.account = values[1].toLocaleLowerCase();
                  _this.chainId = "0x".concat(providerChainId.toString(16));
                  _this.provider = isSocialLogin ? ether : (_web3auth3 = web3auth) === null || _web3auth3 === void 0 ? void 0 : _web3auth3.provider;
                  _this.web3Instance = web3auth;
                  _this.subscribeToEvents(_this.provider);
                  return _context3.abrupt("return", {
                    chainId: _this.chainId,
                    account: _this.account,
                    provider: _this.provider
                  });
                case 35:
                  _context3.prev = 35;
                  _context3.t0 = _context3["catch"](19);
                  throw new Error("Could not connect via Web3Auth, error while authenticating");
                case 38:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee2, null, [[19, 35]]);
        })));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "deactivate", (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _this.unsubscribeToEvents(_this.provider);
                  if (!_this.web3Instance) {
                    _context4.next = 4;
                    break;
                  }
                  _context4.next = 4;
                  return _this.web3Instance.logout();
                case 4:
                  _this.account = null;
                  _this.chainId = null;
                  _this.provider = null;
                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee3);
        })));
        return _this;
      }
      return (0, _createClass2.default)(Web3Auth3);
    }(_AbstractWeb3Connector.default);
    exports.Web3Auth = Web3Auth2;
  }
});

// node_modules/moralis/lib/browser/MoralisWeb3.js
var require_MoralisWeb3 = __commonJS({
  "node_modules/moralis/lib/browser/MoralisWeb3.js"(exports) {
    "use strict";
    var _typeof3 = require_typeof();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray = require_is_array4();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _filter = _interopRequireDefault(require_filter4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _map = _interopRequireDefault(require_map10());
    var _trim = _interopRequireDefault(require_trim4());
    var _find = _interopRequireDefault(require_find4());
    var _every = _interopRequireDefault(require_every4());
    var _values = _interopRequireDefault(require_values3());
    var _bind = _interopRequireDefault(require_bind8());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _events = _interopRequireDefault(require_events());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _MoralisErd = _interopRequireDefault(require_MoralisErd());
    var _MoralisDot = _interopRequireDefault(require_MoralisDot());
    var _MoralisSol = _interopRequireDefault(require_MoralisSol());
    var _TransferUtils = _interopRequireDefault(require_TransferUtils());
    var _Cloud = require_Cloud();
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var _WalletConnectWeb3Connector = _interopRequireDefault(require_WalletConnectWeb3Connector());
    var _InjectedWeb3Connector = _interopRequireDefault(require_InjectedWeb3Connector());
    var _NetworkWeb3Connector = _interopRequireDefault(require_NetworkWeb3Connector());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _InternalWeb3Provider = _interopRequireWildcard(require_InternalWeb3Provider());
    var _detectProvider = _interopRequireDefault(require_dist3());
    var _MagicWeb3Connector = _interopRequireDefault(require_MagicWeb3Connector());
    var _Web3AuthConnector = require_Web3AuthConnector();
    var _context30;
    var _context31;
    var _context32;
    var _context33;
    var _context34;
    var _context35;
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key2 in obj) {
        if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key2) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key2, desc);
          } else {
            newObj[key2] = obj[key2];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context36;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty(_context36 = Object.prototype.toString.call(o4)).call(_context36, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    var MoralisEmitter = new _events.default();
    var ERROR_WEB3_MISSING = "Missing web3 instance, make sure to call Moralis.enableWeb3() or Moralis.authenticate()";
    var MoralisWeb3 = function() {
      function MoralisWeb32() {
        (0, _classCallCheck2.default)(this, MoralisWeb32);
      }
      (0, _createClass2.default)(MoralisWeb32, null, [{
        key: "addListener",
        value: function(eventName, listener) {
          MoralisEmitter.on(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "on",
        value: function(eventName, listener) {
          MoralisEmitter.on(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "once",
        value: function(eventName, listener) {
          MoralisEmitter.once(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "removeListener",
        value: function(eventName, listener) {
          return MoralisEmitter.removeListener(eventName, listener);
        }
      }, {
        key: "off",
        value: function(eventName, listener) {
          return MoralisEmitter.off(eventName, listener);
        }
      }, {
        key: "removeAllListeners",
        value: function(eventName, listener) {
          return MoralisEmitter.removeAllListeners(eventName, listener);
        }
      }, {
        key: "isWeb3Enabled",
        value: function() {
          return this.ensureWeb3IsInstalled();
        }
      }, {
        key: "handleWeb3AccountChanged",
        value: function(account) {
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleWeb3ChainChanged",
        value: function(chainId) {
          var _this$internalWeb3Pro;
          this.web3 = (_this$internalWeb3Pro = this.internalWeb3Provider) === null || _this$internalWeb3Pro === void 0 ? void 0 : _this$internalWeb3Pro.web3;
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, chainId);
        }
      }, {
        key: "handleWeb3Connect",
        value: function(connectInfo) {
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, connectInfo);
        }
      }, {
        key: "handleWeb3Disconnect",
        value: function(error) {
          if ((error === null || error === void 0 ? void 0 : error.message) === "MetaMask: Disconnected from chain. Attempting to connect.") {
            return;
          }
          this.cleanup();
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, error);
        }
      }, {
        key: "enableWeb3",
        value: function() {
          var _enableWeb = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
            var _this = this;
            var options, _options$connector, Connector, connector, anyNetwork, provider, chainId, account, internalWeb3, _yield$this$internalW, web3, _args = arguments;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {};
                    if (!this.isEnablingWeb3) {
                      _context.next = 3;
                      break;
                    }
                    throw new Error("Cannot execute Moralis.enableWeb3(), as Moralis Moralis.enableWeb3() already has been called, but is not finished yet ");
                  case 3:
                    _context.prev = 3;
                    this.isEnablingWeb3 = true;
                    if (this.speedyNodeApiKey) {
                      options.speedyNodeApiKey = this.speedyNodeApiKey;
                      options.provider = "network";
                    }
                    Connector = (_options$connector = options === null || options === void 0 ? void 0 : options.connector) !== null && _options$connector !== void 0 ? _options$connector : MoralisWeb32.getWeb3Connector(options === null || options === void 0 ? void 0 : options.provider);
                    connector = new Connector(options);
                    anyNetwork = (options === null || options === void 0 ? void 0 : options.anyNetwork) === true ? true : false;
                    this.internalWeb3Provider = new _InternalWeb3Provider.default(connector, anyNetwork, options.privateKey);
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, function(args) {
                      return _this.handleWeb3AccountChanged(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, function(args) {
                      return _this.handleWeb3ChainChanged(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, function(args) {
                      return _this.handleWeb3Connect(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, function(args) {
                      return _this.handleWeb3Disconnect(args);
                    });
                    _context.prev = 14;
                    _context.next = 17;
                    return this.internalWeb3Provider.activate(options);
                  case 17:
                    _yield$this$internalW = _context.sent;
                    provider = _yield$this$internalW.provider;
                    chainId = _yield$this$internalW.chainId;
                    account = _yield$this$internalW.account;
                    internalWeb3 = _yield$this$internalW.web3;
                    if (provider) {
                      _context.next = 24;
                      break;
                    }
                    throw new Error("Failed to activate, no provider returned");
                  case 24:
                    _context.next = 31;
                    break;
                  case 26:
                    _context.prev = 26;
                    _context.t0 = _context["catch"](14);
                    _context.next = 30;
                    return this.cleanup();
                  case 30:
                    throw _context.t0;
                  case 31:
                    web3 = internalWeb3;
                    this.web3 = internalWeb3;
                    MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.WEB3_ENABLED, {
                      chainId,
                      account,
                      connector,
                      provider,
                      web3
                    });
                    return _context.abrupt("return", web3);
                  case 37:
                    _context.prev = 37;
                    _context.t1 = _context["catch"](3);
                    throw _context.t1;
                  case 40:
                    _context.prev = 40;
                    this.isEnablingWeb3 = false;
                    return _context.finish(40);
                  case 43:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[3, 37, 40, 43], [14, 26]]);
          }));
          return function() {
            return _enableWeb.apply(this, arguments);
          };
        }()
      }, {
        key: "isDotAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "dot":
            case "polkadot":
            case "kusama":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isElrondAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "erd":
            case "elrond":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isSolAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "sol":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "getWeb3Connector",
        value: function(provider) {
          switch (provider) {
            case "walletconnect":
            case "walletConnect":
            case "wc":
              return _WalletConnectWeb3Connector.default;
            case "network":
              return _NetworkWeb3Connector.default;
            case "magicLink":
              return _MagicWeb3Connector.default;
            case "web3Auth":
              return _Web3AuthConnector.Web3Auth;
            default:
              return _InjectedWeb3Connector.default;
          }
        }
      }, {
        key: "deactivateWeb3",
        value: function() {
          var _deactivateWeb = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return", this.cleanup());
                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivateWeb.apply(this, arguments);
          };
        }()
      }, {
        key: "cleanup",
        value: function() {
          var _cleanup = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!this.isEnablingWeb3) {
                      _context3.next = 5;
                      break;
                    }
                    this.isEnablingWeb3 = false;
                    this.internalWeb3Provider = null;
                    this.web3 = null;
                    return _context3.abrupt("return");
                  case 5:
                    if (this.web3 && this.internalWeb3Provider) {
                      MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.WEB3_DEACTIVATED, {
                        connector: this.internalWeb3Provider.connector,
                        provider: this.internalWeb3Provider.provider
                      });
                    }
                    if (!this.internalWeb3Provider) {
                      _context3.next = 18;
                      break;
                    }
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, this.handleWeb3AccountChanged);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, this.handleWeb3ChainChanged);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, this.handleWeb3Connect);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, this.handleWeb3Disconnect);
                    _context3.prev = 11;
                    _context3.next = 14;
                    return this.internalWeb3Provider.deactivate();
                  case 14:
                    _context3.next = 18;
                    break;
                  case 16:
                    _context3.prev = 16;
                    _context3.t0 = _context3["catch"](11);
                  case 18:
                    this.internalWeb3Provider = null;
                    this.web3 = null;
                  case 20:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[11, 16]]);
          }));
          return function() {
            return _cleanup.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(options) {
            var isLoggedIn, _this$getInternalWeb, account, internalWeb3, signer, message, data, ethAddress, signature2, authData, user;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return _ParseUser.default.currentAsync();
                  case 2:
                    isLoggedIn = _context4.sent;
                    if (!isLoggedIn) {
                      _context4.next = 6;
                      break;
                    }
                    _context4.next = 6;
                    return _ParseUser.default.logOut();
                  case 6:
                    if (!MoralisWeb32.isDotAuth(options)) {
                      _context4.next = 8;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisDot.default.authenticate(options));
                  case 8:
                    if (!MoralisWeb32.isElrondAuth(options)) {
                      _context4.next = 10;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisErd.default.authenticate(options));
                  case 10:
                    if (!MoralisWeb32.isSolAuth(options)) {
                      _context4.next = 12;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisSol.default.authenticate(options));
                  case 12:
                    _context4.next = 14;
                    return this.enableWeb3(options);
                  case 14:
                    _this$getInternalWeb = this.getInternalWeb3Provider(), account = _this$getInternalWeb.account, internalWeb3 = _this$getInternalWeb.web3, signer = _this$getInternalWeb.signer;
                    if (account) {
                      _context4.next = 17;
                      break;
                    }
                    throw new Error("Cannot authenticate, no account returned from provider");
                  case 17:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisWeb32.getSigningData();
                    _context4.next = 20;
                    return (0, _createSigningData.default)(message);
                  case 20:
                    data = _context4.sent;
                    ethAddress = account.toLowerCase();
                    if (ethAddress) {
                      _context4.next = 24;
                      break;
                    }
                    throw new Error("Address not found");
                  case 24:
                    _context4.next = 26;
                    return signer.signMessage(data);
                  case 26:
                    signature2 = _context4.sent;
                    if (signature2) {
                      _context4.next = 29;
                      break;
                    }
                    throw new Error("Data not signed");
                  case 29:
                    authData = {
                      id: ethAddress,
                      signature: signature2,
                      data
                    };
                    _context4.next = 32;
                    return _ParseUser.default.logInWith("moralisEth", {
                      authData
                    });
                  case 32:
                    user = _context4.sent;
                    if (user) {
                      _context4.next = 35;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 35:
                    _context4.next = 37;
                    return user.setACL(new _ParseACL.default(user));
                  case 37:
                    user.addAllUnique("accounts", [ethAddress]);
                    user.set("ethAddress", ethAddress);
                    _context4.next = 41;
                    return user.save(null, options);
                  case 41:
                    return _context4.abrupt("return", user);
                  case 42:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(account, options) {
            var _this$getInternalWeb2, signer, message, user, ethAddress, EthAddress, query, ethAddressRecord, data, signature2, authData;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _this$getInternalWeb2 = this.getInternalWeb3Provider(), signer = _this$getInternalWeb2.signer;
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisWeb32.getSigningData();
                    _context5.next = 4;
                    return _ParseUser.default.currentAsync();
                  case 4:
                    user = _context5.sent;
                    ethAddress = account.toLowerCase();
                    EthAddress = _ParseObject.default.extend("_EthAddress");
                    query = new _ParseQuery.default(EthAddress);
                    _context5.next = 10;
                    return query.get(ethAddress).catch(function() {
                      return null;
                    });
                  case 10:
                    ethAddressRecord = _context5.sent;
                    if (ethAddressRecord) {
                      _context5.next = 23;
                      break;
                    }
                    _context5.next = 14;
                    return (0, _createSigningData.default)(message);
                  case 14:
                    data = _context5.sent;
                    _context5.next = 17;
                    return signer.signMessage(data);
                  case 17:
                    signature2 = _context5.sent;
                    if (signature2) {
                      _context5.next = 20;
                      break;
                    }
                    throw new Error("Data not signed");
                  case 20:
                    authData = {
                      id: ethAddress,
                      signature: signature2,
                      data
                    };
                    _context5.next = 23;
                    return user.linkWith("moralisEth", {
                      authData
                    });
                  case 23:
                    user.addAllUnique("accounts", [ethAddress]);
                    user.set("ethAddress", ethAddress);
                    _context5.next = 27;
                    return user.save(null, options);
                  case 27:
                    return _context5.abrupt("return", user);
                  case 28:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6(account) {
            var _user$get;
            var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    accountsLower = account.toLowerCase();
                    EthAddress = _ParseObject.default.extend("_EthAddress");
                    query = new _ParseQuery.default(EthAddress);
                    _context6.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    ethAddressRecord = _context6.sent;
                    _context6.next = 8;
                    return ethAddressRecord.destroy();
                  case 8:
                    _context6.next = 10;
                    return _ParseUser.default.currentAsync();
                  case 10:
                    user = _context6.sent;
                    accounts = (_user$get = user.get("accounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v4) {
                      return v4 !== accountsLower;
                    });
                    user.set("accounts", nextAccounts);
                    user.set("ethAddress", nextAccounts[0]);
                    _context6.next = 17;
                    return user._unlinkFrom("moralisEth");
                  case 17:
                    _context6.next = 19;
                    return user.save();
                  case 19:
                    return _context6.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "initPlugins",
        value: function() {
          var _initPlugins = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee8(installedPlugins) {
            var _this2 = this;
            var specs, allPlugins;
            return _regenerator.default.wrap(function(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.t0 = installedPlugins;
                    if (_context10.t0) {
                      _context10.next = 5;
                      break;
                    }
                    _context10.next = 4;
                    return (0, _Cloud.run)("getPluginSpecs");
                  case 4:
                    _context10.t0 = _context10.sent;
                  case 5:
                    specs = _context10.t0;
                    if (!this.Plugins)
                      this.Plugins = {};
                    if (specs) {
                      _context10.next = 9;
                      break;
                    }
                    return _context10.abrupt("return");
                  case 9:
                    allPlugins = this.Plugins;
                    (0, _forEach.default)(specs).call(specs, function(plugin) {
                      var _context7;
                      allPlugins[plugin.name] = {};
                      (0, _forEach.default)(_context7 = plugin.functions).call(_context7, function(f4) {
                        allPlugins[plugin.name][f4] = function() {
                          var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7(params, options) {
                            var _context8;
                            var response, error, triggerReturn;
                            return _regenerator.default.wrap(function(_context9) {
                              while (1) {
                                switch (_context9.prev = _context9.next) {
                                  case 0:
                                    if (!options)
                                      options = {};
                                    _context9.next = 3;
                                    return (0, _Cloud.run)((0, _concat.default)(_context8 = "".concat(plugin.name, "_")).call(_context8, f4), params);
                                  case 3:
                                    response = _context9.sent;
                                    if (response.data.success) {
                                      _context9.next = 7;
                                      break;
                                    }
                                    error = (0, _stringify.default)(response.data.data, null, 2);
                                    throw new Error("Something went wrong\n".concat(error));
                                  case 7:
                                    if (!(options.disableTriggers !== true)) {
                                      _context9.next = 13;
                                      break;
                                    }
                                    _context9.next = 10;
                                    return _this2.handleTriggers(response.data.result.triggers, response.data.result.data);
                                  case 10:
                                    triggerReturn = _context9.sent;
                                    if (!triggerReturn) {
                                      _context9.next = 13;
                                      break;
                                    }
                                    return _context9.abrupt("return", triggerReturn);
                                  case 13:
                                    return _context9.abrupt("return", response.data.result);
                                  case 14:
                                  case "end":
                                    return _context9.stop();
                                }
                              }
                            }, _callee7);
                          }));
                          return function() {
                            return _ref.apply(this, arguments);
                          };
                        }();
                      });
                    });
                    this.Plugins = allPlugins;
                  case 12:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee8, this);
          }));
          return function() {
            return _initPlugins.apply(this, arguments);
          };
        }()
      }, {
        key: "handleTriggers",
        value: function() {
          var _handleTriggers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee9(triggersArray, payload) {
            var _this3 = this;
            var _loop, i4, _ret;
            return _regenerator.default.wrap(function(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    if (triggersArray) {
                      _context14.next = 2;
                      break;
                    }
                    return _context14.abrupt("return");
                  case 2:
                    _loop = _regenerator.default.mark(function _loop2(i5) {
                      var _triggersArray$i, _triggersArray$i$data, _triggersArray$i2, _triggersArray$i2$dat, _triggersArray$i$data2, _triggersArray$i3, _triggersArray$i3$dat, _triggersArray$i4, _triggersArray$i4$dat, _triggersArray$i5, _triggersArray$i6, _triggersArray$i7, _triggersArray$i8, _triggersArray$i9, _triggersArray$i10, _triggersArray$i11, _triggersArray$i12, _triggersArray$i13, _triggersArray$i14, _triggersArray$i15, _triggersArray$i16, _triggersArray$i17, _triggersArray$i18, _triggersArray$i20, _triggersArray$i22, _triggersArray$i23, _triggersArray$i24;
                      var message, _response, _context11, _context12, _triggersArray$i19, _JSON$parse, domain, types, _message, signature2, result, _JSON$parse2, _domain, _types, _message2;
                      return _regenerator.default.wrap(function(_context13) {
                        while (1) {
                          switch (_context13.prev = _context13.next) {
                            case 0:
                              _context13.t0 = triggersArray[i5].name;
                              _context13.next = _context13.t0 === "openUrl" ? 3 : _context13.t0 === "web3Transaction" ? 5 : _context13.t0 === "web3Sign" ? 18 : _context13.t0 === "callPluginEndpoint" ? 33 : _context13.t0 === "web3SignV4" ? 55 : 80;
                              break;
                            case 3:
                              if (triggersArray[i5].newTab)
                                window.open(triggersArray[i5].url);
                              else
                                window.open(triggersArray[i5].url, "_self");
                              return _context13.abrupt("break", 81);
                            case 5:
                              _context13.next = 7;
                              return _this3.getInternalWeb3Provider().signer.sendTransaction({
                                from: (_triggersArray$i = triggersArray[i5]) === null || _triggersArray$i === void 0 ? void 0 : (_triggersArray$i$data = _triggersArray$i.data) === null || _triggersArray$i$data === void 0 ? void 0 : _triggersArray$i$data.from,
                                to: (_triggersArray$i2 = triggersArray[i5]) === null || _triggersArray$i2 === void 0 ? void 0 : (_triggersArray$i2$dat = _triggersArray$i2.data) === null || _triggersArray$i2$dat === void 0 ? void 0 : _triggersArray$i2$dat.to,
                                value: _ethers.ethers.BigNumber.from((_triggersArray$i$data2 = (_triggersArray$i3 = triggersArray[i5]) === null || _triggersArray$i3 === void 0 ? void 0 : (_triggersArray$i3$dat = _triggersArray$i3.data) === null || _triggersArray$i3$dat === void 0 ? void 0 : _triggersArray$i3$dat.value) !== null && _triggersArray$i$data2 !== void 0 ? _triggersArray$i$data2 : 0),
                                data: (_triggersArray$i4 = triggersArray[i5]) === null || _triggersArray$i4 === void 0 ? void 0 : (_triggersArray$i4$dat = _triggersArray$i4.data) === null || _triggersArray$i4$dat === void 0 ? void 0 : _triggersArray$i4$dat.data
                              });
                            case 7:
                              _response = _context13.sent;
                              if (!(((_triggersArray$i5 = triggersArray[i5]) === null || _triggersArray$i5 === void 0 ? void 0 : _triggersArray$i5.shouldAwait) === true)) {
                                _context13.next = 12;
                                break;
                              }
                              _context13.next = 11;
                              return _response.wait();
                            case 11:
                              _response = _context13.sent;
                            case 12:
                              if (((_triggersArray$i6 = triggersArray[i5]) === null || _triggersArray$i6 === void 0 ? void 0 : _triggersArray$i6.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i7 = triggersArray[i5]) === null || _triggersArray$i7 === void 0 ? void 0 : _triggersArray$i7.shouldReturnPayload) === true)) {
                                _context13.next = 15;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 15:
                              if (!(((_triggersArray$i8 = triggersArray[i5]) === null || _triggersArray$i8 === void 0 ? void 0 : _triggersArray$i8.shouldReturnResponse) === true)) {
                                _context13.next = 17;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 17:
                              return _context13.abrupt("break", 81);
                            case 18:
                              if (triggersArray[i5].message) {
                                _context13.next = 20;
                                break;
                              }
                              throw new Error("web3Sign trigger does not have a message to sign");
                            case 20:
                              if (triggersArray[i5].signer) {
                                _context13.next = 22;
                                break;
                              }
                              throw new Error("web3Sign trigger signer address missing or invalid");
                            case 22:
                              message = JSON.parse(triggersArray[i5].message);
                              delete message.types.EIP712Domain;
                              _context13.next = 26;
                              return _this3.getInternalWeb3Provider().signer._signTypedData(message.domain, message.types, message.message);
                            case 26:
                              _response = _context13.sent;
                              if (((_triggersArray$i9 = triggersArray[i5]) === null || _triggersArray$i9 === void 0 ? void 0 : _triggersArray$i9.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i10 = triggersArray[i5]) === null || _triggersArray$i10 === void 0 ? void 0 : _triggersArray$i10.shouldReturnPayload) === true)) {
                                _context13.next = 30;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 30:
                              if (!(((_triggersArray$i11 = triggersArray[i5]) === null || _triggersArray$i11 === void 0 ? void 0 : _triggersArray$i11.shouldReturnResponse) === true)) {
                                _context13.next = 32;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 32:
                              return _context13.abrupt("break", 81);
                            case 33:
                              if (triggersArray[i5].pluginName) {
                                _context13.next = 35;
                                break;
                              }
                              throw new Error("callPluginEndpoint trigger does not have an plugin name to call");
                            case 35:
                              if (triggersArray[i5].endpoint) {
                                _context13.next = 37;
                                break;
                              }
                              throw new Error("callPluginEndpoint trigger does not have an endpoint to call");
                            case 37:
                              if (!(((_triggersArray$i12 = triggersArray[i5]) === null || _triggersArray$i12 === void 0 ? void 0 : _triggersArray$i12.shouldAwait) === true)) {
                                _context13.next = 42;
                                break;
                              }
                              if (triggersArray[i5].useSavedResponse === true) {
                                triggersArray[i5].params[triggersArray[i5].savedResponseAs] = _this3.memoryCard.get(triggersArray[i5].savedResponseAt);
                              }
                              _context13.next = 41;
                              return (0, _Cloud.run)((0, _concat.default)(_context11 = "".concat(triggersArray[i5].pluginName, "_")).call(_context11, triggersArray[i5].endpoint), triggersArray[i5].params);
                            case 41:
                              _response = _context13.sent;
                            case 42:
                              if (((_triggersArray$i13 = triggersArray[i5]) === null || _triggersArray$i13 === void 0 ? void 0 : _triggersArray$i13.shouldAwait) === false) {
                                if (triggersArray[i5].useSavedResponse === true) {
                                  triggersArray[i5].params[triggersArray[i5].savedResponseAs] = _this3.memoryCard.get(triggersArray[i5].savedResponseAt);
                                }
                                _response = (0, _Cloud.run)((0, _concat.default)(_context12 = "".concat(triggersArray[i5].pluginName, "_")).call(_context12, triggersArray[i5].endpoint), triggersArray[i5].params);
                              }
                              if (!(triggersArray[i5].runResponseTrigger === true)) {
                                _context13.next = 47;
                                break;
                              }
                              _context13.next = 46;
                              return _this3.handleTriggers(_response.data.result.triggers, _response.data.result.data);
                            case 46:
                              _response = _context13.sent;
                            case 47:
                              if (((_triggersArray$i14 = triggersArray[i5]) === null || _triggersArray$i14 === void 0 ? void 0 : _triggersArray$i14.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i15 = triggersArray[i5]) === null || _triggersArray$i15 === void 0 ? void 0 : _triggersArray$i15.runResponseTrigger) === false)) {
                                _context13.next = 50;
                                break;
                              }
                              return _context13.abrupt("return", "continue");
                            case 50:
                              if (!(((_triggersArray$i16 = triggersArray[i5]) === null || _triggersArray$i16 === void 0 ? void 0 : _triggersArray$i16.shouldReturnPayload) === true)) {
                                _context13.next = 52;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload: "payload",
                                  response: _response
                                }
                              });
                            case 52:
                              if (!(((_triggersArray$i17 = triggersArray[i5]) === null || _triggersArray$i17 === void 0 ? void 0 : _triggersArray$i17.shouldReturnResponse) === true)) {
                                _context13.next = 54;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 54:
                              return _context13.abrupt("break", 81);
                            case 55:
                              if (triggersArray[i5].parameters) {
                                _context13.next = 57;
                                break;
                              }
                              throw new Error("web3SignV4 trigger does not have `parameters` to sign");
                            case 57:
                              if (triggersArray[i5].from) {
                                _context13.next = 59;
                                break;
                              }
                              throw new Error("web3SignV4 trigger does not have a `from` address");
                            case 59:
                              if (!(((_triggersArray$i18 = triggersArray[i5]) === null || _triggersArray$i18 === void 0 ? void 0 : _triggersArray$i18.shouldAwait) === true)) {
                                _context13.next = 74;
                                break;
                              }
                              _context13.prev = 60;
                              _JSON$parse = JSON.parse(triggersArray[i5].parameters[1]), domain = _JSON$parse.domain, types = _JSON$parse.types, _message = _JSON$parse.message;
                              if (types.EIP712Domain) {
                                delete types.EIP712Domain;
                              }
                              _context13.next = 65;
                              return _this3.getInternalWeb3Provider().signer._signTypedData(domain, types, _message);
                            case 65:
                              signature2 = _context13.sent;
                              result = {
                                result: signature2
                              };
                              if (((_triggersArray$i19 = triggersArray[i5]) === null || _triggersArray$i19 === void 0 ? void 0 : _triggersArray$i19.saveResponse) === true)
                                _this3.memoryCard.save(result);
                              _response = result;
                              _context13.next = 74;
                              break;
                            case 71:
                              _context13.prev = 71;
                              _context13.t1 = _context13["catch"](60);
                              throw new Error(_context13.t1.message || _context13.t1);
                            case 74:
                              if (((_triggersArray$i20 = triggersArray[i5]) === null || _triggersArray$i20 === void 0 ? void 0 : _triggersArray$i20.shouldAwait) === false) {
                                _JSON$parse2 = JSON.parse(triggersArray[i5].parameters[1]), _domain = _JSON$parse2.domain, _types = _JSON$parse2.types, _message2 = _JSON$parse2.message;
                                if (_types.EIP712Domain) {
                                  delete _types.EIP712Domain;
                                }
                                _this3.getInternalWeb3Provider().signer._signTypedData(_domain, _types, _message2).then(function(signature3) {
                                  var _triggersArray$i21;
                                  var result2 = {
                                    result: signature3
                                  };
                                  if (((_triggersArray$i21 = triggersArray[i5]) === null || _triggersArray$i21 === void 0 ? void 0 : _triggersArray$i21.saveResponse) === true)
                                    _this3.memoryCard.save(result2);
                                  _response = result2;
                                }).catch(function(error) {
                                  throw new Error(error.message || error);
                                });
                              }
                              if (!(((_triggersArray$i22 = triggersArray[i5]) === null || _triggersArray$i22 === void 0 ? void 0 : _triggersArray$i22.shouldReturnPayload) === true)) {
                                _context13.next = 77;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 77:
                              if (!(((_triggersArray$i23 = triggersArray[i5]) === null || _triggersArray$i23 === void 0 ? void 0 : _triggersArray$i23.shouldReturnResponse) === true)) {
                                _context13.next = 79;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 79:
                              return _context13.abrupt("break", 81);
                            case 80:
                              throw new Error('Unknown trigger: "'.concat((_triggersArray$i24 = triggersArray[i5]) === null || _triggersArray$i24 === void 0 ? void 0 : _triggersArray$i24.name, '"'));
                            case 81:
                            case "end":
                              return _context13.stop();
                          }
                        }
                      }, _loop2, null, [[60, 71]]);
                    });
                    i4 = 0;
                  case 4:
                    if (!(i4 < triggersArray.length)) {
                      _context14.next = 14;
                      break;
                    }
                    return _context14.delegateYield(_loop(i4), "t0", 6);
                  case 6:
                    _ret = _context14.t0;
                    if (!(_ret === "continue")) {
                      _context14.next = 9;
                      break;
                    }
                    return _context14.abrupt("continue", 11);
                  case 9:
                    if (!((0, _typeof2.default)(_ret) === "object")) {
                      _context14.next = 11;
                      break;
                    }
                    return _context14.abrupt("return", _ret.v);
                  case 11:
                    i4++;
                    _context14.next = 4;
                    break;
                  case 14:
                    this.memoryCard.deleteSaved();
                  case 15:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee9, this);
          }));
          return function() {
            return _handleTriggers.apply(this, arguments);
          };
        }()
      }, {
        key: "getAllERC20",
        value: function() {
          var _getAllERC = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee10() {
            var _ref2, chain, address, result, _args11 = arguments;
            return _regenerator.default.wrap(function(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _ref2 = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {}, chain = _ref2.chain, address = _ref2.address;
                    _context15.next = 3;
                    return (0, _Cloud.run)("getAllERC20", {
                      chain,
                      address
                    });
                  case 3:
                    result = _context15.sent;
                    return _context15.abrupt("return", result);
                  case 5:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee10);
          }));
          return function() {
            return _getAllERC.apply(this, arguments);
          };
        }()
      }, {
        key: "getERC20",
        value: function() {
          var _getERC = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee11() {
            var _ref3, chain, address, symbol, tokenAddress, result, _args12 = arguments;
            return _regenerator.default.wrap(function(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    _ref3 = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {}, chain = _ref3.chain, address = _ref3.address, symbol = _ref3.symbol, tokenAddress = _ref3.tokenAddress;
                    result = (0, _Cloud.run)("getERC20", {
                      chain,
                      address,
                      symbol,
                      tokenAddress
                    });
                    return _context16.abrupt("return", result);
                  case 3:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee11);
          }));
          return function() {
            return _getERC.apply(this, arguments);
          };
        }()
      }, {
        key: "getNFTs",
        value: function() {
          var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$chain = _ref4.chain, chain = _ref4$chain === void 0 ? "Eth" : _ref4$chain, _ref4$address = _ref4.address, address = _ref4$address === void 0 ? "" : _ref4$address;
          return (0, _Cloud.run)("getNFTs_old", {
            chain,
            address
          });
        }
      }, {
        key: "getNFTsCount",
        value: function() {
          var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref5$chain = _ref5.chain, chain = _ref5$chain === void 0 ? "Eth" : _ref5$chain, _ref5$address = _ref5.address, address = _ref5$address === void 0 ? "" : _ref5$address;
          return (0, _Cloud.run)("getNFTsCount_old", {
            chain,
            address
          });
        }
      }, {
        key: "getTransactions",
        value: function() {
          var _ref6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref6$chain = _ref6.chain, chain = _ref6$chain === void 0 ? "Eth" : _ref6$chain, _ref6$address = _ref6.address, address = _ref6$address === void 0 ? "" : _ref6$address, _ref6$order = _ref6.order, order = _ref6$order === void 0 ? "desc" : _ref6$order;
          return (0, _Cloud.run)("getTransactions", {
            chain,
            address,
            order
          });
        }
      }, {
        key: "getTransactionsCount",
        value: function() {
          var _ref7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref7$chain = _ref7.chain, chain = _ref7$chain === void 0 ? "Eth" : _ref7$chain, _ref7$address = _ref7.address, address = _ref7$address === void 0 ? "" : _ref7$address;
          return (0, _Cloud.run)("getTransactionsCount", {
            chain,
            address
          });
        }
      }, {
        key: "transfer",
        value: function() {
          var _transfer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee12() {
            var _ref8, _ref8$type, type, _ref8$receiver, receiver, _ref8$contractAddress, contractAddress, contract_address, _ref8$amount, amount, _ref8$tokenId, tokenId, token_id, _ref8$system, system, options, _this$getInternalWeb3, internalWeb3, sender, signer, transferOperation, customToken, result, _args13 = arguments;
            return _regenerator.default.wrap(function(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _ref8 = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {}, _ref8$type = _ref8.type, type = _ref8$type === void 0 ? "native" : _ref8$type, _ref8$receiver = _ref8.receiver, receiver = _ref8$receiver === void 0 ? "" : _ref8$receiver, _ref8$contractAddress = _ref8.contractAddress, contractAddress = _ref8$contractAddress === void 0 ? "" : _ref8$contractAddress, contract_address = _ref8.contract_address, _ref8$amount = _ref8.amount, amount = _ref8$amount === void 0 ? "" : _ref8$amount, _ref8$tokenId = _ref8.tokenId, tokenId = _ref8$tokenId === void 0 ? "" : _ref8$tokenId, token_id = _ref8.token_id, _ref8$system = _ref8.system, system = _ref8$system === void 0 ? "evm" : _ref8$system;
                    contractAddress = contractAddress || contract_address;
                    tokenId = tokenId || token_id;
                    options = {
                      receiver,
                      contractAddress,
                      amount,
                      tokenId,
                      system
                    };
                    _TransferUtils.default.isSupportedType(type);
                    _TransferUtils.default.validateInput(type, options);
                    _this$getInternalWeb3 = this.getInternalWeb3Provider(), internalWeb3 = _this$getInternalWeb3.web3, sender = _this$getInternalWeb3.account, signer = _this$getInternalWeb3.signer;
                    if (sender) {
                      _context17.next = 9;
                      break;
                    }
                    throw new Error("Sender address not found");
                  case 9:
                    if (tokenId)
                      _TransferUtils.default.isUint256(tokenId);
                    if (type !== "native") {
                      customToken = new _ethers.ethers.Contract(contractAddress, _TransferUtils.default.abi[type], signer);
                    }
                    _context17.t0 = type;
                    _context17.next = _context17.t0 === "native" ? 14 : _context17.t0 === "erc20" ? 16 : _context17.t0 === "erc721" ? 18 : _context17.t0 === "erc1155" ? 20 : 22;
                    break;
                  case 14:
                    transferOperation = signer.sendTransaction({
                      to: receiver,
                      value: _ethers.ethers.BigNumber.from(amount)
                    });
                    return _context17.abrupt("break", 23);
                  case 16:
                    transferOperation = customToken.transfer(receiver, amount, {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 18:
                    transferOperation = customToken.safeTransferFrom(sender, receiver, "".concat(tokenId), {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 20:
                    transferOperation = customToken.safeTransferFrom(sender, receiver, "".concat(tokenId), amount, "0x", {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 22:
                    throw new Error('Unknown transfer type: "'.concat(type, '"'));
                  case 23:
                    _context17.next = 25;
                    return transferOperation;
                  case 25:
                    result = _context17.sent;
                    return _context17.abrupt("return", result);
                  case 27:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee12, this);
          }));
          return function() {
            return _transfer.apply(this, arguments);
          };
        }()
      }, {
        key: "executeFunction",
        value: function() {
          var _executeFunction = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee13() {
            var _functionData, _context25, _context26;
            var _ref9, contractAddress, abi, functionName, msgValue, _ref9$params, params, _ref9$overrides, overrides, contractOptions, _this$getInternalWeb4, account, internalWeb3, provider, signerOrProvider, overloadedFunction, functionData, _context18, _context19, nameWithoutTopics, topics, functionDataArray, possibleTopics, _functionDataArray, _possibleTopics, stateMutability, isReadFunction, currentAddress, errors, _iterator, _step, input, value, parsedInputs, contract, contractMethod, response, _args14 = arguments;
            return _regenerator.default.wrap(function(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    _ref9 = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {}, contractAddress = _ref9.contractAddress, abi = _ref9.abi, functionName = _ref9.functionName, msgValue = _ref9.msgValue, _ref9$params = _ref9.params, params = _ref9$params === void 0 ? {} : _ref9$params, _ref9$overrides = _ref9.overrides, overrides = _ref9$overrides === void 0 ? {} : _ref9$overrides;
                    contractOptions = {};
                    _this$getInternalWeb4 = this.getInternalWeb3Provider(), account = _this$getInternalWeb4.account, internalWeb3 = _this$getInternalWeb4.web3, provider = _this$getInternalWeb4.provider, signerOrProvider = _this$getInternalWeb4.signerOrProvider;
                    overloadedFunction = functionName.match(/^(.+)\((.*)\)$/);
                    if (!overloadedFunction) {
                      _context27.next = 16;
                      break;
                    }
                    nameWithoutTopics = overloadedFunction[1];
                    topics = (0, _filter.default)(_context18 = (0, _map.default)(_context19 = overloadedFunction[2].split(",")).call(_context19, function(topic) {
                      return (0, _trim.default)(topic).call(topic);
                    })).call(_context18, function(topic) {
                      return !!topic;
                    });
                    functionDataArray = (0, _filter.default)(abi).call(abi, function(x4) {
                      return x4.name === nameWithoutTopics;
                    });
                    if (!(functionDataArray.length === 0)) {
                      _context27.next = 10;
                      break;
                    }
                    throw new Error("Function does not exist in abi");
                  case 10:
                    functionData = (0, _find.default)(functionDataArray).call(functionDataArray, function(data) {
                      var _data$inputs$length, _context20;
                      return ((_data$inputs$length = data === null || data === void 0 ? void 0 : data.inputs.length) !== null && _data$inputs$length !== void 0 ? _data$inputs$length : 0) === topics.length && (0, _every.default)(_context20 = data.inputs).call(_context20, function(input2, index) {
                        return input2.type === topics[index];
                      });
                    });
                    if (functionData) {
                      _context27.next = 14;
                      break;
                    }
                    possibleTopics = (0, _map.default)(functionDataArray).call(functionDataArray, function(data) {
                      var _context21, _context22;
                      return (0, _concat.default)(_context21 = "".concat(data.name, "(")).call(_context21, (0, _map.default)(_context22 = data.inputs).call(_context22, function(input2) {
                        return input2.type;
                      }).join(","), ")");
                    });
                    throw new Error("Function with the provided topic does not exist in abi. Possible funcationNames: ".concat(possibleTopics.join(" ,")));
                  case 14:
                    _context27.next = 23;
                    break;
                  case 16:
                    _functionDataArray = (0, _filter.default)(abi).call(abi, function(x4) {
                      return x4.name === functionName;
                    });
                    if (!(_functionDataArray.length === 0)) {
                      _context27.next = 19;
                      break;
                    }
                    throw new Error("Function does not exist in abi");
                  case 19:
                    if (!(_functionDataArray.length > 1)) {
                      _context27.next = 22;
                      break;
                    }
                    _possibleTopics = (0, _map.default)(_functionDataArray).call(_functionDataArray, function(data) {
                      var _context23, _context24;
                      return (0, _concat.default)(_context23 = "".concat(data.name, "(")).call(_context23, (0, _map.default)(_context24 = data.inputs).call(_context24, function(input2) {
                        return input2.type;
                      }).join(","), ")");
                    });
                    throw new Error("Multiple function definitions found in the abi. Please include the topic in the functionName. Possible funcationNames: ".concat(_possibleTopics.join(" ,")));
                  case 22:
                    functionData = _functionDataArray[0];
                  case 23:
                    stateMutability = (_functionData = functionData) === null || _functionData === void 0 ? void 0 : _functionData.stateMutability;
                    isReadFunction = stateMutability === "view" || stateMutability === "pure";
                    if (isReadFunction) {
                      _context27.next = 31;
                      break;
                    }
                    if (params.from) {
                      _context27.next = 31;
                      break;
                    }
                    currentAddress = account;
                    if (currentAddress) {
                      _context27.next = 30;
                      break;
                    }
                    throw new Error("From address is required");
                  case 30:
                    contractOptions.from = currentAddress;
                  case 31:
                    errors = [];
                    _iterator = _createForOfIteratorHelper(functionData.inputs);
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        input = _step.value;
                        value = params[input.name];
                        if (!value && typeof value !== "number" && typeof value !== "boolean" && input.name !== "") {
                          errors.push("".concat(input.name, " is required"));
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (!(errors.length > 0)) {
                      _context27.next = 36;
                      break;
                    }
                    throw errors;
                  case 36:
                    parsedInputs = (0, _map.default)(_context25 = functionData.inputs).call(_context25, function(x4) {
                      return params[x4.name];
                    });
                    contract = new _ethers.ethers.Contract(contractAddress, abi, signerOrProvider);
                    contractMethod = contract[functionName];
                    if (contractMethod) {
                      _context27.next = 41;
                      break;
                    }
                    throw new Error('Cannot find function "'.concat(functionName, '" on the contract'));
                  case 41:
                    _context27.next = 43;
                    return contractMethod.apply(void 0, (0, _concat.default)(_context26 = (0, _toConsumableArray2.default)((0, _values.default)(parsedInputs))).call(_context26, [msgValue ? {
                      value: _ethers.ethers.BigNumber.from("".concat(msgValue))
                    } : {}]));
                  case 43:
                    response = _context27.sent;
                    return _context27.abrupt("return", response);
                  case 45:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee13, this);
          }));
          return function() {
            return _executeFunction.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }, {
        key: "ensureWeb3IsInstalled",
        value: function() {
          return this.internalWeb3Provider && this.internalWeb3Provider.web3 ? true : false;
        }
      }, {
        key: "getInternalWeb3Provider",
        value: function() {
          if (!this.ensureWeb3IsInstalled())
            throw new Error(ERROR_WEB3_MISSING);
          return this.internalWeb3Provider;
        }
      }, {
        key: "getInternalWeb3",
        value: function() {
          return this.getInternalWeb3Provider().web3;
        }
      }, {
        key: "provider",
        get: function() {
          var _this$internalWeb3Pro2, _this$internalWeb3Pro3;
          return (_this$internalWeb3Pro2 = (_this$internalWeb3Pro3 = this.internalWeb3Provider) === null || _this$internalWeb3Pro3 === void 0 ? void 0 : _this$internalWeb3Pro3.provider) !== null && _this$internalWeb3Pro2 !== void 0 ? _this$internalWeb3Pro2 : null;
        }
      }, {
        key: "connector",
        get: function() {
          var _this$internalWeb3Pro4, _this$internalWeb3Pro5;
          return (_this$internalWeb3Pro4 = (_this$internalWeb3Pro5 = this.internalWeb3Provider) === null || _this$internalWeb3Pro5 === void 0 ? void 0 : _this$internalWeb3Pro5.connector) !== null && _this$internalWeb3Pro4 !== void 0 ? _this$internalWeb3Pro4 : null;
        }
      }, {
        key: "connectorType",
        get: function() {
          var _this$connector$type, _this$connector;
          return (_this$connector$type = (_this$connector = this.connector) === null || _this$connector === void 0 ? void 0 : _this$connector.type) !== null && _this$connector$type !== void 0 ? _this$connector$type : null;
        }
      }, {
        key: "network",
        get: function() {
          var _this$connector$netwo, _this$connector2;
          return (_this$connector$netwo = (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.network) !== null && _this$connector$netwo !== void 0 ? _this$connector$netwo : null;
        }
      }, {
        key: "account",
        get: function() {
          var _this$internalWeb3Pro6, _this$internalWeb3Pro7;
          return (_this$internalWeb3Pro6 = (_this$internalWeb3Pro7 = this.internalWeb3Provider) === null || _this$internalWeb3Pro7 === void 0 ? void 0 : _this$internalWeb3Pro7.account) !== null && _this$internalWeb3Pro6 !== void 0 ? _this$internalWeb3Pro6 : null;
        }
      }, {
        key: "chainId",
        get: function() {
          var _this$internalWeb3Pro8, _this$internalWeb3Pro9;
          return (_this$internalWeb3Pro8 = (_this$internalWeb3Pro9 = this.internalWeb3Provider) === null || _this$internalWeb3Pro9 === void 0 ? void 0 : _this$internalWeb3Pro9.chainId) !== null && _this$internalWeb3Pro8 !== void 0 ? _this$internalWeb3Pro8 : null;
        }
      }, {
        key: "getChainId",
        value: function() {
          return this.chainId;
        }
      }, {
        key: "web3Library",
        get: function() {
          return _ethers.ethers;
        }
      }, {
        key: "_forwardToConnector",
        value: function(methodName, args) {
          var _this$getInternalWeb5 = this.getInternalWeb3Provider(), connector = _this$getInternalWeb5.connector;
          var hasMethod = Boolean(connector[methodName]);
          if (!hasMethod) {
            var _context28;
            throw new Error((0, _concat.default)(_context28 = "Cannot call ".concat(methodName, ', as it does not exist on connector type "')).call(_context28, connector.type, '"'));
          }
          return connector[methodName].apply(connector, (0, _toConsumableArray2.default)(args));
        }
      }, {
        key: "switchNetwork",
        value: function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return this._forwardToConnector("switchNetwork", args);
        }
      }, {
        key: "addNetwork",
        value: function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return this._forwardToConnector("addNetwork", args);
        }
      }, {
        key: "isMetaMaskInstalled",
        value: function() {
          var _isMetaMaskInstalled = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee14() {
            return _regenerator.default.wrap(function(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    _context29.next = 2;
                    return (0, _detectProvider.default)();
                  case 2:
                    if (!_context29.sent) {
                      _context29.next = 6;
                      break;
                    }
                    _context29.t0 = true;
                    _context29.next = 7;
                    break;
                  case 6:
                    _context29.t0 = false;
                  case 7:
                    return _context29.abrupt("return", _context29.t0);
                  case 8:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee14);
          }));
          return function() {
            return _isMetaMaskInstalled.apply(this, arguments);
          };
        }()
      }]);
      return MoralisWeb32;
    }();
    (0, _defineProperty2.default)(MoralisWeb3, "speedyNodeApiKey", void 0);
    (0, _defineProperty2.default)(MoralisWeb3, "web3", null);
    (0, _defineProperty2.default)(MoralisWeb3, "internalWeb3Provider", null);
    (0, _defineProperty2.default)(MoralisWeb3, "Plugins", {});
    (0, _defineProperty2.default)(MoralisWeb3, "isEnablingWeb3", false);
    (0, _defineProperty2.default)(MoralisWeb3, "memoryCard", {
      save: function(what) {
        this.saved = what;
      },
      get: function(where) {
        if (!this.saved)
          throw new Error("Nothing saved to memory card");
        if (where.length === 0)
          return this.getSaved();
        var tmp;
        var savedTmp = this.saved;
        for (var i4 = 0; i4 < where.length; i4++) {
          tmp = savedTmp[where[i4]];
          savedTmp = tmp;
        }
        return savedTmp;
      },
      getSaved: function() {
        return this.saved;
      },
      deleteSaved: function() {
        this.saved = void 0;
      }
    });
    MoralisWeb3.onConnect = (0, _bind.default)(_context30 = MoralisWeb3.on).call(_context30, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT);
    MoralisWeb3.onDisconnect = (0, _bind.default)(_context31 = MoralisWeb3.on).call(_context31, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT);
    MoralisWeb3.onWeb3Enabled = (0, _bind.default)(_context32 = MoralisWeb3.on).call(_context32, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.WEB3_ENABLED);
    MoralisWeb3.onWeb3Deactivated = (0, _bind.default)(_context33 = MoralisWeb3.on).call(_context33, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.WEB3_DEACTIVATED);
    MoralisWeb3.onChainChanged = (0, _bind.default)(_context34 = MoralisWeb3.on).call(_context34, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED);
    MoralisWeb3.onAccountChanged = (0, _bind.default)(_context35 = MoralisWeb3.on).call(_context35, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED);
    var _default = MoralisWeb3;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/StorageController.browser.js
var require_StorageController_browser = __commonJS({
  "node_modules/moralis/lib/browser/StorageController.browser.js"(exports, module) {
    "use strict";
    var StorageController = {
      async: 0,
      getItem: function(path) {
        return localStorage.getItem(path);
      },
      setItem: function(path, value) {
        try {
          localStorage.setItem(path, value);
        } catch (e3) {
          console.log(e3.message);
        }
      },
      removeItem: function(path) {
        localStorage.removeItem(path);
      },
      getAllKeys: function() {
        var keys = [];
        for (var i4 = 0; i4 < localStorage.length; i4 += 1) {
          keys.push(localStorage.key(i4));
        }
        return keys;
      },
      clear: function() {
        localStorage.clear();
      }
    };
    module.exports = StorageController;
  }
});

// node_modules/moralis/lib/browser/Storage.js
var require_Storage = __commonJS({
  "node_modules/moralis/lib/browser/Storage.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _concat = _interopRequireDefault(require_concat4());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var Storage = {
      async: function() {
        var controller = _CoreManager.default.getStorageController();
        return !!controller.async;
      },
      getItem: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.getItem(path);
      },
      getItemAsync: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.getItemAsync(path);
        }
        return _promise.default.resolve(controller.getItem(path));
      },
      setItem: function(path, value) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.setItem(path, value);
      },
      setItemAsync: function(path, value) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.setItemAsync(path, value);
        }
        return _promise.default.resolve(controller.setItem(path, value));
      },
      removeItem: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.removeItem(path);
      },
      removeItemAsync: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.removeItemAsync(path);
        }
        return _promise.default.resolve(controller.removeItem(path));
      },
      getAllKeys: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.getAllKeys();
      },
      getAllKeysAsync: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.getAllKeysAsync();
        }
        return _promise.default.resolve(controller.getAllKeys());
      },
      generatePath: function(path) {
        var _context;
        if (!_CoreManager.default.get("APPLICATION_ID")) {
          throw new Error("You need to call Moralis.start with an applicationId before using Moralis.");
        }
        if (typeof path !== "string") {
          throw new Error("Tried to get a Storage path that was not a String.");
        }
        if (path[0] === "/") {
          path = path.substr(1);
        }
        return (0, _concat.default)(_context = "Parse/".concat(_CoreManager.default.get("APPLICATION_ID"), "/")).call(_context, path);
      },
      _clear: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.hasOwnProperty("clear")) {
          controller.clear();
        }
      }
    };
    module.exports = Storage;
    _CoreManager.default.setStorageController(require_StorageController_browser());
  }
});

// node_modules/moralis/lib/browser/ParseUser.js
var require_ParseUser = __commonJS({
  "node_modules/moralis/lib/browser/ParseUser.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty2 = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _defineProperty2 = _interopRequireDefault(require_define_property3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _get2 = _interopRequireDefault(require_get7());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _AnonymousUtils = _interopRequireDefault(require_AnonymousUtils());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _isRevocableSession = _interopRequireDefault(require_isRevocableSession());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    var _ParseSession = _interopRequireDefault(require_ParseSession());
    var _MoralisWeb = _interopRequireDefault(require_MoralisWeb3());
    var _Storage = _interopRequireDefault(require_Storage());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var CURRENT_USER_KEY = "currentUser";
    var canUseCurrentUser = !_CoreManager.default.get("IS_NODE");
    var currentUserCacheMatchesDisk = false;
    var currentUserCache = null;
    var authProviders = {};
    var ParseUser = function(_ParseObject) {
      (0, _inherits2.default)(ParseUser2, _ParseObject);
      var _super = _createSuper(ParseUser2);
      function ParseUser2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseUser2);
        _this = _super.call(this, "_User");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Parse User");
          }
        }
        return _this;
      }
      (0, _createClass2.default)(ParseUser2, [{
        key: "_upgradeToRevocableSession",
        value: function(options) {
          options = options || {};
          var upgradeOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            upgradeOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.upgradeToRevocableSession(this, upgradeOptions);
        }
      }, {
        key: "linkWith",
        value: function(provider, options) {
          var _this2 = this;
          var saveOpts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || "";
          var authType;
          if (typeof provider === "string") {
            authType = provider;
            if (authProviders[provider]) {
              provider = authProviders[provider];
            } else {
              var authProvider = {
                restoreAuthentication: function() {
                  return true;
                },
                getAuthType: function() {
                  return authType;
                }
              };
              authProviders[authProvider.getAuthType()] = authProvider;
              provider = authProvider;
            }
          } else {
            authType = provider.getAuthType();
          }
          if (options && options.hasOwnProperty("authData")) {
            var authData = this.get("authData") || {};
            if ((0, _typeof2.default)(authData) !== "object") {
              throw new Error("Invalid type: authData field should be an object");
            }
            authData[authType] = options.authData;
            var controller = _CoreManager.default.getUserController();
            return controller.linkWith(this, authData, saveOpts);
          }
          return new _promise.default(function(resolve, reject) {
            provider.authenticate({
              success: function(provider2, result) {
                var opts = {};
                opts.authData = result;
                _this2.linkWith(provider2, opts, saveOpts).then(function() {
                  resolve(_this2);
                }, function(error) {
                  reject(error);
                });
              },
              error: function(provider2, _error) {
                reject(_error);
              }
            });
          });
        }
      }, {
        key: "_linkWith",
        value: function(provider, options) {
          var saveOpts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return this.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "_synchronizeAuthData",
        value: function(provider) {
          if (!this.isCurrent() || !provider) {
            return;
          }
          var authType;
          if (typeof provider === "string") {
            authType = provider;
            provider = authProviders[authType];
          } else {
            authType = provider.getAuthType();
          }
          var authData = this.get("authData");
          if (!provider || !authData || (0, _typeof2.default)(authData) !== "object") {
            return;
          }
          var success = provider.restoreAuthentication(authData[authType]);
          if (!success) {
            this._unlinkFrom(provider);
          }
        }
      }, {
        key: "_synchronizeAllAuthData",
        value: function() {
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key in authData) {
            this._synchronizeAuthData(_key);
          }
        }
      }, {
        key: "_cleanupAuthData",
        value: function() {
          if (!this.isCurrent()) {
            return;
          }
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key2 in authData) {
            if (!authData[_key2]) {
              delete authData[_key2];
            }
          }
        }
      }, {
        key: "_unlinkFrom",
        value: function(provider, options) {
          var _this3 = this;
          return this.linkWith(provider, {
            authData: null
          }, options).then(function() {
            _this3._synchronizeAuthData(provider);
            return _promise.default.resolve(_this3);
          });
        }
      }, {
        key: "_isLinked",
        value: function(provider) {
          var authType;
          if (typeof provider === "string") {
            authType = provider;
          } else {
            authType = provider.getAuthType();
          }
          var authData = this.get("authData") || {};
          if ((0, _typeof2.default)(authData) !== "object") {
            return false;
          }
          return !!authData[authType];
        }
      }, {
        key: "_logOutWithAll",
        value: function() {
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key3 in authData) {
            this._logOutWith(_key3);
          }
        }
      }, {
        key: "_logOutWith",
        value: function(provider) {
          if (!this.isCurrent()) {
            return;
          }
          if (typeof provider === "string") {
            provider = authProviders[provider];
          }
          if (provider && provider.deauthenticate) {
            provider.deauthenticate();
          }
        }
      }, {
        key: "_preserveFieldsOnFetch",
        value: function() {
          return {
            sessionToken: this.get("sessionToken")
          };
        }
      }, {
        key: "isCurrent",
        value: function() {
          var current = ParseUser2.current();
          return !!current && current.id === this.id;
        }
      }, {
        key: "getUsername",
        value: function() {
          var username = this.get("username");
          if (username == null || typeof username === "string") {
            return username;
          }
          return "";
        }
      }, {
        key: "setUsername",
        value: function(username) {
          var authData = this.get("authData");
          if (authData && (0, _typeof2.default)(authData) === "object" && authData.hasOwnProperty("anonymous")) {
            authData.anonymous = null;
          }
          this.set("username", username);
        }
      }, {
        key: "setPassword",
        value: function(password) {
          this.set("password", password);
        }
      }, {
        key: "getEmail",
        value: function() {
          var email = this.get("email");
          if (email == null || typeof email === "string") {
            return email;
          }
          return "";
        }
      }, {
        key: "setEmail",
        value: function(email) {
          return this.set("email", email);
        }
      }, {
        key: "getSessionToken",
        value: function() {
          var token = this.get("sessionToken");
          if (token == null || typeof token === "string") {
            return token;
          }
          return "";
        }
      }, {
        key: "authenticated",
        value: function() {
          var current = ParseUser2.current();
          return !!this.get("sessionToken") && !!current && current.id === this.id;
        }
      }, {
        key: "signUp",
        value: function(attrs, options) {
          options = options || {};
          var signupOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            signupOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("installationId")) {
            signupOptions.installationId = options.installationId;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.signUp(this, attrs, signupOptions);
        }
      }, {
        key: "logIn",
        value: function(options) {
          options = options || {};
          var loginOptions = {
            usePost: true
          };
          if (options.hasOwnProperty("useMasterKey")) {
            loginOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("installationId")) {
            loginOptions.installationId = options.installationId;
          }
          if (options.hasOwnProperty("usePost")) {
            loginOptions.usePost = options.usePost;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.logIn(this, loginOptions);
        }
      }, {
        key: "save",
        value: function() {
          var _this4 = this;
          for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "save", this).apply(this, args).then(function() {
            if (_this4.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this4);
            }
            return _this4;
          });
        }
      }, {
        key: "destroy",
        value: function() {
          var _this5 = this;
          for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "destroy", this).apply(this, args).then(function() {
            if (_this5.isCurrent()) {
              return _CoreManager.default.getUserController().removeUserFromDisk();
            }
            return _this5;
          });
        }
      }, {
        key: "fetch",
        value: function() {
          var _this6 = this;
          for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "fetch", this).apply(this, args).then(function() {
            if (_this6.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this6);
            }
            return _this6;
          });
        }
      }, {
        key: "fetchWithInclude",
        value: function() {
          var _this7 = this;
          for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "fetchWithInclude", this).apply(this, args).then(function() {
            if (_this7.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this7);
            }
            return _this7;
          });
        }
      }, {
        key: "verifyPassword",
        value: function(password, options) {
          var username = this.getUsername() || "";
          return ParseUser2.verifyPassword(username, password, options);
        }
      }], [{
        key: "readOnlyAttributes",
        value: function() {
          return ["sessionToken"];
        }
      }, {
        key: "extend",
        value: function(protoProps, classProps) {
          if (protoProps) {
            for (var _prop in protoProps) {
              if (_prop !== "className") {
                (0, _defineProperty2.default)(ParseUser2.prototype, _prop, {
                  value: protoProps[_prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          if (classProps) {
            for (var _prop2 in classProps) {
              if (_prop2 !== "className") {
                (0, _defineProperty2.default)(ParseUser2, _prop2, {
                  value: classProps[_prop2],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          return ParseUser2;
        }
      }, {
        key: "current",
        value: function() {
          if (!canUseCurrentUser) {
            return null;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.currentUser();
        }
      }, {
        key: "currentAsync",
        value: function() {
          if (!canUseCurrentUser) {
            return _promise.default.resolve(null);
          }
          var controller = _CoreManager.default.getUserController();
          return controller.currentUserAsync();
        }
      }, {
        key: "signUp",
        value: function(username, password, attrs, options) {
          attrs = attrs || {};
          attrs.username = username;
          attrs.password = password;
          var user = new this(attrs);
          return user.signUp({}, options);
        }
      }, {
        key: "logIn",
        value: function(username, password, options) {
          if (typeof username !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Username must be a string."));
          }
          if (typeof password !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Password must be a string."));
          }
          var user = new this();
          user._finishFetch({
            username,
            password
          });
          return user.logIn(options);
        }
      }, {
        key: "loginOrSignup",
        value: function(username, password) {
          var _this8 = this;
          return this.logIn(username, password).catch(function(err) {
            if (err.code === 101) {
              var newUser = new _this8();
              newUser.set("username", username);
              newUser.set("password", password);
              return newUser.signUp();
            }
            throw err;
          });
        }
      }, {
        key: "become",
        value: function(sessionToken, options) {
          if (!canUseCurrentUser) {
            throw new Error("It is not memory-safe to become a user in a server environment");
          }
          options = options || {};
          var becomeOptions = {
            sessionToken
          };
          if (options.hasOwnProperty("useMasterKey")) {
            becomeOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          var user = new this();
          return controller.become(user, becomeOptions);
        }
      }, {
        key: "me",
        value: function(sessionToken) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var controller = _CoreManager.default.getUserController();
          var meOptions = {
            sessionToken
          };
          if (options.useMasterKey) {
            meOptions.useMasterKey = options.useMasterKey;
          }
          var user = new this();
          return controller.me(user, meOptions);
        }
      }, {
        key: "hydrate",
        value: function(userJSON) {
          var controller = _CoreManager.default.getUserController();
          var user = new this();
          return controller.hydrate(user, userJSON);
        }
      }, {
        key: "logInWith",
        value: function(provider, options, saveOpts) {
          var user = new this();
          return user.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "logOut",
        value: function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var controller = _CoreManager.default.getUserController();
          return controller.logOut(options);
        }
      }, {
        key: "requestPasswordReset",
        value: function(email, options) {
          options = options || {};
          var requestOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            requestOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.requestPasswordReset(email, requestOptions);
        }
      }, {
        key: "requestEmailVerification",
        value: function(email, options) {
          options = options || {};
          var requestOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            requestOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.requestEmailVerification(email, requestOptions);
        }
      }, {
        key: "verifyPassword",
        value: function(username, password, options) {
          if (typeof username !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Username must be a string."));
          }
          if (typeof password !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Password must be a string."));
          }
          options = options || {};
          var verificationOption = {};
          if (options.hasOwnProperty("useMasterKey")) {
            verificationOption.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.verifyPassword(username, password, verificationOption);
        }
      }, {
        key: "allowCustomUserClass",
        value: function(isAllowed) {
          _CoreManager.default.set("PERFORM_USER_REWRITE", !isAllowed);
        }
      }, {
        key: "enableRevocableSession",
        value: function(options) {
          options = options || {};
          _CoreManager.default.set("FORCE_REVOCABLE_SESSION", true);
          if (canUseCurrentUser) {
            var current = ParseUser2.current();
            if (current) {
              return current._upgradeToRevocableSession(options);
            }
          }
          return _promise.default.resolve();
        }
      }, {
        key: "enableUnsafeCurrentUser",
        value: function() {
          canUseCurrentUser = true;
        }
      }, {
        key: "disableUnsafeCurrentUser",
        value: function() {
          canUseCurrentUser = false;
        }
      }, {
        key: "_registerAuthenticationProvider",
        value: function(provider) {
          authProviders[provider.getAuthType()] = provider;
          ParseUser2.currentAsync().then(function(current) {
            if (current) {
              current._synchronizeAuthData(provider.getAuthType());
            }
          });
        }
      }, {
        key: "_logInWith",
        value: function(provider, options, saveOpts) {
          var user = new this();
          return user.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "_clearCache",
        value: function() {
          currentUserCache = null;
          currentUserCacheMatchesDisk = false;
        }
      }, {
        key: "_setCurrentUserCache",
        value: function(user) {
          currentUserCache = user;
        }
      }]);
      return ParseUser2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_User", ParseUser);
    var DefaultController = {
      updateUserOnDisk: function(user) {
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        var json = user.toJSON();
        delete json.password;
        json.className = "_User";
        var userData = (0, _stringify.default)(json);
        if (_CoreManager.default.get("ENCRYPTED_USER")) {
          var crypto2 = _CoreManager.default.getCryptoController();
          userData = crypto2.encrypt(json, _CoreManager.default.get("ENCRYPTED_KEY"));
        }
        return _Storage.default.setItemAsync(path, userData).then(function() {
          return user;
        });
      },
      removeUserFromDisk: function() {
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        currentUserCacheMatchesDisk = true;
        currentUserCache = null;
        return _Storage.default.removeItemAsync(path);
      },
      setCurrentUser: function(user) {
        var _this9 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
          var currentUser;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this9.currentUserAsync();
                case 2:
                  currentUser = _context.sent;
                  if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {
                    _context.next = 6;
                    break;
                  }
                  _context.next = 6;
                  return currentUser.destroy({
                    sessionToken: currentUser.getSessionToken()
                  });
                case 6:
                  currentUserCache = user;
                  user._cleanupAuthData();
                  user._synchronizeAllAuthData();
                  return _context.abrupt("return", DefaultController.updateUserOnDisk(user));
                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      currentUser: function() {
        if (currentUserCache) {
          return currentUserCache;
        }
        if (currentUserCacheMatchesDisk) {
          return null;
        }
        if (_Storage.default.async()) {
          throw new Error("Cannot call currentUser() when using a platform with an async storage system. Call currentUserAsync() instead.");
        }
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        var userData = _Storage.default.getItem(path);
        currentUserCacheMatchesDisk = true;
        if (!userData) {
          currentUserCache = null;
          return null;
        }
        if (_CoreManager.default.get("ENCRYPTED_USER")) {
          var crypto2 = _CoreManager.default.getCryptoController();
          userData = crypto2.decrypt(userData, _CoreManager.default.get("ENCRYPTED_KEY"));
        }
        userData = JSON.parse(userData);
        if (!userData.className) {
          userData.className = "_User";
        }
        if (userData._id) {
          if (userData.objectId !== userData._id) {
            userData.objectId = userData._id;
          }
          delete userData._id;
        }
        if (userData._sessionToken) {
          userData.sessionToken = userData._sessionToken;
          delete userData._sessionToken;
        }
        var current = _ParseObject2.default.fromJSON(userData);
        currentUserCache = current;
        current._synchronizeAllAuthData();
        return current;
      },
      currentUserAsync: function() {
        if (currentUserCache) {
          return _promise.default.resolve(currentUserCache);
        }
        if (currentUserCacheMatchesDisk) {
          return _promise.default.resolve(null);
        }
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        return _Storage.default.getItemAsync(path).then(function(userData) {
          currentUserCacheMatchesDisk = true;
          if (!userData) {
            currentUserCache = null;
            return _promise.default.resolve(null);
          }
          if (_CoreManager.default.get("ENCRYPTED_USER")) {
            var crypto2 = _CoreManager.default.getCryptoController();
            userData = crypto2.decrypt(userData.toString(), _CoreManager.default.get("ENCRYPTED_KEY"));
          }
          userData = JSON.parse(userData);
          if (!userData.className) {
            userData.className = "_User";
          }
          if (userData._id) {
            if (userData.objectId !== userData._id) {
              userData.objectId = userData._id;
            }
            delete userData._id;
          }
          if (userData._sessionToken) {
            userData.sessionToken = userData._sessionToken;
            delete userData._sessionToken;
          }
          var current = _ParseObject2.default.fromJSON(userData);
          currentUserCache = current;
          current._synchronizeAllAuthData();
          return _promise.default.resolve(current);
        });
      },
      signUp: function(user, attrs, options) {
        var username = attrs && attrs.username || user.get("username");
        var password = attrs && attrs.password || user.get("password");
        if (!username || !username.length) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Cannot sign up user with an empty username."));
        }
        if (!password || !password.length) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Cannot sign up user with an empty password."));
        }
        return user.save(attrs, options).then(function() {
          user._finishFetch({
            password: void 0
          });
          if (canUseCurrentUser) {
            return DefaultController.setCurrentUser(user);
          }
          return user;
        });
      },
      logIn: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var stateController = _CoreManager.default.getObjectStateController();
        var auth = {
          username: user.get("username"),
          password: user.get("password")
        };
        return RESTController.request(options.usePost ? "POST" : "GET", "login", auth, options).then(function(response) {
          user._migrateId(response.objectId);
          user._setExisted(true);
          stateController.setPendingOp(user._getStateIdentifier(), "username", void 0);
          stateController.setPendingOp(user._getStateIdentifier(), "password", void 0);
          response.password = void 0;
          user._finishFetch(response);
          if (!canUseCurrentUser) {
            return _promise.default.resolve(user);
          }
          return DefaultController.setCurrentUser(user);
        });
      },
      become: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "users/me", {}, options).then(function(response) {
          user._finishFetch(response);
          user._setExisted(true);
          return DefaultController.setCurrentUser(user);
        });
      },
      hydrate: function(user, userJSON) {
        user._finishFetch(userJSON);
        user._setExisted(true);
        if (userJSON.sessionToken && canUseCurrentUser) {
          return DefaultController.setCurrentUser(user);
        }
        return _promise.default.resolve(user);
      },
      me: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "users/me", {}, options).then(function(response) {
          user._finishFetch(response);
          user._setExisted(true);
          return user;
        });
      },
      logOut: function(options) {
        var Moralis = require_Parse();
        Moralis.cleanup();
        var RESTController = _CoreManager.default.getRESTController();
        if (options.sessionToken) {
          return RESTController.request("POST", "logout", {}, options);
        }
        return DefaultController.currentUserAsync().then(function(currentUser) {
          var path = _Storage.default.generatePath(CURRENT_USER_KEY);
          var promise = _Storage.default.removeItemAsync(path);
          if (currentUser !== null) {
            var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);
            var currentSession = currentUser.getSessionToken();
            if (currentSession && (0, _isRevocableSession.default)(currentSession)) {
              promise = promise.then(function() {
                if (isAnonymous) {
                  return currentUser.destroy({
                    sessionToken: currentSession
                  });
                }
              }).then(function() {
                return RESTController.request("POST", "logout", {}, {
                  sessionToken: currentSession
                });
              });
            }
            currentUser._logOutWithAll();
            currentUser._finishFetch({
              sessionToken: void 0
            });
            currentUser._clearServerData();
          }
          currentUserCacheMatchesDisk = true;
          currentUserCache = null;
          return promise;
        });
      },
      requestPasswordReset: function(email, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "requestPasswordReset", {
          email
        }, options);
      },
      upgradeToRevocableSession: function(user, options) {
        var token = user.getSessionToken();
        if (!token) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, "Cannot upgrade a user with no session token"));
        }
        options.sessionToken = token;
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "upgradeToRevocableSession", {}, options).then(function(result) {
          var session = new _ParseSession.default();
          session._finishFetch(result);
          user._finishFetch({
            sessionToken: session.getSessionToken()
          });
          if (user.isCurrent()) {
            return DefaultController.setCurrentUser(user);
          }
          return _promise.default.resolve(user);
        });
      },
      linkWith: function(user, authData, options) {
        return user.save({
          authData
        }, options).then(function() {
          if (canUseCurrentUser) {
            return DefaultController.setCurrentUser(user);
          }
          return user;
        });
      },
      verifyPassword: function(username, password, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "verifyPassword", {
          username,
          password
        }, options);
      },
      requestEmailVerification: function(email, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "verificationEmailRequest", {
          email
        }, options);
      }
    };
    _CoreManager.default.setUserController(DefaultController);
    var _default = ParseUser;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseACL.js
var require_ParseACL = __commonJS({
  "node_modules/moralis/lib/browser/ParseACL.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseRole = _interopRequireDefault(require_ParseRole());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var PUBLIC_KEY = "*";
    var ParseACL = function() {
      function ParseACL2(arg1) {
        (0, _classCallCheck2.default)(this, ParseACL2);
        (0, _defineProperty2.default)(this, "permissionsById", void 0);
        this.permissionsById = {};
        if (arg1 && (0, _typeof2.default)(arg1) === "object") {
          if (arg1 instanceof _ParseUser.default) {
            this.setReadAccess(arg1, true);
            this.setWriteAccess(arg1, true);
          } else {
            for (var _userId in arg1) {
              var accessList = arg1[_userId];
              this.permissionsById[_userId] = {};
              for (var _permission in accessList) {
                var allowed = accessList[_permission];
                if (_permission !== "read" && _permission !== "write") {
                  throw new TypeError("Tried to create an ACL with an invalid permission type.");
                }
                if (typeof allowed !== "boolean") {
                  throw new TypeError("Tried to create an ACL with an invalid permission value.");
                }
                this.permissionsById[_userId][_permission] = allowed;
              }
            }
          }
        } else if (typeof arg1 === "function") {
          throw new TypeError("ParseACL constructed with a function. Did you forget ()?");
        }
      }
      (0, _createClass2.default)(ParseACL2, [{
        key: "toJSON",
        value: function() {
          var permissions = {};
          for (var p4 in this.permissionsById) {
            permissions[p4] = this.permissionsById[p4];
          }
          return permissions;
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParseACL2)) {
            return false;
          }
          var users = (0, _keys.default)(this.permissionsById);
          var otherUsers = (0, _keys.default)(other.permissionsById);
          if (users.length !== otherUsers.length) {
            return false;
          }
          for (var u4 in this.permissionsById) {
            if (!other.permissionsById[u4]) {
              return false;
            }
            if (this.permissionsById[u4].read !== other.permissionsById[u4].read) {
              return false;
            }
            if (this.permissionsById[u4].write !== other.permissionsById[u4].write) {
              return false;
            }
          }
          return true;
        }
      }, {
        key: "_setAccess",
        value: function(accessType, userId, allowed) {
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
          } else if (userId instanceof _ParseRole.default) {
            var name2 = userId.getName();
            if (!name2) {
              throw new TypeError("Role must have a name");
            }
            userId = "role:".concat(name2);
          }
          if (typeof userId !== "string") {
            throw new TypeError("userId must be a string.");
          }
          if (typeof allowed !== "boolean") {
            throw new TypeError("allowed must be either true or false.");
          }
          var permissions = this.permissionsById[userId];
          if (!permissions) {
            if (!allowed) {
              return;
            }
            permissions = {};
            this.permissionsById[userId] = permissions;
          }
          if (allowed) {
            this.permissionsById[userId][accessType] = true;
          } else {
            delete permissions[accessType];
            if ((0, _keys.default)(permissions).length === 0) {
              delete this.permissionsById[userId];
            }
          }
        }
      }, {
        key: "_getAccess",
        value: function(accessType, userId) {
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
            if (!userId) {
              throw new Error("Cannot get access for a ParseUser without an ID");
            }
          } else if (userId instanceof _ParseRole.default) {
            var name2 = userId.getName();
            if (!name2) {
              throw new TypeError("Role must have a name");
            }
            userId = "role:".concat(name2);
          }
          var permissions = this.permissionsById[userId];
          if (!permissions) {
            return false;
          }
          return !!permissions[accessType];
        }
      }, {
        key: "setReadAccess",
        value: function(userId, allowed) {
          this._setAccess("read", userId, allowed);
        }
      }, {
        key: "getReadAccess",
        value: function(userId) {
          return this._getAccess("read", userId);
        }
      }, {
        key: "setWriteAccess",
        value: function(userId, allowed) {
          this._setAccess("write", userId, allowed);
        }
      }, {
        key: "getWriteAccess",
        value: function(userId) {
          return this._getAccess("write", userId);
        }
      }, {
        key: "setPublicReadAccess",
        value: function(allowed) {
          this.setReadAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicReadAccess",
        value: function() {
          return this.getReadAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicWriteAccess",
        value: function(allowed) {
          this.setWriteAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicWriteAccess",
        value: function() {
          return this.getWriteAccess(PUBLIC_KEY);
        }
      }, {
        key: "getRoleReadAccess",
        value: function(role) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          return this.getReadAccess("role:".concat(role));
        }
      }, {
        key: "getRoleWriteAccess",
        value: function(role) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          return this.getWriteAccess("role:".concat(role));
        }
      }, {
        key: "setRoleReadAccess",
        value: function(role, allowed) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          this.setReadAccess("role:".concat(role), allowed);
        }
      }, {
        key: "setRoleWriteAccess",
        value: function(role, allowed) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          this.setWriteAccess("role:".concat(role), allowed);
        }
      }]);
      return ParseACL2;
    }();
    var _default = ParseACL;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/decode.js
var require_decode = __commonJS({
  "node_modules/moralis/lib/browser/decode.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = decode3;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParsePolygon = _interopRequireDefault(require_ParsePolygon());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseOp = require_ParseOp();
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function decode3(value) {
      if (value === null || (0, _typeof2.default)(value) !== "object") {
        return value;
      }
      if ((0, _isArray.default)(value)) {
        var dup = [];
        (0, _forEach.default)(value).call(value, function(v4, i4) {
          dup[i4] = decode3(v4);
        });
        return dup;
      }
      if (typeof value.__op === "string") {
        return (0, _ParseOp.opFromJSON)(value);
      }
      if (value.__type === "Pointer" && value.className) {
        return _ParseObject.default.fromJSON(value);
      }
      if (value.__type === "Object" && value.className) {
        return _ParseObject.default.fromJSON(value);
      }
      if (value.__type === "Relation") {
        var relation = new _ParseRelation.default(null, null);
        relation.targetClassName = value.className;
        return relation;
      }
      if (value.__type === "Date") {
        return new Date(value.iso);
      }
      if (value.__type === "File") {
        return _ParseFile.default.fromJSON(value);
      }
      if (value.__type === "GeoPoint") {
        return new _ParseGeoPoint.default({
          latitude: value.latitude,
          longitude: value.longitude
        });
      }
      if (value.__type === "Polygon") {
        return new _ParsePolygon.default(value.coordinates);
      }
      var copy = {};
      for (var k4 in value) {
        copy[k4] = decode3(value[k4]);
      }
      return copy;
    }
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof __require === "function") {
          try {
            crypto2 = (init_crypto(), __toCommonJS(crypto_exports));
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F4() {
          }
          return function(obj) {
            var subtype;
            F4.prototype = obj;
            subtype = new F4();
            F4.prototype = null;
            return subtype;
          };
        }();
        var C3 = {};
        var C_lib = C3.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words2, sigBytes) {
            words2 = this.words = words2 || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words2.length * 4;
            }
          },
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i4 = 0; i4 < thatSigBytes; i4++) {
                var thatByte = thatWords[i4 >>> 2] >>> 24 - i4 % 4 * 8 & 255;
                thisWords[thisSigBytes + i4 >>> 2] |= thatByte << 24 - (thisSigBytes + i4) % 4 * 8;
              }
            } else {
              for (var j4 = 0; j4 < thatSigBytes; j4 += 4) {
                thisWords[thisSigBytes + j4 >>> 2] = thatWords[j4 >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words2 = this.words;
            var sigBytes = this.sigBytes;
            words2[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words2.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          random: function(nBytes) {
            var words2 = [];
            for (var i4 = 0; i4 < nBytes; i4 += 4) {
              words2.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words2, nBytes);
          }
        });
        var C_enc = C3.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i4 = 0; i4 < sigBytes; i4++) {
              var bite = words2[i4 >>> 2] >>> 24 - i4 % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words2 = [];
            for (var i4 = 0; i4 < hexStrLength; i4 += 2) {
              words2[i4 >>> 3] |= parseInt(hexStr.substr(i4, 2), 16) << 24 - i4 % 8 * 4;
            }
            return new WordArray.init(words2, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i4 = 0; i4 < sigBytes; i4++) {
              var bite = words2[i4 >>> 2] >>> 24 - i4 % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words2 = [];
            for (var i4 = 0; i4 < latin1StrLength; i4++) {
              words2[i4 >>> 2] |= (latin1Str.charCodeAt(i4) & 255) << 24 - i4 % 4 * 8;
            }
            return new WordArray.init(words2, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e3) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash3 = this._doFinalize();
            return hash3;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key2) {
              return new C_algo.HMAC.init(hasher, key2).finalize(message);
            };
          }
        });
        var C_algo = C3.algo = {};
        return C3;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C3.enc;
        var Base64 = C_enc.Base64 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i4 = 0; i4 < sigBytes; i4 += 3) {
              var byte1 = words2[i4 >>> 2] >>> 24 - i4 % 4 * 8 & 255;
              var byte2 = words2[i4 + 1 >>> 2] >>> 24 - (i4 + 1) % 4 * 8 & 255;
              var byte3 = words2[i4 + 2 >>> 2] >>> 24 - (i4 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j4 = 0; j4 < 4 && i4 + j4 * 0.75 < sigBytes; j4++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j4) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j4 = 0; j4 < map.length; j4++) {
                reverseMap[map.charCodeAt(j4)] = j4;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words2 = [];
          var nBytes = 0;
          for (var i4 = 0; i4 < base64StrLength; i4++) {
            if (i4 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i4 - 1)] << i4 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i4)] >>> 6 - i4 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words2[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words2, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var T4 = [];
        (function() {
          for (var i4 = 0; i4 < 64; i4++) {
            T4[i4] = Math2.abs(Math2.sin(i4 + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M4, offset) {
            for (var i4 = 0; i4 < 16; i4++) {
              var offset_i = offset + i4;
              var M_offset_i = M4[offset_i];
              M4[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H4 = this._hash.words;
            var M_offset_0 = M4[offset + 0];
            var M_offset_1 = M4[offset + 1];
            var M_offset_2 = M4[offset + 2];
            var M_offset_3 = M4[offset + 3];
            var M_offset_4 = M4[offset + 4];
            var M_offset_5 = M4[offset + 5];
            var M_offset_6 = M4[offset + 6];
            var M_offset_7 = M4[offset + 7];
            var M_offset_8 = M4[offset + 8];
            var M_offset_9 = M4[offset + 9];
            var M_offset_10 = M4[offset + 10];
            var M_offset_11 = M4[offset + 11];
            var M_offset_12 = M4[offset + 12];
            var M_offset_13 = M4[offset + 13];
            var M_offset_14 = M4[offset + 14];
            var M_offset_15 = M4[offset + 15];
            var a4 = H4[0];
            var b3 = H4[1];
            var c4 = H4[2];
            var d4 = H4[3];
            a4 = FF(a4, b3, c4, d4, M_offset_0, 7, T4[0]);
            d4 = FF(d4, a4, b3, c4, M_offset_1, 12, T4[1]);
            c4 = FF(c4, d4, a4, b3, M_offset_2, 17, T4[2]);
            b3 = FF(b3, c4, d4, a4, M_offset_3, 22, T4[3]);
            a4 = FF(a4, b3, c4, d4, M_offset_4, 7, T4[4]);
            d4 = FF(d4, a4, b3, c4, M_offset_5, 12, T4[5]);
            c4 = FF(c4, d4, a4, b3, M_offset_6, 17, T4[6]);
            b3 = FF(b3, c4, d4, a4, M_offset_7, 22, T4[7]);
            a4 = FF(a4, b3, c4, d4, M_offset_8, 7, T4[8]);
            d4 = FF(d4, a4, b3, c4, M_offset_9, 12, T4[9]);
            c4 = FF(c4, d4, a4, b3, M_offset_10, 17, T4[10]);
            b3 = FF(b3, c4, d4, a4, M_offset_11, 22, T4[11]);
            a4 = FF(a4, b3, c4, d4, M_offset_12, 7, T4[12]);
            d4 = FF(d4, a4, b3, c4, M_offset_13, 12, T4[13]);
            c4 = FF(c4, d4, a4, b3, M_offset_14, 17, T4[14]);
            b3 = FF(b3, c4, d4, a4, M_offset_15, 22, T4[15]);
            a4 = GG(a4, b3, c4, d4, M_offset_1, 5, T4[16]);
            d4 = GG(d4, a4, b3, c4, M_offset_6, 9, T4[17]);
            c4 = GG(c4, d4, a4, b3, M_offset_11, 14, T4[18]);
            b3 = GG(b3, c4, d4, a4, M_offset_0, 20, T4[19]);
            a4 = GG(a4, b3, c4, d4, M_offset_5, 5, T4[20]);
            d4 = GG(d4, a4, b3, c4, M_offset_10, 9, T4[21]);
            c4 = GG(c4, d4, a4, b3, M_offset_15, 14, T4[22]);
            b3 = GG(b3, c4, d4, a4, M_offset_4, 20, T4[23]);
            a4 = GG(a4, b3, c4, d4, M_offset_9, 5, T4[24]);
            d4 = GG(d4, a4, b3, c4, M_offset_14, 9, T4[25]);
            c4 = GG(c4, d4, a4, b3, M_offset_3, 14, T4[26]);
            b3 = GG(b3, c4, d4, a4, M_offset_8, 20, T4[27]);
            a4 = GG(a4, b3, c4, d4, M_offset_13, 5, T4[28]);
            d4 = GG(d4, a4, b3, c4, M_offset_2, 9, T4[29]);
            c4 = GG(c4, d4, a4, b3, M_offset_7, 14, T4[30]);
            b3 = GG(b3, c4, d4, a4, M_offset_12, 20, T4[31]);
            a4 = HH(a4, b3, c4, d4, M_offset_5, 4, T4[32]);
            d4 = HH(d4, a4, b3, c4, M_offset_8, 11, T4[33]);
            c4 = HH(c4, d4, a4, b3, M_offset_11, 16, T4[34]);
            b3 = HH(b3, c4, d4, a4, M_offset_14, 23, T4[35]);
            a4 = HH(a4, b3, c4, d4, M_offset_1, 4, T4[36]);
            d4 = HH(d4, a4, b3, c4, M_offset_4, 11, T4[37]);
            c4 = HH(c4, d4, a4, b3, M_offset_7, 16, T4[38]);
            b3 = HH(b3, c4, d4, a4, M_offset_10, 23, T4[39]);
            a4 = HH(a4, b3, c4, d4, M_offset_13, 4, T4[40]);
            d4 = HH(d4, a4, b3, c4, M_offset_0, 11, T4[41]);
            c4 = HH(c4, d4, a4, b3, M_offset_3, 16, T4[42]);
            b3 = HH(b3, c4, d4, a4, M_offset_6, 23, T4[43]);
            a4 = HH(a4, b3, c4, d4, M_offset_9, 4, T4[44]);
            d4 = HH(d4, a4, b3, c4, M_offset_12, 11, T4[45]);
            c4 = HH(c4, d4, a4, b3, M_offset_15, 16, T4[46]);
            b3 = HH(b3, c4, d4, a4, M_offset_2, 23, T4[47]);
            a4 = II(a4, b3, c4, d4, M_offset_0, 6, T4[48]);
            d4 = II(d4, a4, b3, c4, M_offset_7, 10, T4[49]);
            c4 = II(c4, d4, a4, b3, M_offset_14, 15, T4[50]);
            b3 = II(b3, c4, d4, a4, M_offset_5, 21, T4[51]);
            a4 = II(a4, b3, c4, d4, M_offset_12, 6, T4[52]);
            d4 = II(d4, a4, b3, c4, M_offset_3, 10, T4[53]);
            c4 = II(c4, d4, a4, b3, M_offset_10, 15, T4[54]);
            b3 = II(b3, c4, d4, a4, M_offset_1, 21, T4[55]);
            a4 = II(a4, b3, c4, d4, M_offset_8, 6, T4[56]);
            d4 = II(d4, a4, b3, c4, M_offset_15, 10, T4[57]);
            c4 = II(c4, d4, a4, b3, M_offset_6, 15, T4[58]);
            b3 = II(b3, c4, d4, a4, M_offset_13, 21, T4[59]);
            a4 = II(a4, b3, c4, d4, M_offset_4, 6, T4[60]);
            d4 = II(d4, a4, b3, c4, M_offset_11, 10, T4[61]);
            c4 = II(c4, d4, a4, b3, M_offset_2, 15, T4[62]);
            b3 = II(b3, c4, d4, a4, M_offset_9, 21, T4[63]);
            H4[0] = H4[0] + a4 | 0;
            H4[1] = H4[1] + b3 | 0;
            H4[2] = H4[2] + c4 | 0;
            H4[3] = H4[3] + d4 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash3 = this._hash;
            var H4 = hash3.words;
            for (var i4 = 0; i4 < 4; i4++) {
              var H_i = H4[i4];
              H4[i4] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash3;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a4, b3, c4, d4, x4, s4, t4) {
          var n3 = a4 + (b3 & c4 | ~b3 & d4) + x4 + t4;
          return (n3 << s4 | n3 >>> 32 - s4) + b3;
        }
        function GG(a4, b3, c4, d4, x4, s4, t4) {
          var n3 = a4 + (b3 & d4 | c4 & ~d4) + x4 + t4;
          return (n3 << s4 | n3 >>> 32 - s4) + b3;
        }
        function HH(a4, b3, c4, d4, x4, s4, t4) {
          var n3 = a4 + (b3 ^ c4 ^ d4) + x4 + t4;
          return (n3 << s4 | n3 >>> 32 - s4) + b3;
        }
        function II(a4, b3, c4, d4, x4, s4, t4) {
          var n3 = a4 + (c4 ^ (b3 | ~d4)) + x4 + t4;
          return (n3 << s4 | n3 >>> 32 - s4) + b3;
        }
        C3.MD5 = Hasher._createHelper(MD5);
        C3.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var W3 = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M4, offset) {
            var H4 = this._hash.words;
            var a4 = H4[0];
            var b3 = H4[1];
            var c4 = H4[2];
            var d4 = H4[3];
            var e3 = H4[4];
            for (var i4 = 0; i4 < 80; i4++) {
              if (i4 < 16) {
                W3[i4] = M4[offset + i4] | 0;
              } else {
                var n3 = W3[i4 - 3] ^ W3[i4 - 8] ^ W3[i4 - 14] ^ W3[i4 - 16];
                W3[i4] = n3 << 1 | n3 >>> 31;
              }
              var t4 = (a4 << 5 | a4 >>> 27) + e3 + W3[i4];
              if (i4 < 20) {
                t4 += (b3 & c4 | ~b3 & d4) + 1518500249;
              } else if (i4 < 40) {
                t4 += (b3 ^ c4 ^ d4) + 1859775393;
              } else if (i4 < 60) {
                t4 += (b3 & c4 | b3 & d4 | c4 & d4) - 1894007588;
              } else {
                t4 += (b3 ^ c4 ^ d4) - 899497514;
              }
              e3 = d4;
              d4 = c4;
              c4 = b3 << 30 | b3 >>> 2;
              b3 = a4;
              a4 = t4;
            }
            H4[0] = H4[0] + a4 | 0;
            H4[1] = H4[1] + b3 | 0;
            H4[2] = H4[2] + c4 | 0;
            H4[3] = H4[3] + d4 | 0;
            H4[4] = H4[4] + e3 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C3.SHA1 = Hasher._createHelper(SHA1);
        C3.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var C_enc = C3.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C3.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          init: function(hasher, key2) {
            hasher = this._hasher = new hasher.init();
            if (typeof key2 == "string") {
              key2 = Utf8.parse(key2);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key2.sigBytes > hasherBlockSizeBytes) {
              key2 = hasher.finalize(key2);
            }
            key2.clamp();
            var oKey = this._oKey = key2.clone();
            var iKey = this._iKey = key2.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i4 = 0; i4 < hasherBlockSize; i4++) {
              oKeyWords[i4] ^= 1549556828;
              iKeyWords[i4] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac2;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i4 = 1; i4 < iterations; i4++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C3.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C3.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C3.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function(key2, cfg) {
            return this.create(this._ENC_XFORM_MODE, key2, cfg);
          },
          createDecryptor: function(key2, cfg) {
            return this.create(this._DEC_XFORM_MODE, key2, cfg);
          },
          init: function(xformMode, key2, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key2;
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function() {
            function selectCipherStrategy(key2) {
              if (typeof key2 == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key2, cfg) {
                  return selectCipherStrategy(key2).encrypt(cipher, message, key2, cfg);
                },
                decrypt: function(ciphertext, key2, cfg) {
                  return selectCipherStrategy(key2).decrypt(cipher, ciphertext, key2, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C3.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words2, offset, blockSize);
              cipher.encryptBlock(words2, offset);
              this._prevBlock = words2.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words2.slice(offset, offset + blockSize);
              cipher.decryptBlock(words2, offset);
              xorBlock.call(this, words2, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words2, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i4 = 0; i4 < blockSize; i4++) {
              words2[offset + i4] ^= block[i4];
            }
          }
          return CBC2;
        }();
        var C_pad = C3.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i4 = 0; i4 < nPaddingBytes; i4 += 4) {
              paddingWords.push(paddingWord);
            }
            var padding2 = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding2);
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words2, offset) {
            this._mode.processBlock(words2, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding2 = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding2.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding2.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C3.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          encrypt: function(cipher, message, key2, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key2, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key: key2,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function(cipher, ciphertext, key2, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key2, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C3.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key2 = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key2.words.slice(keySize), ivSize * 4);
            key2.sigBytes = keySize * 4;
            return CipherParams.create({ key: key2, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C3.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d4 = [];
          for (var i4 = 0; i4 < 256; i4++) {
            if (i4 < 128) {
              d4[i4] = i4 << 1;
            } else {
              d4[i4] = i4 << 1 ^ 283;
            }
          }
          var x4 = 0;
          var xi = 0;
          for (var i4 = 0; i4 < 256; i4++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x4] = sx;
            INV_SBOX[sx] = x4;
            var x22 = d4[x4];
            var x42 = d4[x22];
            var x8 = d4[x42];
            var t4 = d4[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x4] = t4 << 24 | t4 >>> 8;
            SUB_MIX_1[x4] = t4 << 16 | t4 >>> 16;
            SUB_MIX_2[x4] = t4 << 8 | t4 >>> 24;
            SUB_MIX_3[x4] = t4;
            var t4 = x8 * 16843009 ^ x42 * 65537 ^ x22 * 257 ^ x4 * 16843008;
            INV_SUB_MIX_0[sx] = t4 << 24 | t4 >>> 8;
            INV_SUB_MIX_1[sx] = t4 << 16 | t4 >>> 16;
            INV_SUB_MIX_2[sx] = t4 << 8 | t4 >>> 24;
            INV_SUB_MIX_3[sx] = t4;
            if (!x4) {
              x4 = xi = 1;
            } else {
              x4 = x22 ^ d4[d4[d4[x8 ^ x22]]];
              xi ^= d4[d4[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t4;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key2 = this._keyPriorReset = this._key;
            var keyWords = key2.words;
            var keySize = key2.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t4 = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t4 = t4 << 8 | t4 >>> 24;
                  t4 = SBOX[t4 >>> 24] << 24 | SBOX[t4 >>> 16 & 255] << 16 | SBOX[t4 >>> 8 & 255] << 8 | SBOX[t4 & 255];
                  t4 ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t4 = SBOX[t4 >>> 24] << 24 | SBOX[t4 >>> 16 & 255] << 16 | SBOX[t4 >>> 8 & 255] << 8 | SBOX[t4 & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t4;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t4 = keySchedule[ksRow];
              } else {
                var t4 = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t4;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t4 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t4 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t4 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t4 & 255]];
              }
            }
          },
          encryptBlock: function(M4, offset) {
            this._doCryptBlock(M4, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M4, offset) {
            var t4 = M4[offset + 1];
            M4[offset + 1] = M4[offset + 3];
            M4[offset + 3] = t4;
            this._doCryptBlock(M4, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t4 = M4[offset + 1];
            M4[offset + 1] = M4[offset + 3];
            M4[offset + 3] = t4;
          },
          _doCryptBlock: function(M4, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M4[offset] ^ keySchedule[0];
            var s1 = M4[offset + 1] ^ keySchedule[1];
            var s22 = M4[offset + 2] ^ keySchedule[2];
            var s32 = M4[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s22 >>> 8 & 255] ^ SUB_MIX_32[s32 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s22 >>> 16 & 255] ^ SUB_MIX_22[s32 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t22 = SUB_MIX_02[s22 >>> 24] ^ SUB_MIX_12[s32 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t32 = SUB_MIX_02[s32 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s22 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s22 = t22;
              s32 = t32;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s22 >>> 8 & 255] << 8 | SBOX2[s32 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s22 >>> 16 & 255] << 16 | SBOX2[s32 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t22 = (SBOX2[s22 >>> 24] << 24 | SBOX2[s32 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t32 = (SBOX2[s32 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s22 & 255]) ^ keySchedule[ksRow++];
            M4[offset] = t0;
            M4[offset + 1] = t1;
            M4[offset + 2] = t22;
            M4[offset + 3] = t32;
          },
          keySize: 256 / 32
        });
        C3.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// node_modules/crypto-js/enc-utf8.js
var require_enc_utf8 = __commonJS({
  "node_modules/crypto-js/enc-utf8.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      return CryptoJS.enc.Utf8;
    });
  }
});

// node_modules/moralis/lib/browser/CryptoController.js
var require_CryptoController = __commonJS({
  "node_modules/moralis/lib/browser/CryptoController.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _stringify = _interopRequireDefault(require_stringify3());
    var AES;
    var ENC;
    AES = require_aes();
    ENC = require_enc_utf8();
    var CryptoController = {
      encrypt: function(obj, secretKey) {
        var encrypted = AES.encrypt((0, _stringify.default)(obj), secretKey);
        return encrypted.toString();
      },
      decrypt: function(encryptedText, secretKey) {
        var decryptedStr = AES.decrypt(encryptedText, secretKey).toString(ENC);
        return decryptedStr;
      }
    };
    module.exports = CryptoController;
  }
});

// node_modules/moralis/lib/browser/InstallationController.js
var require_InstallationController = __commonJS({
  "node_modules/moralis/lib/browser/InstallationController.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _Storage = _interopRequireDefault(require_Storage());
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var iidCache = null;
    var InstallationController = {
      currentInstallationId: function() {
        if (typeof iidCache === "string") {
          return _promise.default.resolve(iidCache);
        }
        var path = _Storage.default.generatePath("installationId");
        return _Storage.default.getItemAsync(path).then(function(iid) {
          if (!iid) {
            iid = uuidv4();
            return _Storage.default.setItemAsync(path, iid).then(function() {
              iidCache = iid;
              return iid;
            });
          }
          iidCache = iid;
          return iid;
        });
      },
      _clearCache: function() {
        iidCache = null;
      },
      _setInstallationIdCache: function(iid) {
        iidCache = iid;
      }
    };
    module.exports = InstallationController;
  }
});

// node_modules/core-js-pure/internals/schedulers-fix.js
var require_schedulers_fix = __commonJS({
  "node_modules/core-js-pure/internals/schedulers-fix.js"(exports, module) {
    var global2 = require_global();
    var apply = require_function_apply();
    var isCallable = require_is_callable();
    var userAgent = require_engine_user_agent();
    var arraySlice = require_array_slice();
    var validateArgumentsLength = require_validate_arguments_length();
    var MSIE = /MSIE .\./.test(userAgent);
    var Function2 = global2.Function;
    var wrap = function(scheduler) {
      return MSIE ? function(handler, timeout) {
        var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
        var fn2 = isCallable(handler) ? handler : Function2(handler);
        var args = boundArgs ? arraySlice(arguments, 2) : void 0;
        return scheduler(boundArgs ? function() {
          apply(fn2, this, args);
        } : fn2, timeout);
      } : scheduler;
    };
    module.exports = {
      setTimeout: wrap(global2.setTimeout),
      setInterval: wrap(global2.setInterval)
    };
  }
});

// node_modules/core-js-pure/modules/web.set-interval.js
var require_web_set_interval = __commonJS({
  "node_modules/core-js-pure/modules/web.set-interval.js"() {
    var $3 = require_export();
    var global2 = require_global();
    var setInterval2 = require_schedulers_fix().setInterval;
    $3({ global: true, bind: true, forced: global2.setInterval !== setInterval2 }, {
      setInterval: setInterval2
    });
  }
});

// node_modules/core-js-pure/modules/web.set-timeout.js
var require_web_set_timeout = __commonJS({
  "node_modules/core-js-pure/modules/web.set-timeout.js"() {
    var $3 = require_export();
    var global2 = require_global();
    var setTimeout2 = require_schedulers_fix().setTimeout;
    $3({ global: true, bind: true, forced: global2.setTimeout !== setTimeout2 }, {
      setTimeout: setTimeout2
    });
  }
});

// node_modules/core-js-pure/modules/web.timers.js
var require_web_timers = __commonJS({
  "node_modules/core-js-pure/modules/web.timers.js"() {
    require_web_set_interval();
    require_web_set_timeout();
  }
});

// node_modules/core-js-pure/stable/set-timeout.js
var require_set_timeout = __commonJS({
  "node_modules/core-js-pure/stable/set-timeout.js"(exports, module) {
    require_web_timers();
    var path = require_path();
    module.exports = path.setTimeout;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js
var require_set_timeout2 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js"(exports, module) {
    module.exports = require_set_timeout();
  }
});

// node_modules/moralis/lib/browser/RESTController.js
var require_RESTController = __commonJS({
  "node_modules/moralis/lib/browser/RESTController.js"(exports, module) {
    "use strict";
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _promise = _interopRequireDefault(require_promise3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _includes = _interopRequireDefault(require_includes5());
    var _setTimeout2 = _interopRequireDefault(require_set_timeout2());
    var _concat = _interopRequireDefault(require_concat4());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _promiseUtils = require_promiseUtils();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context5, _context6;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty(_context5 = ownKeys4(Object(source), true)).call(_context5, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context6 = ownKeys4(Object(source))).call(_context6, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var XHR2 = null;
    if (typeof XMLHttpRequest !== "undefined") {
      XHR2 = XMLHttpRequest;
    }
    var useXDomainRequest = false;
    if (typeof XDomainRequest !== "undefined" && !("withCredentials" in new XMLHttpRequest())) {
      useXDomainRequest = true;
    }
    function ajaxIE9(method, url, data, headers, options) {
      return new _promise.default(function(resolve, reject) {
        var xdr = new XDomainRequest();
        xdr.onload = function() {
          var response;
          try {
            response = JSON.parse(xdr.responseText);
          } catch (e3) {
            reject(e3);
          }
          if (response) {
            resolve({
              response
            });
          }
        };
        xdr.onerror = xdr.ontimeout = function() {
          var fakeResponse = {
            responseText: (0, _stringify.default)({
              code: _ParseError.default.X_DOMAIN_REQUEST,
              error: "IE's XDomainRequest does not supply error info."
            })
          };
          reject(fakeResponse);
        };
        xdr.onprogress = function() {
          if (options && typeof options.progress === "function") {
            options.progress(xdr.responseText);
          }
        };
        xdr.open(method, url);
        xdr.send(data);
        if (options && typeof options.requestTask === "function") {
          options.requestTask(xdr);
        }
      });
    }
    var RESTController = {
      ajax: function(method, url, data, headers, options) {
        var _context;
        if (useXDomainRequest) {
          return ajaxIE9(method, url, data, headers, options);
        }
        var promise = (0, _promiseUtils.resolvingPromise)();
        var isIdempotent = _CoreManager.default.get("IDEMPOTENCY") && (0, _includes.default)(_context = ["POST", "PUT"]).call(_context, method);
        var requestId = isIdempotent ? uuidv4() : "";
        var attempts = 0;
        var dispatch = function dispatch2() {
          if (XHR2 == null) {
            throw new Error("Cannot make a request: No definition of XMLHttpRequest was found.");
          }
          var handled = false;
          var xhr = new XHR2();
          xhr.onreadystatechange = function() {
            if (xhr.readyState !== 4 || handled || xhr._aborted) {
              return;
            }
            handled = true;
            if (xhr.status >= 200 && xhr.status < 300) {
              var response;
              try {
                response = JSON.parse(xhr.responseText);
                if (typeof xhr.getResponseHeader === "function") {
                  var _context2;
                  if ((0, _includes.default)(_context2 = xhr.getAllResponseHeaders() || "").call(_context2, "x-parse-job-status-id: ")) {
                    response = xhr.getResponseHeader("x-parse-job-status-id");
                  }
                }
              } catch (e3) {
                promise.reject(e3.toString());
              }
              if (response) {
                promise.resolve({
                  response,
                  status: xhr.status,
                  xhr
                });
              }
            } else if (xhr.status >= 500 || xhr.status === 0) {
              if (++attempts < _CoreManager.default.get("REQUEST_ATTEMPT_LIMIT")) {
                var delay = Math.round(Math.random() * 125 * Math.pow(2, attempts));
                (0, _setTimeout2.default)(dispatch2, delay);
              } else if (xhr.status === 0) {
                promise.reject("Unable to connect to the Parse API");
              } else {
                promise.reject(xhr);
              }
            } else {
              promise.reject(xhr);
            }
          };
          headers = headers || {};
          if (typeof headers["Content-Type"] !== "string") {
            headers["Content-Type"] = "text/plain";
          }
          if (_CoreManager.default.get("IS_NODE")) {
            var _context3;
            headers["User-Agent"] = (0, _concat.default)(_context3 = "Parse/".concat(_CoreManager.default.get("VERSION"), " (NodeJS ")).call(_context3, process.versions.node, ")");
          }
          if (isIdempotent) {
            headers["X-Parse-Request-Id"] = requestId;
          }
          if (_CoreManager.default.get("SERVER_AUTH_TYPE") && _CoreManager.default.get("SERVER_AUTH_TOKEN")) {
            var _context4;
            headers.Authorization = (0, _concat.default)(_context4 = "".concat(_CoreManager.default.get("SERVER_AUTH_TYPE"), " ")).call(_context4, _CoreManager.default.get("SERVER_AUTH_TOKEN"));
          }
          var customHeaders = _CoreManager.default.get("REQUEST_HEADERS");
          for (var key2 in customHeaders) {
            headers[key2] = customHeaders[key2];
          }
          function handleProgress(type, event) {
            if (options && typeof options.progress === "function") {
              if (event.lengthComputable) {
                options.progress(event.loaded / event.total, event.loaded, event.total, {
                  type
                });
              } else {
                options.progress(null, null, null, {
                  type
                });
              }
            }
          }
          xhr.onprogress = function(event) {
            handleProgress("download", event);
          };
          if (xhr.upload) {
            xhr.upload.onprogress = function(event) {
              handleProgress("upload", event);
            };
          }
          xhr.open(method, url, true);
          for (var h4 in headers) {
            xhr.setRequestHeader(h4, headers[h4]);
          }
          xhr.onabort = function() {
            promise.resolve({
              response: {
                results: []
              },
              status: 0,
              xhr
            });
          };
          xhr.send(data);
          if (options && typeof options.requestTask === "function") {
            options.requestTask(xhr);
          }
        };
        dispatch();
        return promise;
      },
      request: function(method, path, data, options) {
        options = options || {};
        var url = _CoreManager.default.get("SERVER_URL");
        if (url[url.length - 1] !== "/") {
          url += "/";
        }
        url += path;
        var payload = {};
        if (data && (0, _typeof2.default)(data) === "object") {
          for (var k4 in data) {
            payload[k4] = data[k4];
          }
        }
        var _options = options, context = _options.context;
        if (context !== void 0) {
          payload._context = context;
        }
        if (method !== "POST") {
          payload._method = method;
          method = "POST";
        }
        payload._ApplicationId = _CoreManager.default.get("APPLICATION_ID");
        var jsKey = _CoreManager.default.get("JAVASCRIPT_KEY");
        if (jsKey) {
          payload._JavaScriptKey = jsKey;
        }
        payload._ClientVersion = _CoreManager.default.get("VERSION");
        var _options2 = options, useMasterKey = _options2.useMasterKey;
        if (typeof useMasterKey === "undefined") {
          useMasterKey = _CoreManager.default.get("USE_MASTER_KEY");
        }
        if (useMasterKey) {
          if (_CoreManager.default.get("MASTER_KEY")) {
            delete payload._JavaScriptKey;
            payload._MasterKey = _CoreManager.default.get("MASTER_KEY");
          }
        }
        if (_CoreManager.default.get("FORCE_REVOCABLE_SESSION")) {
          payload._RevocableSession = "1";
        }
        var _options3 = options, installationId = _options3.installationId;
        var installationIdPromise;
        if (installationId && typeof installationId === "string") {
          installationIdPromise = _promise.default.resolve(installationId);
        } else {
          var installationController = _CoreManager.default.getInstallationController();
          installationIdPromise = installationController.currentInstallationId();
        }
        return installationIdPromise.then(function(iid) {
          payload._InstallationId = iid;
          var userController = _CoreManager.default.getUserController();
          if (options && typeof options.sessionToken === "string") {
            return _promise.default.resolve(options.sessionToken);
          }
          if (userController) {
            return userController.currentUserAsync().then(function(user) {
              if (user) {
                return _promise.default.resolve(user.getSessionToken());
              }
              return _promise.default.resolve(null);
            });
          }
          return _promise.default.resolve(null);
        }).then(function(token) {
          if (token) {
            payload._SessionToken = token;
          }
          var payloadString = (0, _stringify.default)(payload);
          return RESTController.ajax(method, url, payloadString, {}, options).then(function(_ref) {
            var response = _ref.response, status = _ref.status;
            if (options.returnStatus) {
              return _objectSpread4(_objectSpread4({}, response), {}, {
                _status: status
              });
            }
            return response;
          });
        }).catch(RESTController.handleError);
      },
      handleError: function(response) {
        var error;
        if (response && response.responseText) {
          try {
            var errorJSON = JSON.parse(response.responseText);
            error = new _ParseError.default(errorJSON.code, errorJSON.error);
          } catch (e3) {
            error = new _ParseError.default(_ParseError.default.INVALID_JSON, "Received an error with invalid JSON from Parse: ".concat(response.responseText));
          }
        } else {
          var message = response.message ? response.message : response;
          error = new _ParseError.default(_ParseError.default.CONNECTION_FAILED, "XMLHttpRequest failed: ".concat((0, _stringify.default)(message)));
        }
        return _promise.default.reject(error);
      },
      _setXHR: function(xhr) {
        XHR2 = xhr;
      },
      _getXHR: function() {
        return XHR2;
      }
    };
    module.exports = RESTController;
  }
});

// node_modules/moralis/lib/browser/filterConsole.js
var require_filterConsole = __commonJS({
  "node_modules/moralis/lib/browser/filterConsole.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var filteredWarnings = [
      "Module not found: Can't resolve '@walletconnect/web3-provider'",
      "Module not found: Can't resolve 'magic-sdk'",
      "Module not found: Can't resolve '@web3auth/web3auth'"
    ];
    var filterConsole = function() {
      var preservedConsoleWarn = console.warn;
      console.warn = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var value = args ? args[0] : null;
        if (!value || typeof value !== "string") {
          return preservedConsoleWarn.apply(console, args);
        }
        value = value.replace("\u2019", "'").replace("\u2018", "'").replace("\u2019", "'");
        if ((0, _filter.default)(filteredWarnings).call(filteredWarnings, function(filter) {
          return (0, _includes.default)(value).call(value, filter);
        }).length >= 1) {
          return;
        }
        return preservedConsoleWarn.apply(console, args);
      };
    };
    module.exports = {
      filterConsole
    };
  }
});

// node_modules/core-js-pure/modules/es.regexp.exec.js
var require_es_regexp_exec = __commonJS({
  "node_modules/core-js-pure/modules/es.regexp.exec.js"() {
  }
});

// node_modules/core-js-pure/modules/es.string.replace.js
var require_es_string_replace = __commonJS({
  "node_modules/core-js-pure/modules/es.string.replace.js"() {
  }
});

// node_modules/core-js-pure/es/symbol/replace.js
var require_replace = __commonJS({
  "node_modules/core-js-pure/es/symbol/replace.js"(exports, module) {
    require_es_regexp_exec();
    require_es_symbol_replace();
    require_es_string_replace();
    var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    module.exports = WrappedWellKnownSymbolModule.f("replace");
  }
});

// node_modules/core-js-pure/stable/symbol/replace.js
var require_replace2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/replace.js"(exports, module) {
    var parent = require_replace();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/symbol/replace.js
var require_replace3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/symbol/replace.js"(exports, module) {
    module.exports = require_replace2();
  }
});

// node_modules/core-js-pure/modules/es.number.is-nan.js
var require_es_number_is_nan = __commonJS({
  "node_modules/core-js-pure/modules/es.number.is-nan.js"() {
    var $3 = require_export();
    $3({ target: "Number", stat: true }, {
      isNaN: function isNaN2(number) {
        return number != number;
      }
    });
  }
});

// node_modules/core-js-pure/es/number/is-nan.js
var require_is_nan = __commonJS({
  "node_modules/core-js-pure/es/number/is-nan.js"(exports, module) {
    require_es_number_is_nan();
    var path = require_path();
    module.exports = path.Number.isNaN;
  }
});

// node_modules/core-js-pure/stable/number/is-nan.js
var require_is_nan2 = __commonJS({
  "node_modules/core-js-pure/stable/number/is-nan.js"(exports, module) {
    var parent = require_is_nan();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js
var require_is_nan3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js"(exports, module) {
    module.exports = require_is_nan2();
  }
});

// node_modules/moralis/lib/browser/utils.js
var require_utils4 = __commonJS({
  "node_modules/moralis/lib/browser/utils.js"(exports, module) {
    "use strict";
    var _typeof = require_typeof();
    var _WeakMap = require_weak_map3();
    var _reduceInstanceProperty = require_reduce4();
    var _Object$keys2 = require_keys3();
    var _Object$create = require_create7();
    var _Symbol$replace = require_replace3();
    var _sliceInstanceProperty = require_slice4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _setPrototypeOf2 = _interopRequireDefault(require_setPrototypeOf());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _map = _interopRequireDefault(require_map10());
    var _entries = _interopRequireDefault(require_entries3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _isNan = _interopRequireDefault(require_is_nan3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _RESTController = _interopRequireDefault(require_RESTController());
    function _wrapRegExp() {
      _wrapRegExp = function(re, groups) {
        return new BabelRegExp(re, void 0, groups);
      };
      var _super = RegExp.prototype, _groups = new _WeakMap();
      function BabelRegExp(re, flags, groups) {
        var _this = new RegExp(re, flags);
        return _groups.set(_this, groups || _groups.get(re)), (0, _setPrototypeOf2.default)(_this, BabelRegExp.prototype);
      }
      function buildGroups(result, re) {
        var _context10;
        var g4 = _groups.get(re);
        return _reduceInstanceProperty(_context10 = _Object$keys2(g4)).call(_context10, function(groups, name2) {
          return groups[name2] = result[g4[name2]], groups;
        }, _Object$create(null));
      }
      return (0, _inherits2.default)(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {
        var result = _super.exec.call(this, str);
        return result && (result.groups = buildGroups(result, this)), result;
      }, BabelRegExp.prototype[_Symbol$replace] = function(str, substitution) {
        if (typeof substitution == "string") {
          var groups = _groups.get(this);
          return _super[_Symbol$replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_5, name2) {
            return "$" + groups[name2];
          }));
        }
        if (typeof substitution == "function") {
          var _this = this;
          return _super[_Symbol$replace].call(this, str, function() {
            var args = arguments;
            return _typeof(args[args.length - 1]) != "object" && (args = _sliceInstanceProperty([]).call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
          });
        }
        return _super[_Symbol$replace].call(this, str, substitution);
      }, _wrapRegExp.apply(this, arguments);
    }
    var DEEP_INDEX_API_HOST = "deep-index.moralis.io";
    var DEEP_INDEX_SWAGGER_PATH = "/api-docs/v2/swagger.json";
    var TrackingEventName = (0, _freeze.default)({
      START_FUNCTION: "Moralis SDK start"
    });
    var fetchSwaggerJson = function() {
      var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var _yield$RESTController, response;
        return _regenerator.default.wrap(function(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _RESTController.default.ajax("GET", "https://".concat(DEEP_INDEX_API_HOST).concat(DEEP_INDEX_SWAGGER_PATH));
              case 2:
                _yield$RESTController = _context.sent;
                response = _yield$RESTController.response;
                return _context.abrupt("return", response);
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function() {
        return _ref.apply(this, arguments);
      };
    }();
    var getPathByTag = function(swaggerJSON) {
      var _context2;
      var pathByTag = {};
      var pathDetails = {};
      (0, _map.default)(_context2 = (0, _entries.default)(swaggerJSON.paths)).call(_context2, function(_ref2) {
        var _context3;
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2), pathName = _ref3[0], requestData = _ref3[1];
        return (0, _forEach.default)(_context3 = (0, _entries.default)(requestData)).call(_context3, function(_ref4) {
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2), method = _ref5[0], data = _ref5[1];
          var tags = data.tags;
          if (tags.length > 0) {
            if (!pathByTag[tags[0]]) {
              pathByTag[tags[0]] = [];
            }
            pathByTag[tags[0]].push(data.operationId);
            pathDetails[data.operationId] = {
              method,
              pathName,
              data
            };
          }
        });
      });
      return {
        pathByTag,
        pathDetails
      };
    };
    var fetchEndpoints = function() {
      var _ref6 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
        var _context4;
        var swaggerJSON, _yield$getPathByTag, pathDetails, data;
        return _regenerator.default.wrap(function(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return fetchSwaggerJson();
              case 2:
                swaggerJSON = _context5.sent;
                _context5.next = 5;
                return getPathByTag(swaggerJSON);
              case 5:
                _yield$getPathByTag = _context5.sent;
                pathDetails = _yield$getPathByTag.pathDetails;
                data = [];
                (0, _forEach.default)(_context4 = (0, _keys.default)(pathDetails)).call(_context4, function(x4) {
                  var item = pathDetails[x4];
                  var endpoint = {
                    method: item.method.toUpperCase(),
                    group: item.data.tags[0],
                    name: x4,
                    url: item.pathName.split("{").join(":").split("}").join("")
                  };
                  data.push(endpoint);
                });
                return _context5.abrupt("return", data);
              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee2);
      }));
      return function() {
        return _ref6.apply(this, arguments);
      };
    }();
    var isSemanticVersionLarger = function(version1, version25) {
      var _context6, _context7;
      var _version1$split = version1.split("-"), _version1$split2 = (0, _slicedToArray2.default)(_version1$split, 2), version1Main = _version1$split2[0], version1Pre = _version1$split2[1];
      var version1Arr = (0, _map.default)(_context6 = version1Main.split(".")).call(_context6, function(s4) {
        return Number(s4);
      });
      var _version2$split = version25.split("-"), _version2$split2 = (0, _slicedToArray2.default)(_version2$split, 2), version2Main = _version2$split2[0], version2Pre = _version2$split2[1];
      var version2Arr = (0, _map.default)(_context7 = version2Main.split(".")).call(_context7, function(s4) {
        return Number(s4);
      });
      for (var index = 0; index < 3; index++) {
        var compare1 = version1Arr[index];
        var compare2 = version2Arr[index];
        if (compare1 > compare2)
          return true;
        if (compare1 < compare2)
          return false;
        if (!(0, _isNan.default)(compare1) && (0, _isNan.default)(compare2))
          return true;
        if ((0, _isNan.default)(compare1) && !(0, _isNan.default)(compare2))
          return false;
      }
      if (version1Pre && version2Pre) {
        var _version1Pre$split$, _version2Pre$split$;
        var version1PreNumber = (_version1Pre$split$ = version1Pre.split(".")[1]) !== null && _version1Pre$split$ !== void 0 ? _version1Pre$split$ : 0;
        var version2PreNumber = (_version2Pre$split$ = version2Pre.split(".")[1]) !== null && _version2Pre$split$ !== void 0 ? _version2Pre$split$ : 0;
        return version1PreNumber > version2PreNumber;
      }
      if (version2Pre) {
        return true;
      }
      return false;
    };
    var checkForSdkUpdates = function() {
      var _ref7 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
        var _yield$RESTController2, response, latestVersion, installedVersion;
        return _regenerator.default.wrap(function(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return _RESTController.default.ajax("GET", "https://www.unpkg.com/moralis/package.json");
              case 3:
                _yield$RESTController2 = _context8.sent;
                response = _yield$RESTController2.response;
                latestVersion = response.version;
                installedVersion = "1.8.0";
                if (isSemanticVersionLarger(latestVersion, installedVersion))
                  console.warn("Moralis: You are not using the latest version of the SDK. Please update it as soon as possible to enjoy the newest features. Most recent version: ".concat(latestVersion));
                _context8.next = 12;
                break;
              case 10:
                _context8.prev = 10;
                _context8.t0 = _context8["catch"](0);
              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee3, null, [[0, 10]]);
      }));
      return function() {
        return _ref7.apply(this, arguments);
      };
    }();
    var trackEvent = function() {
      var _ref8 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(name2, subdomain, options) {
        var _yield$RESTController3, response;
        return _regenerator.default.wrap(function(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                _context9.next = 3;
                return _RESTController.default.ajax("POST", "https://internal-api.moralis.io/api/functions/trackEvent", (0, _stringify.default)({
                  subdomain,
                  event: name2,
                  options
                }), {
                  Accept: "application/json",
                  "Content-Type": "application/json"
                });
              case 3:
                _yield$RESTController3 = _context9.sent;
                response = _yield$RESTController3.response;
                return _context9.abrupt("return", response.result);
              case 8:
                _context9.prev = 8;
                _context9.t0 = _context9["catch"](0);
              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee4, null, [[0, 8]]);
      }));
      return function() {
        return _ref8.apply(this, arguments);
      };
    }();
    var validServerUrlRegex = _wrapRegExp(/^https?:\/\/([0-9A-Z_a-z]+\.[0-9A-Z_a-z]+\.[0-9A-Z_a-z]+)(:[0-9]{4})?\/server\/?$/, {
      subdomain: 1
    });
    var validateServerUrl = function(serverUrl) {
      return validServerUrlRegex.test(serverUrl);
    };
    var getSubdomain = function(serverUrl) {
      var _match$groups$subdoma, _match$groups;
      var isValidServerUrl = validateServerUrl(serverUrl);
      if (!isValidServerUrl) {
        return null;
      }
      var match = validServerUrlRegex.exec(serverUrl);
      return (_match$groups$subdoma = match === null || match === void 0 ? void 0 : (_match$groups = match.groups) === null || _match$groups === void 0 ? void 0 : _match$groups.subdomain) !== null && _match$groups$subdoma !== void 0 ? _match$groups$subdoma : null;
    };
    module.exports = {
      fetchSwaggerJson,
      getPathByTag,
      fetchEndpoints,
      checkForSdkUpdates,
      trackEvent,
      TrackingEventName,
      getSubdomain
    };
  }
});

// node_modules/moralis/lib/browser/Analytics.js
var require_Analytics = __commonJS({
  "node_modules/moralis/lib/browser/Analytics.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.track = track;
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    function track(name2, dimensions) {
      name2 = name2 || "";
      name2 = name2.replace(/^\s*/, "");
      name2 = name2.replace(/\s*$/, "");
      if (name2.length === 0) {
        throw new TypeError("A name for the custom event must be provided");
      }
      for (var _key in dimensions) {
        if (typeof _key !== "string" || typeof dimensions[_key] !== "string") {
          throw new TypeError('track() dimensions expects keys and values of type "string".');
        }
      }
      return _CoreManager.default.getAnalyticsController().track(name2, dimensions);
    }
    var DefaultController = {
      track: function(name2, dimensions) {
        var path = "events/".concat(name2);
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", path, {
          dimensions
        });
      }
    };
    _CoreManager.default.setAnalyticsController(DefaultController);
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/map.js
var require_map13 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/map.js"(exports, module) {
    module.exports = require_map2();
  }
});

// node_modules/core-js-pure/es/array/virtual/entries.js
var require_entries4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/entries.js"(exports, module) {
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").entries;
  }
});

// node_modules/core-js-pure/stable/array/virtual/entries.js
var require_entries5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/entries.js"(exports, module) {
    var parent = require_entries4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/entries.js
var require_entries6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/entries.js"(exports, module) {
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_entries5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.entries;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js
var require_entries7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js"(exports, module) {
    module.exports = require_entries6();
  }
});

// node_modules/moralis/lib/browser/ParseCLP.js
var require_ParseCLP = __commonJS({
  "node_modules/moralis/lib/browser/ParseCLP.js"(exports) {
    "use strict";
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray2 = require_is_array4();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _map = _interopRequireDefault(require_map13());
    var _includes = _interopRequireDefault(require_includes5());
    var _every = _interopRequireDefault(require_every4());
    var _entries = _interopRequireDefault(require_entries7());
    var _slice = _interopRequireDefault(require_slice4());
    var _keys = _interopRequireDefault(require_keys3());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _ParseRole = _interopRequireDefault(require_ParseRole());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context3, _context4;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty(_context3 = ownKeys4(Object(source), true)).call(_context3, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys4(Object(source))).call(_context4, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context2;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty2(_context2 = Object.prototype.toString.call(o4)).call(_context2, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    var PUBLIC_KEY = "*";
    var VALID_PERMISSIONS = new _map.default();
    VALID_PERMISSIONS.set("get", {});
    VALID_PERMISSIONS.set("find", {});
    VALID_PERMISSIONS.set("count", {});
    VALID_PERMISSIONS.set("create", {});
    VALID_PERMISSIONS.set("update", {});
    VALID_PERMISSIONS.set("delete", {});
    VALID_PERMISSIONS.set("addField", {});
    var VALID_PERMISSIONS_EXTENDED = new _map.default();
    VALID_PERMISSIONS_EXTENDED.set("protectedFields", {});
    var ParseCLP = function() {
      function ParseCLP2(userId) {
        var _this = this;
        (0, _classCallCheck2.default)(this, ParseCLP2);
        (0, _defineProperty2.default)(this, "permissionsMap", void 0);
        this.permissionsMap = {};
        var _iterator = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS).call(VALID_PERMISSIONS)), _step;
        try {
          var _loop = function() {
            var _step$value = (0, _slicedToArray2.default)(_step.value, 2), operation2 = _step$value[0], group2 = _step$value[1];
            _this.permissionsMap[operation2] = _objectSpread4({}, group2);
            var action = operation2.charAt(0).toUpperCase() + (0, _slice.default)(operation2).call(operation2, 1);
            _this["get".concat(action, "RequiresAuthentication")] = function() {
              return this._getAccess(operation2, "requiresAuthentication");
            };
            _this["set".concat(action, "RequiresAuthentication")] = function(allowed2) {
              this._setAccess(operation2, "requiresAuthentication", allowed2);
            };
            _this["get".concat(action, "PointerFields")] = function() {
              return this._getAccess(operation2, "pointerFields", false);
            };
            _this["set".concat(action, "PointerFields")] = function(pointerFields) {
              this._setArrayAccess(operation2, "pointerFields", pointerFields);
            };
            _this["get".concat(action, "Access")] = function(entity) {
              return this._getAccess(operation2, entity);
            };
            _this["set".concat(action, "Access")] = function(entity, allowed2) {
              this._setAccess(operation2, entity, allowed2);
            };
            _this["getPublic".concat(action, "Access")] = function() {
              return this["get".concat(action, "Access")](PUBLIC_KEY);
            };
            _this["setPublic".concat(action, "Access")] = function(allowed2) {
              this["set".concat(action, "Access")](PUBLIC_KEY, allowed2);
            };
            _this["getRole".concat(action, "Access")] = function(role) {
              return this["get".concat(action, "Access")](this._getRoleName(role));
            };
            _this["setRole".concat(action, "Access")] = function(role, allowed2) {
              this["set".concat(action, "Access")](this._getRoleName(role), allowed2);
            };
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var _iterator2 = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS_EXTENDED).call(VALID_PERMISSIONS_EXTENDED)), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = (0, _slicedToArray2.default)(_step2.value, 2), operation = _step2$value[0], group = _step2$value[1];
            this.permissionsMap[operation] = _objectSpread4({}, group);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (userId && (0, _typeof2.default)(userId) === "object") {
          if (userId instanceof _ParseUser.default) {
            this.setReadAccess(userId, true);
            this.setWriteAccess(userId, true);
          } else if (userId instanceof _ParseRole.default) {
            this.setRoleReadAccess(userId, true);
            this.setRoleWriteAccess(userId, true);
          } else {
            for (var _permission in userId) {
              var _context;
              var users = userId[_permission];
              var isValidPermission = !!VALID_PERMISSIONS.get(_permission);
              var isValidPermissionExtended = !!VALID_PERMISSIONS_EXTENDED.get(_permission);
              var isValidGroupPermission = (0, _includes.default)(_context = ["readUserFields", "writeUserFields"]).call(_context, _permission);
              if (typeof _permission !== "string" || !(isValidPermission || isValidPermissionExtended || isValidGroupPermission)) {
                throw new TypeError("Tried to create an CLP with an invalid permission type.");
              }
              if (isValidGroupPermission) {
                if ((0, _every.default)(users).call(users, function(pointer) {
                  return typeof pointer === "string";
                })) {
                  this.permissionsMap[_permission] = users;
                  continue;
                } else {
                  throw new TypeError("Tried to create an CLP with an invalid permission value.");
                }
              }
              for (var user in users) {
                var allowed = users[user];
                if (typeof allowed !== "boolean" && !isValidPermissionExtended && user !== "pointerFields") {
                  throw new TypeError("Tried to create an CLP with an invalid permission value.");
                }
                this.permissionsMap[_permission][user] = allowed;
              }
            }
          }
        } else if (typeof userId === "function") {
          throw new TypeError("ParseCLP constructed with a function. Did you forget ()?");
        }
      }
      (0, _createClass2.default)(ParseCLP2, [{
        key: "toJSON",
        value: function() {
          return _objectSpread4({}, this.permissionsMap);
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParseCLP2)) {
            return false;
          }
          var permissions = (0, _keys.default)(this.permissionsMap);
          var otherPermissions = (0, _keys.default)(other.permissionsMap);
          if (permissions.length !== otherPermissions.length) {
            return false;
          }
          for (var _permission2 in this.permissionsMap) {
            if (!other.permissionsMap[_permission2]) {
              return false;
            }
            var users = (0, _keys.default)(this.permissionsMap[_permission2]);
            var otherUsers = (0, _keys.default)(other.permissionsMap[_permission2]);
            if (users.length !== otherUsers.length) {
              return false;
            }
            for (var user in this.permissionsMap[_permission2]) {
              if (!other.permissionsMap[_permission2][user]) {
                return false;
              }
              if (this.permissionsMap[_permission2][user] !== other.permissionsMap[_permission2][user]) {
                return false;
              }
            }
          }
          return true;
        }
      }, {
        key: "_getRoleName",
        value: function(role) {
          var name2 = role;
          if (role instanceof _ParseRole.default) {
            name2 = role.getName();
          }
          if (typeof name2 !== "string") {
            throw new TypeError("role must be a Parse.Role or a String");
          }
          return "role:".concat(name2);
        }
      }, {
        key: "_parseEntity",
        value: function(entity) {
          var userId = entity;
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
            if (!userId) {
              throw new Error("Cannot get access for a Parse.User without an id.");
            }
          } else if (userId instanceof _ParseRole.default) {
            userId = this._getRoleName(userId);
          }
          if (typeof userId !== "string") {
            throw new TypeError("userId must be a string.");
          }
          return userId;
        }
      }, {
        key: "_setAccess",
        value: function(permission, userId, allowed) {
          userId = this._parseEntity(userId);
          if (typeof allowed !== "boolean") {
            throw new TypeError("allowed must be either true or false.");
          }
          var permissions = this.permissionsMap[permission][userId];
          if (!permissions) {
            if (!allowed) {
              return;
            }
            this.permissionsMap[permission][userId] = {};
          }
          if (allowed) {
            this.permissionsMap[permission][userId] = true;
          } else {
            delete this.permissionsMap[permission][userId];
          }
        }
      }, {
        key: "_getAccess",
        value: function(permission, userId) {
          var returnBoolean = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          userId = this._parseEntity(userId);
          var permissions = this.permissionsMap[permission][userId];
          if (returnBoolean) {
            if (!permissions) {
              return false;
            }
            return !!this.permissionsMap[permission][userId];
          }
          return permissions;
        }
      }, {
        key: "_setArrayAccess",
        value: function(permission, userId, fields) {
          userId = this._parseEntity(userId);
          var permissions = this.permissionsMap[permission][userId];
          if (!permissions) {
            this.permissionsMap[permission][userId] = [];
          }
          if (!fields || (0, _isArray.default)(fields) && fields.length === 0) {
            delete this.permissionsMap[permission][userId];
          } else if ((0, _isArray.default)(fields) && (0, _every.default)(fields).call(fields, function(field) {
            return typeof field === "string";
          })) {
            this.permissionsMap[permission][userId] = fields;
          } else {
            throw new TypeError("fields must be an array of strings or undefined.");
          }
        }
      }, {
        key: "_setGroupPointerPermission",
        value: function(operation, pointerFields) {
          var fields = this.permissionsMap[operation];
          if (!fields) {
            this.permissionsMap[operation] = [];
          }
          if (!pointerFields || (0, _isArray.default)(pointerFields) && pointerFields.length === 0) {
            delete this.permissionsMap[operation];
          } else if ((0, _isArray.default)(pointerFields) && (0, _every.default)(pointerFields).call(pointerFields, function(field) {
            return typeof field === "string";
          })) {
            this.permissionsMap[operation] = pointerFields;
          } else {
            throw new TypeError("".concat(operation, ".pointerFields must be an array of strings or undefined."));
          }
        }
      }, {
        key: "_getGroupPointerPermissions",
        value: function(operation) {
          return this.permissionsMap[operation];
        }
      }, {
        key: "setReadUserFields",
        value: function(pointerFields) {
          this._setGroupPointerPermission("readUserFields", pointerFields);
        }
      }, {
        key: "getReadUserFields",
        value: function() {
          return this._getGroupPointerPermissions("readUserFields");
        }
      }, {
        key: "setWriteUserFields",
        value: function(pointerFields) {
          this._setGroupPointerPermission("writeUserFields", pointerFields);
        }
      }, {
        key: "getWriteUserFields",
        value: function() {
          return this._getGroupPointerPermissions("writeUserFields");
        }
      }, {
        key: "setProtectedFields",
        value: function(userId, fields) {
          this._setArrayAccess("protectedFields", userId, fields);
        }
      }, {
        key: "getProtectedFields",
        value: function(userId) {
          return this._getAccess("protectedFields", userId, false);
        }
      }, {
        key: "setReadAccess",
        value: function(userId, allowed) {
          this._setAccess("find", userId, allowed);
          this._setAccess("get", userId, allowed);
          this._setAccess("count", userId, allowed);
        }
      }, {
        key: "getReadAccess",
        value: function(userId) {
          return this._getAccess("find", userId) && this._getAccess("get", userId) && this._getAccess("count", userId);
        }
      }, {
        key: "setWriteAccess",
        value: function(userId, allowed) {
          this._setAccess("create", userId, allowed);
          this._setAccess("update", userId, allowed);
          this._setAccess("delete", userId, allowed);
          this._setAccess("addField", userId, allowed);
        }
      }, {
        key: "getWriteAccess",
        value: function(userId) {
          return this._getAccess("create", userId) && this._getAccess("update", userId) && this._getAccess("delete", userId) && this._getAccess("addField", userId);
        }
      }, {
        key: "setPublicReadAccess",
        value: function(allowed) {
          this.setReadAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicReadAccess",
        value: function() {
          return this.getReadAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicWriteAccess",
        value: function(allowed) {
          this.setWriteAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicWriteAccess",
        value: function() {
          return this.getWriteAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicProtectedFields",
        value: function(fields) {
          this.setProtectedFields(PUBLIC_KEY, fields);
        }
      }, {
        key: "getPublicProtectedFields",
        value: function() {
          return this.getProtectedFields(PUBLIC_KEY);
        }
      }, {
        key: "getRoleReadAccess",
        value: function(role) {
          return this.getReadAccess(this._getRoleName(role));
        }
      }, {
        key: "getRoleWriteAccess",
        value: function(role) {
          return this.getWriteAccess(this._getRoleName(role));
        }
      }, {
        key: "setRoleReadAccess",
        value: function(role, allowed) {
          this.setReadAccess(this._getRoleName(role), allowed);
        }
      }, {
        key: "setRoleWriteAccess",
        value: function(role, allowed) {
          this.setWriteAccess(this._getRoleName(role), allowed);
        }
      }, {
        key: "getRoleProtectedFields",
        value: function(role) {
          return this.getProtectedFields(this._getRoleName(role));
        }
      }, {
        key: "setRoleProtectedFields",
        value: function(role, fields) {
          this.setProtectedFields(this._getRoleName(role), fields);
        }
      }]);
      return ParseCLP2;
    }();
    var _default = ParseCLP;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseConfig.js
var require_ParseConfig = __commonJS({
  "node_modules/moralis/lib/browser/ParseConfig.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _decode2 = _interopRequireDefault(require_decode());
    var _encode3 = _interopRequireDefault(require_encode());
    var _escape2 = _interopRequireDefault(require_escape());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _Storage = _interopRequireDefault(require_Storage());
    var ParseConfig = function() {
      function ParseConfig2() {
        (0, _classCallCheck2.default)(this, ParseConfig2);
        (0, _defineProperty2.default)(this, "attributes", void 0);
        (0, _defineProperty2.default)(this, "_escapedAttributes", void 0);
        this.attributes = {};
        this._escapedAttributes = {};
      }
      (0, _createClass2.default)(ParseConfig2, [{
        key: "get",
        value: function(attr) {
          return this.attributes[attr];
        }
      }, {
        key: "escape",
        value: function(attr) {
          var html = this._escapedAttributes[attr];
          if (html) {
            return html;
          }
          var val = this.attributes[attr];
          var escaped = "";
          if (val != null) {
            escaped = (0, _escape2.default)(val.toString());
          }
          this._escapedAttributes[attr] = escaped;
          return escaped;
        }
      }], [{
        key: "current",
        value: function() {
          var controller = _CoreManager.default.getConfigController();
          return controller.current();
        }
      }, {
        key: "get",
        value: function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var controller = _CoreManager.default.getConfigController();
          return controller.get(options);
        }
      }, {
        key: "save",
        value: function(attrs, masterKeyOnlyFlags) {
          var controller = _CoreManager.default.getConfigController();
          return controller.save(attrs, masterKeyOnlyFlags).then(function() {
            return controller.get({
              useMasterKey: true
            });
          }, function(error) {
            return _promise.default.reject(error);
          });
        }
      }, {
        key: "_clearCache",
        value: function() {
          currentConfig = null;
        }
      }]);
      return ParseConfig2;
    }();
    var currentConfig = null;
    var CURRENT_CONFIG_KEY = "currentConfig";
    function decodePayload(data) {
      try {
        var json = JSON.parse(data);
        if (json && (0, _typeof2.default)(json) === "object") {
          return (0, _decode2.default)(json);
        }
      } catch (e3) {
        return null;
      }
    }
    var DefaultController = {
      current: function() {
        if (currentConfig) {
          return currentConfig;
        }
        var config = new ParseConfig();
        var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);
        if (!_Storage.default.async()) {
          var configData = _Storage.default.getItem(storagePath);
          if (configData) {
            var attributes = decodePayload(configData);
            if (attributes) {
              config.attributes = attributes;
              currentConfig = config;
            }
          }
          return config;
        }
        return _Storage.default.getItemAsync(storagePath).then(function(configData2) {
          if (configData2) {
            var _attributes = decodePayload(configData2);
            if (_attributes) {
              config.attributes = _attributes;
              currentConfig = config;
            }
          }
          return config;
        });
      },
      get: function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "config", {}, options).then(function(response) {
          if (!response || !response.params) {
            var error = new _ParseError.default(_ParseError.default.INVALID_JSON, "Config JSON response invalid.");
            return _promise.default.reject(error);
          }
          var config = new ParseConfig();
          config.attributes = {};
          for (var attr in response.params) {
            config.attributes[attr] = (0, _decode2.default)(response.params[attr]);
          }
          currentConfig = config;
          return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function() {
            return config;
          });
        });
      },
      save: function(attrs, masterKeyOnlyFlags) {
        var RESTController = _CoreManager.default.getRESTController();
        var encodedAttrs = {};
        for (var _key in attrs) {
          encodedAttrs[_key] = (0, _encode3.default)(attrs[_key]);
        }
        return RESTController.request("PUT", "config", {
          params: encodedAttrs,
          masterKeyOnly: masterKeyOnlyFlags
        }, {
          useMasterKey: true
        }).then(function(response) {
          if (response && response.result) {
            return _promise.default.resolve();
          }
          var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, "Error occured updating Config.");
          return _promise.default.reject(error);
        });
      }
    };
    _CoreManager.default.setConfigController(DefaultController);
    var _default = ParseConfig;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/FacebookUtils.js
var require_FacebookUtils = __commonJS({
  "node_modules/moralis/lib/browser/FacebookUtils.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var initialized = false;
    var requestedPermissions;
    var initOptions;
    var provider = {
      authenticate: function(options) {
        var _this = this;
        if (typeof FB === "undefined") {
          options.error(this, "Facebook SDK not found.");
        }
        FB.login(function(response) {
          if (response.authResponse) {
            if (options.success) {
              options.success(_this, {
                id: response.authResponse.userID,
                access_token: response.authResponse.accessToken,
                expiration_date: new Date(response.authResponse.expiresIn * 1e3 + new Date().getTime()).toJSON()
              });
            }
          } else {
            if (options.error) {
              options.error(_this, response);
            }
          }
        }, {
          scope: requestedPermissions
        });
      },
      restoreAuthentication: function(authData) {
        if (authData) {
          var newOptions = {};
          if (initOptions) {
            for (var key2 in initOptions) {
              newOptions[key2] = initOptions[key2];
            }
          }
          newOptions.status = false;
          var existingResponse = FB.getAuthResponse();
          if (existingResponse && existingResponse.userID !== authData.id) {
            FB.logout();
          }
          FB.init(newOptions);
        }
        return true;
      },
      getAuthType: function() {
        return "facebook";
      },
      deauthenticate: function() {
        this.restoreAuthentication(null);
      }
    };
    var FacebookUtils = {
      init: function(options) {
        if (typeof FB === "undefined") {
          throw new Error("The Facebook JavaScript SDK must be loaded before calling init.");
        }
        initOptions = {};
        if (options) {
          for (var key2 in options) {
            initOptions[key2] = options[key2];
          }
        }
        if (initOptions.status && typeof console !== "undefined") {
          var warn = console.warn || console.log || function() {
          };
          warn.call(console, 'The "status" flag passed into FB.init, when set to true, can interfere with Parse Facebook integration, so it has been suppressed. Please call FB.getLoginStatus() explicitly if you require this behavior.');
        }
        initOptions.status = false;
        FB.init(initOptions);
        _ParseUser.default._registerAuthenticationProvider(provider);
        initialized = true;
      },
      isLinked: function(user) {
        return user._isLinked("facebook");
      },
      logIn: function(permissions, options) {
        if (!permissions || typeof permissions === "string") {
          if (!initialized) {
            throw new Error("You must initialize FacebookUtils before calling logIn.");
          }
          requestedPermissions = permissions;
          return _ParseUser.default.logInWith("facebook", options);
        }
        return _ParseUser.default.logInWith("facebook", {
          authData: permissions
        }, options);
      },
      link: function(user, permissions, options) {
        if (!permissions || typeof permissions === "string") {
          if (!initialized) {
            throw new Error("You must initialize FacebookUtils before calling link.");
          }
          requestedPermissions = permissions;
          return user.linkWith("facebook", options);
        }
        return user.linkWith("facebook", {
          authData: permissions
        }, options);
      },
      unlink: function(user, options) {
        if (!initialized) {
          throw new Error("You must initialize FacebookUtils before calling unlink.");
        }
        return user._unlinkFrom("facebook", options);
      },
      _getAuthProvider: function() {
        return provider;
      }
    };
    var _default = FacebookUtils;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseInstallation.js
var require_ParseInstallation = __commonJS({
  "node_modules/moralis/lib/browser/ParseInstallation.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var Installation = function(_ParseObject) {
      (0, _inherits2.default)(Installation2, _ParseObject);
      var _super = _createSuper(Installation2);
      function Installation2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, Installation2);
        _this = _super.call(this, "_Installation");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Installation");
          }
        }
        return _this;
      }
      return (0, _createClass2.default)(Installation2);
    }(_ParseObject2.default);
    exports.default = Installation;
    _ParseObject2.default.registerSubclass("_Installation", Installation);
  }
});

// node_modules/core-js-pure/modules/es.set.constructor.js
var require_es_set_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.set.constructor.js"() {
    "use strict";
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Set", function(init2) {
      return function Set2() {
        return init2(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js-pure/modules/es.set.js
var require_es_set = __commonJS({
  "node_modules/core-js-pure/modules/es.set.js"() {
    require_es_set_constructor();
  }
});

// node_modules/core-js-pure/es/set/index.js
var require_set = __commonJS({
  "node_modules/core-js-pure/es/set/index.js"(exports, module) {
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_set();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Set;
  }
});

// node_modules/core-js-pure/stable/set/index.js
var require_set2 = __commonJS({
  "node_modules/core-js-pure/stable/set/index.js"(exports, module) {
    var parent = require_set();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/set.js
var require_set3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/set.js"(exports, module) {
    module.exports = require_set2();
  }
});

// node_modules/moralis/lib/browser/LocalDatastoreController.js
var require_LocalDatastoreController = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastoreController.js"(exports, module) {
    "use strict";
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _stringify = _interopRequireDefault(require_stringify3());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _promise = _interopRequireDefault(require_promise3());
    var _map = _interopRequireDefault(require_map10());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    var _Storage = _interopRequireDefault(require_Storage());
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context7;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty(_context7 = Object.prototype.toString.call(o4)).call(_context7, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    var LocalDatastoreController = {
      fromPinWithName: function(name2) {
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
          var values, objects;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _Storage.default.getItemAsync(name2);
                case 2:
                  values = _context.sent;
                  if (values) {
                    _context.next = 5;
                    break;
                  }
                  return _context.abrupt("return", []);
                case 5:
                  objects = JSON.parse(values);
                  return _context.abrupt("return", objects);
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      pinWithName: function(name2, value) {
        var values = (0, _stringify.default)(value);
        return _Storage.default.setItemAsync(name2, values);
      },
      unPinWithName: function(name2) {
        return _Storage.default.removeItemAsync(name2);
      },
      getAllContents: function() {
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
          var keys;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context3.sent;
                  return _context3.abrupt("return", (0, _reduce.default)(keys).call(keys, function() {
                    var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(previousPromise, key2) {
                      var LDS, value;
                      return _regenerator.default.wrap(function(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return previousPromise;
                            case 2:
                              LDS = _context2.sent;
                              if (!(0, _LocalDatastoreUtils.isLocalDatastoreKey)(key2)) {
                                _context2.next = 8;
                                break;
                              }
                              _context2.next = 6;
                              return _Storage.default.getItemAsync(key2);
                            case 6:
                              value = _context2.sent;
                              try {
                                LDS[key2] = JSON.parse(value);
                              } catch (error) {
                                console.error("Error getAllContents: ", error);
                              }
                            case 8:
                              return _context2.abrupt("return", LDS);
                            case 9:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));
                    return function() {
                      return _ref.apply(this, arguments);
                    };
                  }(), _promise.default.resolve({})));
                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      getRawStorage: function() {
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5() {
          var keys;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context5.sent;
                  return _context5.abrupt("return", (0, _reduce.default)(keys).call(keys, function() {
                    var _ref2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(previousPromise, key2) {
                      var LDS, value;
                      return _regenerator.default.wrap(function(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.next = 2;
                              return previousPromise;
                            case 2:
                              LDS = _context4.sent;
                              _context4.next = 5;
                              return _Storage.default.getItemAsync(key2);
                            case 5:
                              value = _context4.sent;
                              LDS[key2] = value;
                              return _context4.abrupt("return", LDS);
                            case 8:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    }));
                    return function() {
                      return _ref2.apply(this, arguments);
                    };
                  }(), _promise.default.resolve({})));
                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }))();
      },
      clear: function() {
        var _this = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
          var keys, toRemove, _iterator, _step, key2, promises;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context6.sent;
                  toRemove = [];
                  _iterator = _createForOfIteratorHelper(keys);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      key2 = _step.value;
                      if ((0, _LocalDatastoreUtils.isLocalDatastoreKey)(key2)) {
                        toRemove.push(key2);
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  promises = (0, _map.default)(toRemove).call(toRemove, _this.unPinWithName);
                  return _context6.abrupt("return", _promise.default.all(promises));
                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }))();
      }
    };
    module.exports = LocalDatastoreController;
  }
});

// node_modules/moralis/lib/browser/LocalDatastore.js
var require_LocalDatastore = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastore.js"(exports, module) {
    "use strict";
    var _sliceInstanceProperty = require_slice4();
    var _Array$from2 = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray2 = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _set = _interopRequireDefault(require_set3());
    var _concat = _interopRequireDefault(require_concat4());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _keys2 = _interopRequireDefault(require_keys3());
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var _keys3 = _interopRequireDefault(require_keys7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _map = _interopRequireDefault(require_map10());
    var _from = _interopRequireDefault(require_from3());
    var _find = _interopRequireDefault(require_find4());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context16;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty(_context16 = Object.prototype.toString.call(o4)).call(_context16, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from2(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    var LocalDatastore = {
      isEnabled: false,
      isSyncing: false,
      fromPinWithName: function(name2) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.fromPinWithName(name2);
      },
      pinWithName: function(name2, value) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.pinWithName(name2, value);
      },
      unPinWithName: function(name2) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.unPinWithName(name2);
      },
      _getAllContents: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.getAllContents();
      },
      _getRawStorage: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.getRawStorage();
      },
      _clear: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.clear();
      },
      _handlePinAllWithName: function(name2, objects) {
        var _this = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
          var _context;
          var pinName, toPinPromises, objectKeys, _iterator, _step, parent, children, parentKey, json, objectKey, fromPinPromise, _yield$Promise$all, _yield$Promise$all2, pinned, toPin;
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  pinName = _this.getPinName(name2);
                  toPinPromises = [];
                  objectKeys = [];
                  _iterator = _createForOfIteratorHelper(objects);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      parent = _step.value;
                      children = _this._getChildren(parent);
                      parentKey = _this.getKeyForObject(parent);
                      json = parent._toFullJSON(void 0, true);
                      if (parent._localId) {
                        json._localId = parent._localId;
                      }
                      children[parentKey] = json;
                      for (objectKey in children) {
                        objectKeys.push(objectKey);
                        toPinPromises.push(_this.pinWithName(objectKey, [children[objectKey]]));
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  fromPinPromise = _this.fromPinWithName(pinName);
                  _context2.next = 8;
                  return _promise.default.all([fromPinPromise, toPinPromises]);
                case 8:
                  _yield$Promise$all = _context2.sent;
                  _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
                  pinned = _yield$Promise$all2[0];
                  toPin = (0, _toConsumableArray2.default)(new _set.default((0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(pinned || []), objectKeys)));
                  return _context2.abrupt("return", _this.pinWithName(pinName, toPin));
                case 13:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        }))();
      },
      _handleUnPinAllWithName: function(name2, objects) {
        var _this2 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
          var localDatastore, pinName, promises, objectKeys, _iterator2, _step2, _objectKeys, _context3, parent, children, parentKey, pinned, _iterator3, _step3, objectKey, hasReference, key2, pinnedObjects;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this2._getAllContents();
                case 2:
                  localDatastore = _context4.sent;
                  pinName = _this2.getPinName(name2);
                  promises = [];
                  objectKeys = [];
                  _iterator2 = _createForOfIteratorHelper(objects);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      parent = _step2.value;
                      children = _this2._getChildren(parent);
                      parentKey = _this2.getKeyForObject(parent);
                      (_objectKeys = objectKeys).push.apply(_objectKeys, (0, _concat.default)(_context3 = [parentKey]).call(_context3, (0, _toConsumableArray2.default)((0, _keys2.default)(children))));
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  objectKeys = (0, _toConsumableArray2.default)(new _set.default(objectKeys));
                  pinned = localDatastore[pinName] || [];
                  pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                    return !(0, _includes.default)(objectKeys).call(objectKeys, item);
                  });
                  if (pinned.length === 0) {
                    promises.push(_this2.unPinWithName(pinName));
                    delete localDatastore[pinName];
                  } else {
                    promises.push(_this2.pinWithName(pinName, pinned));
                    localDatastore[pinName] = pinned;
                  }
                  _iterator3 = _createForOfIteratorHelper(objectKeys);
                  _context4.prev = 13;
                  _iterator3.s();
                case 15:
                  if ((_step3 = _iterator3.n()).done) {
                    _context4.next = 31;
                    break;
                  }
                  objectKey = _step3.value;
                  hasReference = false;
                  _context4.t0 = (0, _keys3.default)(_regenerator.default).call(_regenerator.default, localDatastore);
                case 19:
                  if ((_context4.t1 = _context4.t0()).done) {
                    _context4.next = 28;
                    break;
                  }
                  key2 = _context4.t1.value;
                  if (!(key2 === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key2).call(key2, _LocalDatastoreUtils.PIN_PREFIX))) {
                    _context4.next = 26;
                    break;
                  }
                  pinnedObjects = localDatastore[key2] || [];
                  if (!(0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {
                    _context4.next = 26;
                    break;
                  }
                  hasReference = true;
                  return _context4.abrupt("break", 28);
                case 26:
                  _context4.next = 19;
                  break;
                case 28:
                  if (!hasReference) {
                    promises.push(_this2.unPinWithName(objectKey));
                  }
                case 29:
                  _context4.next = 15;
                  break;
                case 31:
                  _context4.next = 36;
                  break;
                case 33:
                  _context4.prev = 33;
                  _context4.t2 = _context4["catch"](13);
                  _iterator3.e(_context4.t2);
                case 36:
                  _context4.prev = 36;
                  _iterator3.f();
                  return _context4.finish(36);
                case 39:
                  return _context4.abrupt("return", _promise.default.all(promises));
                case 40:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee2, null, [[13, 33, 36, 39]]);
        }))();
      },
      _getChildren: function(object) {
        var encountered = {};
        var json = object._toFullJSON(void 0, true);
        for (var key2 in json) {
          if (json[key2] && json[key2].__type && json[key2].__type === "Object") {
            this._traverse(json[key2], encountered);
          }
        }
        return encountered;
      },
      _traverse: function(object, encountered) {
        if (!object.objectId) {
          return;
        }
        var objectKey = this.getKeyForObject(object);
        if (encountered[objectKey]) {
          return;
        }
        encountered[objectKey] = object;
        for (var key2 in object) {
          var json = object[key2];
          if (!object[key2]) {
            json = object;
          }
          if (json.__type && json.__type === "Object") {
            this._traverse(json, encountered);
          }
        }
      },
      _serializeObjectsFromPinName: function(name2) {
        var _this3 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
          var _ref;
          var localDatastore, allObjects, key2, pinName, pinned, promises, objects;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _this3._getAllContents();
                case 2:
                  localDatastore = _context5.sent;
                  allObjects = [];
                  for (key2 in localDatastore) {
                    if ((0, _startsWith.default)(key2).call(key2, _LocalDatastoreUtils.OBJECT_PREFIX)) {
                      allObjects.push(localDatastore[key2][0]);
                    }
                  }
                  if (name2) {
                    _context5.next = 7;
                    break;
                  }
                  return _context5.abrupt("return", allObjects);
                case 7:
                  pinName = _this3.getPinName(name2);
                  pinned = localDatastore[pinName];
                  if ((0, _isArray.default)(pinned)) {
                    _context5.next = 11;
                    break;
                  }
                  return _context5.abrupt("return", []);
                case 11:
                  promises = (0, _map.default)(pinned).call(pinned, function(objectKey) {
                    return _this3.fromPinWithName(objectKey);
                  });
                  _context5.next = 14;
                  return _promise.default.all(promises);
                case 14:
                  objects = _context5.sent;
                  objects = (0, _concat.default)(_ref = []).apply(_ref, (0, _toConsumableArray2.default)(objects));
                  return _context5.abrupt("return", (0, _filter.default)(objects).call(objects, function(object) {
                    return object != null;
                  }));
                case 17:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee3);
        }))();
      },
      _serializeObject: function(objectKey, localDatastore) {
        var _this4 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4() {
          var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key2, pointer;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  LDS = localDatastore;
                  if (LDS) {
                    _context6.next = 5;
                    break;
                  }
                  _context6.next = 4;
                  return _this4._getAllContents();
                case 4:
                  LDS = _context6.sent;
                case 5:
                  if (!(!LDS[objectKey] || LDS[objectKey].length === 0)) {
                    _context6.next = 7;
                    break;
                  }
                  return _context6.abrupt("return", null);
                case 7:
                  root = LDS[objectKey][0];
                  queue = [];
                  meta = {};
                  uniqueId = 0;
                  meta[uniqueId] = root;
                  queue.push(uniqueId);
                  while (queue.length !== 0) {
                    nodeId = queue.shift();
                    subTreeRoot = meta[nodeId];
                    for (field in subTreeRoot) {
                      value = subTreeRoot[field];
                      if (value.__type && value.__type === "Object") {
                        key2 = _this4.getKeyForObject(value);
                        if (LDS[key2] && LDS[key2].length > 0) {
                          pointer = LDS[key2][0];
                          uniqueId++;
                          meta[uniqueId] = pointer;
                          subTreeRoot[field] = pointer;
                          queue.push(uniqueId);
                        }
                      }
                    }
                  }
                  return _context6.abrupt("return", root);
                case 15:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4);
        }))();
      },
      _updateObjectIfPinned: function(object) {
        var _this5 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5() {
          var objectKey, pinned;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  if (_this5.isEnabled) {
                    _context7.next = 2;
                    break;
                  }
                  return _context7.abrupt("return");
                case 2:
                  objectKey = _this5.getKeyForObject(object);
                  _context7.next = 5;
                  return _this5.fromPinWithName(objectKey);
                case 5:
                  pinned = _context7.sent;
                  if (!(!pinned || pinned.length === 0)) {
                    _context7.next = 8;
                    break;
                  }
                  return _context7.abrupt("return");
                case 8:
                  return _context7.abrupt("return", _this5.pinWithName(objectKey, [object._toFullJSON()]));
                case 9:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee5);
        }))();
      },
      _destroyObjectIfPinned: function(object) {
        var _this6 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
          var localDatastore, objectKey, pin, promises, key2, pinned;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  if (_this6.isEnabled) {
                    _context8.next = 2;
                    break;
                  }
                  return _context8.abrupt("return");
                case 2:
                  _context8.next = 4;
                  return _this6._getAllContents();
                case 4:
                  localDatastore = _context8.sent;
                  objectKey = _this6.getKeyForObject(object);
                  pin = localDatastore[objectKey];
                  if (pin) {
                    _context8.next = 9;
                    break;
                  }
                  return _context8.abrupt("return");
                case 9:
                  promises = [_this6.unPinWithName(objectKey)];
                  delete localDatastore[objectKey];
                  for (key2 in localDatastore) {
                    if (key2 === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key2).call(key2, _LocalDatastoreUtils.PIN_PREFIX)) {
                      pinned = localDatastore[key2] || [];
                      if ((0, _includes.default)(pinned).call(pinned, objectKey)) {
                        pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                          return item !== objectKey;
                        });
                        if (pinned.length === 0) {
                          promises.push(_this6.unPinWithName(key2));
                          delete localDatastore[key2];
                        } else {
                          promises.push(_this6.pinWithName(key2, pinned));
                          localDatastore[key2] = pinned;
                        }
                      }
                    }
                  }
                  return _context8.abrupt("return", _promise.default.all(promises));
                case 13:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee6);
        }))();
      },
      _updateLocalIdForObject: function(localId, object) {
        var _this7 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7() {
          var _context9, _context10;
          var localKey, objectKey, unsaved, promises, localDatastore, key2, pinned;
          return _regenerator.default.wrap(function(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  if (_this7.isEnabled) {
                    _context11.next = 2;
                    break;
                  }
                  return _context11.abrupt("return");
                case 2:
                  localKey = (0, _concat.default)(_context9 = (0, _concat.default)(_context10 = "".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context10, object.className, "_")).call(_context9, localId);
                  objectKey = _this7.getKeyForObject(object);
                  _context11.next = 6;
                  return _this7.fromPinWithName(localKey);
                case 6:
                  unsaved = _context11.sent;
                  if (!(!unsaved || unsaved.length === 0)) {
                    _context11.next = 9;
                    break;
                  }
                  return _context11.abrupt("return");
                case 9:
                  promises = [_this7.unPinWithName(localKey), _this7.pinWithName(objectKey, unsaved)];
                  _context11.next = 12;
                  return _this7._getAllContents();
                case 12:
                  localDatastore = _context11.sent;
                  for (key2 in localDatastore) {
                    if (key2 === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key2).call(key2, _LocalDatastoreUtils.PIN_PREFIX)) {
                      pinned = localDatastore[key2] || [];
                      if ((0, _includes.default)(pinned).call(pinned, localKey)) {
                        pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                          return item !== localKey;
                        });
                        pinned.push(objectKey);
                        promises.push(_this7.pinWithName(key2, pinned));
                        localDatastore[key2] = pinned;
                      }
                    }
                  }
                  return _context11.abrupt("return", _promise.default.all(promises));
                case 15:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee7);
        }))();
      },
      updateFromServer: function() {
        var _this8 = this;
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee8() {
          var _context12;
          var localDatastore, keys, key2, pointersHash, _i, _keys, _key, _key$split, _key$split2, className, objectId, queryPromises, responses, objects, pinPromises;
          return _regenerator.default.wrap(function(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  if (!(!_this8.checkIfEnabled() || _this8.isSyncing)) {
                    _context13.next = 2;
                    break;
                  }
                  return _context13.abrupt("return");
                case 2:
                  _context13.next = 4;
                  return _this8._getAllContents();
                case 4:
                  localDatastore = _context13.sent;
                  keys = [];
                  for (key2 in localDatastore) {
                    if ((0, _startsWith.default)(key2).call(key2, _LocalDatastoreUtils.OBJECT_PREFIX)) {
                      keys.push(key2);
                    }
                  }
                  if (!(keys.length === 0)) {
                    _context13.next = 9;
                    break;
                  }
                  return _context13.abrupt("return");
                case 9:
                  _this8.isSyncing = true;
                  pointersHash = {};
                  _i = 0, _keys = keys;
                case 12:
                  if (!(_i < _keys.length)) {
                    _context13.next = 23;
                    break;
                  }
                  _key = _keys[_i];
                  _key$split = _key.split("_"), _key$split2 = (0, _slicedToArray2.default)(_key$split, 4), className = _key$split2[2], objectId = _key$split2[3];
                  if (_key.split("_").length === 5 && _key.split("_")[3] === "User") {
                    className = "_User";
                    objectId = _key.split("_")[4];
                  }
                  if (!(0, _startsWith.default)(objectId).call(objectId, "local")) {
                    _context13.next = 18;
                    break;
                  }
                  return _context13.abrupt("continue", 20);
                case 18:
                  if (!(className in pointersHash)) {
                    pointersHash[className] = new _set.default();
                  }
                  pointersHash[className].add(objectId);
                case 20:
                  _i++;
                  _context13.next = 12;
                  break;
                case 23:
                  queryPromises = (0, _map.default)(_context12 = (0, _keys2.default)(pointersHash)).call(_context12, function(className2) {
                    var objectIds = (0, _from.default)(pointersHash[className2]);
                    var query = new _ParseQuery.default(className2);
                    query.limit(objectIds.length);
                    if (objectIds.length === 1) {
                      query.equalTo("objectId", objectIds[0]);
                    } else {
                      query.containedIn("objectId", objectIds);
                    }
                    return (0, _find.default)(query).call(query);
                  });
                  _context13.prev = 24;
                  _context13.next = 27;
                  return _promise.default.all(queryPromises);
                case 27:
                  responses = _context13.sent;
                  objects = (0, _concat.default)([]).apply([], responses);
                  pinPromises = (0, _map.default)(objects).call(objects, function(object) {
                    var objectKey = _this8.getKeyForObject(object);
                    return _this8.pinWithName(objectKey, object._toFullJSON());
                  });
                  _context13.next = 32;
                  return _promise.default.all(pinPromises);
                case 32:
                  _this8.isSyncing = false;
                  _context13.next = 39;
                  break;
                case 35:
                  _context13.prev = 35;
                  _context13.t0 = _context13["catch"](24);
                  console.error("Error syncing LocalDatastore: ", _context13.t0);
                  _this8.isSyncing = false;
                case 39:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee8, null, [[24, 35]]);
        }))();
      },
      getKeyForObject: function(object) {
        var _context14, _context15;
        var objectId = object.objectId || object._getId();
        return (0, _concat.default)(_context14 = (0, _concat.default)(_context15 = "".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context15, object.className, "_")).call(_context14, objectId);
      },
      getPinName: function(pinName) {
        if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {
          return _LocalDatastoreUtils.DEFAULT_PIN;
        }
        return _LocalDatastoreUtils.PIN_PREFIX + pinName;
      },
      checkIfEnabled: function() {
        if (!this.isEnabled) {
          console.error("Parse.enableLocalDatastore() must be called first");
        }
        return this.isEnabled;
      }
    };
    module.exports = LocalDatastore;
    _CoreManager.default.setLocalDatastoreController(require_LocalDatastoreController());
    _CoreManager.default.setLocalDatastore(LocalDatastore);
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind9 = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn2, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i4 = 0; i4 < args.length; i4++) {
          args[i4] = arguments[i4];
        }
        return fn2.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils5 = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind9();
    var toString2 = Object.prototype.toString;
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString2.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return toString2.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString2.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString2.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString2.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString2.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString2.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString2.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn2) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i4 = 0, l4 = obj.length; i4 < l4; i4++) {
          fn2.call(null, obj[i4], i4, obj);
        }
      } else {
        for (var key2 in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key2)) {
            fn2.call(null, obj[key2], key2, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key2) {
        if (isPlainObject(result[key2]) && isPlainObject(val)) {
          result[key2] = merge(result[key2], val);
        } else if (isPlainObject(val)) {
          result[key2] = merge({}, val);
        } else if (isArray(val)) {
          result[key2] = val.slice();
        } else {
          result[key2] = val;
        }
      }
      for (var i4 = 0, l4 = arguments.length; i4 < l4; i4++) {
        forEach(arguments[i4], assignValue);
      }
      return result;
    }
    function extend(a4, b3, thisArg) {
      forEach(b3, function assignValue(val, key2) {
        if (thisArg && typeof val === "function") {
          a4[key2] = bind(val, thisArg);
        } else {
          a4[key2] = val;
        }
      });
      return a4;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    function encode4(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize3(val, key2) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key2 = key2 + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v4) {
            if (utils.isDate(v4)) {
              v4 = v4.toISOString();
            } else if (utils.isObject(v4)) {
              v4 = JSON.stringify(v4);
            }
            parts.push(encode4(key2) + "=" + encode4(v4));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn2) {
      utils.forEach(this.handlers, function forEachHandler(h4) {
        if (h4 !== null) {
          fn2(h4);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name2) {
        if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name2];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON2() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name2, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name2 + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name2) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name2) {
          this.write(name2, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key2;
      var val;
      var i4;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i4 = line.indexOf(":");
        key2 = utils.trim(line.substr(0, i4)).toLowerCase();
        val = utils.trim(line.substr(i4 + 1));
        if (key2) {
          if (parsed[key2] && ignoreDuplicateOf.indexOf(key2) >= 0) {
            return;
          }
          if (key2 === "set-cookie") {
            parsed[key2] = (parsed[key2] ? parsed[key2] : []).concat([val]);
          } else {
            parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString2() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var transitionalDefaults = require_transitional();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key2) {
            if (typeof requestData === "undefined" && key2.toLowerCase() === "content-type") {
              delete requestHeaders[key2];
            } else {
              request.setRequestHeader(key2, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var transitionalDefaults = require_transitional();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e3) {
          if (e3.name !== "SyntaxError") {
            throw e3;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e3) {
            if (strictJSONParsing) {
              if (e3.name === "SyntaxError") {
                throw enhanceError(e3, this, "E_JSON_PARSE");
              }
              throw e3;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn2) {
        data = fn2.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.26.1"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i4) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i4 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version25, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version25 ? " in " + version25 : "")));
        }
        if (version25 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version25 + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i4 = keys.length;
      while (i4-- > 0) {
        var opt = keys[i4];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i4;
        var l4 = token._listeners.length;
        for (i4 = 0; i4 < l4; i4++) {
          token._listeners[i4](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c4) {
        cancel = c4;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils5();
    var bind = require_bind9();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/moralis/lib/browser/MoralisWeb3Api.js
var require_MoralisWeb3Api = __commonJS({
  "node_modules/moralis/lib/browser/MoralisWeb3Api.js"(exports) {
    "use strict";
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty2 = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _every = _interopRequireDefault(require_every4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty2(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context44, _context45;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty2(_context44 = ownKeys4(Object(source), true)).call(_context44, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context45 = ownKeys4(Object(source))).call(_context45, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    var axios = require_axios2();
    var Web3Api = function() {
      function Web3Api2() {
        (0, _classCallCheck2.default)(this, Web3Api2);
      }
      (0, _createClass2.default)(Web3Api2, null, [{
        key: "initialize",
        value: function(_ref) {
          var apiKey = _ref.apiKey, serverUrl = _ref.serverUrl, _ref$Moralis = _ref.Moralis, Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;
          if (!serverUrl && !apiKey) {
            throw new Error("Web3Api.initialize failed: initialize with apiKey or serverUrl");
          }
          if (apiKey)
            this.apiKey = apiKey;
          if (serverUrl)
            this.serverUrl = serverUrl;
          this.Moralis = Moralis;
        }
      }, {
        key: "getBody",
        value: function(params, bodyParams) {
          var _this = this;
          if (!params || !bodyParams || !bodyParams.length) {
            return void 0;
          }
          var body = {};
          (0, _forEach.default)(bodyParams).call(bodyParams, function(_ref2) {
            var key2 = _ref2.key, type = _ref2.type, required = _ref2.required;
            if (params[key2] === void 0) {
              if (required)
                throw new Error("param ".concat(key2, " is required!"));
            } else if (type === _this.BodyParamTypes.setBody) {
              body = params[key2];
            } else {
              body[key2] = params[key2];
            }
            delete params[key2];
          });
          return body;
        }
      }, {
        key: "getParameterizedUrl",
        value: function(url, params) {
          var _context;
          if (!(0, _keys.default)(params).length)
            return url;
          var requiredParams = (0, _filter.default)(_context = url.split("/")).call(_context, function(s4) {
            return s4 && (0, _includes.default)(s4).call(s4, ":");
          });
          if (!requiredParams.length)
            return url;
          var parameterizedUrl = url;
          (0, _forEach.default)(requiredParams).call(requiredParams, function(p4) {
            var key2 = p4.substr(1);
            var value = params[key2];
            if (!value) {
              throw new Error("required param ".concat(key2, " not provided"));
            }
            parameterizedUrl = parameterizedUrl.replace(p4, value);
            delete params[key2];
          });
          return parameterizedUrl;
        }
      }, {
        key: "getNextOptions",
        value: function(result, options) {
          var nextOptions = _objectSpread4({}, options);
          if (!result.page_size || !result.total || result.page === void 0)
            return options;
          if (result.cursor) {
            if (result.total > result.page_size * (result.page + 1))
              nextOptions.cursor = result.cursor;
          } else {
            if (result.total > result.page_size * (result.page + 1)) {
              nextOptions.offset = (result.page + 1) * (nextOptions.limit || 500);
            }
          }
          return nextOptions;
        }
      }, {
        key: "getApiRateLimitInfo",
        value: function(headers) {
          return {
            "x-rate-limit-limit": headers["x-rate-limit-limit"],
            "x-rate-limit-remaining-ttl": headers["x-rate-limit-remaining-ttl"],
            "x-rate-limit-used": headers["x-rate-limit-used"],
            "x-rate-limit-remaining-ip-ttl": headers["x-rate-limit-remaining-ip-ttl"],
            "x-rate-limit-ip-used": headers["x-rate-limit-ip-used"]
          };
        }
      }, {
        key: "getApiErrorMessage",
        value: function(error, url) {
          var _error$response, _error$response$data;
          return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || "Web3 API error while calling ".concat(url);
        }
      }, {
        key: "fetch",
        value: function() {
          var _fetch = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(_ref3) {
            var endpoint, providedParams, params, _this$Moralis, User, account, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    endpoint = _ref3.endpoint, providedParams = _ref3.params;
                    params = _objectSpread4({}, providedParams);
                    if (this.Moralis) {
                      _this$Moralis = this.Moralis, User = _this$Moralis.User, account = _this$Moralis.account;
                      user = User.current();
                      if (!params.address) {
                        if (user) {
                          params.address = user.get("ethAddress");
                        } else if (account) {
                          params.address = account;
                        }
                      }
                    }
                    if (this.apiKey) {
                      _context2.next = 5;
                      break;
                    }
                    return _context2.abrupt("return", this.fetchFromServer(endpoint.name, params));
                  case 5:
                    return _context2.abrupt("return", this.fetchFromApi(endpoint, params));
                  case 6:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _fetch.apply(this, arguments);
          };
        }()
      }, {
        key: "fetchFromApi",
        value: function() {
          var _fetchFromApi = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(endpoint, params) {
            var _this2 = this;
            var _endpoint$method, method, url, bodyParams, parameterizedUrl, body, response, result, nextOptions, _error$response2, status, headers, data, msg;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? "GET" : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;
                    _context3.prev = 1;
                    parameterizedUrl = this.getParameterizedUrl(url, params);
                    body = this.getBody(params, bodyParams);
                    _context3.next = 6;
                    return axios(this.baseURL + parameterizedUrl, {
                      params,
                      method,
                      body,
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey
                      }
                    });
                  case 6:
                    response = _context3.sent;
                    result = response.data;
                    nextOptions = this.getNextOptions(result, params);
                    if (!this.checkObjEqual(nextOptions, params))
                      result.next = function() {
                        return _this2.fetchFromApi(endpoint, nextOptions);
                      };
                    return _context3.abrupt("return", result);
                  case 13:
                    _context3.prev = 13;
                    _context3.t0 = _context3["catch"](1);
                    _error$response2 = _context3.t0.response, status = _error$response2.status, headers = _error$response2.headers, data = _error$response2.data;
                    if (status === 429) {
                      msg = "This Moralis Server is rate-limited because of the plan restrictions. See the details about the current rate and throttle limits: ".concat((0, _stringify.default)(this.getApiRateLimitInfo(headers)));
                    } else {
                      msg = this.getApiErrorMessage(_context3.t0, url);
                    }
                    throw new Error(msg);
                  case 18:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[1, 13]]);
          }));
          return function() {
            return _fetchFromApi.apply(this, arguments);
          };
        }()
      }, {
        key: "fetchFromServer",
        value: function() {
          var _fetchFromServer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(name2, options) {
            var _this3 = this;
            var http, user, response, result, nextOptions, _error$response3, _error$response3$data;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (this.serverUrl) {
                      _context4.next = 2;
                      break;
                    }
                    throw new Error("Web3Api not initialized, run Moralis.start() first");
                  case 2:
                    _context4.prev = 2;
                    http = axios.create({
                      baseURL: this.serverUrl
                    });
                    if (!options.chain)
                      options.chain = "eth";
                    user = this.Moralis.User.current();
                    if (user) {
                      options._SessionToken = user.attributes.sessionToken;
                      options._ApplicationId = this.Moralis.applicationId;
                    }
                    _context4.next = 9;
                    return http.post("/functions/".concat(name2), options, {
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    });
                  case 9:
                    response = _context4.sent;
                    result = response.data.result;
                    nextOptions = this.getNextOptions(result, options);
                    if (!this.checkObjEqual(nextOptions, options))
                      result.next = function() {
                        return _this3.fetchFromServer(name2, nextOptions);
                      };
                    return _context4.abrupt("return", result);
                  case 16:
                    _context4.prev = 16;
                    _context4.t0 = _context4["catch"](2);
                    if (!((_error$response3 = _context4.t0.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.error)) {
                      _context4.next = 20;
                      break;
                    }
                    throw new Error(_context4.t0.response.data.error);
                  case 20:
                    throw _context4.t0;
                  case 21:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee3, this, [[2, 16]]);
          }));
          return function() {
            return _fetchFromServer.apply(this, arguments);
          };
        }()
      }]);
      return Web3Api2;
    }();
    (0, _defineProperty2.default)(Web3Api, "baseURL", "https://deep-index.moralis.io/api/v2");
    (0, _defineProperty2.default)(Web3Api, "BodyParamTypes", {
      setBody: "set body",
      property: "property"
    });
    (0, _defineProperty2.default)(Web3Api, "checkObjEqual", function() {
      for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
        objects[_key] = arguments[_key];
      }
      return (0, _every.default)(objects).call(objects, function(obj) {
        return (0, _stringify.default)(obj) === (0, _stringify.default)(objects[0]);
      });
    });
    (0, _defineProperty2.default)(Web3Api, "native", {
      getBlock: function() {
        var _getBlock = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4() {
          var options, _args4 = arguments;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  options = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : {};
                  return _context5.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getBlock",
                      "url": "/block/:block_number_or_hash"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee4);
        }));
        return function() {
          return _getBlock.apply(this, arguments);
        };
      }(),
      getDateToBlock: function() {
        var _getDateToBlock = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5() {
          var options, _args5 = arguments;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  options = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : {};
                  return _context6.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getDateToBlock",
                      "url": "/dateToBlock"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee5);
        }));
        return function() {
          return _getDateToBlock.apply(this, arguments);
        };
      }(),
      getLogsByAddress: function() {
        var _getLogsByAddress = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
          var options, _args6 = arguments;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                  return _context7.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getLogsByAddress",
                      "url": "/:address/logs"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee6);
        }));
        return function() {
          return _getLogsByAddress.apply(this, arguments);
        };
      }(),
      getNFTTransfersByBlock: function() {
        var _getNFTTransfersByBlock = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7() {
          var options, _args7 = arguments;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  options = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                  return _context8.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getNFTTransfersByBlock",
                      "url": "/block/:block_number_or_hash/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee7);
        }));
        return function() {
          return _getNFTTransfersByBlock.apply(this, arguments);
        };
      }(),
      getTransaction: function() {
        var _getTransaction = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee8() {
          var options, _args8 = arguments;
          return _regenerator.default.wrap(function(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  options = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : {};
                  return _context9.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getTransaction",
                      "url": "/transaction/:transaction_hash"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee8);
        }));
        return function() {
          return _getTransaction.apply(this, arguments);
        };
      }(),
      getContractEvents: function() {
        var _getContractEvents = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee9() {
          var options, _args9 = arguments;
          return _regenerator.default.wrap(function(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  options = _args9.length > 0 && _args9[0] !== void 0 ? _args9[0] : {};
                  return _context10.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "native",
                      "name": "getContractEvents",
                      "url": "/:address/events",
                      "bodyParams": [{
                        "key": "data",
                        "type": "set body",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee9);
        }));
        return function() {
          return _getContractEvents.apply(this, arguments);
        };
      }(),
      runContractFunction: function() {
        var _runContractFunction = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee10() {
          var options, _args10 = arguments;
          return _regenerator.default.wrap(function(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  options = _args10.length > 0 && _args10[0] !== void 0 ? _args10[0] : {};
                  return _context11.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "native",
                      "name": "runContractFunction",
                      "url": "/:address/function",
                      "bodyParams": [{
                        "key": "abi",
                        "type": "property",
                        "required": true
                      }, {
                        "key": "params",
                        "type": "property",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee10);
        }));
        return function() {
          return _runContractFunction.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "account", {
      getTransactions: function() {
        var _getTransactions = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee11() {
          var options, _args11 = arguments;
          return _regenerator.default.wrap(function(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  options = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {};
                  return _context12.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTransactions",
                      "url": "/:address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee11);
        }));
        return function() {
          return _getTransactions.apply(this, arguments);
        };
      }(),
      getNativeBalance: function() {
        var _getNativeBalance = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee12() {
          var options, _args12 = arguments;
          return _regenerator.default.wrap(function(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  options = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {};
                  return _context13.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNativeBalance",
                      "url": "/:address/balance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee12);
        }));
        return function() {
          return _getNativeBalance.apply(this, arguments);
        };
      }(),
      getTokenBalances: function() {
        var _getTokenBalances = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee13() {
          var options, _args13 = arguments;
          return _regenerator.default.wrap(function(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  options = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {};
                  return _context14.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTokenBalances",
                      "url": "/:address/erc20"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee13);
        }));
        return function() {
          return _getTokenBalances.apply(this, arguments);
        };
      }(),
      getTokenTransfers: function() {
        var _getTokenTransfers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee14() {
          var options, _args14 = arguments;
          return _regenerator.default.wrap(function(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  options = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {};
                  return _context15.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTokenTransfers",
                      "url": "/:address/erc20/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee14);
        }));
        return function() {
          return _getTokenTransfers.apply(this, arguments);
        };
      }(),
      getNFTs: function() {
        var _getNFTs = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee15() {
          var options, _args15 = arguments;
          return _regenerator.default.wrap(function(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  options = _args15.length > 0 && _args15[0] !== void 0 ? _args15[0] : {};
                  return _context16.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTs",
                      "url": "/:address/nft"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee15);
        }));
        return function() {
          return _getNFTs.apply(this, arguments);
        };
      }(),
      getNFTTransfers: function() {
        var _getNFTTransfers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee16() {
          var options, _args16 = arguments;
          return _regenerator.default.wrap(function(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  options = _args16.length > 0 && _args16[0] !== void 0 ? _args16[0] : {};
                  return _context17.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTTransfers",
                      "url": "/:address/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee16);
        }));
        return function() {
          return _getNFTTransfers.apply(this, arguments);
        };
      }(),
      getNFTsForContract: function() {
        var _getNFTsForContract = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee17() {
          var options, _args17 = arguments;
          return _regenerator.default.wrap(function(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  options = _args17.length > 0 && _args17[0] !== void 0 ? _args17[0] : {};
                  return _context18.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTsForContract",
                      "url": "/:address/nft/:token_address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee17);
        }));
        return function() {
          return _getNFTsForContract.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "token", {
      getTokenMetadata: function() {
        var _getTokenMetadata = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee18() {
          var options, _args18 = arguments;
          return _regenerator.default.wrap(function(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  options = _args18.length > 0 && _args18[0] !== void 0 ? _args18[0] : {};
                  return _context19.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenMetadata",
                      "url": "/erc20/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee18);
        }));
        return function() {
          return _getTokenMetadata.apply(this, arguments);
        };
      }(),
      getNFTTrades: function() {
        var _getNFTTrades = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee19() {
          var options, _args19 = arguments;
          return _regenerator.default.wrap(function(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  options = _args19.length > 0 && _args19[0] !== void 0 ? _args19[0] : {};
                  return _context20.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTTrades",
                      "url": "/nft/:address/trades"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee19);
        }));
        return function() {
          return _getNFTTrades.apply(this, arguments);
        };
      }(),
      getNFTLowestPrice: function() {
        var _getNFTLowestPrice = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee20() {
          var options, _args20 = arguments;
          return _regenerator.default.wrap(function(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  options = _args20.length > 0 && _args20[0] !== void 0 ? _args20[0] : {};
                  return _context21.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTLowestPrice",
                      "url": "/nft/:address/lowestprice"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee20);
        }));
        return function() {
          return _getNFTLowestPrice.apply(this, arguments);
        };
      }(),
      getTokenMetadataBySymbol: function() {
        var _getTokenMetadataBySymbol = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee21() {
          var options, _args21 = arguments;
          return _regenerator.default.wrap(function(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  options = _args21.length > 0 && _args21[0] !== void 0 ? _args21[0] : {};
                  return _context22.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenMetadataBySymbol",
                      "url": "/erc20/metadata/symbols"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee21);
        }));
        return function() {
          return _getTokenMetadataBySymbol.apply(this, arguments);
        };
      }(),
      getTokenPrice: function() {
        var _getTokenPrice = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee22() {
          var options, _args22 = arguments;
          return _regenerator.default.wrap(function(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  options = _args22.length > 0 && _args22[0] !== void 0 ? _args22[0] : {};
                  return _context23.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenPrice",
                      "url": "/erc20/:address/price"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee22);
        }));
        return function() {
          return _getTokenPrice.apply(this, arguments);
        };
      }(),
      getTokenAddressTransfers: function() {
        var _getTokenAddressTransfers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee23() {
          var options, _args23 = arguments;
          return _regenerator.default.wrap(function(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  options = _args23.length > 0 && _args23[0] !== void 0 ? _args23[0] : {};
                  return _context24.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenAddressTransfers",
                      "url": "/erc20/:address/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee23);
        }));
        return function() {
          return _getTokenAddressTransfers.apply(this, arguments);
        };
      }(),
      getTokenAllowance: function() {
        var _getTokenAllowance = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee24() {
          var options, _args24 = arguments;
          return _regenerator.default.wrap(function(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  options = _args24.length > 0 && _args24[0] !== void 0 ? _args24[0] : {};
                  return _context25.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenAllowance",
                      "url": "/erc20/:address/allowance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee24);
        }));
        return function() {
          return _getTokenAllowance.apply(this, arguments);
        };
      }(),
      searchNFTs: function() {
        var _searchNFTs = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee25() {
          var options, _args25 = arguments;
          return _regenerator.default.wrap(function(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  options = _args25.length > 0 && _args25[0] !== void 0 ? _args25[0] : {};
                  return _context26.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "searchNFTs",
                      "url": "/nft/search"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee25);
        }));
        return function() {
          return _searchNFTs.apply(this, arguments);
        };
      }(),
      getNftTransfersFromToBlock: function() {
        var _getNftTransfersFromToBlock = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee26() {
          var options, _args26 = arguments;
          return _regenerator.default.wrap(function(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  options = _args26.length > 0 && _args26[0] !== void 0 ? _args26[0] : {};
                  return _context27.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNftTransfersFromToBlock",
                      "url": "/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee26);
        }));
        return function() {
          return _getNftTransfersFromToBlock.apply(this, arguments);
        };
      }(),
      getAllTokenIds: function() {
        var _getAllTokenIds = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee27() {
          var options, _args27 = arguments;
          return _regenerator.default.wrap(function(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  options = _args27.length > 0 && _args27[0] !== void 0 ? _args27[0] : {};
                  return _context28.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getAllTokenIds",
                      "url": "/nft/:address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee27);
        }));
        return function() {
          return _getAllTokenIds.apply(this, arguments);
        };
      }(),
      getContractNFTTransfers: function() {
        var _getContractNFTTransfers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee28() {
          var options, _args28 = arguments;
          return _regenerator.default.wrap(function(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  options = _args28.length > 0 && _args28[0] !== void 0 ? _args28[0] : {};
                  return _context29.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getContractNFTTransfers",
                      "url": "/nft/:address/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee28);
        }));
        return function() {
          return _getContractNFTTransfers.apply(this, arguments);
        };
      }(),
      getNFTOwners: function() {
        var _getNFTOwners = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee29() {
          var options, _args29 = arguments;
          return _regenerator.default.wrap(function(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  options = _args29.length > 0 && _args29[0] !== void 0 ? _args29[0] : {};
                  return _context30.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTOwners",
                      "url": "/nft/:address/owners"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee29);
        }));
        return function() {
          return _getNFTOwners.apply(this, arguments);
        };
      }(),
      getNFTMetadata: function() {
        var _getNFTMetadata = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee30() {
          var options, _args30 = arguments;
          return _regenerator.default.wrap(function(_context31) {
            while (1) {
              switch (_context31.prev = _context31.next) {
                case 0:
                  options = _args30.length > 0 && _args30[0] !== void 0 ? _args30[0] : {};
                  return _context31.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTMetadata",
                      "url": "/nft/:address/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context31.stop();
              }
            }
          }, _callee30);
        }));
        return function() {
          return _getNFTMetadata.apply(this, arguments);
        };
      }(),
      reSyncMetadata: function() {
        var _reSyncMetadata = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee31() {
          var options, _args31 = arguments;
          return _regenerator.default.wrap(function(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  options = _args31.length > 0 && _args31[0] !== void 0 ? _args31[0] : {};
                  return _context32.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "reSyncMetadata",
                      "url": "/nft/:address/:token_id/metadata/resync"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee31);
        }));
        return function() {
          return _reSyncMetadata.apply(this, arguments);
        };
      }(),
      syncNFTContract: function() {
        var _syncNFTContract = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee32() {
          var options, _args32 = arguments;
          return _regenerator.default.wrap(function(_context33) {
            while (1) {
              switch (_context33.prev = _context33.next) {
                case 0:
                  options = _args32.length > 0 && _args32[0] !== void 0 ? _args32[0] : {};
                  return _context33.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "PUT",
                      "group": "token",
                      "name": "syncNFTContract",
                      "url": "/nft/:address/sync"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context33.stop();
              }
            }
          }, _callee32);
        }));
        return function() {
          return _syncNFTContract.apply(this, arguments);
        };
      }(),
      getTokenIdMetadata: function() {
        var _getTokenIdMetadata = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee33() {
          var options, _args33 = arguments;
          return _regenerator.default.wrap(function(_context34) {
            while (1) {
              switch (_context34.prev = _context34.next) {
                case 0:
                  options = _args33.length > 0 && _args33[0] !== void 0 ? _args33[0] : {};
                  return _context34.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenIdMetadata",
                      "url": "/nft/:address/:token_id"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context34.stop();
              }
            }
          }, _callee33);
        }));
        return function() {
          return _getTokenIdMetadata.apply(this, arguments);
        };
      }(),
      getTokenIdOwners: function() {
        var _getTokenIdOwners = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee34() {
          var options, _args34 = arguments;
          return _regenerator.default.wrap(function(_context35) {
            while (1) {
              switch (_context35.prev = _context35.next) {
                case 0:
                  options = _args34.length > 0 && _args34[0] !== void 0 ? _args34[0] : {};
                  return _context35.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenIdOwners",
                      "url": "/nft/:address/:token_id/owners"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context35.stop();
              }
            }
          }, _callee34);
        }));
        return function() {
          return _getTokenIdOwners.apply(this, arguments);
        };
      }(),
      getWalletTokenIdTransfers: function() {
        var _getWalletTokenIdTransfers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee35() {
          var options, _args35 = arguments;
          return _regenerator.default.wrap(function(_context36) {
            while (1) {
              switch (_context36.prev = _context36.next) {
                case 0:
                  options = _args35.length > 0 && _args35[0] !== void 0 ? _args35[0] : {};
                  return _context36.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getWalletTokenIdTransfers",
                      "url": "/nft/:address/:token_id/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context36.stop();
              }
            }
          }, _callee35);
        }));
        return function() {
          return _getWalletTokenIdTransfers.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "resolve", {
      resolveDomain: function() {
        var _resolveDomain = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee36() {
          var options, _args36 = arguments;
          return _regenerator.default.wrap(function(_context37) {
            while (1) {
              switch (_context37.prev = _context37.next) {
                case 0:
                  options = _args36.length > 0 && _args36[0] !== void 0 ? _args36[0] : {};
                  return _context37.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "resolve",
                      "name": "resolveDomain",
                      "url": "/resolve/:domain"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context37.stop();
              }
            }
          }, _callee36);
        }));
        return function() {
          return _resolveDomain.apply(this, arguments);
        };
      }(),
      resolveAddress: function() {
        var _resolveAddress = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee37() {
          var options, _args37 = arguments;
          return _regenerator.default.wrap(function(_context38) {
            while (1) {
              switch (_context38.prev = _context38.next) {
                case 0:
                  options = _args37.length > 0 && _args37[0] !== void 0 ? _args37[0] : {};
                  return _context38.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "resolve",
                      "name": "resolveAddress",
                      "url": "/resolve/:address/reverse"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context38.stop();
              }
            }
          }, _callee37);
        }));
        return function() {
          return _resolveAddress.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "defi", {
      getPairReserves: function() {
        var _getPairReserves = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee38() {
          var options, _args38 = arguments;
          return _regenerator.default.wrap(function(_context39) {
            while (1) {
              switch (_context39.prev = _context39.next) {
                case 0:
                  options = _args38.length > 0 && _args38[0] !== void 0 ? _args38[0] : {};
                  return _context39.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "defi",
                      "name": "getPairReserves",
                      "url": "/:pair_address/reserves"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context39.stop();
              }
            }
          }, _callee38);
        }));
        return function() {
          return _getPairReserves.apply(this, arguments);
        };
      }(),
      getPairAddress: function() {
        var _getPairAddress = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee39() {
          var options, _args39 = arguments;
          return _regenerator.default.wrap(function(_context40) {
            while (1) {
              switch (_context40.prev = _context40.next) {
                case 0:
                  options = _args39.length > 0 && _args39[0] !== void 0 ? _args39[0] : {};
                  return _context40.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "defi",
                      "name": "getPairAddress",
                      "url": "/:token0_address/:token1_address/pairAddress"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context40.stop();
              }
            }
          }, _callee39);
        }));
        return function() {
          return _getPairAddress.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "storage", {
      uploadFolder: function() {
        var _uploadFolder = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee40() {
          var options, _args40 = arguments;
          return _regenerator.default.wrap(function(_context41) {
            while (1) {
              switch (_context41.prev = _context41.next) {
                case 0:
                  options = _args40.length > 0 && _args40[0] !== void 0 ? _args40[0] : {};
                  return _context41.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "storage",
                      "name": "uploadFolder",
                      "url": "/ipfs/uploadFolder",
                      "bodyParams": [{
                        "key": "data",
                        "type": "set body",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context41.stop();
              }
            }
          }, _callee40);
        }));
        return function() {
          return _uploadFolder.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "info", {
      web3ApiVersion: function() {
        var _web3ApiVersion = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee41() {
          var options, _args41 = arguments;
          return _regenerator.default.wrap(function(_context42) {
            while (1) {
              switch (_context42.prev = _context42.next) {
                case 0:
                  options = _args41.length > 0 && _args41[0] !== void 0 ? _args41[0] : {};
                  return _context42.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "info",
                      "name": "web3ApiVersion",
                      "url": "/web3/version"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context42.stop();
              }
            }
          }, _callee41);
        }));
        return function() {
          return _web3ApiVersion.apply(this, arguments);
        };
      }(),
      endpointWeights: function() {
        var _endpointWeights = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee42() {
          var options, _args42 = arguments;
          return _regenerator.default.wrap(function(_context43) {
            while (1) {
              switch (_context43.prev = _context43.next) {
                case 0:
                  options = _args42.length > 0 && _args42[0] !== void 0 ? _args42[0] : {};
                  return _context43.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "info",
                      "name": "endpointWeights",
                      "url": "/info/endpointWeights"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context43.stop();
              }
            }
          }, _callee42);
        }));
        return function() {
          return _endpointWeights.apply(this, arguments);
        };
      }()
    });
    var _default = Web3Api;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/MoralisSolanaApi.js
var require_MoralisSolanaApi = __commonJS({
  "node_modules/moralis/lib/browser/MoralisSolanaApi.js"(exports) {
    "use strict";
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty2 = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty2(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i4 = 1; i4 < arguments.length; i4++) {
        var _context10, _context11;
        var source = arguments[i4] != null ? arguments[i4] : {};
        i4 % 2 ? _forEachInstanceProperty2(_context10 = ownKeys4(Object(source), true)).call(_context10, function(key2) {
          (0, _defineProperty2.default)(target, key2, source[key2]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context11 = ownKeys4(Object(source))).call(_context11, function(key2) {
          _Object$defineProperty(target, key2, _Object$getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    var axios = require_axios2();
    var SolanaApi = function() {
      function SolanaApi2() {
        (0, _classCallCheck2.default)(this, SolanaApi2);
      }
      (0, _createClass2.default)(SolanaApi2, null, [{
        key: "initialize",
        value: function(_ref) {
          var apiKey = _ref.apiKey, serverUrl = _ref.serverUrl, _ref$Moralis = _ref.Moralis, Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;
          if (!serverUrl && !apiKey) {
            throw new Error("SolanaApi.initialize failed: initialize with apiKey or serverUrl");
          }
          if (apiKey)
            this.apiKey = apiKey;
          if (serverUrl)
            this.serverUrl = serverUrl;
          this.Moralis = Moralis;
        }
      }, {
        key: "getBody",
        value: function(params, bodyParams) {
          var _this = this;
          if (!params || !bodyParams || !bodyParams.length) {
            return void 0;
          }
          var body = {};
          (0, _forEach.default)(bodyParams).call(bodyParams, function(_ref2) {
            var key2 = _ref2.key, type = _ref2.type, required = _ref2.required;
            if (params[key2] === void 0) {
              if (required)
                throw new Error("param ".concat(key2, " is required!"));
            } else if (type === _this.BodyParamTypes.setBody) {
              body = params[key2];
            } else {
              body[key2] = params[key2];
            }
            delete params[key2];
          });
          return body;
        }
      }, {
        key: "getParameterizedUrl",
        value: function(url, params) {
          var _context;
          if (!(0, _keys.default)(params).length)
            return url;
          var requiredParams = (0, _filter.default)(_context = url.split("/")).call(_context, function(s4) {
            return s4 && (0, _includes.default)(s4).call(s4, ":");
          });
          if (!requiredParams.length)
            return url;
          var parameterizedUrl = url;
          (0, _forEach.default)(requiredParams).call(requiredParams, function(p4) {
            var key2 = p4.substr(1);
            var value = params[key2];
            if (!value) {
              throw new Error("required param ".concat(key2, " not provided"));
            }
            parameterizedUrl = parameterizedUrl.replace(p4, value);
            delete params[key2];
          });
          return parameterizedUrl;
        }
      }, {
        key: "getApiRateLimitInfo",
        value: function(headers) {
          return {
            "x-rate-limit-limit": headers["x-rate-limit-limit"],
            "x-rate-limit-remaining-ttl": headers["x-rate-limit-remaining-ttl"],
            "x-rate-limit-used": headers["x-rate-limit-used"],
            "x-rate-limit-remaining-ip-ttl": headers["x-rate-limit-remaining-ip-ttl"],
            "x-rate-limit-ip-used": headers["x-rate-limit-ip-used"]
          };
        }
      }, {
        key: "getErrorMessage",
        value: function(error, url) {
          var _error$response, _error$response$data;
          return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || "Solana API error while calling ".concat(url);
        }
      }, {
        key: "fetch",
        value: function() {
          var _fetch = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(_ref3) {
            var endpoint, providedParams, params, User, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    endpoint = _ref3.endpoint, providedParams = _ref3.params;
                    params = _objectSpread4({}, providedParams);
                    if (this.Moralis) {
                      User = this.Moralis.User;
                      user = User.current();
                      if (!params.address) {
                        if (user) {
                          params.address = user.get("solAddress");
                        }
                      }
                    }
                    if (!params.network)
                      params.network = "mainnet";
                    if (!params.responseType)
                      params.responseType = "native";
                    if (this.apiKey) {
                      _context2.next = 7;
                      break;
                    }
                    return _context2.abrupt("return", this.fetchFromServer(endpoint.name, params));
                  case 7:
                    return _context2.abrupt("return", this.fetchFromApi(endpoint, params));
                  case 8:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _fetch.apply(this, arguments);
          };
        }()
      }, {
        key: "fetchFromApi",
        value: function() {
          var _fetchFromApi = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(endpoint, params) {
            var _endpoint$method, method, url, bodyParams, parameterizedUrl, body, response, _error$response2, status, headers, data, msg;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? "GET" : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;
                    _context3.prev = 1;
                    parameterizedUrl = this.getParameterizedUrl(url, params);
                    body = this.getBody(params, bodyParams);
                    _context3.next = 6;
                    return axios(this.baseURL + parameterizedUrl, {
                      params,
                      method,
                      body,
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey
                      }
                    });
                  case 6:
                    response = _context3.sent;
                    return _context3.abrupt("return", response.data);
                  case 10:
                    _context3.prev = 10;
                    _context3.t0 = _context3["catch"](1);
                    _error$response2 = _context3.t0.response, status = _error$response2.status, headers = _error$response2.headers, data = _error$response2.data;
                    if (status === 429) {
                      msg = "This Moralis Server is rate-limited because of the plan restrictions. See the details about the current rate and throttle limits: ".concat((0, _stringify.default)(this.getApiRateLimitInfo(headers)));
                    } else {
                      msg = this.getApiErrorMessage(_context3.t0, url);
                    }
                    throw new Error(msg);
                  case 15:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[1, 10]]);
          }));
          return function() {
            return _fetchFromApi.apply(this, arguments);
          };
        }()
      }, {
        key: "fetchFromServer",
        value: function() {
          var _fetchFromServer = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(name2, options) {
            var http, user, response, _error$response3, _error$response3$data;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (this.serverUrl) {
                      _context4.next = 2;
                      break;
                    }
                    throw new Error("SolanaAPI not initialized, run Moralis.start() first");
                  case 2:
                    _context4.prev = 2;
                    http = axios.create({
                      baseURL: this.serverUrl
                    });
                    user = this.Moralis.User.current();
                    if (user) {
                      options._SessionToken = user.attributes.sessionToken;
                      options._ApplicationId = this.Moralis.applicationId;
                    }
                    _context4.next = 8;
                    return http.post("/functions/sol-".concat(name2), options, {
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    });
                  case 8:
                    response = _context4.sent;
                    return _context4.abrupt("return", response.data.result);
                  case 12:
                    _context4.prev = 12;
                    _context4.t0 = _context4["catch"](2);
                    if (!((_error$response3 = _context4.t0.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.error)) {
                      _context4.next = 16;
                      break;
                    }
                    throw new Error(_context4.t0.response.data.error);
                  case 16:
                    throw _context4.t0;
                  case 17:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee3, this, [[2, 12]]);
          }));
          return function() {
            return _fetchFromServer.apply(this, arguments);
          };
        }()
      }]);
      return SolanaApi2;
    }();
    (0, _defineProperty2.default)(SolanaApi, "baseURL", "https://solana-gateway.moralis.io");
    (0, _defineProperty2.default)(SolanaApi, "BodyParamTypes", {
      setBody: "set body",
      property: "property"
    });
    (0, _defineProperty2.default)(SolanaApi, "account", {
      balance: function() {
        var _balance = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4() {
          var options, _args4 = arguments;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  options = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : {};
                  return _context5.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "balance",
                      "url": "/account/:network/:address/balance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee4);
        }));
        return function() {
          return _balance.apply(this, arguments);
        };
      }(),
      getSPL: function() {
        var _getSPL = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5() {
          var options, _args5 = arguments;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  options = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : {};
                  return _context6.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getSPL",
                      "url": "/account/:network/:address/tokens"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee5);
        }));
        return function() {
          return _getSPL.apply(this, arguments);
        };
      }(),
      getNFTs: function() {
        var _getNFTs = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
          var options, _args6 = arguments;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                  return _context7.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTs",
                      "url": "/account/:network/:address/nft"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee6);
        }));
        return function() {
          return _getNFTs.apply(this, arguments);
        };
      }(),
      getPortfolio: function() {
        var _getPortfolio = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7() {
          var options, _args7 = arguments;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  options = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                  return _context8.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getPortfolio",
                      "url": "/account/:network/:address/portfolio"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee7);
        }));
        return function() {
          return _getPortfolio.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(SolanaApi, "nft", {
      getNFTMetadata: function() {
        var _getNFTMetadata = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee8() {
          var options, _args8 = arguments;
          return _regenerator.default.wrap(function(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  options = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : {};
                  return _context9.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "nft",
                      "name": "getNFTMetadata",
                      "url": "/nft/:network/:address/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee8);
        }));
        return function() {
          return _getNFTMetadata.apply(this, arguments);
        };
      }()
    });
    var _default = SolanaApi;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Push.js
var require_Push = __commonJS({
  "node_modules/moralis/lib/browser/Push.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.send = send;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    function send(data) {
      if (data.where && data.where instanceof _ParseQuery.default) {
        data.where = data.where.toJSON().where;
      }
      if (data.push_time && (0, _typeof2.default)(data.push_time) === "object") {
        data.push_time = data.push_time.toJSON();
      }
      if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === "object") {
        data.expiration_time = data.expiration_time.toJSON();
      }
      if (data.expiration_time && data.expiration_interval) {
        throw new Error("expiration_time and expiration_interval cannot both be set.");
      }
      return _CoreManager.default.getPushController().send(data);
    }
    var DefaultController = {
      send: function(data) {
        return _CoreManager.default.getRESTController().request("POST", "push", data, {
          useMasterKey: true
        });
      }
    };
    _CoreManager.default.setPushController(DefaultController);
  }
});

// node_modules/moralis/lib/browser/ParseSchema.js
var require_ParseSchema = __commonJS({
  "node_modules/moralis/lib/browser/ParseSchema.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseCLP = _interopRequireDefault(require_ParseCLP());
    var FIELD_TYPES = ["String", "Number", "Boolean", "Date", "File", "GeoPoint", "Polygon", "Array", "Object", "Pointer", "Relation"];
    var ParseSchema = function() {
      function ParseSchema2(className) {
        (0, _classCallCheck2.default)(this, ParseSchema2);
        (0, _defineProperty2.default)(this, "className", void 0);
        (0, _defineProperty2.default)(this, "_fields", void 0);
        (0, _defineProperty2.default)(this, "_indexes", void 0);
        (0, _defineProperty2.default)(this, "_clp", void 0);
        if (typeof className === "string") {
          if (className === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            this.className = "_User";
          } else {
            this.className = className;
          }
        }
        this._fields = {};
        this._indexes = {};
      }
      (0, _createClass2.default)(ParseSchema2, [{
        key: "get",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.get(this.className).then(function(response) {
            if (!response) {
              throw new Error("Schema not found.");
            }
            return response;
          });
        }
      }, {
        key: "save",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          var params = {
            className: this.className,
            fields: this._fields,
            indexes: this._indexes,
            classLevelPermissions: this._clp
          };
          return controller.create(this.className, params);
        }
      }, {
        key: "update",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          var params = {
            className: this.className,
            fields: this._fields,
            indexes: this._indexes,
            classLevelPermissions: this._clp
          };
          this._fields = {};
          this._indexes = {};
          return controller.update(this.className, params);
        }
      }, {
        key: "delete",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.delete(this.className);
        }
      }, {
        key: "purge",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.purge(this.className);
        }
      }, {
        key: "assertClassName",
        value: function() {
          if (!this.className) {
            throw new Error("You must set a Class Name before making any request.");
          }
        }
      }, {
        key: "setCLP",
        value: function(clp) {
          if (clp instanceof _ParseCLP.default) {
            this._clp = clp.toJSON();
          } else {
            this._clp = clp;
          }
          return this;
        }
      }, {
        key: "addField",
        value: function(name2, type) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          type = type || "String";
          if (!name2) {
            throw new Error("field name may not be null.");
          }
          if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {
            throw new Error("".concat(type, " is not a valid type."));
          }
          var fieldOptions = {
            type
          };
          if (typeof options.required === "boolean") {
            fieldOptions.required = options.required;
          }
          if (options.defaultValue !== void 0) {
            fieldOptions.defaultValue = options.defaultValue;
          }
          this._fields[name2] = fieldOptions;
          return this;
        }
      }, {
        key: "addIndex",
        value: function(name2, index) {
          if (!name2) {
            throw new Error("index name may not be null.");
          }
          if (!index) {
            throw new Error("index may not be null.");
          }
          this._indexes[name2] = index;
          return this;
        }
      }, {
        key: "addString",
        value: function(name2, options) {
          return this.addField(name2, "String", options);
        }
      }, {
        key: "addNumber",
        value: function(name2, options) {
          return this.addField(name2, "Number", options);
        }
      }, {
        key: "addBoolean",
        value: function(name2, options) {
          return this.addField(name2, "Boolean", options);
        }
      }, {
        key: "addDate",
        value: function(name2, options) {
          if (options && options.defaultValue) {
            options.defaultValue = {
              __type: "Date",
              iso: new Date(options.defaultValue)
            };
          }
          return this.addField(name2, "Date", options);
        }
      }, {
        key: "addFile",
        value: function(name2, options) {
          return this.addField(name2, "File", options);
        }
      }, {
        key: "addGeoPoint",
        value: function(name2, options) {
          return this.addField(name2, "GeoPoint", options);
        }
      }, {
        key: "addPolygon",
        value: function(name2, options) {
          return this.addField(name2, "Polygon", options);
        }
      }, {
        key: "addArray",
        value: function(name2, options) {
          return this.addField(name2, "Array", options);
        }
      }, {
        key: "addObject",
        value: function(name2, options) {
          return this.addField(name2, "Object", options);
        }
      }, {
        key: "addPointer",
        value: function(name2, targetClass) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!name2) {
            throw new Error("field name may not be null.");
          }
          if (!targetClass) {
            throw new Error("You need to set the targetClass of the Pointer.");
          }
          var fieldOptions = {
            type: "Pointer",
            targetClass
          };
          if (typeof options.required === "boolean") {
            fieldOptions.required = options.required;
          }
          if (options.defaultValue !== void 0) {
            fieldOptions.defaultValue = options.defaultValue;
            if (options.defaultValue instanceof _ParseObject.default) {
              fieldOptions.defaultValue = options.defaultValue.toPointer();
            }
          }
          this._fields[name2] = fieldOptions;
          return this;
        }
      }, {
        key: "addRelation",
        value: function(name2, targetClass) {
          if (!name2) {
            throw new Error("field name may not be null.");
          }
          if (!targetClass) {
            throw new Error("You need to set the targetClass of the Relation.");
          }
          this._fields[name2] = {
            type: "Relation",
            targetClass
          };
          return this;
        }
      }, {
        key: "deleteField",
        value: function(name2) {
          this._fields[name2] = {
            __op: "Delete"
          };
          return this;
        }
      }, {
        key: "deleteIndex",
        value: function(name2) {
          this._indexes[name2] = {
            __op: "Delete"
          };
          return this;
        }
      }], [{
        key: "all",
        value: function() {
          var controller = _CoreManager.default.getSchemaController();
          return controller.get("").then(function(response) {
            if (response.results.length === 0) {
              throw new Error("Schema not found.");
            }
            return response.results;
          });
        }
      }]);
      return ParseSchema2;
    }();
    var DefaultController = {
      send: function(className, method) {
        var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request(method, "schemas/".concat(className), params, {
          useMasterKey: true
        });
      },
      get: function(className) {
        return this.send(className, "GET");
      },
      create: function(className, params) {
        return this.send(className, "POST", params);
      },
      update: function(className, params) {
        return this.send(className, "PUT", params);
      },
      delete: function(className) {
        return this.send(className, "DELETE");
      },
      purge: function(className) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("DELETE", "purge/".concat(className), {}, {
          useMasterKey: true
        });
      }
    };
    _CoreManager.default.setSchemaController(DefaultController);
    var _default = ParseSchema;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/EventEmitter.js
var require_EventEmitter = __commonJS({
  "node_modules/moralis/lib/browser/EventEmitter.js"(exports, module) {
    "use strict";
    module.exports = require_events().EventEmitter;
  }
});

// node_modules/core-js-pure/es/array/virtual/values.js
var require_values4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/values.js"(exports, module) {
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").values;
  }
});

// node_modules/core-js-pure/stable/array/virtual/values.js
var require_values5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/values.js"(exports, module) {
    var parent = require_values4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/values.js
var require_values6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/values.js"(exports, module) {
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_values5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.values;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.values || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js
var require_values7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js"(exports, module) {
    module.exports = require_values6();
  }
});

// node_modules/moralis/lib/browser/LiveQuerySubscription.js
var require_LiveQuerySubscription = __commonJS({
  "node_modules/moralis/lib/browser/LiveQuerySubscription.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _EventEmitter2 = _interopRequireDefault(require_EventEmitter());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _promiseUtils = require_promiseUtils();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var Subscription = function(_EventEmitter) {
      (0, _inherits2.default)(Subscription2, _EventEmitter);
      var _super = _createSuper(Subscription2);
      function Subscription2(id2, query, sessionToken) {
        var _this;
        (0, _classCallCheck2.default)(this, Subscription2);
        _this = _super.call(this);
        _this.id = id2;
        _this.query = query;
        _this.sessionToken = sessionToken;
        _this.subscribePromise = (0, _promiseUtils.resolvingPromise)();
        _this.subscribed = false;
        _this.on("error", function() {
        });
        return _this;
      }
      (0, _createClass2.default)(Subscription2, [{
        key: "unsubscribe",
        value: function() {
          var _this2 = this;
          return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function(liveQueryClient) {
            liveQueryClient.unsubscribe(_this2);
            _this2.emit("close");
          });
        }
      }]);
      return Subscription2;
    }(_EventEmitter2.default);
    var _default = Subscription;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/LiveQueryClient.js
var require_LiveQueryClient = __commonJS({
  "node_modules/moralis/lib/browser/LiveQueryClient.js"(exports) {
    "use strict";
    var _Reflect$construct = require_construct3();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol7();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray = require_is_array4();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _map = _interopRequireDefault(require_map13());
    var _keys = _interopRequireDefault(require_keys7());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _values = _interopRequireDefault(require_values7());
    var _setTimeout2 = _interopRequireDefault(require_set_timeout2());
    var _bind = _interopRequireDefault(require_bind8());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _EventEmitter2 = _interopRequireDefault(require_EventEmitter());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _LiveQuerySubscription = _interopRequireDefault(require_LiveQuerySubscription());
    var _promiseUtils = require_promiseUtils();
    function _createForOfIteratorHelper(o4, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o4) || o4["@@iterator"];
      if (!it) {
        if (_Array$isArray(o4) || (it = _unsupportedIterableToArray(o4)) || allowArrayLike && o4 && typeof o4.length === "number") {
          if (it)
            o4 = it;
          var i4 = 0;
          var F4 = function() {
          };
          return {
            s: F4,
            n: function() {
              if (i4 >= o4.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o4[i4++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F4
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o4);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o4, minLen) {
      var _context6;
      if (!o4)
        return;
      if (typeof o4 === "string")
        return _arrayLikeToArray(o4, minLen);
      var n3 = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o4)).call(_context6, 8, -1);
      if (n3 === "Object" && o4.constructor)
        n3 = o4.constructor.name;
      if (n3 === "Map" || n3 === "Set")
        return _Array$from(o4);
      if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
        return _arrayLikeToArray(o4, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
        arr2[i4] = arr[i4];
      }
      return arr2;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var CLIENT_STATE = {
      INITIALIZED: "initialized",
      CONNECTING: "connecting",
      CONNECTED: "connected",
      CLOSED: "closed",
      RECONNECTING: "reconnecting",
      DISCONNECTED: "disconnected"
    };
    var OP_TYPES = {
      CONNECT: "connect",
      SUBSCRIBE: "subscribe",
      UNSUBSCRIBE: "unsubscribe",
      ERROR: "error"
    };
    var OP_EVENTS = {
      CONNECTED: "connected",
      SUBSCRIBED: "subscribed",
      UNSUBSCRIBED: "unsubscribed",
      ERROR: "error",
      CREATE: "create",
      UPDATE: "update",
      ENTER: "enter",
      LEAVE: "leave",
      DELETE: "delete"
    };
    var CLIENT_EMMITER_TYPES = {
      CLOSE: "close",
      ERROR: "error",
      OPEN: "open"
    };
    var SUBSCRIPTION_EMMITER_TYPES = {
      OPEN: "open",
      CLOSE: "close",
      ERROR: "error",
      CREATE: "create",
      UPDATE: "update",
      ENTER: "enter",
      LEAVE: "leave",
      DELETE: "delete"
    };
    var generateInterval = function(k4) {
      return Math.random() * Math.min(30, Math.pow(2, k4) - 1) * 1e3;
    };
    var LiveQueryClient = function(_EventEmitter) {
      (0, _inherits2.default)(LiveQueryClient2, _EventEmitter);
      var _super = _createSuper(LiveQueryClient2);
      function LiveQueryClient2(_ref) {
        var _this;
        var applicationId = _ref.applicationId, serverURL = _ref.serverURL, javascriptKey = _ref.javascriptKey, masterKey = _ref.masterKey, sessionToken = _ref.sessionToken, installationId = _ref.installationId;
        (0, _classCallCheck2.default)(this, LiveQueryClient2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "attempts", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "requestId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applicationId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "serverURL", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "javascriptKey", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "masterKey", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sessionToken", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "installationId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "additionalProperties", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "connectPromise", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subscriptions", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "socket", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", void 0);
        if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, "ws") !== 0) {
          throw new Error("You need to set a proper Parse LiveQuery server url before using LiveQueryClient");
        }
        _this.reconnectHandle = null;
        _this.attempts = 1;
        _this.id = 0;
        _this.requestId = 1;
        _this.serverURL = serverURL;
        _this.applicationId = applicationId;
        _this.javascriptKey = javascriptKey || void 0;
        _this.masterKey = masterKey || void 0;
        _this.sessionToken = sessionToken || void 0;
        _this.installationId = installationId || void 0;
        _this.additionalProperties = true;
        _this.connectPromise = (0, _promiseUtils.resolvingPromise)();
        _this.subscriptions = new _map.default();
        _this.state = CLIENT_STATE.INITIALIZED;
        _this.on("error", function() {
        });
        return _this;
      }
      (0, _createClass2.default)(LiveQueryClient2, [{
        key: "shouldOpen",
        value: function() {
          return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;
        }
      }, {
        key: "subscribe",
        value: function(query, sessionToken) {
          var _this2 = this;
          if (!query) {
            return;
          }
          var className = query.className;
          var queryJSON = query.toJSON();
          var where = queryJSON.where;
          var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(",") : void 0;
          var subscribeRequest = {
            op: OP_TYPES.SUBSCRIBE,
            requestId: this.requestId,
            query: {
              className,
              where,
              fields
            }
          };
          if (sessionToken) {
            subscribeRequest.sessionToken = sessionToken;
          }
          var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);
          this.subscriptions.set(this.requestId, subscription);
          this.requestId += 1;
          this.connectPromise.then(function() {
            _this2.socket.send((0, _stringify.default)(subscribeRequest));
          });
          return subscription;
        }
      }, {
        key: "unsubscribe",
        value: function(subscription) {
          var _this3 = this;
          if (!subscription) {
            return;
          }
          this.subscriptions.delete(subscription.id);
          var unsubscribeRequest = {
            op: OP_TYPES.UNSUBSCRIBE,
            requestId: subscription.id
          };
          this.connectPromise.then(function() {
            _this3.socket.send((0, _stringify.default)(unsubscribeRequest));
          });
        }
      }, {
        key: "open",
        value: function() {
          var _this4 = this;
          var WebSocketImplementation = _CoreManager.default.getWebSocketController();
          if (!WebSocketImplementation) {
            this.emit(CLIENT_EMMITER_TYPES.ERROR, "Can not find WebSocket implementation");
            return;
          }
          if (this.state !== CLIENT_STATE.RECONNECTING) {
            this.state = CLIENT_STATE.CONNECTING;
          }
          this.socket = new WebSocketImplementation(this.serverURL);
          this.socket.onopen = function() {
            _this4._handleWebSocketOpen();
          };
          this.socket.onmessage = function(event) {
            _this4._handleWebSocketMessage(event);
          };
          this.socket.onclose = function() {
            _this4._handleWebSocketClose();
          };
          this.socket.onerror = function(error) {
            _this4._handleWebSocketError(error);
          };
        }
      }, {
        key: "resubscribe",
        value: function() {
          var _context, _this5 = this;
          (0, _forEach.default)(_context = this.subscriptions).call(_context, function(subscription, requestId) {
            var query = subscription.query;
            var queryJSON = query.toJSON();
            var where = queryJSON.where;
            var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(",") : void 0;
            var className = query.className;
            var sessionToken = subscription.sessionToken;
            var subscribeRequest = {
              op: OP_TYPES.SUBSCRIBE,
              requestId,
              query: {
                className,
                where,
                fields
              }
            };
            if (sessionToken) {
              subscribeRequest.sessionToken = sessionToken;
            }
            _this5.connectPromise.then(function() {
              _this5.socket.send((0, _stringify.default)(subscribeRequest));
            });
          });
        }
      }, {
        key: "close",
        value: function() {
          var _context2;
          if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.DISCONNECTED;
          this.socket.close();
          var _iterator = _createForOfIteratorHelper((0, _values.default)(_context2 = this.subscriptions).call(_context2)), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var subscription = _step.value;
              subscription.subscribed = false;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          this._handleReset();
          this.emit(CLIENT_EMMITER_TYPES.CLOSE);
        }
      }, {
        key: "_handleReset",
        value: function() {
          this.attempts = 1;
          this.id = 0;
          this.requestId = 1;
          this.connectPromise = (0, _promiseUtils.resolvingPromise)();
          this.subscriptions = new _map.default();
        }
      }, {
        key: "_handleWebSocketOpen",
        value: function() {
          this.attempts = 1;
          var connectRequest = {
            op: OP_TYPES.CONNECT,
            applicationId: this.applicationId,
            javascriptKey: this.javascriptKey,
            masterKey: this.masterKey,
            sessionToken: this.sessionToken
          };
          if (this.additionalProperties) {
            connectRequest.installationId = this.installationId;
          }
          this.socket.send((0, _stringify.default)(connectRequest));
        }
      }, {
        key: "_handleWebSocketMessage",
        value: function(event) {
          var data = event.data;
          if (typeof data === "string") {
            data = JSON.parse(data);
          }
          var subscription = null;
          if (data.requestId) {
            subscription = this.subscriptions.get(data.requestId);
          }
          var response = {
            clientId: data.clientId,
            installationId: data.installationId
          };
          switch (data.op) {
            case OP_EVENTS.CONNECTED:
              if (this.state === CLIENT_STATE.RECONNECTING) {
                this.resubscribe();
              }
              this.emit(CLIENT_EMMITER_TYPES.OPEN);
              this.id = data.clientId;
              this.connectPromise.resolve();
              this.state = CLIENT_STATE.CONNECTED;
              break;
            case OP_EVENTS.SUBSCRIBED:
              if (subscription) {
                subscription.subscribed = true;
                subscription.subscribePromise.resolve();
                (0, _setTimeout2.default)(function() {
                  return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);
                }, 200);
              }
              break;
            case OP_EVENTS.ERROR:
              if (data.requestId) {
                if (subscription) {
                  subscription.subscribePromise.resolve();
                  (0, _setTimeout2.default)(function() {
                    return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);
                  }, 200);
                }
              } else {
                this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);
              }
              if (data.error === "Additional properties not allowed") {
                this.additionalProperties = false;
              }
              if (data.reconnect) {
                this._handleReconnect();
              }
              break;
            case OP_EVENTS.UNSUBSCRIBED:
              break;
            default: {
              if (!subscription) {
                break;
              }
              var override = false;
              if (data.original) {
                override = true;
                delete data.original.__type;
                for (var field in data.original) {
                  if (!(field in data.object)) {
                    data.object[field] = void 0;
                  }
                }
                data.original = _ParseObject.default.fromJSON(data.original, false);
              }
              delete data.object.__type;
              var parseObject = _ParseObject.default.fromJSON(data.object, override);
              if (data.original) {
                subscription.emit(data.op, parseObject, data.original, response);
              } else {
                subscription.emit(data.op, parseObject, response);
              }
              var localDatastore = _CoreManager.default.getLocalDatastore();
              if (override && localDatastore.isEnabled) {
                localDatastore._updateObjectIfPinned(parseObject).then(function() {
                });
              }
            }
          }
        }
      }, {
        key: "_handleWebSocketClose",
        value: function() {
          var _context3;
          if (this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.CLOSED;
          this.emit(CLIENT_EMMITER_TYPES.CLOSE);
          var _iterator2 = _createForOfIteratorHelper((0, _values.default)(_context3 = this.subscriptions).call(_context3)), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var subscription = _step2.value;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          this._handleReconnect();
        }
      }, {
        key: "_handleWebSocketError",
        value: function(error) {
          var _context4;
          this.emit(CLIENT_EMMITER_TYPES.ERROR, error);
          var _iterator3 = _createForOfIteratorHelper((0, _values.default)(_context4 = this.subscriptions).call(_context4)), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var subscription = _step3.value;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          this._handleReconnect();
        }
      }, {
        key: "_handleReconnect",
        value: function() {
          var _context5, _this6 = this;
          if (this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.RECONNECTING;
          var time = generateInterval(this.attempts);
          if (this.reconnectHandle) {
            clearTimeout(this.reconnectHandle);
          }
          this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function() {
            _this6.attempts++;
            _this6.connectPromise = (0, _promiseUtils.resolvingPromise)();
            _this6.open();
          }).call(_context5, this), time);
        }
      }]);
      return LiveQueryClient2;
    }(_EventEmitter2.default);
    _CoreManager.default.setWebSocketController(typeof WebSocket === "function" || (typeof WebSocket === "undefined" ? "undefined" : (0, _typeof2.default)(WebSocket)) === "object" ? WebSocket : null);
    var _default = LiveQueryClient;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseLiveQuery.js
var require_ParseLiveQuery = __commonJS({
  "node_modules/moralis/lib/browser/ParseLiveQuery.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _indexOf = _interopRequireDefault(require_index_of8());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _EventEmitter = _interopRequireDefault(require_EventEmitter());
    var _LiveQueryClient = _interopRequireDefault(require_LiveQueryClient());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    function getLiveQueryClient() {
      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
    }
    var LiveQuery = new _EventEmitter.default();
    LiveQuery.open = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
      var liveQueryClient;
      return _regenerator.default.wrap(function(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getLiveQueryClient();
            case 2:
              liveQueryClient = _context.sent;
              liveQueryClient.open();
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    LiveQuery.close = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
      var liveQueryClient;
      return _regenerator.default.wrap(function(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getLiveQueryClient();
            case 2:
              liveQueryClient = _context2.sent;
              liveQueryClient.close();
            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    LiveQuery.on("error", function() {
    });
    var _default = LiveQuery;
    exports.default = _default;
    var defaultLiveQueryClient;
    var DefaultLiveQueryController = {
      setDefaultLiveQueryClient: function(liveQueryClient) {
        defaultLiveQueryClient = liveQueryClient;
      },
      getDefaultLiveQueryClient: function() {
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
          var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!defaultLiveQueryClient) {
                    _context3.next = 2;
                    break;
                  }
                  return _context3.abrupt("return", defaultLiveQueryClient);
                case 2:
                  _context3.next = 4;
                  return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);
                case 4:
                  _yield$Promise$all = _context3.sent;
                  _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
                  currentUser = _yield$Promise$all2[0];
                  installationId = _yield$Promise$all2[1];
                  sessionToken = currentUser ? currentUser.getSessionToken() : void 0;
                  liveQueryServerURL = _CoreManager.default.get("LIVEQUERY_SERVER_URL");
                  if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, "ws") !== 0)) {
                    _context3.next = 12;
                    break;
                  }
                  throw new Error("You need to set a proper Parse LiveQuery server url before using LiveQueryClient");
                case 12:
                  if (!liveQueryServerURL) {
                    serverURL = _CoreManager.default.get("SERVER_URL");
                    protocol = (0, _indexOf.default)(serverURL).call(serverURL, "https") === 0 ? "wss://" : "ws://";
                    host = serverURL.replace(/^https?:\/\//, "");
                    liveQueryServerURL = protocol + host;
                    _CoreManager.default.set("LIVEQUERY_SERVER_URL", liveQueryServerURL);
                  }
                  applicationId = _CoreManager.default.get("APPLICATION_ID");
                  javascriptKey = _CoreManager.default.get("JAVASCRIPT_KEY");
                  masterKey = _CoreManager.default.get("MASTER_KEY");
                  defaultLiveQueryClient = new _LiveQueryClient.default({
                    applicationId,
                    serverURL: liveQueryServerURL,
                    javascriptKey,
                    masterKey,
                    sessionToken,
                    installationId
                  });
                  defaultLiveQueryClient.on("error", function(error) {
                    LiveQuery.emit("error", error);
                  });
                  defaultLiveQueryClient.on("open", function() {
                    LiveQuery.emit("open");
                  });
                  defaultLiveQueryClient.on("close", function() {
                    LiveQuery.emit("close");
                  });
                  return _context3.abrupt("return", defaultLiveQueryClient);
                case 21:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      _clearCachedDefaultClient: function() {
        defaultLiveQueryClient = null;
      }
    };
    _CoreManager.default.setLiveQueryController(DefaultLiveQueryController);
  }
});

// node_modules/moralis/lib/browser/UnitConvert.js
var require_UnitConvert = __commonJS({
  "node_modules/moralis/lib/browser/UnitConvert.js"(exports, module) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var UnitConverter = function() {
      function UnitConverter2() {
        (0, _classCallCheck2.default)(this, UnitConverter2);
      }
      (0, _createClass2.default)(UnitConverter2, null, [{
        key: "ETH",
        value: function(value) {
          return _ethers.ethers.utils.parseEther("".concat(value)).toString();
        }
      }, {
        key: "Token",
        value: function(value) {
          var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;
          return _ethers.ethers.utils.parseUnits("".concat(value), +decimals).toString();
        }
      }, {
        key: "FromWei",
        value: function(value) {
          var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;
          var result = _ethers.ethers.utils.formatUnits(value, decimals);
          var splitResult = result.split(".");
          if (splitResult[1] === "0") {
            return splitResult[0];
          }
          return result;
        }
      }]);
      return UnitConverter2;
    }();
    module.exports = UnitConverter;
  }
});

// node_modules/moralis/lib/browser/MoralisUI.js
var require_MoralisUI = __commonJS({
  "node_modules/moralis/lib/browser/MoralisUI.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var MoralisUI = {
      openPrompt: function() {
        return (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  console.warn("Moralis: No prompt supplied");
                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      }
    };
    var _default = MoralisUI;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Chains.js
var require_Chains = __commonJS({
  "node_modules/moralis/lib/browser/Chains.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var Chains = {
      ETH_MAINENT: "0x1",
      ETH_ROPSTEN: "0x3",
      ETH_GOERLI: "0x5",
      ETH_KOVAN: "0x2a",
      ETH_RINKBEY: "0x4",
      ETH_LOCALDEVCHAIN: "0x539",
      POLYGON_MAINNET: "0x89",
      POLYGON_MUMBAI: "0x13881",
      BSC_MAINNET: "0x38",
      BSC_TESTNET: "0x61",
      AVAX_MAINNET: "0xa86a",
      AVAX_TESTNET: "0xa869",
      FANTOM_MAINNET: "0xfa",
      CRONOS_MAINNET: "0x19"
    };
    var _default = Chains;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Parse.js
var require_Parse = __commonJS({
  "node_modules/moralis/lib/browser/Parse.js"(exports, module) {
    "use strict";
    var _typeof = require_typeof();
    var _Reflect$construct = require_construct3();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _decode2 = _interopRequireDefault(require_decode());
    var _encode3 = _interopRequireDefault(require_encode());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _CryptoController = _interopRequireDefault(require_CryptoController());
    var _InstallationController = _interopRequireDefault(require_InstallationController());
    var ParseOp = _interopRequireWildcard(require_ParseOp());
    var _RESTController2 = _interopRequireDefault(require_RESTController());
    var _MoralisWeb2 = _interopRequireDefault(require_MoralisWeb3());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _filterConsole = require_filterConsole();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key2 in obj) {
        if (key2 !== "default" && Object.prototype.hasOwnProperty.call(obj, key2)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key2) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key2, desc);
          } else {
            newObj[key2] = obj[key2];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    var _require = require_utils4();
    var checkForSdkUpdates = _require.checkForSdkUpdates;
    var trackEvent = _require.trackEvent;
    var TrackingEventName = _require.TrackingEventName;
    var getSubdomain = _require.getSubdomain;
    var Moralis = function(_MoralisWeb) {
      (0, _inherits2.default)(Moralis2, _MoralisWeb);
      var _super = _createSuper(Moralis2);
      function Moralis2() {
        (0, _classCallCheck2.default)(this, Moralis2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(Moralis2, null, [{
        key: "start",
        value: function() {
          var _start = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(options) {
            var appId, serverUrl, plugins, javascriptKey, masterKey, moralisSecret, apiKey, trackOptions, _yield$this$getApiKey, web3ApiKey, speedyNodeApiKey;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    appId = options.appId, serverUrl = options.serverUrl, plugins = options.plugins, javascriptKey = options.javascriptKey, masterKey = options.masterKey, moralisSecret = options.moralisSecret;
                    if (serverUrl) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("Moralis.start failed: serverUrl is required");
                  case 4:
                    if (appId) {
                      _context.next = 6;
                      break;
                    }
                    throw new Error("Moralis.start failed: appId is required");
                  case 6:
                    if (moralisSecret) {
                      console.warn("Moralis.start warning: Using moralisSecret on the browser enviroment reveals critical information.");
                    }
                    _context.next = 18;
                    break;
                  case 9:
                    if (!moralisSecret) {
                      _context.next = 18;
                      break;
                    }
                    this.moralisSecret = moralisSecret;
                    _context.next = 13;
                    return this.getApiKeys(moralisSecret);
                  case 13:
                    _yield$this$getApiKey = _context.sent;
                    web3ApiKey = _yield$this$getApiKey.web3ApiKey;
                    speedyNodeApiKey = _yield$this$getApiKey.speedyNodeApiKey;
                    apiKey = web3ApiKey;
                    this.speedyNodeApiKey = speedyNodeApiKey;
                  case 18:
                    this.initialize(appId, javascriptKey, masterKey);
                    this.serverURL = serverUrl;
                    this.Web3API.initialize({
                      serverUrl,
                      apiKey,
                      Moralis: Moralis2
                    });
                    this.SolanaAPI.initialize({
                      serverUrl,
                      apiKey,
                      Moralis: Moralis2
                    });
                    if (!(appId && serverUrl)) {
                      _context.next = 28;
                      break;
                    }
                    trackOptions = {
                      subdomain: getSubdomain(serverUrl),
                      sdk_type: "javascript",
                      sdk_version: "1.8.0",
                      sdk_enviroment: "browser",
                      appId
                    };
                    _context.next = 26;
                    return this.initPlugins(plugins);
                  case 26:
                    _context.next = 29;
                    break;
                  case 28:
                    trackOptions = {
                      sdk_type: "javascript",
                      sdk_version: "1.8.0",
                      sdk_enviroment: "browser"
                    };
                  case 29:
                    checkForSdkUpdates();
                    trackEvent(TrackingEventName.START_FUNCTION, serverUrl ? getSubdomain(serverUrl) : null, trackOptions);
                  case 31:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _start.apply(this, arguments);
          };
        }()
      }, {
        key: "getApiKeys",
        value: function() {
          var _getApiKeys = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(moralisSecret) {
            var _RESTController, response;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;
                    _RESTController = _CoreManager.default.getRESTController();
                    _context2.next = 4;
                    return _RESTController.ajax("GET", "https://admin.moralis.io/api/publics/apiKeys", null, {
                      "moralis-secret": moralisSecret,
                      Accept: "application/json",
                      "Content-Type": "application/json"
                    });
                  case 4:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.response.result);
                  case 8:
                    _context2.prev = 8;
                    _context2.t0 = _context2["catch"](0);
                    throw new Error("Could not fetch keys with moralisSecret");
                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[0, 8]]);
          }));
          return function() {
            return _getApiKeys.apply(this, arguments);
          };
        }()
      }, {
        key: "initialize",
        value: function(applicationId, javaScriptKey) {
          if (_CoreManager.default.get("IS_NODE") && !process.env.SERVER_RENDERING) {
            console.log("Moralis: It looks like you're using the browser version of the SDK in a node.js environment. You should require('moralis/node') instead.");
          }
          Moralis2._initialize(applicationId, javaScriptKey);
        }
      }, {
        key: "_initialize",
        value: function(applicationId, javaScriptKey, masterKey) {
          _CoreManager.default.set("APPLICATION_ID", applicationId);
          _CoreManager.default.set("JAVASCRIPT_KEY", javaScriptKey);
          _CoreManager.default.set("MASTER_KEY", masterKey);
          _CoreManager.default.set("USE_MASTER_KEY", false);
        }
      }, {
        key: "setAsyncStorage",
        value: function(storage) {
          _CoreManager.default.setAsyncStorage(storage);
        }
      }, {
        key: "setLocalDatastoreController",
        value: function(controller) {
          _CoreManager.default.setLocalDatastoreController(controller);
        }
      }, {
        key: "applicationId",
        get: function() {
          return _CoreManager.default.get("APPLICATION_ID");
        },
        set: function(value) {
          _CoreManager.default.set("APPLICATION_ID", value);
        }
      }, {
        key: "javaScriptKey",
        get: function() {
          return _CoreManager.default.get("JAVASCRIPT_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("JAVASCRIPT_KEY", value);
        }
      }, {
        key: "masterKey",
        get: function() {
          return _CoreManager.default.get("MASTER_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("MASTER_KEY", value);
        }
      }, {
        key: "serverURL",
        get: function() {
          return _CoreManager.default.get("SERVER_URL");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_URL", value);
        }
      }, {
        key: "serverAuthToken",
        get: function() {
          return _CoreManager.default.get("SERVER_AUTH_TOKEN");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_AUTH_TOKEN", value);
        }
      }, {
        key: "serverAuthType",
        get: function() {
          return _CoreManager.default.get("SERVER_AUTH_TYPE");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_AUTH_TYPE", value);
        }
      }, {
        key: "liveQueryServerURL",
        get: function() {
          return _CoreManager.default.get("LIVEQUERY_SERVER_URL");
        },
        set: function(value) {
          _CoreManager.default.set("LIVEQUERY_SERVER_URL", value);
        }
      }, {
        key: "encryptedUser",
        get: function() {
          return _CoreManager.default.get("ENCRYPTED_USER");
        },
        set: function(value) {
          _CoreManager.default.set("ENCRYPTED_USER", value);
        }
      }, {
        key: "secret",
        get: function() {
          return _CoreManager.default.get("ENCRYPTED_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("ENCRYPTED_KEY", value);
        }
      }, {
        key: "idempotency",
        get: function() {
          return _CoreManager.default.get("IDEMPOTENCY");
        },
        set: function(value) {
          _CoreManager.default.set("IDEMPOTENCY", value);
        }
      }]);
      return Moralis2;
    }(_MoralisWeb2.default);
    Moralis.ACL = require_ParseACL().default;
    Moralis.Analytics = require_Analytics();
    Moralis.AnonymousUtils = require_AnonymousUtils().default;
    Moralis.Cloud = require_Cloud();
    Moralis.CLP = require_ParseCLP().default;
    Moralis.CoreManager = require_CoreManager();
    Moralis.Config = require_ParseConfig().default;
    Moralis.Error = require_ParseError().default;
    Moralis.FacebookUtils = require_FacebookUtils().default;
    Moralis.File = require_ParseFile().default;
    Moralis.GeoPoint = require_ParseGeoPoint().default;
    Moralis.Polygon = require_ParsePolygon().default;
    Moralis.Installation = require_ParseInstallation().default;
    Moralis.LocalDatastore = require_LocalDatastore();
    Moralis.Object = require_ParseObject().default;
    Moralis.Op = {
      Set: ParseOp.SetOp,
      Unset: ParseOp.UnsetOp,
      Increment: ParseOp.IncrementOp,
      Add: ParseOp.AddOp,
      Remove: ParseOp.RemoveOp,
      AddUnique: ParseOp.AddUniqueOp,
      Relation: ParseOp.RelationOp
    };
    Moralis.Web3API = require_MoralisWeb3Api().default;
    Moralis.SolanaAPI = require_MoralisSolanaApi().default;
    Moralis.Push = require_Push();
    Moralis.Query = require_ParseQuery().default;
    Moralis.Relation = require_ParseRelation().default;
    Moralis.Role = require_ParseRole().default;
    Moralis.Schema = require_ParseSchema().default;
    Moralis.Session = require_ParseSession().default;
    Moralis.Storage = require_Storage();
    Moralis.User = require_ParseUser().default;
    Moralis.LiveQuery = require_ParseLiveQuery().default;
    Moralis.LiveQueryClient = require_LiveQueryClient().default;
    Moralis.Web3 = Moralis;
    Moralis.Units = require_UnitConvert();
    Moralis.Elrond = require_MoralisErd().default;
    Moralis.Erd = Moralis.Elrond;
    Moralis.Dot = require_MoralisDot().default;
    Moralis.UI = require_MoralisUI().default;
    Moralis.Chains = require_Chains().default;
    Moralis.AbstractWeb3Connector = require_AbstractWeb3Connector().default;
    (0, _filterConsole.filterConsole)();
    Moralis._request = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _CoreManager.default.getRESTController().request.apply(null, args);
    };
    Moralis._ajax = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _CoreManager.default.getRESTController().ajax.apply(null, args);
    };
    Moralis._decode = function(_5, value) {
      return (0, _decode2.default)(value);
    };
    Moralis._encode = function(value, _5, disallowObjects) {
      return (0, _encode3.default)(value, disallowObjects);
    };
    Moralis._getInstallationId = function() {
      return _CoreManager.default.getInstallationController().currentInstallationId();
    };
    Moralis.enableLocalDatastore = function() {
      Moralis.LocalDatastore.isEnabled = true;
    };
    Moralis.isLocalDatastoreEnabled = function() {
      return Moralis.LocalDatastore.isEnabled;
    };
    Moralis.dumpLocalDatastore = function() {
      if (!Moralis.LocalDatastore.isEnabled) {
        console.log("Moralis: Moralis.enableLocalDatastore() must be called first");
        return _promise.default.resolve({});
      }
      return Moralis.LocalDatastore._getAllContents();
    };
    Moralis.enableEncryptedUser = function() {
      Moralis.encryptedUser = true;
    };
    Moralis.isEncryptedUserEnabled = function() {
      return Moralis.encryptedUser;
    };
    _CoreManager.default.setCryptoController(_CryptoController.default);
    _CoreManager.default.setInstallationController(_InstallationController.default);
    _CoreManager.default.setRESTController(_RESTController2.default);
    Moralis.Moralis = Moralis;
    module.exports = Moralis;
  }
});

// node_modules/moralis/index.js
var require_moralis = __commonJS({
  "node_modules/moralis/index.js"(exports, module) {
    module.exports = require_Parse();
  }
});

// node_modules/react-moralis/lib/index.esm.js
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_moralis = __toESM(require_moralis());
var extendStatics = function(d4, b3) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d5, b4) {
    d5.__proto__ = b4;
  } || function(d5, b4) {
    for (var p4 in b4)
      if (Object.prototype.hasOwnProperty.call(b4, p4))
        d5[p4] = b4[p4];
  };
  return extendStatics(d4, b3);
};
function __extends(d4, b3) {
  if (typeof b3 !== "function" && b3 !== null)
    throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
  extendStatics(d4, b3);
  function __() {
    this.constructor = d4;
  }
  d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t4) {
    for (var s4, i4 = 1, n3 = arguments.length; i4 < n3; i4++) {
      s4 = arguments[i4];
      for (var p4 in s4)
        if (Object.prototype.hasOwnProperty.call(s4, p4))
          t4[p4] = s4[p4];
    }
    return t4;
  };
  return __assign.apply(this, arguments);
};
function __rest(s4, e3) {
  var t4 = {};
  for (var p4 in s4)
    if (Object.prototype.hasOwnProperty.call(s4, p4) && e3.indexOf(p4) < 0)
      t4[p4] = s4[p4];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i4 = 0, p4 = Object.getOwnPropertySymbols(s4); i4 < p4.length; i4++) {
      if (e3.indexOf(p4[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p4[i4]))
        t4[p4[i4]] = s4[p4[i4]];
    }
  return t4;
}
function __awaiter16(thisArg, _arguments, P4, generator) {
  function adopt(value) {
    return value instanceof P4 ? value : new P4(function(resolve) {
      resolve(value);
    });
  }
  return new (P4 || (P4 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _5 = { label: 0, sent: function() {
    if (t4[0] & 1)
      throw t4[1];
    return t4[1];
  }, trys: [], ops: [] }, f4, y4, t4, g4;
  return g4 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g4[Symbol.iterator] = function() {
    return this;
  }), g4;
  function verb(n3) {
    return function(v4) {
      return step([n3, v4]);
    };
  }
  function step(op) {
    if (f4)
      throw new TypeError("Generator is already executing.");
    while (_5)
      try {
        if (f4 = 1, y4 && (t4 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t4 = y4["return"]) && t4.call(y4), 0) : y4.next) && !(t4 = t4.call(y4, op[1])).done)
          return t4;
        if (y4 = 0, t4)
          op = [op[0] & 2, t4.value];
        switch (op[0]) {
          case 0:
          case 1:
            t4 = op;
            break;
          case 4:
            _5.label++;
            return { value: op[1], done: false };
          case 5:
            _5.label++;
            y4 = op[1];
            op = [0];
            continue;
          case 7:
            op = _5.ops.pop();
            _5.trys.pop();
            continue;
          default:
            if (!(t4 = _5.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _5 = 0;
              continue;
            }
            if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
              _5.label = op[1];
              break;
            }
            if (op[0] === 6 && _5.label < t4[1]) {
              _5.label = t4[1];
              t4 = op;
              break;
            }
            if (t4 && _5.label < t4[2]) {
              _5.label = t4[2];
              _5.ops.push(op);
              break;
            }
            if (t4[2])
              _5.ops.pop();
            _5.trys.pop();
            continue;
        }
        op = body.call(thisArg, _5);
      } catch (e3) {
        op = [6, e3];
        y4 = 0;
      } finally {
        f4 = t4 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack3) {
  if (pack3 || arguments.length === 2)
    for (var i4 = 0, l4 = from.length, ar; i4 < l4; i4++) {
      if (ar || !(i4 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i4);
        ar[i4] = from[i4];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var DEFAULT_API_CHAIN = "eth";
var Plugin;
(function(Plugin2) {
  Plugin2["ONE_INCH"] = "oneInch";
  Plugin2["OPEN_SEA"] = "opensea";
  Plugin2["FIAT"] = "fiat";
  Plugin2["RARIBLE"] = "rarible";
})(Plugin || (Plugin = {}));
var supportedChains = [
  "0x1",
  "0x3",
  "0x4",
  "0x5",
  "0x2a",
  "0x38",
  "0x61",
  "0x89",
  "0x13881",
  "0xfa",
  "0xa86a",
  "0xa869",
  "0x539",
  "0x19"
];
var blockExplorers = {
  "0x1": "https://etherscan.io/",
  "0x3": "https://ropsten.etherscan.io/",
  "0x4": "https://rinkeby.etherscan.io/",
  "0x2a": "https://kovan.etherscan.io/",
  "0x5": "https://goerli.etherscan.io/",
  "0x539": null,
  "0xa86a": "https://cchain.explorer.avax.network/",
  "0xa869": "https://explorer.avax-test.network/",
  "0x38": "https://bscscan.com/",
  "0x61": "https://testnet.bscscan.com",
  "0x89": "https://explorer-mainnet.maticvigil.com",
  "0x13881": "https://mumbai.polygonscan.com",
  "0xfa": "https://ftmscan.com/",
  "0x19": "https://cronoscan.com/"
};
var chains = [
  {
    name: "Ethereum Mainnet",
    chainId: 1,
    shortName: "eth",
    networkId: 1,
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpc: [
      "https://mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}",
      "https://api.mycryptoapi.com/eth",
      "https://cloudflare-eth.com"
    ],
    faucets: [],
    infoURL: "https://ethereum.org"
  },
  {
    name: "Expanse Network",
    chainId: 2,
    shortName: "exp",
    networkId: 1,
    nativeCurrency: {
      name: "Expanse Network Ether",
      symbol: "EXP",
      decimals: 18
    },
    rpc: ["https://node.expanse.tech"],
    faucets: [],
    infoURL: "https://expanse.tech"
  },
  {
    name: "Ethereum Testnet Ropsten",
    chainId: 3,
    shortName: "rop",
    networkId: 3,
    nativeCurrency: { name: "Ropsten Ether", symbol: "ROP", decimals: 18 },
    rpc: [
      "https://ropsten.infura.io/v3/${INFURA_API_KEY}",
      "wss://ropsten.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: ["https://faucet.ropsten.be?${ADDRESS}"],
    infoURL: "https://github.com/ethereum/ropsten"
  },
  {
    name: "Ethereum Testnet Rinkeby",
    chainId: 4,
    shortName: "rin",
    networkId: 4,
    nativeCurrency: { name: "Rinkeby Ether", symbol: "RIN", decimals: 18 },
    rpc: [
      "https://rinkeby.infura.io/v3/${INFURA_API_KEY}",
      "wss://rinkeby.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: ["https://faucet.rinkeby.io"],
    infoURL: "https://www.rinkeby.io"
  },
  {
    name: "Ethereum Testnet G\xF6rli",
    chainId: 5,
    shortName: "gor",
    networkId: 5,
    nativeCurrency: { name: "G\xF6rli Ether", symbol: "GOR", decimals: 18 },
    rpc: [
      "https://rpc.goerli.mudit.blog/",
      "https://rpc.slock.it/goerli",
      "https://goerli.prylabs.net/"
    ],
    faucets: [
      "https://goerli-faucet.slock.it/?address=${ADDRESS}",
      "https://faucet.goerli.mudit.blog"
    ],
    infoURL: "https://goerli.net/#about"
  },
  {
    name: "Ethereum Classic Testnet Kotti",
    chainId: 6,
    shortName: "kot",
    networkId: 6,
    nativeCurrency: { name: "Kotti Ether", symbol: "KOT", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://explorer.jade.builders/?network=kotti"
  },
  {
    name: "ThaiChain",
    chainId: 7,
    shortName: "tch",
    networkId: 7,
    nativeCurrency: { name: "ThaiChain Ether", symbol: "TCH", decimals: 18 },
    rpc: ["https://rpc.dome.cloud"],
    faucets: [],
    infoURL: "https://thaichain.io"
  },
  {
    name: "Ubiq",
    chainId: 8,
    shortName: "ubq",
    networkId: 8,
    nativeCurrency: { name: "Ubiq Ether", symbol: "UBQ", decimals: 18 },
    rpc: ["https://rpc.octano.dev", "https://pyrus2.ubiqscan.io"],
    faucets: [],
    infoURL: "https://ubiqsmart.com"
  },
  {
    name: "Ubiq Network Testnet",
    chainId: 9,
    shortName: "tubq",
    networkId: 2,
    nativeCurrency: {
      name: "Ubiq Testnet Ether",
      symbol: "TUBQ",
      decimals: 18
    },
    rpc: [],
    faucets: [],
    infoURL: "https://ethersocial.org"
  },
  {
    name: "Optimistic Ethereum",
    chainId: 10,
    shortName: "oeth",
    networkId: 10,
    nativeCurrency: { name: "Ether", symbol: "OETH", decimals: 18 },
    rpc: ["https://mainnet.optimism.io/"],
    faucets: [],
    infoURL: "https://optimism.io"
  },
  {
    name: "Metadium Mainnet",
    chainId: 11,
    shortName: "meta",
    networkId: 11,
    nativeCurrency: {
      name: "Metadium Mainnet Ether",
      symbol: "META",
      decimals: 18
    },
    rpc: ["https://api.metadium.com/prod"],
    faucets: [],
    infoURL: "https://metadium.com"
  },
  {
    name: "Metadium Testnet",
    chainId: 12,
    shortName: "kal",
    networkId: 12,
    nativeCurrency: {
      name: "Metadium Testnet Ether",
      symbol: "KAL",
      decimals: 18
    },
    rpc: ["https://api.metadium.com/dev"],
    faucets: [],
    infoURL: "https://metadium.com"
  },
  {
    name: "Diode Testnet Staging",
    chainId: 13,
    shortName: "dstg",
    networkId: 13,
    nativeCurrency: { name: "Staging Diodes", symbol: "sDIODE", decimals: 18 },
    rpc: ["https://staging.diode.io:8443/", "wss://staging.diode.io:8443/ws"],
    faucets: [],
    infoURL: "https://diode.io/staging"
  },
  {
    name: "Flare Mainnet",
    chainId: 14,
    shortName: "flr",
    networkId: 14,
    nativeCurrency: { name: "Spark", symbol: "FLR", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://flare.xyz"
  },
  {
    name: "Diode Prenet",
    chainId: 15,
    shortName: "diode",
    networkId: 15,
    nativeCurrency: { name: "Diodes", symbol: "DIODE", decimals: 18 },
    rpc: ["https://prenet.diode.io:8443/", "wss://prenet.diode.io:8443/ws"],
    faucets: [],
    infoURL: "https://diode.io/prenet"
  },
  {
    name: "Flare Testnet Coston",
    chainId: 16,
    shortName: "cflr",
    networkId: 16,
    nativeCurrency: { name: "Coston Spark", symbol: "CFLR", decimals: 18 },
    rpc: [],
    faucets: ["https://faucet.towolabs.com"],
    infoURL: "https://github.com/flare-eng/coston"
  },
  {
    name: "ThaiChain 2.0 ThaiFi",
    chainId: 17,
    shortName: "tfi",
    networkId: 17,
    nativeCurrency: { name: "Thaifi Ether", symbol: "TFI", decimals: 18 },
    rpc: ["https://rpc.thaifi.com"],
    faucets: [],
    infoURL: "https://exp.thaifi.com"
  },
  {
    name: "ThunderCore Testnet",
    chainId: 18,
    shortName: "TST",
    networkId: 18,
    nativeCurrency: {
      name: "ThunderCore Testnet Ether",
      symbol: "TST",
      decimals: 18
    },
    rpc: ["https://testnet-rpc.thundercore.com"],
    faucets: ["https://faucet-testnet.thundercore.com"],
    infoURL: "https://thundercore.com"
  },
  {
    name: "Songbird Canary-Network",
    chainId: 19,
    shortName: "sgb",
    networkId: 19,
    nativeCurrency: { name: "Songbird", symbol: "SGB", decimals: 18 },
    rpc: ["https://songbird.towolabs.com/rpc"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://flare.xyz"
  },
  {
    name: "ELA-ETH-Sidechain Mainnet",
    chainId: 20,
    shortName: "elaeth",
    networkId: 20,
    nativeCurrency: { name: "Elastos", symbol: "ELA", decimals: 18 },
    rpc: ["https://mainrpc.elaeth.io"],
    faucets: [],
    infoURL: "https://www.elastos.org/"
  },
  {
    name: "ELA-ETH-Sidechain Testnet",
    chainId: 21,
    shortName: "elaetht",
    networkId: 21,
    nativeCurrency: { name: "Elastos", symbol: "tELA", decimals: 18 },
    rpc: ["https://rpc.elaeth.io"],
    faucets: ["https://faucet.elaeth.io/"],
    infoURL: "https://elaeth.io/"
  },
  {
    name: "ELA-DID-Sidechain Mainnet",
    chainId: 22,
    shortName: "eladid",
    networkId: 22,
    nativeCurrency: { name: "Elastos", symbol: "ELA", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://www.elastos.org/"
  },
  {
    name: "ELA-DID-Sidechain Testnet",
    chainId: 23,
    shortName: "eladidt",
    networkId: 23,
    nativeCurrency: { name: "Elastos", symbol: "tELA", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://elaeth.io/"
  },
  {
    name: "Cronos Mainnet Beta",
    chainId: 25,
    shortName: "cro",
    networkId: 25,
    nativeCurrency: { name: "Crypto.org Coin", symbol: "CRO", decimals: 18 },
    rpc: ["https://evm-cronos.crypto.org"],
    faucets: [],
    infoURL: "https://cronos.crypto.org"
  },
  {
    name: "ShibaChain",
    chainId: 27,
    shortName: "shib",
    networkId: 27,
    nativeCurrency: { name: "SHIBA INU COIN", symbol: "SHIB", decimals: 18 },
    rpc: ["https://rpc.shibachain.net"],
    faucets: [],
    infoURL: "https://www.shibachain.net"
  },
  {
    name: "Boba Network Rinkeby Testnet",
    chainId: 28,
    shortName: "Boba Rinkeby",
    networkId: 28,
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpc: ["https://rinkeby.boba.network/"],
    faucets: [],
    infoURL: "https://boba.network"
  },
  {
    name: "RSK Mainnet",
    chainId: 30,
    shortName: "rsk",
    networkId: 30,
    nativeCurrency: { name: "RSK Mainnet Ether", symbol: "RBTC", decimals: 18 },
    rpc: ["https://public-node.rsk.co", "https://mycrypto.rsk.co"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://rsk.co"
  },
  {
    name: "RSK Testnet",
    chainId: 31,
    shortName: "trsk",
    networkId: 31,
    nativeCurrency: {
      name: "RSK Testnet Ether",
      symbol: "tRBTC",
      decimals: 18
    },
    rpc: [
      "https://public-node.testnet.rsk.co",
      "https://mycrypto.testnet.rsk.co"
    ],
    faucets: ["https://faucet.testnet.rsk.co"],
    infoURL: "https://rsk.co"
  },
  {
    name: "GoodData Testnet",
    chainId: 32,
    shortName: "GooDT",
    networkId: 32,
    nativeCurrency: {
      name: "GoodData Testnet Ether",
      symbol: "GooD",
      decimals: 18
    },
    rpc: ["https://test2.goodata.io"],
    faucets: [],
    infoURL: "https://www.goodata.org"
  },
  {
    name: "GoodData Mainnet",
    chainId: 33,
    shortName: "GooD",
    networkId: 33,
    nativeCurrency: {
      name: "GoodData Mainnet Ether",
      symbol: "GooD",
      decimals: 18
    },
    rpc: ["https://rpc.goodata.io"],
    faucets: [],
    infoURL: "https://www.goodata.org"
  },
  {
    name: "TBWG Chain",
    chainId: 35,
    shortName: "tbwg",
    networkId: 35,
    nativeCurrency: { name: "TBWG Ether", symbol: "TBG", decimals: 18 },
    rpc: ["https://rpc.tbwg.io"],
    faucets: [],
    infoURL: "https://tbwg.io"
  },
  {
    name: "Valorbit",
    chainId: 38,
    shortName: "val",
    networkId: 38,
    nativeCurrency: { name: "Valorbit", symbol: "VAL", decimals: 18 },
    rpc: ["https://rpc.valorbit.com/v2"],
    faucets: [],
    infoURL: "https://valorbit.com"
  },
  {
    name: "Telos EVM Mainnet",
    chainId: 40,
    shortName: "Telos EVM",
    networkId: 40,
    nativeCurrency: { name: "Telos", symbol: "TLOS", decimals: 18 },
    rpc: ["https://mainnet.telos.net/evm"],
    faucets: [],
    infoURL: "https://telos.net"
  },
  {
    name: "Telos EVM Testnet",
    chainId: 41,
    shortName: "Telos EVM Testnet",
    networkId: 41,
    nativeCurrency: { name: "Telos", symbol: "TLOS", decimals: 18 },
    rpc: ["https://testnet.telos.net/evm"],
    faucets: ["https://app.telos.net/testnet/developers"],
    infoURL: "https://telos.net"
  },
  {
    name: "Ethereum Testnet Kovan",
    chainId: 42,
    shortName: "kov",
    networkId: 42,
    nativeCurrency: { name: "Kovan Ether", symbol: "KOV", decimals: 18 },
    rpc: [
      "https://kovan.poa.network",
      "http://kovan.poa.network:8545",
      "https://kovan.infura.io/v3/${INFURA_API_KEY}",
      "wss://kovan.infura.io/ws/v3/${INFURA_API_KEY}",
      "ws://kovan.poa.network:8546"
    ],
    faucets: [
      "https://faucet.kovan.network",
      "https://gitter.im/kovan-testnet/faucet"
    ],
    infoURL: "https://kovan-testnet.github.io/website"
  },
  {
    name: "Darwinia Pangolin Testnet",
    chainId: 43,
    shortName: "darwinia",
    networkId: 43,
    nativeCurrency: { name: "Pangolin RING", symbol: "PRING", decimals: 9 },
    rpc: [],
    faucets: [],
    infoURL: "https://darwinia.network/"
  },
  {
    name: "Darwinia Crab Network",
    chainId: 44,
    shortName: "crab",
    networkId: 44,
    nativeCurrency: { name: "Crab Token", symbol: "CRING", decimals: 9 },
    rpc: [],
    faucets: [],
    infoURL: "https://crab.network/"
  },
  {
    name: "XinFin Network Mainnet",
    chainId: 50,
    shortName: "xdc",
    networkId: 50,
    nativeCurrency: { name: "XinFin", symbol: "XDC", decimals: 18 },
    rpc: ["https://rpc.xinfin.network"],
    faucets: [],
    infoURL: "https://xinfin.org"
  },
  {
    name: "XinFin Apothem Testnet",
    chainId: 51,
    shortName: "TXDC",
    networkId: 51,
    nativeCurrency: { name: "XinFinTest", symbol: "TXDC", decimals: 18 },
    rpc: ["https://rpc.apothem.network"],
    faucets: [],
    infoURL: "https://xinfin.org"
  },
  {
    name: "CoinEx Smart Chain Mainnet",
    chainId: 52,
    shortName: "cet",
    networkId: 52,
    nativeCurrency: {
      name: "CoinEx Chain Native Token",
      symbol: "cet",
      decimals: 18
    },
    rpc: ["https://rpc-mainnet.coinex.net"],
    faucets: [],
    infoURL: "http://www.coinex.org/"
  },
  {
    name: "CoinEx Smart Chain Testnet",
    chainId: 53,
    shortName: "tcet",
    networkId: 53,
    nativeCurrency: {
      name: "CoinEx Chain Test Native Token",
      symbol: "cett",
      decimals: 18
    },
    rpc: ["https://rpc-testnet.coinex.net"],
    faucets: [],
    infoURL: "http://www.coinex.org/"
  },
  {
    name: "Zyx Mainnet",
    chainId: 55,
    shortName: "ZYX",
    networkId: 55,
    nativeCurrency: { name: "Zyx", symbol: "ZYX", decimals: 18 },
    rpc: [
      "https://rpc-1.zyx.network/",
      "https://rpc-2.zyx.network/",
      "https://rpc-3.zyx.network/",
      "https://rpc-4.zyx.network/",
      "https://rpc-5.zyx.network/",
      "https://rpc-6.zyx.network/"
    ],
    faucets: [],
    infoURL: "https://zyx.network/"
  },
  {
    name: "Binance Smart Chain Mainnet",
    chainId: 56,
    shortName: "bnb",
    networkId: 56,
    nativeCurrency: {
      name: "Binance Chain Native Token",
      symbol: "BNB",
      decimals: 18
    },
    rpc: [
      "https://bsc-dataseed1.binance.org",
      "https://bsc-dataseed2.binance.org",
      "https://bsc-dataseed3.binance.org",
      "https://bsc-dataseed4.binance.org",
      "https://bsc-dataseed1.defibit.io",
      "https://bsc-dataseed2.defibit.io",
      "https://bsc-dataseed3.defibit.io",
      "https://bsc-dataseed4.defibit.io",
      "https://bsc-dataseed1.ninicoin.io",
      "https://bsc-dataseed2.ninicoin.io",
      "https://bsc-dataseed3.ninicoin.io",
      "https://bsc-dataseed4.ninicoin.io",
      "wss://bsc-ws-node.nariox.org"
    ],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://www.binance.org"
  },
  {
    name: "Ontology Mainnet",
    chainId: 58,
    shortName: "Ontology Mainnet",
    networkId: 58,
    nativeCurrency: { name: "ONG", symbol: "ONG", decimals: 9 },
    rpc: [
      "https://dappnode1.ont.io:20339",
      "https://dappnode2.ont.io:20339",
      "https://dappnode3.ont.io:20339",
      "https://dappnode4.ont.io:20339"
    ],
    faucets: [],
    infoURL: "https://ont.io/"
  },
  {
    name: "EOS Mainnet",
    chainId: 59,
    shortName: "EOS Mainnet",
    networkId: 59,
    nativeCurrency: { name: "EOS", symbol: "EOS", decimals: 18 },
    rpc: ["https://api.eosargentina.io"],
    faucets: [],
    infoURL: "https://eoscommunity.org/"
  },
  {
    name: "GoChain",
    chainId: 60,
    shortName: "go",
    networkId: 60,
    nativeCurrency: { name: "GoChain Ether", symbol: "GO", decimals: 18 },
    rpc: ["https://rpc.gochain.io"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://gochain.io"
  },
  {
    name: "Ethereum Classic Mainnet",
    chainId: 61,
    shortName: "etc",
    networkId: 1,
    nativeCurrency: {
      name: "Ethereum Classic Ether",
      symbol: "ETC",
      decimals: 18
    },
    rpc: ["https://ethereumclassic.network"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/?"],
    infoURL: "https://ethereumclassic.org"
  },
  {
    name: "Ethereum Classic Testnet Morden",
    chainId: 62,
    shortName: "tetc",
    networkId: 2,
    nativeCurrency: {
      name: "Ethereum Classic Testnet Ether",
      symbol: "TETC",
      decimals: 18
    },
    rpc: [],
    faucets: [],
    infoURL: "https://ethereumclassic.org"
  },
  {
    name: "Ethereum Classic Testnet Mordor",
    chainId: 63,
    shortName: "metc",
    networkId: 7,
    nativeCurrency: {
      name: "Mordor Classic Testnet Ether",
      symbol: "METC",
      decimals: 18
    },
    rpc: [],
    faucets: [],
    infoURL: "https://github.com/eth-classic/mordor/"
  },
  {
    name: "Ellaism",
    chainId: 64,
    shortName: "ella",
    networkId: 64,
    nativeCurrency: { name: "Ellaism Ether", symbol: "ELLA", decimals: 18 },
    rpc: ["https://jsonrpc.ellaism.org"],
    faucets: [],
    infoURL: "https://ellaism.org"
  },
  {
    name: "OKExChain Testnet",
    chainId: 65,
    shortName: "tokt",
    networkId: 65,
    nativeCurrency: {
      name: "OKExChain Global Utility Token in testnet",
      symbol: "OKT",
      decimals: 18
    },
    rpc: ["https://exchaintestrpc.okex.org"],
    faucets: ["https://www.okex.com/drawdex"],
    infoURL: "https://www.okex.com/okexchain"
  },
  {
    name: "OKExChain Mainnet",
    chainId: 66,
    shortName: "okt",
    networkId: 66,
    nativeCurrency: {
      name: "OKExChain Global Utility Token",
      symbol: "OKT",
      decimals: 18
    },
    rpc: ["https://exchainrpc.okex.org"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/?"],
    infoURL: "https://www.okex.com/okexchain"
  },
  {
    name: "DBChain Testnet",
    chainId: 67,
    shortName: "dbm",
    networkId: 67,
    nativeCurrency: { name: "DBChain Testnet", symbol: "DBM", decimals: 18 },
    rpc: ["http://test-rpc.dbmbp.com"],
    faucets: [],
    infoURL: "http://test.dbmbp.com"
  },
  {
    name: "SoterOne Mainnet",
    chainId: 68,
    shortName: "SO1",
    networkId: 68,
    nativeCurrency: {
      name: "SoterOne Mainnet Ether",
      symbol: "SOTER",
      decimals: 18
    },
    rpc: ["https://rpc.soter.one"],
    faucets: [],
    infoURL: "https://www.soterone.com"
  },
  {
    name: "Optimistic Ethereum Testnet Kovan",
    chainId: 69,
    shortName: "okov",
    networkId: 69,
    nativeCurrency: { name: "Kovan Ether", symbol: "KOR", decimals: 18 },
    rpc: ["https://kovan.optimism.io/"],
    faucets: [],
    infoURL: "https://optimism.io"
  },
  {
    name: "Mix",
    chainId: 76,
    shortName: "mix",
    networkId: 76,
    nativeCurrency: { name: "Mix Ether", symbol: "MIX", decimals: 18 },
    rpc: ["https://rpc2.mix-blockchain.org:8647"],
    faucets: [],
    infoURL: "https://mix-blockchain.org"
  },
  {
    name: "POA Network Sokol",
    chainId: 77,
    shortName: "skl",
    networkId: 77,
    nativeCurrency: { name: "POA Sokol Ether", symbol: "SKL", decimals: 18 },
    rpc: [
      "https://sokol.poa.network",
      "wss://sokol.poa.network/wss",
      "ws://sokol.poa.network:8546"
    ],
    faucets: ["https://faucet-sokol.herokuapp.com"],
    infoURL: "https://poa.network"
  },
  {
    name: "PrimusChain mainnet",
    chainId: 78,
    shortName: "primuschain",
    networkId: 78,
    nativeCurrency: { name: "Primus Ether", symbol: "PETH", decimals: 18 },
    rpc: ["https://ethnode.primusmoney.com/mainnet"],
    faucets: [],
    infoURL: "https://primusmoney.com"
  },
  {
    name: "GeneChain",
    chainId: 80,
    shortName: "GeneChain",
    networkId: 80,
    nativeCurrency: { name: "RNA", symbol: "RNA", decimals: 18 },
    rpc: ["https://rpc.genechain.io"],
    faucets: [],
    infoURL: "https://scan.genechain.io/"
  },
  {
    name: "Meter Mainnet",
    chainId: 82,
    shortName: "Meter",
    networkId: 82,
    nativeCurrency: { name: "Meter", symbol: "MTR", decimals: 18 },
    rpc: ["https://rpc.meter.io"],
    faucets: ["https://faucet.meter.io"],
    infoURL: "https://www.meter.io"
  },
  {
    name: "Meter Testnet",
    chainId: 83,
    shortName: "MeterTest",
    networkId: 83,
    nativeCurrency: { name: "Meter", symbol: "MTR", decimals: 18 },
    rpc: ["https://rpctest.meter.io"],
    faucets: ["https://faucet-warringstakes.meter.io"],
    infoURL: "https://www.meter.io"
  },
  {
    name: "GateChain Testnet",
    chainId: 85,
    shortName: "gttest",
    networkId: 85,
    nativeCurrency: { name: "GateToken", symbol: "GT", decimals: 18 },
    rpc: ["https://testnet.gatenode.cc"],
    faucets: ["https://www.gatescan.org/testnet/faucet"],
    infoURL: "https://www.gatechain.io"
  },
  {
    name: "GateChain Mainnet",
    chainId: 86,
    shortName: "gt",
    networkId: 86,
    nativeCurrency: { name: "GateToken", symbol: "GT", decimals: 18 },
    rpc: ["https://evm.gatenode.cc"],
    faucets: ["https://www.gatescan.org/faucet"],
    infoURL: "https://www.gatechain.io"
  },
  {
    name: "TomoChain",
    chainId: 88,
    shortName: "tomo",
    networkId: 88,
    nativeCurrency: { name: "TomoChain Ether", symbol: "TOMO", decimals: 18 },
    rpc: ["https://rpc.tomochain.com"],
    faucets: [],
    infoURL: "https://tomocoin.io"
  },
  {
    name: "CryptoKylin Testnet",
    chainId: 95,
    shortName: "Kylin Testnet",
    networkId: 95,
    nativeCurrency: { name: "EOS", symbol: "EOS", decimals: 18 },
    rpc: ["https://kylin.eosargentina.io"],
    faucets: [],
    infoURL: "https://www.cryptokylin.io/"
  },
  {
    name: "NEXT Smart Chain",
    chainId: 96,
    shortName: "nsc",
    networkId: 96,
    nativeCurrency: { name: "NEXT", symbol: "NEXT", decimals: 18 },
    rpc: ["https://rpc.nextsmartchain.com"],
    faucets: ["https://faucet.nextsmartchain.com"],
    infoURL: "https://www.nextsmartchain.com/"
  },
  {
    name: "Binance Smart Chain Testnet",
    chainId: 97,
    shortName: "bnbt",
    networkId: 97,
    nativeCurrency: {
      name: "Binance Chain Native Token",
      symbol: "tBNB",
      decimals: 18
    },
    rpc: [
      "https://data-seed-prebsc-1-s1.binance.org:8545",
      "https://data-seed-prebsc-2-s1.binance.org:8545",
      "https://data-seed-prebsc-1-s2.binance.org:8545",
      "https://data-seed-prebsc-2-s2.binance.org:8545",
      "https://data-seed-prebsc-1-s3.binance.org:8545",
      "https://data-seed-prebsc-2-s3.binance.org:8545"
    ],
    faucets: ["https://testnet.binance.org/faucet-smart"],
    infoURL: "https://testnet.binance.org/"
  },
  {
    name: "POA Network Core",
    chainId: 99,
    shortName: "poa",
    networkId: 99,
    nativeCurrency: {
      name: "POA Network Core Ether",
      symbol: "POA",
      decimals: 18
    },
    rpc: [
      "https://core.poanetwork.dev",
      "http://core.poanetwork.dev:8545",
      "https://core.poa.network",
      "ws://core.poanetwork.dev:8546"
    ],
    faucets: [],
    infoURL: "https://poa.network"
  },
  {
    name: "xDAI Chain",
    chainId: 100,
    shortName: "xdai",
    networkId: 100,
    nativeCurrency: { name: "xDAI", symbol: "xDAI", decimals: 18 },
    rpc: [
      "https://rpc.xdaichain.com",
      "https://xdai.poanetwork.dev",
      "wss://rpc.xdaichain.com/wss",
      "wss://xdai.poanetwork.dev/wss",
      "http://xdai.poanetwork.dev",
      "https://dai.poa.network",
      "ws://xdai.poanetwork.dev:8546"
    ],
    faucets: [
      "https://free-online-app.com/faucet-for-eth-evm-chains/",
      "https://xdai-app.herokuapp.com/faucet"
    ],
    infoURL: "https://forum.poa.network/c/xdai-chain"
  },
  {
    name: "EtherInc",
    chainId: 101,
    shortName: "eti",
    networkId: 1,
    nativeCurrency: { name: "EtherInc Ether", symbol: "ETI", decimals: 18 },
    rpc: ["https://api.einc.io/jsonrpc/mainnet"],
    faucets: [],
    infoURL: "https://einc.io"
  },
  {
    name: "Web3Games Testnet",
    chainId: 102,
    shortName: "w3g",
    networkId: 102,
    nativeCurrency: { name: "Web3Games", symbol: "W3G", decimals: 18 },
    rpc: ["https://substrate.org.cn"],
    faucets: [],
    infoURL: "https://web3games.org/"
  },
  {
    name: "Velas EVM Mainnet",
    chainId: 106,
    shortName: "vlx",
    networkId: 106,
    nativeCurrency: { name: "Velas", symbol: "VLX", decimals: 18 },
    rpc: [
      "https://evmexplorer.velas.com/rpc",
      "https://explorer.velas.com/rpc"
    ],
    faucets: [],
    infoURL: "https://velas.com"
  },
  {
    name: "ThunderCore Mainnet",
    chainId: 108,
    shortName: "TT",
    networkId: 108,
    nativeCurrency: {
      name: "ThunderCore Mainnet Ether",
      symbol: "TT",
      decimals: 18
    },
    rpc: ["https://mainnet-rpc.thundercore.com"],
    faucets: ["https://faucet.thundercore.com"],
    infoURL: "https://thundercore.com"
  },
  {
    name: "Proton Testnet",
    chainId: 110,
    shortName: "xpr",
    networkId: 110,
    nativeCurrency: { name: "Proton", symbol: "XPR", decimals: 4 },
    rpc: ["https://protontestnet.greymass.com/"],
    faucets: [],
    infoURL: "https://protonchain.com"
  },
  {
    name: "EtherLite Chain",
    chainId: 111,
    shortName: "ETL",
    networkId: 111,
    nativeCurrency: { name: "EtherLite", symbol: "ETL", decimals: 18 },
    rpc: ["https://rpc.etherlite.org"],
    faucets: ["https://etherlite.org/faucets"],
    infoURL: "https://etherlite.org"
  },
  {
    name: "Fuse Mainnet",
    chainId: 122,
    shortName: "fuse",
    networkId: 122,
    nativeCurrency: { name: "Fuse", symbol: "FUSE", decimals: 18 },
    rpc: ["https://rpc.fuse.io"],
    faucets: [],
    infoURL: "https://fuse.io/"
  },
  {
    name: "Fuse Sparknet",
    chainId: 123,
    shortName: "spark",
    networkId: 123,
    nativeCurrency: { name: "Spark", symbol: "SPARK", decimals: 18 },
    rpc: ["https://rpc.fusespark.io"],
    faucets: ["https://get.fusespark.io"],
    infoURL: "https://docs.fuse.io/general/fuse-network-blockchain/fuse-testnet"
  },
  {
    name: "Decentralized Web Mainnet",
    chainId: 124,
    shortName: "dwu",
    networkId: 124,
    nativeCurrency: {
      name: "Decentralized Web Utility",
      symbol: "DWU",
      decimals: 18
    },
    rpc: ["https://decentralized-web.tech/dw_rpc.php"],
    faucets: [],
    infoURL: "https://decentralized-web.tech/dw_chain.php"
  },
  {
    name: "Factory 127 Mainnet",
    chainId: 127,
    shortName: "feth",
    networkId: 127,
    nativeCurrency: { name: "Factory 127 Token", symbol: "FETH", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://www.factory127.com"
  },
  {
    name: "Huobi ECO Chain Mainnet",
    chainId: 128,
    shortName: "heco",
    networkId: 128,
    nativeCurrency: {
      name: "Huobi ECO Chain Native Token",
      symbol: "HT",
      decimals: 18
    },
    rpc: [
      "https://http-mainnet.hecochain.com",
      "wss://ws-mainnet.hecochain.com"
    ],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://www.hecochain.com"
  },
  {
    name: "Polygon Mainnet",
    chainId: 137,
    shortName: "MATIC",
    networkId: 137,
    nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
    rpc: [
      "https://polygon-rpc.com/",
      "https://rpc-mainnet.matic.network",
      "https://matic-mainnet.chainstacklabs.com",
      "https://rpc-mainnet.maticvigil.com",
      "https://rpc-mainnet.matic.quiknode.pro",
      "https://matic-mainnet-full-rpc.bwarelabs.com"
    ],
    faucets: [],
    infoURL: "https://polygon.technology/"
  },
  {
    name: "DAX CHAIN",
    chainId: 142,
    shortName: "dax",
    networkId: 142,
    nativeCurrency: { name: "Prodax", symbol: "DAX", decimals: 18 },
    rpc: ["https://rpc.prodax.io"],
    faucets: [],
    infoURL: "https://prodax.io/"
  },
  {
    name: "Lightstreams Testnet",
    chainId: 162,
    shortName: "tpht",
    networkId: 162,
    nativeCurrency: { name: "Lightstreams PHT", symbol: "PHT", decimals: 18 },
    rpc: ["https://node.sirius.lightstreams.io"],
    faucets: ["https://discuss.lightstreams.network/t/request-test-tokens"],
    infoURL: "https://explorer.sirius.lightstreams.io"
  },
  {
    name: "Lightstreams Mainnet",
    chainId: 163,
    shortName: "pht",
    networkId: 163,
    nativeCurrency: { name: "Lightstreams PHT", symbol: "PHT", decimals: 18 },
    rpc: ["https://node.mainnet.lightstreams.io"],
    faucets: [],
    infoURL: "https://explorer.lightstreams.io"
  },
  {
    name: "HOO Smart Chain Testnet",
    chainId: 170,
    shortName: "hoosmartchain",
    networkId: 170,
    nativeCurrency: { name: "HOO", symbol: "HOO", decimals: 18 },
    rpc: ["https://http-testnet.hoosmartchain.com"],
    faucets: ["https://faucet-testnet.hscscan.com/"],
    infoURL: "https://www.hoosmartchain.com"
  },
  {
    name: "Latam-Blockchain Resil Testnet",
    chainId: 172,
    shortName: "resil",
    networkId: 172,
    nativeCurrency: {
      name: "Latam-Blockchain Resil Test Native Token",
      symbol: "usd",
      decimals: 18
    },
    rpc: ["https://rpc.latam-blockchain.com", "wss://ws.latam-blockchain.com"],
    faucets: ["https://faucet.latam-blockchain.com"],
    infoURL: "https://latam-blockchain.com"
  },
  {
    name: "Seele Mainnet",
    chainId: 186,
    shortName: "Seele",
    networkId: 186,
    nativeCurrency: { name: "Seele", symbol: "Seele", decimals: 18 },
    rpc: ["https://rpc.seelen.pro/"],
    faucets: [],
    infoURL: "https://seelen.pro/"
  },
  {
    name: "BitTorrent Chain Mainnet",
    chainId: 199,
    shortName: "BTT",
    networkId: 199,
    nativeCurrency: { name: "BitTorrent", symbol: "BTT", decimals: 18 },
    rpc: ["https://rpc.bittorrentchain.io/"],
    faucets: [],
    infoURL: "https://bittorrentchain.io/"
  },
  {
    name: "Arbitrum on xDai",
    chainId: 200,
    shortName: "aox",
    networkId: 200,
    nativeCurrency: { name: "xDAI", symbol: "xDAI", decimals: 18 },
    rpc: ["https://arbitrum.xdaichain.com/"],
    faucets: [],
    infoURL: "https://xdaichain.com"
  },
  {
    name: "Freight Trust Network",
    chainId: 211,
    shortName: "EDI",
    networkId: 0,
    nativeCurrency: {
      name: "Freight Trust Native",
      symbol: "0xF",
      decimals: 18
    },
    rpc: [
      "http://13.57.207.168:3435",
      "https://app.freighttrust.net/ftn/${API_KEY}"
    ],
    faucets: ["http://faucet.freight.sh"],
    infoURL: "https://freighttrust.com"
  },
  {
    name: "Permission",
    chainId: 222,
    shortName: "ASK",
    networkId: 2221,
    nativeCurrency: { name: "ASK", symbol: "ASK", decimals: 18 },
    rpc: ["https://blockchain-api-mainnet.permission.io/rpc"],
    faucets: [],
    infoURL: "https://permission.io/"
  },
  {
    name: "Energy Web Chain",
    chainId: 246,
    shortName: "ewt",
    networkId: 246,
    nativeCurrency: { name: "Energy Web Token", symbol: "EWT", decimals: 18 },
    rpc: ["https://rpc.energyweb.org", "wss://rpc.energyweb.org/ws"],
    faucets: [
      "https://faucet.carbonswap.exchange",
      "https://free-online-app.com/faucet-for-eth-evm-chains/"
    ],
    infoURL: "https://energyweb.org"
  },
  {
    name: "Fantom Opera",
    chainId: 250,
    shortName: "ftm",
    networkId: 250,
    nativeCurrency: { name: "Fantom", symbol: "FTM", decimals: 18 },
    rpc: ["https://rpc.ftm.tools"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://fantom.foundation"
  },
  {
    name: "Huobi ECO Chain Testnet",
    chainId: 256,
    shortName: "hecot",
    networkId: 256,
    nativeCurrency: {
      name: "Huobi ECO Chain Test Native Token",
      symbol: "htt",
      decimals: 18
    },
    rpc: [
      "https://http-testnet.hecochain.com",
      "wss://ws-testnet.hecochain.com"
    ],
    faucets: ["https://scan-testnet.hecochain.com/faucet"],
    infoURL: "https://testnet.hecoinfo.com"
  },
  {
    name: "SUR Blockchain Network",
    chainId: 262,
    shortName: "SUR",
    networkId: 1,
    nativeCurrency: { name: "Suren", symbol: "SRN", decimals: 18 },
    rpc: ["https://sur.nilin.org"],
    faucets: [],
    infoURL: "https://surnet.org"
  },
  {
    name: "High Performance Blockchain",
    chainId: 269,
    shortName: "hpb",
    networkId: 269,
    nativeCurrency: {
      name: "High Performance Blockchain Ether",
      symbol: "HPB",
      decimals: 18
    },
    rpc: ["https://hpbnode.com", "wss://ws.hpbnode.com"],
    faucets: ["https://myhpbwallet.com/"],
    infoURL: "https://hpb.io"
  },
  {
    name: "Boba Network",
    chainId: 288,
    shortName: "Boba",
    networkId: 288,
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpc: ["https://mainnet.boba.network/"],
    faucets: [],
    infoURL: "https://boba.network"
  },
  {
    name: "KCC Mainnet",
    chainId: 321,
    shortName: "kcs",
    networkId: 1,
    nativeCurrency: { name: "KuCoin Token", symbol: "KCS", decimals: 18 },
    rpc: [
      "https://rpc-mainnet.kcc.network",
      "wss://rpc-ws-mainnet.kcc.network"
    ],
    faucets: [],
    infoURL: "https://kcc.io"
  },
  {
    name: "KCC Testnet",
    chainId: 322,
    shortName: "kcst",
    networkId: 322,
    nativeCurrency: {
      name: "KuCoin Testnet Token",
      symbol: "tKCS",
      decimals: 18
    },
    rpc: [
      "https://rpc-testnet.kcc.network",
      "wss://rpc-ws-testnet.kcc.network"
    ],
    faucets: ["https://faucet-testnet.kcc.network"],
    infoURL: "https://scan-testnet.kcc.network"
  },
  {
    name: "Shiden",
    chainId: 336,
    shortName: "sdn",
    networkId: 336,
    nativeCurrency: { name: "Shiden", symbol: "SDN", decimals: 18 },
    rpc: [
      "https://rpc.shiden.astar.network:8545",
      "wss://shiden.api.onfinality.io/public-ws"
    ],
    faucets: [],
    infoURL: "https://shiden.astar.network/"
  },
  {
    name: "Cronos Testnet",
    chainId: 338,
    shortName: "tcro",
    networkId: 338,
    nativeCurrency: {
      name: "Crypto.org Test Coin",
      symbol: "TCRO",
      decimals: 18
    },
    rpc: [
      "https://cronos-testnet-3.crypto.org:8545",
      "wss://cronos-testnet-3.crypto.org:8546"
    ],
    faucets: ["https://cronos.crypto.org/faucet"],
    infoURL: "https://cronos.crypto.org"
  },
  {
    name: "Theta Mainnet",
    chainId: 361,
    shortName: "theta-mainnet",
    networkId: 361,
    nativeCurrency: { name: "Theta Fuel", symbol: "TFUEL", decimals: 18 },
    rpc: ["https://eth-rpc-api.thetatoken.org/rpc"],
    faucets: [],
    infoURL: "https://www.thetatoken.org/"
  },
  {
    name: "Theta Sapphire Testnet",
    chainId: 363,
    shortName: "theta-sapphire",
    networkId: 363,
    nativeCurrency: { name: "Theta Fuel", symbol: "TFUEL", decimals: 18 },
    rpc: ["https://eth-rpc-api-sapphire.thetatoken.org/rpc"],
    faucets: [],
    infoURL: "https://www.thetatoken.org/"
  },
  {
    name: "Theta Amber Testnet",
    chainId: 364,
    shortName: "theta-amber",
    networkId: 364,
    nativeCurrency: { name: "Theta Fuel", symbol: "TFUEL", decimals: 18 },
    rpc: ["https://eth-rpc-api-amber.thetatoken.org/rpc"],
    faucets: [],
    infoURL: "https://www.thetatoken.org/"
  },
  {
    name: "Theta Testnet",
    chainId: 365,
    shortName: "theta-testnet",
    networkId: 365,
    nativeCurrency: { name: "Theta Fuel", symbol: "TFUEL", decimals: 18 },
    rpc: ["https://eth-rpc-api-testnet.thetatoken.org/rpc"],
    faucets: [],
    infoURL: "https://www.thetatoken.org/"
  },
  {
    name: "PulseChain Mainnet",
    chainId: 369,
    shortName: "pls",
    networkId: 369,
    nativeCurrency: { name: "Pulse", symbol: "PLS", decimals: 18 },
    rpc: [
      "https://rpc.mainnet.pulsechain.com/v1/${PULSECHAIN_API_KEY}",
      "wss://rpc.mainnet.pulsechain.com/ws/v1/${PULSECHAIN_API_KEY}"
    ],
    faucets: [],
    infoURL: "https://pulsechain.com/"
  },
  {
    name: "Lisinski",
    chainId: 385,
    shortName: "lisinski",
    networkId: 385,
    nativeCurrency: {
      name: "Lisinski Ether",
      symbol: "LISINSKI",
      decimals: 18
    },
    rpc: ["https://rpc-bitfalls1.lisinski.online"],
    faucets: ["https://pipa.lisinski.online"],
    infoURL: "https://lisinski.online"
  },
  {
    name: "Optimistic Ethereum Testnet Goerli",
    chainId: 420,
    shortName: "ogor",
    networkId: 420,
    nativeCurrency: { name: "G\xF6rli Ether", symbol: "GOR", decimals: 18 },
    rpc: ["https://goerli.optimism.io/"],
    faucets: [],
    infoURL: "https://optimism.io"
  },
  {
    name: "Rupaya",
    chainId: 499,
    shortName: "rupx",
    networkId: 499,
    nativeCurrency: { name: "Rupaya", symbol: "RUPX", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://www.rupx.io"
  },
  {
    name: "Tao Network",
    chainId: 558,
    shortName: "tao",
    networkId: 558,
    nativeCurrency: { name: "Tao", symbol: "TAO", decimals: 18 },
    rpc: [
      "https://rpc.testnet.tao.network",
      "http://rpc.testnet.tao.network:8545",
      "https://rpc.tao.network",
      "wss://rpc.tao.network"
    ],
    faucets: [],
    infoURL: "https://tao.network"
  },
  {
    name: "Acala Mandala Testnet",
    chainId: 595,
    shortName: "maca",
    networkId: 595,
    nativeCurrency: {
      name: "Acala Mandala Token",
      symbol: "mACA",
      decimals: 18
    },
    rpc: [],
    faucets: [],
    infoURL: "https://acala.network"
  },
  {
    name: "Karura Network",
    chainId: 686,
    shortName: "kar",
    networkId: 686,
    nativeCurrency: { name: "Karura Token", symbol: "KAR", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://karura.network"
  },
  {
    name: "Factory 127 Testnet",
    chainId: 721,
    shortName: "tfeth",
    networkId: 721,
    nativeCurrency: { name: "Factory 127 Token", symbol: "FETH", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://www.factory127.com"
  },
  {
    name: "cheapETH",
    chainId: 777,
    shortName: "cth",
    networkId: 777,
    nativeCurrency: { name: "cTH", symbol: "cTH", decimals: 18 },
    rpc: ["https://node.cheapeth.org/rpc"],
    faucets: [],
    infoURL: "https://cheapeth.org/"
  },
  {
    name: "Acala Network",
    chainId: 787,
    shortName: "aca",
    networkId: 787,
    nativeCurrency: { name: "Acala Token", symbol: "ACA", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://acala.network"
  },
  {
    name: "Haic",
    chainId: 803,
    shortName: "haic",
    networkId: 803,
    nativeCurrency: { name: "Haicoin", symbol: "HAIC", decimals: 18 },
    rpc: ["https://orig.haichain.io/"],
    faucets: [],
    infoURL: "https://www.haichain.io/"
  },
  {
    name: "Callisto Mainnet",
    chainId: 820,
    shortName: "clo",
    networkId: 1,
    nativeCurrency: {
      name: "Callisto Mainnet Ether",
      symbol: "CLO",
      decimals: 18
    },
    rpc: ["https://clo-geth.0xinfra.com"],
    faucets: [],
    infoURL: "https://callisto.network"
  },
  {
    name: "Callisto Testnet",
    chainId: 821,
    shortName: "tclo",
    networkId: 2,
    nativeCurrency: {
      name: "Callisto Testnet Ether",
      symbol: "TCLO",
      decimals: 18
    },
    rpc: [],
    faucets: [],
    infoURL: "https://callisto.network"
  },
  {
    name: "Ambros Chain Mainnet",
    chainId: 880,
    shortName: "ambros",
    networkId: 880,
    nativeCurrency: { name: "AMBROS", symbol: "AMBR", decimals: 18 },
    rpc: ["https://mainnet.ambroschain.com"],
    faucets: [],
    infoURL: "https://bcmhunt.com/"
  },
  {
    name: "Wanchain",
    chainId: 888,
    shortName: "wan",
    networkId: 888,
    nativeCurrency: { name: "Wancoin", symbol: "WAN", decimals: 18 },
    rpc: ["https://gwan-ssl.wandevs.org:56891/"],
    faucets: [],
    infoURL: "https://www.wanscan.org"
  },
  {
    name: "PulseChain Testnet",
    chainId: 940,
    shortName: "tpls",
    networkId: 940,
    nativeCurrency: { name: "Test Pulse", symbol: "tPLS", decimals: 18 },
    rpc: [
      "https://rpc.testnet.pulsechain.com/v1/${PULSECHAIN_API_KEY}",
      "wss://rpc.testnet.pulsechain.com/ws/v1/${PULSECHAIN_API_KEY}"
    ],
    faucets: [],
    infoURL: "https://pulsechain.com/"
  },
  {
    name: "Nepal Blockchain Network",
    chainId: 977,
    shortName: "yeti",
    networkId: 977,
    nativeCurrency: {
      name: "Nepal Blockchain Network Ether",
      symbol: "YETI",
      decimals: 18
    },
    rpc: [
      "https://api.nepalblockchain.dev",
      "https://api.nepalblockchain.network"
    ],
    faucets: ["https://faucet.nepalblockchain.network"],
    infoURL: "https://nepalblockchain.network"
  },
  {
    name: "Lucky Network",
    chainId: 998,
    shortName: "ln",
    networkId: 998,
    nativeCurrency: { name: "Lucky", symbol: "L99", decimals: 18 },
    rpc: [
      "https://rpc.luckynetwork.org",
      "wss://ws.lnscan.org",
      "https://rpc.lnscan.org"
    ],
    faucets: [],
    infoURL: "https://luckynetwork.org"
  },
  {
    name: "Wanchain Testnet",
    chainId: 999,
    shortName: "twan",
    networkId: 999,
    nativeCurrency: { name: "Wancoin", symbol: "WAN", decimals: 18 },
    rpc: ["https://gwan-ssl.wandevs.org:46891/"],
    faucets: [],
    infoURL: "https://testnet.wanscan.org"
  },
  {
    name: "Klaytn Testnet Baobab",
    chainId: 1001,
    shortName: "Baobab",
    networkId: 1001,
    nativeCurrency: { name: "KLAY", symbol: "KLAY", decimals: 18 },
    rpc: ["https://node-api.klaytnapi.com/v1/klaytn"],
    faucets: ["https://baobab.wallet.klaytn.com/access?next=faucet"],
    infoURL: "https://www.klaytn.com/"
  },
  {
    name: "Newton Testnet",
    chainId: 1007,
    shortName: "tnew",
    networkId: 1007,
    nativeCurrency: { name: "Newton", symbol: "NEW", decimals: 18 },
    rpc: ["https://rpc1.newchain.newtonproject.org"],
    faucets: [],
    infoURL: "https://www.newtonproject.org/"
  },
  {
    name: "Evrice Network",
    chainId: 1010,
    shortName: "EVC",
    networkId: 1010,
    nativeCurrency: { name: "Evrice", symbol: "EVC", decimals: 18 },
    rpc: ["https://meta.evrice.com"],
    faucets: [],
    infoURL: "https://evrice.com"
  },
  {
    name: "Newton",
    chainId: 1012,
    shortName: "new",
    networkId: 1012,
    nativeCurrency: { name: "Newton", symbol: "NEW", decimals: 18 },
    rpc: ["https://global.rpc.mainnet.newtonproject.org"],
    faucets: [],
    infoURL: "https://www.newtonproject.org/"
  },
  {
    name: "Sakura",
    chainId: 1022,
    shortName: "sku",
    networkId: 1022,
    nativeCurrency: { name: "Sakura", symbol: "SKU", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://clover.finance/sakura"
  },
  {
    name: "Clover Testnet",
    chainId: 1023,
    shortName: "tclv",
    networkId: 1023,
    nativeCurrency: { name: "Clover", symbol: "CLV", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://clover.finance"
  },
  {
    name: "Clover Mainnet",
    chainId: 1024,
    shortName: "clv",
    networkId: 1024,
    nativeCurrency: { name: "Clover", symbol: "CLV", decimals: 18 },
    rpc: [
      "https://rpc-ivy.clover.finance",
      "https://rpc-ivy-2.clover.finance",
      "https://rpc-ivy-3.clover.finance"
    ],
    faucets: [],
    infoURL: "https://clover.finance"
  },
  {
    name: "BitTorrent Chain Testnet",
    chainId: 1028,
    shortName: "tbtt",
    networkId: 1028,
    nativeCurrency: { name: "BitTorrent", symbol: "BTT", decimals: 18 },
    rpc: ["https://testrpc.bittorrentchain.io/"],
    faucets: [],
    infoURL: "https://bittorrentchain.io/"
  },
  {
    name: "MathChain",
    chainId: 1139,
    shortName: "MATH",
    networkId: 1139,
    nativeCurrency: { name: "MathChain", symbol: "MATH", decimals: 18 },
    rpc: [
      "https://mathchain-asia.maiziqianbao.net/rpc",
      "https://mathchain-us.maiziqianbao.net/rpc"
    ],
    faucets: [],
    infoURL: "https://mathchain.org"
  },
  {
    name: "MathChain Testnet",
    chainId: 1140,
    shortName: "tMATH",
    networkId: 1140,
    nativeCurrency: { name: "MathChain", symbol: "MATH", decimals: 18 },
    rpc: ["https://galois-hk.maiziqianbao.net/rpc"],
    faucets: ["https://scan.boka.network/#/Galois/faucet"],
    infoURL: "https://mathchain.org"
  },
  {
    name: "Popcateum Mainnet",
    chainId: 1213,
    shortName: "popcat",
    networkId: 1213,
    nativeCurrency: { name: "Popcat", symbol: "POP", decimals: 18 },
    rpc: ["https://dataseed.popcateum.org"],
    faucets: [],
    infoURL: "https://popcateum.org"
  },
  {
    name: "HALO Mainnet",
    chainId: 1280,
    shortName: "HO",
    networkId: 1280,
    nativeCurrency: { name: "HALO", symbol: "HO", decimals: 18 },
    rpc: ["https://nodes.halo.land"],
    faucets: [],
    infoURL: "https://halo.land/#/"
  },
  {
    name: "Moonbeam",
    chainId: 1284,
    shortName: "mbeam",
    networkId: 1284,
    nativeCurrency: { name: "Glimmer", symbol: "GLMR", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://moonbeam.network/networks/moonbeam/"
  },
  {
    name: "Moonriver",
    chainId: 1285,
    shortName: "mriver",
    networkId: 1285,
    nativeCurrency: { name: "Moonriver", symbol: "MOVR", decimals: 18 },
    rpc: [
      "https://rpc.moonriver.moonbeam.network",
      "wss://wss.moonriver.moonbeam.network"
    ],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://moonbeam.network/networks/moonriver/"
  },
  {
    name: "Moonrock",
    chainId: 1286,
    shortName: "mrock",
    networkId: 1286,
    nativeCurrency: { name: "Rocs", symbol: "ROC", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: ""
  },
  {
    name: "Moonbase Alpha",
    chainId: 1287,
    shortName: "mbase",
    networkId: 1287,
    nativeCurrency: { name: "Dev", symbol: "DEV", decimals: 18 },
    rpc: [
      "https://rpc.testnet.moonbeam.network",
      "wss://wss.testnet.moonbeam.network"
    ],
    faucets: [],
    infoURL: "https://docs.moonbeam.network/networks/testnet/"
  },
  {
    name: "Moonshadow",
    chainId: 1288,
    shortName: "mshadow",
    networkId: 1288,
    nativeCurrency: { name: "Moonshadow", symbol: "MSHD", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://docs.moonbeam.network/networks/overview/"
  },
  {
    name: "Catecoin Chain Mainnet",
    chainId: 1618,
    shortName: "cate",
    networkId: 1618,
    nativeCurrency: { name: "Catecoin", symbol: "CATE", decimals: 18 },
    rpc: ["https://send.catechain.com"],
    faucets: [],
    infoURL: "https://catechain.com"
  },
  {
    name: "Atheios",
    chainId: 1620,
    shortName: "ath",
    networkId: 11235813,
    nativeCurrency: { name: "Atheios Ether", symbol: "ATH", decimals: 18 },
    rpc: ["https://wallet.atheios.com:8797"],
    faucets: [],
    infoURL: "https://atheios.com"
  },
  {
    name: "Btachain",
    chainId: 1657,
    shortName: "bta",
    networkId: 1657,
    nativeCurrency: { name: "Bitcoin Asset", symbol: "BTA", decimals: 18 },
    rpc: ["https://dataseed1.btachain.com/"],
    faucets: [],
    infoURL: "https://bitcoinasset.io/"
  },
  {
    name: "Teslafunds",
    chainId: 1856,
    shortName: "tsf",
    networkId: 1,
    nativeCurrency: { name: "Teslafunds Ether", symbol: "TSF", decimals: 18 },
    rpc: ["https://tsfapi.europool.me"],
    faucets: [],
    infoURL: "https://teslafunds.io"
  },
  {
    name: "EtherGem",
    chainId: 1987,
    shortName: "egem",
    networkId: 1987,
    nativeCurrency: { name: "EtherGem Ether", symbol: "EGEM", decimals: 18 },
    rpc: ["https://jsonrpc.egem.io/custom"],
    faucets: [],
    infoURL: "https://egem.io"
  },
  {
    name: "420coin",
    chainId: 2020,
    shortName: "420",
    networkId: 2020,
    nativeCurrency: { name: "Fourtwenty", symbol: "420", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://420integrated.com"
  },
  {
    name: "Edgeware Mainnet",
    chainId: 2021,
    shortName: "edg",
    networkId: 2021,
    nativeCurrency: { name: "Edge", symbol: "EDG", decimals: 18 },
    rpc: ["https://mainnet1.edgewa.re"],
    faucets: [],
    infoURL: "http://edgewa.re"
  },
  {
    name: "Beresheet Testnet",
    chainId: 2022,
    shortName: "edgt",
    networkId: 2022,
    nativeCurrency: { name: "Testnet Edge", symbol: "tEDG", decimals: 18 },
    rpc: ["https://beresheet1.edgewa.re"],
    faucets: [],
    infoURL: "http://edgewa.re"
  },
  {
    name: "Ecoball Mainnet",
    chainId: 2100,
    shortName: "eco",
    networkId: 2100,
    nativeCurrency: { name: "Ecoball Coin", symbol: "ECO", decimals: 18 },
    rpc: ["https://api.ecoball.org/ecoball/"],
    faucets: [],
    infoURL: "https://ecoball.org"
  },
  {
    name: "Ecoball Testnet Espuma",
    chainId: 2101,
    shortName: "esp",
    networkId: 2101,
    nativeCurrency: { name: "Espuma Coin", symbol: "ECO", decimals: 18 },
    rpc: ["https://api.ecoball.org/espuma/"],
    faucets: [],
    infoURL: "https://ecoball.org"
  },
  {
    name: "Kortho Mainnet",
    chainId: 2559,
    shortName: "ktoc",
    networkId: 2559,
    nativeCurrency: { name: "KorthoChain", symbol: "KTO", decimals: 11 },
    rpc: ["https://www.kortho-chain.com"],
    faucets: [],
    infoURL: "https://www.kortho.io/"
  },
  {
    name: "Fantom Testnet",
    chainId: 4002,
    shortName: "tftm",
    networkId: 4002,
    nativeCurrency: { name: "Fantom", symbol: "FTM", decimals: 18 },
    rpc: ["https://rpc.testnet.fantom.network"],
    faucets: ["https://faucet.fantom.network"],
    infoURL: "https://docs.fantom.foundation/quick-start/short-guide#fantom-testnet"
  },
  {
    name: "IoTeX Network Mainnet",
    chainId: 4689,
    shortName: "iotex-mainnet",
    networkId: 4689,
    nativeCurrency: { name: "IoTeX", symbol: "IOTX", decimals: 18 },
    rpc: ["https://babel-api.mainnet.iotex.io"],
    faucets: [],
    infoURL: "https://iotex.io"
  },
  {
    name: "IoTeX Network Testnet",
    chainId: 4690,
    shortName: "iotex-testnet",
    networkId: 4690,
    nativeCurrency: { name: "IoTeX", symbol: "IOTX", decimals: 18 },
    rpc: ["https://babel-api.testnet.iotex.io"],
    faucets: ["https://faucet.iotex.io/"],
    infoURL: "https://iotex.io"
  },
  {
    name: "EraSwap Mainnet",
    chainId: 5197,
    shortName: "es",
    networkId: 5197,
    nativeCurrency: { name: "EraSwap", symbol: "ES", decimals: 18 },
    rpc: [
      "https://mainnet.eraswap.network",
      "https://rpc-mumbai.mainnet.eraswap.network"
    ],
    faucets: [],
    infoURL: "https://eraswap.info/"
  },
  {
    name: "Syscoin Tanenbaum Testnet",
    chainId: 5700,
    shortName: "tsys",
    networkId: 5700,
    nativeCurrency: { name: "Testnet Syscoin", symbol: "tSYS", decimals: 18 },
    rpc: ["https://rpc.tanenbaum.io", "wss://rpc.tanenbaum.io/wss"],
    faucets: ["https://faucet.tanenbaum.io"],
    infoURL: "https://syscoin.org"
  },
  {
    name: "Ontology Testnet",
    chainId: 5851,
    shortName: "Ontology Testnet",
    networkId: 5851,
    nativeCurrency: { name: "ONG", symbol: "ONG", decimals: 9 },
    rpc: [
      "https://polaris1.ont.io:20339",
      "https://polaris2.ont.io:20339",
      "https://polaris3.ont.io:20339",
      "https://polaris4.ont.io:20339"
    ],
    faucets: ["https://developer.ont.io/"],
    infoURL: "https://ont.io/"
  },
  {
    name: "Wegochain Rubidium Mainnet",
    chainId: 5869,
    shortName: "rbd",
    networkId: 5869,
    nativeCurrency: { name: "Rubid", symbol: "RBD", decimals: 18 },
    rpc: ["https://proxy.wegochain.io", "http://wallet.wegochain.io:7764"],
    faucets: [],
    infoURL: "http://wegochain.io"
  },
  {
    name: "Hazlor Testnet",
    chainId: 7878,
    shortName: "hazlor-hatlas",
    networkId: 7878,
    nativeCurrency: { name: "Planet", symbol: "PLANET", decimals: 18 },
    rpc: ["http://hatlas.rpc.hazlor.com:8545/"],
    faucets: ["https://faucet.hazlor.com"],
    infoURL: "https://hazlor.com"
  },
  {
    name: "MDGL Testnet",
    chainId: 8029,
    shortName: "mdgl",
    networkId: 8029,
    nativeCurrency: { name: "MDGL Token", symbol: "MDGLT", decimals: 18 },
    rpc: ["https://testnet.mdgl.io"],
    faucets: [],
    infoURL: "https://mdgl.io"
  },
  {
    name: "GeneChain Adenine Testnet",
    chainId: 8080,
    shortName: "GeneChainAdn",
    networkId: 8080,
    nativeCurrency: { name: "Testnet RNA", symbol: "tRNA", decimals: 18 },
    rpc: ["https://rpc-testnet.genechain.io"],
    faucets: ["https://faucet.genechain.io"],
    infoURL: "https://scan-testnet.genechain.io/"
  },
  {
    name: "Klaytn Mainnet Cypress",
    chainId: 8217,
    shortName: "Cypress",
    networkId: 8217,
    nativeCurrency: { name: "KLAY", symbol: "KLAY", decimals: 18 },
    rpc: ["https://node-api.klaytnapi.com/v1/klaytn"],
    faucets: [],
    infoURL: "https://www.klaytn.com/"
  },
  {
    name: "KorthoTest",
    chainId: 8285,
    shortName: "Kortho",
    networkId: 8285,
    nativeCurrency: { name: "Kortho Test", symbol: "KTO", decimals: 11 },
    rpc: ["https://www.krotho-test.net"],
    faucets: [],
    infoURL: "https://www.kortho.io/"
  },
  {
    name: "TOOL Global Mainnet",
    chainId: 8723,
    shortName: "olo",
    networkId: 8723,
    nativeCurrency: { name: "TOOL Global", symbol: "OLO", decimals: 18 },
    rpc: ["https://mainnet-web3.wolot.io"],
    faucets: [],
    infoURL: "https://ibdt.io"
  },
  {
    name: "TOOL Global Testnet",
    chainId: 8724,
    shortName: "tolo",
    networkId: 8724,
    nativeCurrency: { name: "TOOL Global", symbol: "OLO", decimals: 18 },
    rpc: ["https://testnet-web3.wolot.io"],
    faucets: ["https://testnet-explorer.wolot.io"],
    infoURL: "https://testnet-explorer.wolot.io"
  },
  {
    name: "Ambros Chain Testnet",
    chainId: 8888,
    shortName: "ambrostestnet",
    networkId: 8888,
    nativeCurrency: { name: "AMBROS", symbol: "AMBR", decimals: 18 },
    rpc: ["https://testnet.ambroschain.com"],
    faucets: [],
    infoURL: "https://bcmhunt.com/"
  },
  {
    name: "bloxberg",
    chainId: 8995,
    shortName: "berg",
    networkId: 8995,
    nativeCurrency: { name: "BERG", symbol: "U+25B3", decimals: 18 },
    rpc: ["https://core.bloxberg.org"],
    faucets: ["https://faucet.bloxberg.org/"],
    infoURL: "https://bloxberg.org"
  },
  {
    name: "Evmos Testnet",
    chainId: 9e3,
    shortName: "evmos-mons",
    networkId: 9e3,
    nativeCurrency: { name: "Photon", symbol: "PHOTON", decimals: 18 },
    rpc: ["https://ethereum.rpc.evmos.dev"],
    faucets: ["https://faucet.evmos.org"],
    infoURL: "https://evmos.org"
  },
  {
    name: "Smart Bitcoin Cash",
    chainId: 1e4,
    shortName: "smartbch",
    networkId: 1e4,
    nativeCurrency: { name: "Bitcoin Cash", symbol: "BCH", decimals: 18 },
    rpc: [
      "https://smartbch.greyh.at",
      "https://rpc-mainnet.smartbch.org",
      "https://smartbch.fountainhead.cash/mainnet",
      "https://smartbch.devops.cash/mainnet"
    ],
    faucets: [],
    infoURL: "https://smartbch.org/"
  },
  {
    name: "Smart Bitcoin Cash Testnet",
    chainId: 10001,
    shortName: "smartbchtest",
    networkId: 10001,
    nativeCurrency: {
      name: "Bitcoin Cash Test Token",
      symbol: "BCHT",
      decimals: 18
    },
    rpc: [
      "https://rpc-testnet.smartbch.org",
      "https://smartbch.devops.cash/testnet"
    ],
    faucets: [],
    infoURL: "http://smartbch.org/"
  },
  {
    name: "Blockchain Genesis Mainnet",
    chainId: 10101,
    shortName: "GEN",
    networkId: 10101,
    nativeCurrency: { name: "GEN", symbol: "GEN", decimals: 18 },
    rpc: [
      "https://eu.mainnet.xixoio.com",
      "https://us.mainnet.xixoio.com",
      "https://asia.mainnet.xixoio.com"
    ],
    faucets: [],
    infoURL: "https://www.xixoio.com/"
  },
  {
    name: "Singularity ZERO Testnet",
    chainId: 12051,
    shortName: "tZERO",
    networkId: 12051,
    nativeCurrency: { name: "ZERO", symbol: "tZERO", decimals: 18 },
    rpc: ["https://betaenv.singularity.gold:18545"],
    faucets: ["https://nft.singularity.gold"],
    infoURL: "https://www.singularity.gold"
  },
  {
    name: "MetaDot Mainnet",
    chainId: 16e3,
    shortName: "mtt",
    networkId: 16e3,
    nativeCurrency: { name: "MetaDot Token", symbol: "MTT", decimals: 18 },
    rpc: ["https://mainnet.metadot.network"],
    faucets: [],
    infoURL: "https://metadot.network"
  },
  {
    name: "MetaDot Testnet",
    chainId: 16001,
    shortName: "mtttest",
    networkId: 16001,
    nativeCurrency: {
      name: "MetaDot Token TestNet",
      symbol: "MTT-test",
      decimals: 18
    },
    rpc: ["https://testnet.metadot.network"],
    faucets: ["https://faucet.metadot.network/"],
    infoURL: "https://metadot.network"
  },
  {
    name: "Webchain",
    chainId: 24484,
    shortName: "web",
    networkId: 37129,
    nativeCurrency: { name: "Webchain Ether", symbol: "WEB", decimals: 18 },
    rpc: ["https://node1.webchain.network"],
    faucets: [],
    infoURL: "https://webchain.network"
  },
  {
    name: "MintMe.com Coin",
    chainId: 24734,
    shortName: "mintme",
    networkId: 37480,
    nativeCurrency: { name: "MintMe.com Coin", symbol: "MINTME", decimals: 18 },
    rpc: ["https://node1.mintme.com"],
    faucets: [],
    infoURL: "https://www.mintme.com"
  },
  {
    name: "Ethersocial Network",
    chainId: 31102,
    shortName: "esn",
    networkId: 1,
    nativeCurrency: {
      name: "Ethersocial Network Ether",
      symbol: "ESN",
      decimals: 18
    },
    rpc: ["https://api.esn.gonspool.com"],
    faucets: [],
    infoURL: "https://ethersocial.org"
  },
  {
    name: "GoChain Testnet",
    chainId: 31337,
    shortName: "got",
    networkId: 31337,
    nativeCurrency: { name: "GoChain Coin", symbol: "GO", decimals: 18 },
    rpc: ["https://testnet-rpc.gochain.io"],
    faucets: [],
    infoURL: "https://gochain.io"
  },
  {
    name: "Fusion Mainnet",
    chainId: 32659,
    shortName: "fsn",
    networkId: 32659,
    nativeCurrency: { name: "Fusion", symbol: "FSN", decimals: 18 },
    rpc: ["https://mainnet.anyswap.exchange", "https://fsn.dev/api"],
    faucets: [],
    infoURL: "https://www.fusion.org/"
  },
  {
    name: "Energi Mainnet",
    chainId: 39797,
    shortName: "nrg",
    networkId: 39797,
    nativeCurrency: { name: "Energi", symbol: "NRG", decimals: 18 },
    rpc: ["https://nodeapi.energi.network"],
    faucets: [],
    infoURL: "https://www.energi.world/"
  },
  {
    name: "pegglecoin",
    chainId: 42069,
    shortName: "PC",
    networkId: 42069,
    nativeCurrency: { name: "pegglecoin", symbol: "peggle", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://teampeggle.com"
  },
  {
    name: "Arbitrum One",
    chainId: 42161,
    shortName: "arb1",
    networkId: 42161,
    nativeCurrency: { name: "Ether", symbol: "AETH", decimals: 18 },
    rpc: [
      "https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}",
      "https://arb1.arbitrum.io/rpc",
      "wss://arb1.arbitrum.io/ws"
    ],
    faucets: [],
    infoURL: "https://arbitrum.io"
  },
  {
    name: "Celo Mainnet",
    chainId: 42220,
    shortName: "CELO",
    networkId: 42220,
    nativeCurrency: { name: "CELO", symbol: "CELO", decimals: 18 },
    rpc: ["https://forno.celo.org", "wss://forno.celo.org/ws"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://docs.celo.org/"
  },
  {
    name: "Athereum",
    chainId: 43110,
    shortName: "avaeth",
    networkId: 43110,
    nativeCurrency: { name: "Athereum Ether", symbol: "ATH", decimals: 18 },
    rpc: ["https://ava.network:21015/ext/evm/rpc"],
    faucets: ["http://athfaucet.ava.network//?address=${ADDRESS}"],
    infoURL: "https://athereum.ava.network"
  },
  {
    name: "Avalanche Fuji Testnet",
    chainId: 43113,
    shortName: "Fuji",
    networkId: 1,
    nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
    rpc: ["https://api.avax-test.network/ext/bc/C/rpc"],
    faucets: ["https://faucet.avax-test.network/"],
    infoURL: "https://cchain.explorer.avax-test.network"
  },
  {
    name: "Avalanche Mainnet",
    chainId: 43114,
    shortName: "Avalanche",
    networkId: 43114,
    nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
    rpc: ["https://api.avax.network/ext/bc/C/rpc"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://www.avax.network/"
  },
  {
    name: "Celo Alfajores Testnet",
    chainId: 44787,
    shortName: "ALFA",
    networkId: 44787,
    nativeCurrency: { name: "CELO", symbol: "CELO", decimals: 18 },
    rpc: [
      "https://alfajores-forno.celo-testnet.org",
      "wss://alfajores-forno.celo-testnet.org/ws"
    ],
    faucets: [
      "https://celo.org/developers/faucet",
      "https://cauldron.pretoriaresearchlab.io/alfajores-faucet"
    ],
    infoURL: "https://docs.celo.org/"
  },
  {
    name: "Energi Testnet",
    chainId: 49797,
    shortName: "tnrg",
    networkId: 49797,
    nativeCurrency: { name: "Energi", symbol: "NRG", decimals: 18 },
    rpc: ["https://nodeapi.test.energi.network"],
    faucets: [],
    infoURL: "https://www.energi.world/"
  },
  {
    name: "Thinkium Testnet Chain 0",
    chainId: 6e4,
    shortName: "TKM-test0",
    networkId: 6e4,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://test.thinkiumrpc.net/"],
    faucets: ["https://www.thinkiumdev.net/faucet"],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Thinkium Testnet Chain 1",
    chainId: 60001,
    shortName: "TKM-test1",
    networkId: 60001,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://test1.thinkiumrpc.net/"],
    faucets: ["https://www.thinkiumdev.net/faucet"],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Thinkium Testnet Chain 2",
    chainId: 60002,
    shortName: "TKM-test2",
    networkId: 60002,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://test2.thinkiumrpc.net/"],
    faucets: ["https://www.thinkiumdev.net/faucet"],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Thinkium Testnet Chain 103",
    chainId: 60103,
    shortName: "TKM-test103",
    networkId: 60103,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://test103.thinkiumrpc.net/"],
    faucets: ["https://www.thinkiumdev.net/faucet"],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Celo Baklava Testnet",
    chainId: 62320,
    shortName: "BKLV",
    networkId: 62320,
    nativeCurrency: { name: "CELO", symbol: "CELO", decimals: 18 },
    rpc: ["https://baklava-forno.celo-testnet.org"],
    faucets: [
      "https://docs.google.com/forms/d/e/1FAIpQLSdfr1BwUTYepVmmvfVUDRCwALejZ-TUva2YujNpvrEmPAX2pg/viewform",
      "https://cauldron.pretoriaresearchlab.io/baklava-faucet"
    ],
    infoURL: "https://docs.celo.org/"
  },
  {
    name: "Thinkium Mainnet Chain 0",
    chainId: 7e4,
    shortName: "TKM0",
    networkId: 7e4,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://proxy.thinkiumrpc.net/"],
    faucets: [],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Thinkium Mainnet Chain 1",
    chainId: 70001,
    shortName: "TKM1",
    networkId: 70001,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://proxy1.thinkiumrpc.net/"],
    faucets: [],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Thinkium Mainnet Chain 2",
    chainId: 70002,
    shortName: "TKM2",
    networkId: 70002,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://proxy2.thinkiumrpc.net/"],
    faucets: [],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Thinkium Mainnet Chain 103",
    chainId: 70103,
    shortName: "TKM103",
    networkId: 70103,
    nativeCurrency: { name: "TKM", symbol: "TKM", decimals: 18 },
    rpc: ["https://proxy103.thinkiumrpc.net/"],
    faucets: [],
    infoURL: "https://thinkium.net/"
  },
  {
    name: "Polyjuice Testnet",
    chainId: 71393,
    shortName: "ckb",
    networkId: 1,
    nativeCurrency: { name: "CKB", symbol: "CKB", decimals: 8 },
    rpc: [
      "https://godwoken-testnet-web3-rpc.ckbapp.dev",
      "ws://godwoken-testnet-web3-rpc.ckbapp.dev/ws"
    ],
    faucets: ["https://faucet.nervos.org/"],
    infoURL: "https://github.com/nervosnetwork/godwoken"
  },
  {
    name: "Energy Web Volta Testnet",
    chainId: 73799,
    shortName: "vt",
    networkId: 73799,
    nativeCurrency: { name: "Volta Token", symbol: "VT", decimals: 18 },
    rpc: [
      "https://volta-rpc.energyweb.org",
      "wss://volta-rpc.energyweb.org/ws"
    ],
    faucets: ["https://voltafaucet.energyweb.org"],
    infoURL: "https://energyweb.org"
  },
  {
    name: "Firenze test network",
    chainId: 78110,
    shortName: "firenze",
    networkId: 78110,
    nativeCurrency: { name: "Firenze Ether", symbol: "FIN", decimals: 18 },
    rpc: ["https://ethnode.primusmoney.com/firenze"],
    faucets: [],
    infoURL: "https://primusmoney.com"
  },
  {
    name: "Polygon Testnet Mumbai",
    chainId: 80001,
    shortName: "maticmum",
    networkId: 80001,
    nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
    rpc: [
      "https://matic-mumbai.chainstacklabs.com",
      "https://rpc-mumbai.maticvigil.com",
      "https://matic-testnet-archive-rpc.bwarelabs.com"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    infoURL: "https://polygon.technology/"
  },
  {
    name: "QuarkChain Mainnet Root",
    chainId: 1e5,
    shortName: "qkc-r",
    networkId: 1e5,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://jrpc.mainnet.quarkchain.io:38391/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 0",
    chainId: 100001,
    shortName: "qkc-s0",
    networkId: 100001,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39000/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 1",
    chainId: 100002,
    shortName: "qkc-s1",
    networkId: 100002,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39001/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 2",
    chainId: 100003,
    shortName: "qkc-s2",
    networkId: 100003,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39002/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 3",
    chainId: 100004,
    shortName: "qkc-s3",
    networkId: 100004,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39003/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 4",
    chainId: 100005,
    shortName: "qkc-s4",
    networkId: 100005,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39004/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 5",
    chainId: 100006,
    shortName: "qkc-s5",
    networkId: 100006,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39005/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 6",
    chainId: 100007,
    shortName: "qkc-s6",
    networkId: 100007,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39006/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Mainnet Shard 7",
    chainId: 100008,
    shortName: "qkc-s7",
    networkId: 100008,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.mainnet.quarkchain.io:39007/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Root",
    chainId: 11e4,
    shortName: "qkc-d-r",
    networkId: 11e4,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://jrpc.devnet.quarkchain.io:38391/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 0",
    chainId: 110001,
    shortName: "qkc-d-s0",
    networkId: 110001,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39900/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 1",
    chainId: 110002,
    shortName: "qkc-d-s1",
    networkId: 110002,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39901/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 2",
    chainId: 110003,
    shortName: "qkc-d-s2",
    networkId: 110003,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39902/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 3",
    chainId: 110004,
    shortName: "qkc-d-s3",
    networkId: 110004,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39903/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 4",
    chainId: 110005,
    shortName: "qkc-d-s4",
    networkId: 110005,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39904/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 5",
    chainId: 110006,
    shortName: "qkc-d-s5",
    networkId: 110006,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39905/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 6",
    chainId: 110007,
    shortName: "qkc-d-s6",
    networkId: 110007,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39906/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "QuarkChain Devnet Shard 7",
    chainId: 110008,
    shortName: "qkc-d-s7",
    networkId: 110008,
    nativeCurrency: { name: "QKC", symbol: "QKC", decimals: 18 },
    rpc: ["http://eth-jrpc.devnet.quarkchain.io:39907/"],
    faucets: [],
    infoURL: "https://www.quarkchain.io/"
  },
  {
    name: "Akroma",
    chainId: 200625,
    shortName: "aka",
    networkId: 200625,
    nativeCurrency: { name: "Akroma Ether", symbol: "AKA", decimals: 18 },
    rpc: ["https://remote.akroma.io"],
    faucets: [],
    infoURL: "https://akroma.io"
  },
  {
    name: "Alaya Dev Testnet",
    chainId: 201030,
    shortName: "alaya",
    networkId: 1,
    nativeCurrency: { name: "ATP", symbol: "atp", decimals: 18 },
    rpc: [
      "https://devnetopenapi.alaya.network/rpc",
      "wss://devnetopenapi.alaya.network/ws"
    ],
    faucets: [
      "https://faucet.alaya.network/faucet/?id=f93426c0887f11eb83b900163e06151c"
    ],
    infoURL: "https://www.alaya.network/"
  },
  {
    name: "PlatON Dev Testnet",
    chainId: 210309,
    shortName: "PlatON",
    networkId: 1,
    nativeCurrency: { name: "LAT", symbol: "lat", decimals: 18 },
    rpc: [
      "https://devnetopenapi.platon.network/rpc",
      "wss://devnetopenapi.platon.network/ws"
    ],
    faucets: [
      "https://faucet.platon.network/faucet/?id=e5d32df10aee11ec911142010a667c03"
    ],
    infoURL: "https://www.platon.network"
  },
  {
    name: "ARTIS sigma1",
    chainId: 246529,
    shortName: "ats",
    networkId: 246529,
    nativeCurrency: { name: "ARTIS sigma1 Ether", symbol: "ATS", decimals: 18 },
    rpc: ["https://rpc.sigma1.artis.network"],
    faucets: [],
    infoURL: "https://artis.eco"
  },
  {
    name: "ARTIS Testnet tau1",
    chainId: 246785,
    shortName: "atstau",
    networkId: 246785,
    nativeCurrency: { name: "ARTIS tau1 Ether", symbol: "tATS", decimals: 18 },
    rpc: ["https://rpc.tau1.artis.network"],
    faucets: [],
    infoURL: "https://artis.network"
  },
  {
    name: "Polis Testnet",
    chainId: 333888,
    shortName: "sparta",
    networkId: 333888,
    nativeCurrency: { name: "tPolis", symbol: "tPOLIS", decimals: 18 },
    rpc: ["https://sparta-rpc.polis.tech"],
    faucets: ["https://faucet.polis.tech"],
    infoURL: "https://polis.tech"
  },
  {
    name: "Polis Mainnet",
    chainId: 333999,
    shortName: "olympus",
    networkId: 333999,
    nativeCurrency: { name: "Polis", symbol: "POLIS", decimals: 18 },
    rpc: ["https://rpc.polis.tech"],
    faucets: ["https://faucet.polis.tech"],
    infoURL: "https://polis.tech"
  },
  {
    name: "Arbitrum Testnet Rinkeby",
    chainId: 421611,
    shortName: "arb-rinkeby",
    networkId: 421611,
    nativeCurrency: {
      name: "Arbitrum Rinkeby Ether",
      symbol: "ARETH",
      decimals: 18
    },
    rpc: ["https://rinkeby.arbitrum.io/rpc", "wss://rinkeby.arbitrum.io/ws"],
    faucets: [],
    infoURL: "https://arbitrum.io"
  },
  {
    name: "Eluvio Content Fabric",
    chainId: 955305,
    shortName: "elv",
    networkId: 955305,
    nativeCurrency: { name: "ELV", symbol: "ELV", decimals: 18 },
    rpc: [
      "https://host-76-74-28-226.contentfabric.io/eth/",
      "https://host-76-74-28-232.contentfabric.io/eth/",
      "https://host-76-74-29-2.contentfabric.io/eth/",
      "https://host-76-74-29-8.contentfabric.io/eth/",
      "https://host-76-74-29-34.contentfabric.io/eth/",
      "https://host-76-74-29-35.contentfabric.io/eth/",
      "https://host-154-14-211-98.contentfabric.io/eth/",
      "https://host-154-14-192-66.contentfabric.io/eth/",
      "https://host-60-240-133-202.contentfabric.io/eth/",
      "https://host-64-235-250-98.contentfabric.io/eth/"
    ],
    faucets: [],
    infoURL: "https://eluv.io"
  },
  {
    name: "Etho Protocol",
    chainId: 1313114,
    shortName: "etho",
    networkId: 1313114,
    nativeCurrency: { name: "Etho Protocol", symbol: "ETHO", decimals: 18 },
    rpc: ["https://rpc.ether1.org"],
    faucets: [],
    infoURL: "https://ethoprotocol.com"
  },
  {
    name: "Xerom",
    chainId: 1313500,
    shortName: "xero",
    networkId: 1313500,
    nativeCurrency: { name: "Xerom Ether", symbol: "XERO", decimals: 18 },
    rpc: ["https://rpc.xerom.org"],
    faucets: [],
    infoURL: "https://xerom.org"
  },
  {
    name: "Musicoin",
    chainId: 7762959,
    shortName: "music",
    networkId: 7762959,
    nativeCurrency: { name: "Musicoin", symbol: "MUSIC", decimals: 18 },
    rpc: ["https://mewapi.musicoin.tw"],
    faucets: [],
    infoURL: "https://musicoin.tw"
  },
  {
    name: "PepChain Churchill",
    chainId: 13371337,
    shortName: "tpep",
    networkId: 13371337,
    nativeCurrency: {
      name: "PepChain Churchill Ether",
      symbol: "TPEP",
      decimals: 18
    },
    rpc: ["https://churchill-rpc.pepchain.io"],
    faucets: [],
    infoURL: "https://pepchain.io"
  },
  {
    name: "IOLite",
    chainId: 18289463,
    shortName: "ilt",
    networkId: 18289463,
    nativeCurrency: { name: "IOLite Ether", symbol: "ILT", decimals: 18 },
    rpc: ["https://net.iolite.io"],
    faucets: [],
    infoURL: "https://iolite.io"
  },
  {
    name: "quarkblockchain",
    chainId: 20181205,
    shortName: "qki",
    networkId: 20181205,
    nativeCurrency: {
      name: "quarkblockchain Native Token",
      symbol: "QKI",
      decimals: 18
    },
    rpc: ["https://hz.rpc.qkiscan.cn", "https://jp.rpc.qkiscan.io"],
    faucets: [],
    infoURL: "https://quarkblockchain.org/"
  },
  {
    name: "Auxilium Network Mainnet",
    chainId: 28945486,
    shortName: "auxi",
    networkId: 28945486,
    nativeCurrency: { name: "Auxilium coin", symbol: "AUX", decimals: 18 },
    rpc: ["https://rpc.auxilium.global"],
    faucets: [],
    infoURL: "https://auxilium.global"
  },
  {
    name: "Joys Digital Mainnet",
    chainId: 35855456,
    shortName: "JOYS",
    networkId: 35855456,
    nativeCurrency: { name: "JOYS", symbol: "JOYS", decimals: 18 },
    rpc: ["https://node.joys.digital"],
    faucets: [],
    infoURL: "https://joys.digital"
  },
  {
    name: "Aquachain",
    chainId: 61717561,
    shortName: "aqua",
    networkId: 61717561,
    nativeCurrency: { name: "Aquachain Ether", symbol: "AQUA", decimals: 18 },
    rpc: ["https://c.onical.org", "https://tx.aquacha.in/api"],
    faucets: ["https://aquacha.in/faucet"],
    infoURL: "https://aquachain.github.io"
  },
  {
    name: "Joys Digital TestNet",
    chainId: 99415706,
    shortName: "TOYS",
    networkId: 99415706,
    nativeCurrency: { name: "TOYS", symbol: "TOYS", decimals: 18 },
    rpc: ["https://toys.joys.cash/"],
    faucets: ["https://faucet.joys.digital/"],
    infoURL: "https://joys.digital"
  },
  {
    name: "Neon EVM DevNet",
    chainId: 245022926,
    shortName: "neonevm-devnet",
    networkId: 245022926,
    nativeCurrency: { name: "Neon", symbol: "NEON", decimals: 18 },
    rpc: ["https://proxy.devnet.neonlabs.org/solana"],
    faucets: ["https://neonswap.live/#/get-tokens"],
    infoURL: "https://neon-labs.org/"
  },
  {
    name: "Neon EVM MainNet",
    chainId: 245022934,
    shortName: "neonevm-mainnet",
    networkId: 245022934,
    nativeCurrency: { name: "Neon", symbol: "NEON", decimals: 18 },
    rpc: ["https://proxy.mainnet.neonlabs.org/solana"],
    faucets: [],
    infoURL: "https://neon-labs.org/"
  },
  {
    name: "Neon EVM TestNet",
    chainId: 245022940,
    shortName: "neonevm-testnet",
    networkId: 245022940,
    nativeCurrency: { name: "Neon", symbol: "NEON", decimals: 18 },
    rpc: ["https://proxy.testnet.neonlabs.org/solana"],
    faucets: [],
    infoURL: "https://neon-labs.org/"
  },
  {
    name: "OneLedger Mainnet",
    chainId: 311752642,
    shortName: "oneledger",
    networkId: 311752642,
    nativeCurrency: { name: "OLT", symbol: "OLT", decimals: 18 },
    rpc: ["https://mainnet-rpc.oneledger.network"],
    faucets: [],
    infoURL: "https://oneledger.io"
  },
  {
    name: "IPOS Network",
    chainId: 1122334455,
    shortName: "ipos",
    networkId: 1122334455,
    nativeCurrency: {
      name: "IPOS Network Ether",
      symbol: "IPOS",
      decimals: 18
    },
    rpc: ["https://rpc.iposlab.com", "https://rpc2.iposlab.com"],
    faucets: [],
    infoURL: "https://iposlab.com"
  },
  {
    name: "Aurora MainNet",
    chainId: 1313161554,
    shortName: "aurora",
    networkId: 1313161554,
    nativeCurrency: { name: "Ether", symbol: "aETH", decimals: 18 },
    rpc: ["https://mainnet.aurora.dev"],
    faucets: [],
    infoURL: "https://aurora.dev"
  },
  {
    name: "Aurora TestNet",
    chainId: 1313161555,
    shortName: "aurora-testnet",
    networkId: 1313161555,
    nativeCurrency: { name: "Ether", symbol: "aETH", decimals: 18 },
    rpc: ["https://testnet.aurora.dev/"],
    faucets: [],
    infoURL: "https://aurora.dev"
  },
  {
    name: "Aurora BetaNet",
    chainId: 1313161556,
    shortName: "aurora-betanet",
    networkId: 1313161556,
    nativeCurrency: { name: "Ether", symbol: "aETH", decimals: 18 },
    rpc: ["https://betanet.aurora.dev/"],
    faucets: [],
    infoURL: "https://aurora.dev"
  },
  {
    name: "Harmony Mainnet Shard 0",
    chainId: 16666e5,
    shortName: "hmy-s0",
    networkId: 16666e5,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://api.harmony.one"],
    faucets: ["https://free-online-app.com/faucet-for-eth-evm-chains/"],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Mainnet Shard 1",
    chainId: 1666600001,
    shortName: "hmy-s1",
    networkId: 1666600001,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://s1.api.harmony.one"],
    faucets: [],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Mainnet Shard 2",
    chainId: 1666600002,
    shortName: "hmy-s2",
    networkId: 1666600002,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://s2.api.harmony.one"],
    faucets: [],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Mainnet Shard 3",
    chainId: 1666600003,
    shortName: "hmy-s3",
    networkId: 1666600003,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://s3.api.harmony.one"],
    faucets: [],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Testnet Shard 0",
    chainId: 16667e5,
    shortName: "hmy-b-s0",
    networkId: 16667e5,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://api.s0.b.hmny.io"],
    faucets: ["https://faucet.pops.one"],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Testnet Shard 1",
    chainId: 1666700001,
    shortName: "hmy-b-s1",
    networkId: 1666700001,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://api.s1.b.hmny.io"],
    faucets: [],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Testnet Shard 2",
    chainId: 1666700002,
    shortName: "hmy-b-s2",
    networkId: 1666700002,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://api.s2.b.hmny.io"],
    faucets: [],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Harmony Testnet Shard 3",
    chainId: 1666700003,
    shortName: "hmy-b-s3",
    networkId: 1666700003,
    nativeCurrency: { name: "ONE", symbol: "ONE", decimals: 18 },
    rpc: ["https://api.s3.b.hmny.io"],
    faucets: [],
    infoURL: "https://www.harmony.one/"
  },
  {
    name: "Pirl",
    chainId: 3125659152,
    shortName: "pirl",
    networkId: 3125659152,
    nativeCurrency: { name: "Pirl Ether", symbol: "PIRL", decimals: 18 },
    rpc: ["https://wallrpc.pirl.io"],
    faucets: [],
    infoURL: "https://pirl.io"
  },
  {
    name: "OneLedger Testnet Frankenstein",
    chainId: 4216137055,
    shortName: "frankenstein",
    networkId: 4216137055,
    nativeCurrency: { name: "OLT", symbol: "OLT", decimals: 18 },
    rpc: ["https://frankenstein-rpc.oneledger.network"],
    faucets: ["https://frankenstein-faucet.oneledger.network"],
    infoURL: "https://oneledger.io"
  },
  {
    name: "Palm Testnet",
    chainId: 11297108099,
    shortName: "tpalm",
    networkId: 11297108099,
    nativeCurrency: { name: "PALM", symbol: "PALM", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://palm.io"
  },
  {
    name: "Palm Mainnet",
    chainId: 11297108109,
    shortName: "palm",
    networkId: 11297108109,
    nativeCurrency: { name: "PALM", symbol: "PALM", decimals: 18 },
    rpc: [],
    faucets: [],
    infoURL: "https://palm.io"
  }
];
var currencyFormatter = new Intl.NumberFormat("en-us", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2,
  maximumFractionDigits: 2
});
var decimalFormatter = new Intl.NumberFormat("en-us", {
  style: "decimal",
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 4
});
var toUsd = function(value) {
  return currencyFormatter.format(value);
};
var limitDecimals = function(value) {
  return decimalFormatter.format(value);
};
var tokenValue = function(value, decimals) {
  return value / Math.pow(10, decimals);
};
var tokenValueTxt = function(value, decimals, symbol) {
  if (typeof value === "number") {
    return "".concat(limitDecimals(tokenValue(value, decimals)), " ").concat(symbol);
  }
  return "".concat(limitDecimals(tokenValue(Number(value), decimals)), " ").concat(symbol);
};
var decimalToHexString = function(decimal) {
  return "0x" + decimal.toString(16);
};
var getSupportedChains = function() {
  return chains.filter(function(chain) {
    return supportedChains.includes(decimalToHexString(chain.chainId));
  }).map(function(chainData) {
    return __assign(__assign({}, chainData), { chainId: decimalToHexString(chainData.chainId), blockExplorerUrl: blockExplorers[decimalToHexString(chainData.chainId)] });
  });
};
var getChain = function(chainId) {
  return getSupportedChains().find(function(chain) {
    return chain.chainId === chainId;
  });
};
var MoralisContext = (0, import_react2.createContext)(null);
var ReactMoralisError = function(_super) {
  __extends(ReactMoralisError2, _super);
  function ReactMoralisError2(message) {
    var _this = _super.call(this, "[react-moralis]: ".concat(message)) || this;
    _this.name = "ReactMoralisError";
    _this.message = message;
    return _this;
  }
  ReactMoralisError2.isReactMoraliserrpr = true;
  return ReactMoralisError2;
}(Error);
var NoMoralisContextProviderError = function(_super) {
  __extends(NoMoralisContextProviderError2, _super);
  function NoMoralisContextProviderError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "NoMoralisContextProviderError";
    return _this;
  }
  return NoMoralisContextProviderError2;
}(ReactMoralisError);
var NotAuthenticatedError = function(_super) {
  __extends(NotAuthenticatedError2, _super);
  function NotAuthenticatedError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "NotAuthenticatedError";
    return _this;
  }
  return NotAuthenticatedError2;
}(ReactMoralisError);
var ValidationError = function(_super) {
  __extends(ValidationError2, _super);
  function ValidationError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "ValidationError";
    return _this;
  }
  return ValidationError2;
}(ReactMoralisError);
var useMoralis = function() {
  var moralisContext = (0, import_react2.useContext)(MoralisContext);
  if (!moralisContext) {
    throw new NoMoralisContextProviderError("Make sure to only call useMoralis within a  <MoralisProvider>");
  }
  return moralisContext;
};
var useChain = function() {
  var _a = useMoralis(), Moralis = _a.Moralis, chainId = _a.chainId, account = _a.account, network = _a.network, provider = _a.provider, connector = _a.connector, connectorType = _a.connectorType;
  var switchNetwork = function(providedChainId) {
    return __awaiter16(void 0, void 0, void 0, function() {
      var error_1, chainData, chainId_1, name_1, nativeCurrency, rpc, blockExplorerUrl;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            _a2.trys.push([0, 2, , 6]);
            return [4, Moralis.switchNetwork(providedChainId)];
          case 1:
            _a2.sent();
            return [3, 6];
          case 2:
            error_1 = _a2.sent();
            if (!(error_1.code === 4902))
              return [3, 4];
            chainData = getChain(providedChainId);
            if (!chainData) {
              throw new Error("Chain ".concat(providedChainId, " not supported or is not specified"));
            }
            chainId_1 = chainData.chainId, name_1 = chainData.name, nativeCurrency = chainData.nativeCurrency, rpc = chainData.rpc, blockExplorerUrl = chainData.blockExplorerUrl;
            return [4, Moralis.addNetwork(chainId_1, name_1, nativeCurrency.name, nativeCurrency.symbol, rpc[0], blockExplorerUrl !== null && blockExplorerUrl !== void 0 ? blockExplorerUrl : null)];
          case 3:
            _a2.sent();
            return [3, 5];
          case 4:
            throw error_1;
          case 5:
            return [3, 6];
          case 6:
            return [2];
        }
      });
    });
  };
  var chain = (0, import_react2.useMemo)(function() {
    if (!chainId) {
      return null;
    }
    return getChain(chainId);
  }, [chainId]);
  return {
    switchNetwork,
    chainId,
    chain,
    account,
    network,
    provider,
    connector,
    connectorType
  };
};
var react = function equal(a4, b3) {
  if (a4 === b3)
    return true;
  if (a4 && b3 && typeof a4 == "object" && typeof b3 == "object") {
    if (a4.constructor !== b3.constructor)
      return false;
    var length, i4, keys;
    if (Array.isArray(a4)) {
      length = a4.length;
      if (length != b3.length)
        return false;
      for (i4 = length; i4-- !== 0; )
        if (!equal(a4[i4], b3[i4]))
          return false;
      return true;
    }
    if (a4.constructor === RegExp)
      return a4.source === b3.source && a4.flags === b3.flags;
    if (a4.valueOf !== Object.prototype.valueOf)
      return a4.valueOf() === b3.valueOf();
    if (a4.toString !== Object.prototype.toString)
      return a4.toString() === b3.toString();
    keys = Object.keys(a4);
    length = keys.length;
    if (length !== Object.keys(b3).length)
      return false;
    for (i4 = length; i4-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b3, keys[i4]))
        return false;
    for (i4 = length; i4-- !== 0; ) {
      var key2 = keys[i4];
      if (key2 === "_owner" && a4.$$typeof) {
        continue;
      }
      if (!equal(a4[key2], b3[key2]))
        return false;
    }
    return true;
  }
  return a4 !== a4 && b3 !== b3;
};
function n2(n3) {
  for (var t4 = arguments.length, r4 = Array(t4 > 1 ? t4 - 1 : 0), e3 = 1; e3 < t4; e3++)
    r4[e3 - 1] = arguments[e3];
  if (true) {
    var i4 = Y2[n3], o4 = i4 ? typeof i4 == "function" ? i4.apply(null, r4) : i4 : "unknown error nr: " + n3;
    throw Error("[Immer] " + o4);
  }
  throw Error("[Immer] minified error nr: " + n3 + (r4.length ? " " + r4.map(function(n4) {
    return "'" + n4 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function t3(n3) {
  return !!n3 && !!n3[Q2];
}
function r3(n3) {
  return !!n3 && (function(n4) {
    if (!n4 || typeof n4 != "object")
      return false;
    var t4 = Object.getPrototypeOf(n4);
    if (t4 === null)
      return true;
    var r4 = Object.hasOwnProperty.call(t4, "constructor") && t4.constructor;
    return r4 === Object || typeof r4 == "function" && Function.toString.call(r4) === Z2;
  }(n3) || Array.isArray(n3) || !!n3[L3] || !!n3.constructor[L3] || s3(n3) || v3(n3));
}
function i$1(n3, t4, r4) {
  r4 === void 0 && (r4 = false), o3(n3) === 0 ? (r4 ? Object.keys : nn)(n3).forEach(function(e3) {
    r4 && typeof e3 == "symbol" || t4(e3, n3[e3], n3);
  }) : n3.forEach(function(r5, e3) {
    return t4(e3, r5, n3);
  });
}
function o3(n3) {
  var t4 = n3[Q2];
  return t4 ? t4.i > 3 ? t4.i - 4 : t4.i : Array.isArray(n3) ? 1 : s3(n3) ? 2 : v3(n3) ? 3 : 0;
}
function u3(n3, t4) {
  return o3(n3) === 2 ? n3.has(t4) : Object.prototype.hasOwnProperty.call(n3, t4);
}
function a3(n3, t4) {
  return o3(n3) === 2 ? n3.get(t4) : n3[t4];
}
function f3(n3, t4, r4) {
  var e3 = o3(n3);
  e3 === 2 ? n3.set(t4, r4) : e3 === 3 ? (n3.delete(t4), n3.add(r4)) : n3[t4] = r4;
}
function c3(n3, t4) {
  return n3 === t4 ? n3 !== 0 || 1 / n3 == 1 / t4 : n3 != n3 && t4 != t4;
}
function s3(n3) {
  return X2 && n3 instanceof Map;
}
function v3(n3) {
  return q3 && n3 instanceof Set;
}
function p3(n3) {
  return n3.o || n3.t;
}
function l3(n3) {
  if (Array.isArray(n3))
    return Array.prototype.slice.call(n3);
  var t4 = tn(n3);
  delete t4[Q2];
  for (var r4 = nn(t4), e3 = 0; e3 < r4.length; e3++) {
    var i4 = r4[e3], o4 = t4[i4];
    o4.writable === false && (o4.writable = true, o4.configurable = true), (o4.get || o4.set) && (t4[i4] = { configurable: true, writable: true, enumerable: o4.enumerable, value: n3[i4] });
  }
  return Object.create(Object.getPrototypeOf(n3), t4);
}
function d3(n3, e3) {
  return e3 === void 0 && (e3 = false), y3(n3) || t3(n3) || !r3(n3) ? n3 : (o3(n3) > 1 && (n3.set = n3.add = n3.clear = n3.delete = h3), Object.freeze(n3), e3 && i$1(n3, function(n4, t4) {
    return d3(t4, true);
  }, true), n3);
}
function h3() {
  n2(2);
}
function y3(n3) {
  return n3 == null || typeof n3 != "object" || Object.isFrozen(n3);
}
function b2(t4) {
  var r4 = rn[t4];
  return r4 || n2(18, t4), r4;
}
function _4() {
  return U2 || n2(0), U2;
}
function j3(n3, t4) {
  t4 && (b2("Patches"), n3.u = [], n3.s = [], n3.v = t4);
}
function O2(n3) {
  g3(n3), n3.p.forEach(S2), n3.p = null;
}
function g3(n3) {
  n3 === U2 && (U2 = n3.l);
}
function w4(n3) {
  return U2 = { p: [], l: U2, h: n3, m: true, _: 0 };
}
function S2(n3) {
  var t4 = n3[Q2];
  t4.i === 0 || t4.i === 1 ? t4.j() : t4.O = true;
}
function P3(t4, e3) {
  e3._ = e3.p.length;
  var i4 = e3.p[0], o4 = t4 !== void 0 && t4 !== i4;
  return e3.h.g || b2("ES5").S(e3, t4, o4), o4 ? (i4[Q2].P && (O2(e3), n2(4)), r3(t4) && (t4 = M3(e3, t4), e3.l || x3(e3, t4)), e3.u && b2("Patches").M(i4[Q2], t4, e3.u, e3.s)) : t4 = M3(e3, i4, []), O2(e3), e3.u && e3.v(e3.u, e3.s), t4 !== H3 ? t4 : void 0;
}
function M3(n3, t4, r4) {
  if (y3(t4))
    return t4;
  var e3 = t4[Q2];
  if (!e3)
    return i$1(t4, function(i4, o5) {
      return A4(n3, e3, t4, i4, o5, r4);
    }, true), t4;
  if (e3.A !== n3)
    return t4;
  if (!e3.P)
    return x3(n3, e3.t, true), e3.t;
  if (!e3.I) {
    e3.I = true, e3.A._--;
    var o4 = e3.i === 4 || e3.i === 5 ? e3.o = l3(e3.k) : e3.o;
    i$1(e3.i === 3 ? new Set(o4) : o4, function(t5, i4) {
      return A4(n3, e3, o4, t5, i4, r4);
    }), x3(n3, o4, false), r4 && n3.u && b2("Patches").R(e3, r4, n3.u, n3.s);
  }
  return e3.o;
}
function A4(e3, i4, o4, a4, c4, s4) {
  if (c4 === o4 && n2(5), t3(c4)) {
    var v4 = M3(e3, c4, s4 && i4 && i4.i !== 3 && !u3(i4.D, a4) ? s4.concat(a4) : void 0);
    if (f3(o4, a4, v4), !t3(v4))
      return;
    e3.m = false;
  }
  if (r3(c4) && !y3(c4)) {
    if (!e3.h.F && e3._ < 1)
      return;
    M3(e3, c4), i4 && i4.A.l || x3(e3, c4);
  }
}
function x3(n3, t4, r4) {
  r4 === void 0 && (r4 = false), n3.h.F && n3.m && d3(t4, r4);
}
function z3(n3, t4) {
  var r4 = n3[Q2];
  return (r4 ? p3(r4) : n3)[t4];
}
function I3(n3, t4) {
  if (t4 in n3)
    for (var r4 = Object.getPrototypeOf(n3); r4; ) {
      var e3 = Object.getOwnPropertyDescriptor(r4, t4);
      if (e3)
        return e3;
      r4 = Object.getPrototypeOf(r4);
    }
}
function k3(n3) {
  n3.P || (n3.P = true, n3.l && k3(n3.l));
}
function E4(n3) {
  n3.o || (n3.o = l3(n3.t));
}
function R2(n3, t4, r4) {
  var e3 = s3(t4) ? b2("MapSet").N(t4, r4) : v3(t4) ? b2("MapSet").T(t4, r4) : n3.g ? function(n4, t5) {
    var r5 = Array.isArray(n4), e4 = { i: r5 ? 1 : 0, A: t5 ? t5.A : _4(), P: false, I: false, D: {}, l: t5, t: n4, k: null, o: null, j: null, C: false }, i4 = e4, o4 = en;
    r5 && (i4 = [e4], o4 = on);
    var u4 = Proxy.revocable(i4, o4), a4 = u4.revoke, f4 = u4.proxy;
    return e4.k = f4, e4.j = a4, f4;
  }(t4, r4) : b2("ES5").J(t4, r4);
  return (r4 ? r4.A : _4()).p.push(e3), e3;
}
function D3(e3) {
  return t3(e3) || n2(22, e3), function n3(t4) {
    if (!r3(t4))
      return t4;
    var e4, u4 = t4[Q2], c4 = o3(t4);
    if (u4) {
      if (!u4.P && (u4.i < 4 || !b2("ES5").K(u4)))
        return u4.t;
      u4.I = true, e4 = F3(t4, c4), u4.I = false;
    } else
      e4 = F3(t4, c4);
    return i$1(e4, function(t5, r4) {
      u4 && a3(u4.t, t5) === r4 || f3(e4, t5, n3(r4));
    }), c4 === 3 ? new Set(e4) : e4;
  }(e3);
}
function F3(n3, t4) {
  switch (t4) {
    case 2:
      return new Map(n3);
    case 3:
      return Array.from(n3);
  }
  return l3(n3);
}
var G2;
var U2;
var W2 = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol";
var X2 = typeof Map != "undefined";
var q3 = typeof Set != "undefined";
var B2 = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined";
var H3 = W2 ? Symbol.for("immer-nothing") : ((G2 = {})["immer-nothing"] = true, G2);
var L3 = W2 ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q2 = W2 ? Symbol.for("immer-state") : "__$immer_state";
var Y2 = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n3) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n3;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n3) {
  return "Cannot apply patch, path doesn't resolve: " + n3;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n3) {
  return "Unsupported patch operation: " + n3;
}, 18: function(n3) {
  return "The plugin for '" + n3 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n3 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n3) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n3 + "'";
}, 22: function(n3) {
  return "'current' expects a draft, got: " + n3;
}, 23: function(n3) {
  return "'original' expects a draft, got: " + n3;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z2 = "" + Object.prototype.constructor;
var nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n3) {
  return Object.getOwnPropertyNames(n3).concat(Object.getOwnPropertySymbols(n3));
} : Object.getOwnPropertyNames;
var tn = Object.getOwnPropertyDescriptors || function(n3) {
  var t4 = {};
  return nn(n3).forEach(function(r4) {
    t4[r4] = Object.getOwnPropertyDescriptor(n3, r4);
  }), t4;
};
var rn = {};
var en = { get: function(n3, t4) {
  if (t4 === Q2)
    return n3;
  var e3 = p3(n3);
  if (!u3(e3, t4))
    return function(n4, t5, r4) {
      var e4, i5 = I3(t5, r4);
      return i5 ? "value" in i5 ? i5.value : (e4 = i5.get) === null || e4 === void 0 ? void 0 : e4.call(n4.k) : void 0;
    }(n3, e3, t4);
  var i4 = e3[t4];
  return n3.I || !r3(i4) ? i4 : i4 === z3(n3.t, t4) ? (E4(n3), n3.o[t4] = R2(n3.A.h, i4, n3)) : i4;
}, has: function(n3, t4) {
  return t4 in p3(n3);
}, ownKeys: function(n3) {
  return Reflect.ownKeys(p3(n3));
}, set: function(n3, t4, r4) {
  var e3 = I3(p3(n3), t4);
  if (e3 == null ? void 0 : e3.set)
    return e3.set.call(n3.k, r4), true;
  if (!n3.P) {
    var i4 = z3(p3(n3), t4), o4 = i4 == null ? void 0 : i4[Q2];
    if (o4 && o4.t === r4)
      return n3.o[t4] = r4, n3.D[t4] = false, true;
    if (c3(r4, i4) && (r4 !== void 0 || u3(n3.t, t4)))
      return true;
    E4(n3), k3(n3);
  }
  return n3.o[t4] === r4 && typeof r4 != "number" && (r4 !== void 0 || t4 in n3.o) || (n3.o[t4] = r4, n3.D[t4] = true, true);
}, deleteProperty: function(n3, t4) {
  return z3(n3.t, t4) !== void 0 || t4 in n3.t ? (n3.D[t4] = false, E4(n3), k3(n3)) : delete n3.D[t4], n3.o && delete n3.o[t4], true;
}, getOwnPropertyDescriptor: function(n3, t4) {
  var r4 = p3(n3), e3 = Reflect.getOwnPropertyDescriptor(r4, t4);
  return e3 ? { writable: true, configurable: n3.i !== 1 || t4 !== "length", enumerable: e3.enumerable, value: r4[t4] } : e3;
}, defineProperty: function() {
  n2(11);
}, getPrototypeOf: function(n3) {
  return Object.getPrototypeOf(n3.t);
}, setPrototypeOf: function() {
  n2(12);
} };
var on = {};
i$1(en, function(n3, t4) {
  on[n3] = function() {
    return arguments[0] = arguments[0][0], t4.apply(this, arguments);
  };
}), on.deleteProperty = function(t4, r4) {
  return isNaN(parseInt(r4)) && n2(13), en.deleteProperty.call(this, t4[0], r4);
}, on.set = function(t4, r4, e3) {
  return r4 !== "length" && isNaN(parseInt(r4)) && n2(14), en.set.call(this, t4[0], r4, e3, t4[0]);
};
var un = function() {
  function e3(t4) {
    var e4 = this;
    this.g = B2, this.F = true, this.produce = function(t5, i5, o4) {
      if (typeof t5 == "function" && typeof i5 != "function") {
        var u4 = i5;
        i5 = t5;
        var a4 = e4;
        return function(n3) {
          var t6 = this;
          n3 === void 0 && (n3 = u4);
          for (var r4 = arguments.length, e5 = Array(r4 > 1 ? r4 - 1 : 0), o5 = 1; o5 < r4; o5++)
            e5[o5 - 1] = arguments[o5];
          return a4.produce(n3, function(n4) {
            var r5;
            return (r5 = i5).call.apply(r5, [t6, n4].concat(e5));
          });
        };
      }
      var f4;
      if (typeof i5 != "function" && n2(6), o4 !== void 0 && typeof o4 != "function" && n2(7), r3(t5)) {
        var c4 = w4(e4), s4 = R2(e4, t5, void 0), v4 = true;
        try {
          f4 = i5(s4), v4 = false;
        } finally {
          v4 ? O2(c4) : g3(c4);
        }
        return typeof Promise != "undefined" && f4 instanceof Promise ? f4.then(function(n3) {
          return j3(c4, o4), P3(n3, c4);
        }, function(n3) {
          throw O2(c4), n3;
        }) : (j3(c4, o4), P3(f4, c4));
      }
      if (!t5 || typeof t5 != "object") {
        if ((f4 = i5(t5)) === H3)
          return;
        return f4 === void 0 && (f4 = t5), e4.F && d3(f4, true), f4;
      }
      n2(21, t5);
    }, this.produceWithPatches = function(n3, t5) {
      return typeof n3 == "function" ? function(t6) {
        for (var r5 = arguments.length, i6 = Array(r5 > 1 ? r5 - 1 : 0), o4 = 1; o4 < r5; o4++)
          i6[o4 - 1] = arguments[o4];
        return e4.produceWithPatches(t6, function(t7) {
          return n3.apply(void 0, [t7].concat(i6));
        });
      } : [e4.produce(n3, t5, function(n4, t6) {
        r4 = n4, i5 = t6;
      }), r4, i5];
      var r4, i5;
    }, typeof (t4 == null ? void 0 : t4.useProxies) == "boolean" && this.setUseProxies(t4.useProxies), typeof (t4 == null ? void 0 : t4.autoFreeze) == "boolean" && this.setAutoFreeze(t4.autoFreeze);
  }
  var i4 = e3.prototype;
  return i4.createDraft = function(e4) {
    r3(e4) || n2(8), t3(e4) && (e4 = D3(e4));
    var i5 = w4(this), o4 = R2(this, e4, void 0);
    return o4[Q2].C = true, g3(i5), o4;
  }, i4.finishDraft = function(t4, r4) {
    var e4 = t4 && t4[Q2];
    e4 && e4.C || n2(9), e4.I && n2(10);
    var i5 = e4.A;
    return j3(i5, r4), P3(void 0, i5);
  }, i4.setAutoFreeze = function(n3) {
    this.F = n3;
  }, i4.setUseProxies = function(t4) {
    t4 && !B2 && n2(20), this.g = t4;
  }, i4.applyPatches = function(n3, r4) {
    var e4;
    for (e4 = r4.length - 1; e4 >= 0; e4--) {
      var i5 = r4[e4];
      if (i5.path.length === 0 && i5.op === "replace") {
        n3 = i5.value;
        break;
      }
    }
    e4 > -1 && (r4 = r4.slice(e4 + 1));
    var o4 = b2("Patches").$;
    return t3(n3) ? o4(n3, r4) : this.produce(n3, function(n4) {
      return o4(n4, r4);
    });
  }, e3;
}();
var an = new un();
var fn = an.produce;
an.produceWithPatches.bind(an);
an.setAutoFreeze.bind(an);
an.setUseProxies.bind(an);
an.applyPatches.bind(an);
an.createDraft.bind(an);
an.finishDraft.bind(an);
var n$1 = fn;
function i3(f4) {
  var u4 = (0, import_react2.useState)(function() {
    return d3(typeof f4 == "function" ? f4() : f4, true);
  }), i4 = u4[1];
  return [u4[0], (0, import_react2.useCallback)(function(t4) {
    i4(typeof t4 == "function" ? n$1(t4) : d3(t4));
  }, [])];
}
var _useResolveCall = function(call, initialData, params, options, defaultAutoFetch, validate5) {
  if (defaultAutoFetch === void 0) {
    defaultAutoFetch = true;
  }
  var isInitialized = useMoralis().isInitialized;
  var autoFetch = __assign({
    autoFetch: defaultAutoFetch
  }, options !== null && options !== void 0 ? options : {}).autoFetch;
  var _a = (0, import_react2.useState)(false), isFetching = _a[0], setIsFetching = _a[1];
  var _b = (0, import_react2.useState)(null), error = _b[0], setError = _b[1];
  var _c = i3(initialData), data = _c[0], setData = _c[1];
  var paramsRef = (0, import_react2.useRef)(params);
  if (!react(paramsRef.current, params)) {
    paramsRef.current = params;
  }
  var fetch2 = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess, fetchParams = _b2.params;
    return __awaiter16(void 0, void 0, void 0, function() {
      var combinedParams, error_2, results2, error_1;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            combinedParams = __assign(__assign({}, params), fetchParams);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            if (validate5) {
              error_2 = validate5(combinedParams);
              if (error_2) {
                throw new Error(error_2);
              }
            }
            setIsFetching(true);
            setError(null);
            return [4, call(combinedParams)];
          case 2:
            results2 = _c2.sent();
            setData(results2);
            if (onSuccess) {
              onSuccess(results2);
            }
            return [2, results2];
          case 3:
            error_1 = _c2.sent();
            setData(initialData);
            setError(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            setIsFetching(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [call, paramsRef.current, validate5]);
  var isEmpty = (0, import_react2.useMemo)(function() {
    if (data == null) {
      return true;
    }
    if (Array.isArray(data) && data.length === 0) {
      return true;
    }
    return false;
  }, [data]);
  var isLoading = (0, import_react2.useMemo)(function() {
    return isFetching && isEmpty;
  }, [isEmpty, isFetching]);
  (0, import_react2.useEffect)(function() {
    if (!isInitialized || !autoFetch) {
      return;
    }
    fetch2();
  }, [fetch2, isInitialized]);
  return {
    fetch: fetch2,
    isFetching,
    isLoading,
    error,
    data,
    setData
  };
};
var useMoralisCloudFunction = function(name2, params, options) {
  var Moralis = useMoralis().Moralis;
  var call = (0, import_react2.useCallback)(function(callParams) {
    return Moralis.Cloud.run(name2, callParams);
  }, [name2]);
  return _useResolveCall(call, null, params, options);
};
var useMoralisFile = function() {
  var Moralis = useMoralis().Moralis;
  var _a = (0, import_react2.useState)(null), error = _a[0], setError = _a[1];
  var _b = (0, import_react2.useState)(false), isUploading = _b[0], setIsUploading = _b[1];
  var _c = (0, import_react2.useState)(null), moralisFile = _c[0], setMoralisFile = _c[1];
  var saveFile = (0, import_react2.useCallback)(function(name2, file, _a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, type = _b2.type, metadata = _b2.metadata, tags = _b2.tags, saveIPFS = _b2.saveIPFS, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess;
    return __awaiter16(void 0, void 0, void 0, function() {
      var moralisFile_1, error_1;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            _c2.trys.push([0, 5, 6, 7]);
            setIsUploading(true);
            setError(null);
            moralisFile_1 = new Moralis.File(name2, file, type, metadata, tags);
            if (!saveIPFS)
              return [3, 2];
            return [4, moralisFile_1.saveIPFS()];
          case 1:
            _c2.sent();
            return [3, 4];
          case 2:
            return [4, moralisFile_1.save()];
          case 3:
            _c2.sent();
            _c2.label = 4;
          case 4:
            setMoralisFile(moralisFile_1);
            if (onSuccess) {
              onSuccess(moralisFile_1);
            }
            return [2, moralisFile_1];
          case 5:
            error_1 = _c2.sent();
            setError(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 7];
          case 6:
            setIsUploading(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 7:
            return [2];
        }
      });
    });
  }, []);
  return {
    error,
    saveFile,
    isUploading,
    moralisFile
  };
};
var useNewMoralisObject = function(objectClassName) {
  var Moralis = useMoralis().Moralis;
  var _a = (0, import_react2.useState)(false), isSaving = _a[0], setIsSaving = _a[1];
  var _b = (0, import_react2.useState)(null), error = _b[0], setError = _b[1];
  var _c = (0, import_react2.useState)(null), object = _c[0], setObject = _c[1];
  var save = (0, import_react2.useCallback)(function(data, _a2) {
    if (data === void 0) {
      data = {};
    }
    var _b2 = _a2 === void 0 ? {} : _a2, cascadeSave = _b2.cascadeSave, throwOnError = _b2.throwOnError, context = _b2.context, onSuccess = _b2.onSuccess, onComplete = _b2.onComplete, onError = _b2.onError;
    return __awaiter16(void 0, void 0, void 0, function() {
      var Object_1, object_1, error_1;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            setIsSaving(true);
            setError(null);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            Object_1 = Moralis.Object.extend(objectClassName);
            object_1 = new Object_1();
            return [4, object_1.save(data, { cascadeSave, context })];
          case 2:
            _c2.sent();
            setObject(object_1);
            if (onSuccess) {
              onSuccess(object_1);
            }
            return [2, object_1];
          case 3:
            error_1 = _c2.sent();
            setError(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            setIsSaving(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [objectClassName]);
  return {
    isSaving,
    object,
    error,
    save
  };
};
var setMultipleDataToUser = function(data, user) {
  var password = data.password, email = data.email, username = data.username, restData = __rest(data, ["password", "email", "username"]);
  if (password !== void 0) {
    if (typeof password !== "string") {
      throw new ValidationError("password can only be a string type");
    }
    user.setPassword(password);
  }
  if (email !== void 0) {
    if (typeof email !== "string") {
      throw new ValidationError("email can only be a string type");
    }
    user.setEmail(email);
  }
  if (username !== void 0) {
    if (typeof username !== "string") {
      throw new ValidationError("username can only be a string type");
    }
    user.setUsername(username);
  }
  Object.entries(restData).filter(function(_a) {
    var value = _a[1];
    return value !== void 0;
  }).forEach(function(_a) {
    var key2 = _a[0], value = _a[1];
    user.set(key2, value);
  });
};
var AuthenticationState;
(function(AuthenticationState2) {
  AuthenticationState2["UNDEFINED"] = "undefined";
  AuthenticationState2["UNAUTHENTICATED"] = "unauthenticated";
  AuthenticationState2["AUTHENTICATED"] = "authenticated";
  AuthenticationState2["AUTHENTICATING"] = "authenticating";
  AuthenticationState2["LOGGING_OUT"] = "logging_out";
  AuthenticationState2["ERROR"] = "error";
})(AuthenticationState || (AuthenticationState = {}));
var initialAuth = {
  state: AuthenticationState.UNDEFINED,
  error: null
};
var defaultUseMoralisAuthOptions = function(moralis) {
  return {
    setUser: function() {
    },
    Moralis: moralis,
    environment: "browser"
  };
};
var _useMoralisAuth = function(options) {
  var _a = __assign(__assign({}, defaultUseMoralisAuthOptions(options.Moralis)), options), onAccountChanged = _a.onAccountChanged, Moralis = _a.Moralis, environment = _a.environment, _setIsWeb3Enabled = _a._setIsWeb3Enabled, _setIsWeb3EnableLoading = _a._setIsWeb3EnableLoading;
  var setUser = options.setUser;
  var _b = (0, import_react2.useState)(initialAuth), auth = _b[0], setAuth = _b[1];
  var _c = (0, import_react2.useState)(false), hasOnAccountChangeListener = _c[0], setHasOnAccountChangeListener = _c[1];
  var authenticate = (0, import_react2.useCallback)(function(_a2) {
    if (_a2 === void 0) {
      _a2 = {};
    }
    return __awaiter16(void 0, void 0, void 0, function() {
      var user, error_1;
      var onComplete = _a2.onComplete, onError = _a2.onError, onSuccess = _a2.onSuccess, throwOnError = _a2.throwOnError, rest = __rest(_a2, ["onComplete", "onError", "onSuccess", "throwOnError"]);
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            if (_setIsWeb3EnableLoading) {
              _setIsWeb3EnableLoading(true);
            }
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, 4, 5]);
            return [4, Moralis.authenticate(rest)];
          case 2:
            user = _b2.sent();
            setUser(user);
            if (_setIsWeb3Enabled) {
              _setIsWeb3Enabled(true);
            }
            setAuth({
              state: AuthenticationState.AUTHENTICATED,
              error: null
            });
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_1 = _b2.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_1 });
            setUser(null);
            if (onError) {
              onError(error_1);
            }
            if (throwOnError) {
              throw error_1;
            }
            return [3, 5];
          case 4:
            if (_setIsWeb3EnableLoading) {
              _setIsWeb3EnableLoading(false);
            }
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [_setIsWeb3Enabled, _setIsWeb3EnableLoading]);
  var signup = (0, import_react2.useCallback)(function(username, password, email, otherFields, _a2) {
    if (otherFields === void 0) {
      otherFields = {};
    }
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onSuccess = _b2.onSuccess, onError = _b2.onError, onComplete = _b2.onComplete;
    return __awaiter16(void 0, void 0, void 0, function() {
      var newUser, user, error_2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            newUser = new Moralis.User();
            setMultipleDataToUser(__assign({ username, password, email }, otherFields), newUser);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            return [4, newUser.signUp()];
          case 2:
            user = _c2.sent();
            setAuth({
              state: AuthenticationState.AUTHENTICATED,
              error: null
            });
            setUser(user);
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_2 = _c2.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_2 });
            if (throwOnError) {
              throw error_2;
            }
            if (onError) {
              onError(error_2);
            }
            return [3, 5];
          case 4:
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  var login = (0, import_react2.useCallback)(function(username, password, _a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, usePost = _b2.usePost, throwOnError = _b2.throwOnError, onError = _b2.onError, onSuccess = _b2.onSuccess, onComplete = _b2.onComplete;
    return __awaiter16(void 0, void 0, void 0, function() {
      var user, error_3;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            return [4, Moralis.User.logIn(username, password, {
              usePost
            })];
          case 2:
            user = _c2.sent();
            setAuth({
              state: AuthenticationState.AUTHENTICATED,
              error: null
            });
            setUser(user);
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_3 = _c2.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_3 });
            if (throwOnError) {
              throw error_3;
            }
            if (onError) {
              onError(error_3);
            }
            return [3, 5];
          case 4:
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  var logout = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onError = _b2.onError, onSuccess = _b2.onSuccess, onComplete = _b2.onComplete;
    return __awaiter16(void 0, void 0, void 0, function() {
      var error_4;
      var _c2;
      return __generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            _d.label = 1;
          case 1:
            _d.trys.push([1, 3, 4, 5]);
            return [4, Moralis.User.logOut()];
          case 2:
            _d.sent();
            setAuth({ state: AuthenticationState.UNAUTHENTICATED, error: null });
            setUser(null);
            if (onSuccess) {
              onSuccess();
            }
            return [3, 5];
          case 3:
            error_4 = _d.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_4 });
            setUser((_c2 = Moralis.User.current()) !== null && _c2 !== void 0 ? _c2 : null);
            if (throwOnError) {
              throw error_4;
            }
            if (onError) {
              onError(error_4);
            }
            return [3, 5];
          case 4:
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  (0, import_react2.useEffect)(function() {
    try {
      var currentUser = Moralis.User.current();
      if (currentUser) {
        setAuth({
          state: AuthenticationState.AUTHENTICATED,
          error: null
        });
        setUser(currentUser);
      } else {
        throw new Error("Let it catch");
      }
    } catch (error) {
      setAuth({
        state: AuthenticationState.UNAUTHENTICATED,
        error: null
      });
      setUser(null);
    }
  }, []);
  (0, import_react2.useEffect)(function() {
    if (hasOnAccountChangeListener) {
      return;
    }
    if (environment !== "browser") {
      return;
    }
    if (!window) {
      console.warn("No window object found");
      return;
    }
    try {
      var ethereum = window.ethereum;
      if (!ethereum) {
        console.warn("No window.ethereum found");
        return;
      }
      ethereum.on("accountsChanged", function(accounts) {
        return __awaiter16(void 0, void 0, void 0, function() {
          var account;
          return __generator(this, function(_a2) {
            account = accounts[0];
            if (onAccountChanged) {
              onAccountChanged(account);
            }
            return [2];
          });
        });
      });
    } catch (error) {
      console.warn(error.message);
    }
    setHasOnAccountChangeListener(true);
  }, [hasOnAccountChangeListener]);
  var isAuthenticated = auth.state === AuthenticationState.AUTHENTICATED;
  var isUnauthenticated = auth.state === AuthenticationState.UNAUTHENTICATED;
  var isAuthenticating = auth.state === AuthenticationState.AUTHENTICATING;
  var hasAuthError = auth.state === AuthenticationState.ERROR;
  var isLoggingOut = auth.state === AuthenticationState.LOGGING_OUT;
  var isAuthUndefined = auth.state === AuthenticationState.UNDEFINED;
  return {
    auth,
    authenticate,
    signup,
    login,
    logout,
    authError: auth.error,
    isAuthenticated,
    isUnauthenticated,
    isAuthenticating,
    hasAuthError,
    isLoggingOut,
    isAuthUndefined
  };
};
var _useMoralisInit = function(_a) {
  var appId = _a.appId, serverUrl = _a.serverUrl, jsKey = _a.jsKey, dangerouslyUseOfMasterKey = _a.dangerouslyUseOfMasterKey, plugins = _a.plugins, _b = _a.environment, environment = _b === void 0 ? "browser" : _b, _c = _a.getMoralis, getMoralis = _c === void 0 ? function() {
    return import_moralis.default;
  } : _c, initializeOnMount = _a.initializeOnMount, setAppId = _a.setAppId, setServerUrl = _a.setServerUrl;
  var _d = (0, import_react2.useState)(false), isInitialized = _d[0], setIsInitialized = _d[1];
  var _e = (0, import_react2.useState)(false), isInitializing = _e[0], setIsInitializing = _e[1];
  var _f = (0, import_react2.useState)(false), shouldInitialize = _f[0], setShouldInitialize = _f[1];
  var Moralis = (0, import_react2.useRef)(getMoralis());
  var _initialize = (0, import_react2.useCallback)(function(_a2) {
    var serverUrl2 = _a2.serverUrl, appId2 = _a2.appId, javascriptKey = _a2.javascriptKey, masterKey = _a2.masterKey, plugins2 = _a2.plugins;
    return __awaiter16(void 0, void 0, void 0, function() {
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            if (isInitialized) {
              return [2];
            }
            if (!appId2) {
              throw new ReactMoralisError('Provide a "appId" provided to <MoralisProvider>');
            }
            if (!serverUrl2) {
              throw new ReactMoralisError('Provide a "serverUrl" provided to <MoralisProvider>');
            }
            setIsInitializing(true);
            return [4, Moralis.current.start({
              serverUrl: serverUrl2,
              appId: appId2,
              javascriptKey,
              masterKey,
              plugins: plugins2
            })];
          case 1:
            _b2.sent();
            setIsInitializing(false);
            setIsInitialized(true);
            return [2];
        }
      });
    });
  }, []);
  (0, import_react2.useEffect)(function() {
    if (isInitialized) {
      return;
    }
    if (!initializeOnMount && !shouldInitialize) {
      return;
    }
    _initialize({
      appId,
      serverUrl,
      masterKey: dangerouslyUseOfMasterKey,
      javascriptKey: jsKey,
      plugins
    });
    setIsInitialized(true);
  }, [
    appId,
    serverUrl,
    dangerouslyUseOfMasterKey,
    jsKey,
    plugins,
    isInitialized,
    initializeOnMount,
    shouldInitialize
  ]);
  var initialize = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, newAppId = _b2.appId, newServerUrl = _b2.serverUrl;
    if (newAppId) {
      setAppId(newAppId);
    }
    if (newServerUrl) {
      setServerUrl(newServerUrl);
    }
    if (!newAppId && !appId) {
      throw new Error("No appId is provided. Please provide an appId to the Moralis.Provider or as argument in initialize()");
    }
    if (!newServerUrl && !serverUrl) {
      throw new Error("No serverUrl is provided. Please provide an serverUrl to the Moralis.Provider or as argument in initialize()");
    }
    setShouldInitialize(true);
  }, [appId, serverUrl]);
  return {
    isInitialized,
    isInitializing,
    initialize,
    Moralis: Moralis.current,
    environment
  };
};
var _useMoralisUser = function(Moralis) {
  var _a = (0, import_react2.useState)(null), user = _a[0], setUser = _a[1];
  var _b = (0, import_react2.useState)(false), isUpdating = _b[0], setIsUpdating = _b[1];
  var _c = (0, import_react2.useState)(null), error = _c[0], setError = _c[1];
  var setUserData = (0, import_react2.useCallback)(function(data, _a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess;
    return __awaiter16(void 0, void 0, void 0, function() {
      var userHasLocallyUpdated, currentUser, error_1;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!user) {
              throw new NotAuthenticatedError("User needs to be authenticated before setting new data");
            }
            setIsUpdating(true);
            setError(null);
            userHasLocallyUpdated = false;
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            setMultipleDataToUser(data, user);
            userHasLocallyUpdated = true;
            return [4, user.save()];
          case 2:
            _c2.sent();
            currentUser = Moralis.User.current();
            if (!currentUser) {
              throw new ReactMoralisError("No user data found after save");
            }
            setUser(currentUser);
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_1 = _c2.sent();
            if (userHasLocallyUpdated) {
              user.revert();
            }
            setError(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            setIsUpdating(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [user]);
  var refetchUserData = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess;
    return __awaiter16(void 0, void 0, void 0, function() {
      var newUserData, error_2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!user) {
              throw new NotAuthenticatedError("User needs to be authenticated before refetching");
            }
            setIsUpdating(true);
            setError(null);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            return [4, user.fetch()];
          case 2:
            newUserData = _c2.sent();
            if (!newUserData) {
              throw new ReactMoralisError("No user data found after refetch");
            }
            setUser(newUserData);
            if (onSuccess) {
              onSuccess(newUserData);
            }
            return [2, newUserData];
          case 3:
            error_2 = _c2.sent();
            setError(error_2);
            if (throwOnError) {
              throw error_2;
            }
            if (onError) {
              onError(error_2);
            }
            return [3, 5];
          case 4:
            setIsUpdating(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [user]);
  return {
    setUserData,
    setUser,
    refetchUserData,
    user,
    _setUser: setUser,
    isUserUpdating: isUpdating,
    userError: error
  };
};
var _useMoralisWeb3 = function(Moralis) {
  var _a = (0, import_react2.useState)(false), isWeb3Enabled = _a[0], _setIsWeb3Enabled = _a[1];
  var _b = (0, import_react2.useState)(null), web3EnableError = _b[0], setEnableWeb3Error = _b[1];
  var _c = (0, import_react2.useState)(false), isWeb3EnableLoading = _c[0], _setIsWeb3EnableLoading = _c[1];
  var _d = (0, import_react2.useState)(null), web3 = _d[0], setWeb3 = _d[1];
  var _e = (0, import_react2.useState)(null), chainId = _e[0], setChainId = _e[1];
  var _f = (0, import_react2.useState)(null), account = _f[0], setAccount = _f[1];
  var _g = (0, import_react2.useState)(null), connector = _g[0], setConnector = _g[1];
  var _h = (0, import_react2.useState)(null), provider = _h[0], setProvider = _h[1];
  (0, import_react2.useEffect)(function() {
    var handleConnect = function(_a2) {
      var web32 = _a2.web3, chainId2 = _a2.chainId, account2 = _a2.account, connector2 = _a2.connector, provider2 = _a2.provider;
      setWeb3(web32);
      setChainId(chainId2);
      setAccount(account2);
      setConnector(connector2);
      setProvider(provider2);
    };
    var handleDisconnect = function() {
      setWeb3(null);
      _setIsWeb3Enabled(false);
      setChainId(null);
      setAccount(null);
      setConnector(null);
      setProvider(null);
    };
    var handleChainChanged = function(chainId2) {
      setChainId(chainId2);
      setWeb3(Moralis.web3);
    };
    var unsubChainChanged = Moralis.onChainChanged(handleChainChanged);
    var unsubAccountChanged = Moralis.onAccountChanged(setAccount);
    var unsubEnable = Moralis.onWeb3Enabled(handleConnect);
    var unsubDeactivate = Moralis.onWeb3Deactivated(handleDisconnect);
    var unsubDisconnect = Moralis.onDisconnect(handleDisconnect);
    return function() {
      unsubChainChanged();
      unsubAccountChanged();
      unsubEnable();
      unsubDeactivate();
      unsubDisconnect();
    };
  }, [Moralis]);
  var enableWeb3 = (0, import_react2.useCallback)(function(_a2) {
    if (_a2 === void 0) {
      _a2 = {};
    }
    return __awaiter16(void 0, void 0, void 0, function() {
      var currentWeb3, error_1;
      var throwOnError = _a2.throwOnError, onComplete = _a2.onComplete, onError = _a2.onError, onSuccess = _a2.onSuccess, rest = __rest(_a2, ["throwOnError", "onComplete", "onError", "onSuccess"]);
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            _setIsWeb3EnableLoading(true);
            setEnableWeb3Error(null);
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, 4, 5]);
            return [4, Moralis.enableWeb3(rest)];
          case 2:
            currentWeb3 = _b2.sent();
            _setIsWeb3Enabled(true);
            if (onSuccess) {
              onSuccess(currentWeb3);
            }
            return [2, currentWeb3];
          case 3:
            error_1 = _b2.sent();
            setEnableWeb3Error(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            _setIsWeb3EnableLoading(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  var deactivateWeb3 = (0, import_react2.useCallback)(function() {
    return __awaiter16(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, Moralis.deactivateWeb3()];
          case 1:
            _a2.sent();
            return [2];
        }
      });
    });
  }, []);
  var network = (0, import_react2.useMemo)(function() {
    var _a2;
    return (_a2 = connector === null || connector === void 0 ? void 0 : connector.network) !== null && _a2 !== void 0 ? _a2 : null;
  }, [connector]);
  var connectorType = (0, import_react2.useMemo)(function() {
    var _a2;
    return (_a2 = connector === null || connector === void 0 ? void 0 : connector.type) !== null && _a2 !== void 0 ? _a2 : null;
  }, [connector]);
  return {
    enableWeb3,
    web3,
    isWeb3Enabled,
    web3EnableError,
    isWeb3EnableLoading,
    _setIsWeb3Enabled,
    _setIsWeb3EnableLoading,
    chainId,
    account,
    network,
    connector,
    connectorType,
    deactivateWeb3,
    provider
  };
};
var MoralisProvider = function(_a) {
  var children = _a.children, _appId = _a.appId, _serverUrl = _a.serverUrl, jsKey = _a.jsKey, dangerouslyUseOfMasterKey = _a.dangerouslyUseOfMasterKey, plugins = _a.plugins, environment = _a.environment, getMoralis = _a.getMoralis, _b = _a.options, _c = _b === void 0 ? {} : _b, onAccountChanged = _c.onAccountChanged, _d = _a.initializeOnMount, initializeOnMount = _d === void 0 ? true : _d;
  var _e = (0, import_react2.useState)(_appId !== null && _appId !== void 0 ? _appId : null), appId = _e[0], setAppId = _e[1];
  var _f = (0, import_react2.useState)(_serverUrl !== null && _serverUrl !== void 0 ? _serverUrl : null), serverUrl = _f[0], setServerUrl = _f[1];
  var moralisInit = _useMoralisInit({
    appId,
    serverUrl,
    jsKey,
    dangerouslyUseOfMasterKey,
    plugins,
    environment,
    getMoralis,
    initializeOnMount,
    setAppId,
    setServerUrl
  });
  var _g = _useMoralisWeb3(moralisInit.Moralis), _setIsWeb3Enabled = _g._setIsWeb3Enabled, _setIsWeb3EnableLoading = _g._setIsWeb3EnableLoading, moralisWeb3 = __rest(_g, ["_setIsWeb3Enabled", "_setIsWeb3EnableLoading"]);
  var _h = _useMoralisUser(moralisInit.Moralis), setUser = _h.setUser, moralisUser = __rest(_h, ["setUser"]);
  var moralisAuth = _useMoralisAuth({
    onAccountChanged,
    setUser,
    Moralis: moralisInit.Moralis,
    environment: moralisInit.environment,
    _setIsWeb3Enabled,
    _setIsWeb3EnableLoading
  });
  return (0, import_jsx_runtime2.jsx)(MoralisContext.Provider, __assign({ value: __assign(__assign(__assign(__assign(__assign({}, moralisInit), moralisAuth), moralisUser), moralisWeb3), { appId, serverUrl }) }, { children }), void 0);
};
var _useSafeUpdatedQuery = function(nameOrObject, queryMap, dependencies, isInitialized) {
  if (queryMap === void 0) {
    queryMap = function(q4) {
      return q4;
    };
  }
  if (dependencies === void 0) {
    dependencies = [];
  }
  var Moralis = useMoralis().Moralis;
  var currentQueryMap = (0, import_react2.useMemo)(function() {
    return queryMap;
  }, dependencies);
  var currentNameOrObject = (0, import_react2.useMemo)(function() {
    return nameOrObject;
  }, dependencies);
  var query = (0, import_react2.useMemo)(function() {
    var q4 = new Moralis.Query(currentNameOrObject);
    return currentQueryMap(q4);
  }, [isInitialized, currentNameOrObject, currentQueryMap]);
  return query;
};
var _useSubscriptionListener = function(_a) {
  var name2 = _a.name, handler = _a.handler, enable = _a.enable, subscription = _a.subscription;
  var isInitialized = useMoralis().isInitialized;
  (0, import_react2.useEffect)(function() {
    if (!enable || !isInitialized || !subscription || !handler) {
      return;
    }
    subscription.on(name2, handler);
    return function() {
      if (subscription) {
        subscription.off(name2, handler);
      }
    };
  }, [isInitialized, handler, enable, name2]);
};
var defaultUseSubscriptionQueryOptions = {
  enabled: true
};
var useMoralisSubscription = function(nameOrObject, queryMap, dependencies, options) {
  var _a, _b, _c, _d, _e, _f;
  if (queryMap === void 0) {
    queryMap = function(q4) {
      return q4;
    };
  }
  if (dependencies === void 0) {
    dependencies = [];
  }
  if (options === void 0) {
    options = {};
  }
  var _g = __assign(__assign({}, defaultUseSubscriptionQueryOptions), options), enabled = _g.enabled, onCreate = _g.onCreate, onDelete = _g.onDelete, onEnter = _g.onEnter, onLeave = _g.onLeave, onUpdate = _g.onUpdate;
  var moralisContext = (0, import_react2.useContext)(MoralisContext);
  var isInitialized = (_a = moralisContext === null || moralisContext === void 0 ? void 0 : moralisContext.isInitialized) !== null && _a !== void 0 ? _a : false;
  var subscriptionRef = (0, import_react2.useRef)();
  var _h = (0, import_react2.useState)(false), isReady = _h[0], setIsReady = _h[1];
  var query = _useSafeUpdatedQuery(nameOrObject, queryMap, dependencies, isInitialized);
  (0, import_react2.useEffect)(function() {
    setIsReady(false);
    if (!enabled || !isInitialized) {
      return;
    }
    query.subscribe().then(function(sub) {
      subscriptionRef.current = sub;
      setIsReady(true);
    });
    return function() {
      if (subscriptionRef.current) {
        subscriptionRef.current.unsubscribe();
      }
    };
  }, [enabled, isInitialized, query]);
  _useSubscriptionListener({
    name: "create",
    handler: onCreate,
    subscription: subscriptionRef.current,
    enable: (_b = enabled && isReady) !== null && _b !== void 0 ? _b : false
  });
  _useSubscriptionListener({
    name: "update",
    handler: onUpdate,
    subscription: subscriptionRef.current,
    enable: (_c = enabled && isReady) !== null && _c !== void 0 ? _c : false
  });
  _useSubscriptionListener({
    name: "enter",
    handler: onEnter,
    subscription: subscriptionRef.current,
    enable: (_d = enabled && isReady) !== null && _d !== void 0 ? _d : false
  });
  _useSubscriptionListener({
    name: "leave",
    handler: onLeave,
    subscription: subscriptionRef.current,
    enable: (_e = enabled && isReady) !== null && _e !== void 0 ? _e : false
  });
  _useSubscriptionListener({
    name: "delete",
    handler: onDelete,
    subscription: subscriptionRef.current,
    enable: (_f = enabled && isReady) !== null && _f !== void 0 ? _f : false
  });
};
var defaultUseMoralisQueryOptions = {
  autoFetch: true,
  live: false,
  onLiveEnter: function(entity, all) {
    return __spreadArray(__spreadArray([], all, true), [entity], false);
  },
  onLiveCreate: function(entity, all) {
    return __spreadArray(__spreadArray([], all, true), [entity], false);
  },
  onLiveDelete: function(entity, all) {
    return all.filter(function(e3) {
      return e3.id !== entity.id;
    });
  },
  onLiveLeave: function(entity, all) {
    return all.filter(function(e3) {
      return e3.id !== entity.id;
    });
  },
  onLiveUpdate: function(entity, all) {
    return all.map(function(e3) {
      return e3.id === entity.id ? entity : e3;
    });
  }
};
var useMoralisQuery = function(nameOrObject, queryMap, dependencies, options) {
  if (queryMap === void 0) {
    queryMap = function(q4) {
      return q4;
    };
  }
  if (dependencies === void 0) {
    dependencies = [];
  }
  if (options === void 0) {
    options = {};
  }
  var isInitialized = useMoralis().isInitialized;
  var _a = __assign(__assign({}, defaultUseMoralisQueryOptions), options), live = _a.live, onLiveCreate = _a.onLiveCreate, onLiveDelete = _a.onLiveDelete, onLiveEnter = _a.onLiveEnter, onLiveLeave = _a.onLiveLeave, onLiveUpdate = _a.onLiveUpdate;
  var query = _useSafeUpdatedQuery(nameOrObject, queryMap, dependencies, isInitialized);
  var call = (0, import_react2.useCallback)(function() {
    return query.find();
  }, [query]);
  var _b = _useResolveCall(call, [], void 0, options), data = _b.data, error = _b.error, fetch2 = _b.fetch, isFetching = _b.isFetching, isLoading = _b.isLoading, setData = _b.setData;
  var handleOnCreate = (0, import_react2.useCallback)(function(entity) {
    if (onLiveCreate) {
      setData(function(data2) {
        return onLiveCreate(entity, data2);
      });
    }
  }, [onLiveCreate]);
  var handleOnEnter = (0, import_react2.useCallback)(function(entity) {
    if (onLiveEnter) {
      setData(function(data2) {
        return onLiveEnter(entity, data2);
      });
    }
  }, [onLiveEnter]);
  var handleOnUpdate = (0, import_react2.useCallback)(function(entity) {
    if (onLiveUpdate) {
      setData(function(data2) {
        return onLiveUpdate(entity, data2);
      });
    }
  }, [onLiveUpdate]);
  var handleOnDelete = (0, import_react2.useCallback)(function(entity) {
    if (onLiveDelete) {
      setData(function(data2) {
        return onLiveDelete(entity, data2);
      });
    }
  }, [onLiveDelete]);
  var handleOnLeave = (0, import_react2.useCallback)(function(entity) {
    if (onLiveLeave) {
      setData(function(data2) {
        return onLiveLeave(entity, data2);
      });
    }
  }, [onLiveLeave]);
  useMoralisSubscription(nameOrObject, queryMap, dependencies, {
    enabled: live,
    onCreate: handleOnCreate,
    onEnter: handleOnEnter,
    onUpdate: handleOnUpdate,
    onDelete: handleOnDelete,
    onLeave: handleOnLeave
  });
  return { fetch: fetch2, isFetching, isLoading, error, data };
};
var useMoralisWeb3ApiCall = function(call, params, options) {
  var result = _useResolveCall(call, null, params, options, false);
  return result;
};
var useMoralisWeb3Api = function() {
  var Moralis = useMoralis().Moralis;
  return __assign({ Web3API: Moralis.Web3API }, Moralis.Web3API);
};
var useMoralisSolanaCall = function(call, params, options) {
  var result = _useResolveCall(call, null, params, options, false);
  return result;
};
var useMoralisSolanaApi = function() {
  var Moralis = useMoralis().Moralis;
  return __assign({ SolanaAPI: Moralis.SolanaAPI }, Moralis.SolanaAPI);
};
var useWeb3ExecuteFunction = function(params, options) {
  var Moralis = useMoralis().Moralis;
  var call = (0, import_react2.useCallback)(function(callParams) {
    return __awaiter16(void 0, void 0, void 0, function() {
      var allParams;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            allParams = __assign(__assign({}, params), callParams);
            return [4, Moralis.executeFunction(allParams)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  }, []);
  return _useResolveCall(call, null, params, options, false);
};
var useWeb3Contract = function(params) {
  var _a = useWeb3ExecuteFunction(params), data = _a.data, error = _a.error, runContractFunction = _a.fetch, isFetching = _a.isFetching, isLoading = _a.isLoading;
  return { runContractFunction, data, error, isFetching, isLoading };
};
var useWeb3Transfer = function(params, options) {
  var Moralis = useMoralis().Moralis;
  var call = (0, import_react2.useCallback)(function(callParams) {
    return __awaiter16(void 0, void 0, void 0, function() {
      var allParams;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            allParams = __assign(__assign({}, params), callParams);
            return [4, Moralis.transfer(allParams)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  }, []);
  return _useResolveCall(call, null, params, options, false);
};
var _useResolvePluginCall = function(plugin, call, initialData, params, options, defaultAutoFetch, providedValidate) {
  if (defaultAutoFetch === void 0) {
    defaultAutoFetch = true;
  }
  var _a = useMoralis(), Moralis = _a.Moralis, isInitialized = _a.isInitialized, isInitializing = _a.isInitializing;
  var validate5 = (0, import_react2.useCallback)(function(params2) {
    if (!isInitialized && isInitializing) {
      return "Plugins are not finished initializing";
    }
    if (!isInitialized) {
      return "Moralis has not been initialized, run Moralis.start first";
    }
    if (!(Moralis === null || Moralis === void 0 ? void 0 : Moralis.Plugins) || !(Moralis === null || Moralis === void 0 ? void 0 : Moralis.Plugins[plugin])) {
      return "".concat(plugin, " plugin has not been installed or initialized");
    }
    if (providedValidate) {
      return providedValidate(params2);
    }
  }, [plugin, isInitialized, isInitializing, providedValidate]);
  return _useResolveCall(call, initialData, params, options, defaultAutoFetch, validate5);
};
var useOneInchTokens = function(_a, options) {
  var _b, _c;
  var _d = _a === void 0 ? {} : _a, chain = _d.chain;
  if (options === void 0) {
    options = {};
  }
  var _e = useMoralis(), Moralis = _e.Moralis, isInitialized = _e.isInitialized;
  var _f = _useResolvePluginCall(Plugin.ONE_INCH, (_c = (_b = Moralis.Plugins) === null || _b === void 0 ? void 0 : _b.oneInch) === null || _c === void 0 ? void 0 : _c.getSupportedTokens, [], { chain: chain !== null && chain !== void 0 ? chain : DEFAULT_API_CHAIN }, options, isInitialized), fetch2 = _f.fetch, data = _f.data, isFetching = _f.isFetching, isLoading = _f.isLoading, error = _f.error;
  return { getSupportedTokens: fetch2, data, isFetching, isLoading, error };
};
var useOneInchQuote = function(params, options) {
  var _a, _b, _c, _d;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _e = _useResolvePluginCall(Plugin.ONE_INCH, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.oneInch) === null || _b === void 0 ? void 0 : _b.quote, null, ((_c = Object.keys(params)) === null || _c === void 0 ? void 0 : _c.length) ? {
    chain: (_d = params.chain) !== null && _d !== void 0 ? _d : DEFAULT_API_CHAIN,
    fromTokenAddress: params.fromToken.address,
    toTokenAddress: params.toToken.address,
    amount: Moralis.Units.Token(params.fromAmount, params.fromToken.decimals).toString()
  } : void 0, options, false), fetch2 = _e.fetch, data = _e.data, isFetching = _e.isFetching, isLoading = _e.isLoading, error = _e.error;
  return { getQuote: fetch2, data, isFetching, isLoading, error };
};
var useOneInchSwap = function(params, options) {
  var _a, _b;
  if (options === void 0) {
    options = {};
  }
  var _c = useMoralis(), Moralis = _c.Moralis, account = _c.account;
  var doApproveAndSwap = (0, import_react2.useCallback)(function(params2) {
    return __awaiter16(void 0, void 0, void 0, function() {
      var hasAllowance;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, Moralis.Plugins.oneInch.hasAllowance({
              chain: params2.chain,
              fromTokenAddress: params2.fromTokenAddress,
              fromAddress: params2.fromAddress,
              amount: params2.amount
            })];
          case 1:
            hasAllowance = _a2.sent();
            if (!!hasAllowance)
              return [3, 3];
            return [4, Moralis.Plugins.oneInch.approve({
              chain: params2.chain,
              tokenAddress: params2.fromTokenAddress,
              fromAddress: params2.fromAddress
            })];
          case 2:
            _a2.sent();
            _a2.label = 3;
          case 3:
            return [2, Moralis.Plugins.oneInch.swap(params2)];
        }
      });
    });
  }, []);
  var _d = _useResolvePluginCall(Plugin.ONE_INCH, doApproveAndSwap, null, {
    chain: (_a = params.chain) !== null && _a !== void 0 ? _a : DEFAULT_API_CHAIN,
    fromTokenAddress: params.fromToken.address,
    toTokenAddress: params.toToken.address,
    amount: params.fromAmount,
    fromAddress: account,
    slippage: (_b = params.slippage) !== null && _b !== void 0 ? _b : 1
  }, options, false, function() {
    return !account ? "No web3 account found, run enableWeb3() first" : null;
  }), fetch2 = _d.fetch, data = _d.data, isFetching = _d.isFetching, isLoading = _d.isLoading, error = _d.error;
  return { swap: fetch2, data, isFetching, isLoading, error };
};
var DEFAULT_OPEN_SEA_NETWORK = "mainnet";
var useOpenSeaAsset = function(params, options) {
  var _a, _b, _c;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _d = _useResolvePluginCall(Plugin.OPEN_SEA, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.opensea) === null || _b === void 0 ? void 0 : _b.getAsset, null, {
    network: (_c = params.network) !== null && _c !== void 0 ? _c : DEFAULT_OPEN_SEA_NETWORK,
    tokenAddress: params.tokenAddress,
    tokenId: params.tokenId
  }, options, false), fetch2 = _d.fetch, data = _d.data, isFetching = _d.isFetching, isLoading = _d.isLoading, error = _d.error;
  return { getAsset: fetch2, data, isFetching, isLoading, error };
};
var useOpenSeaOrders = function(params, options) {
  var _a, _b, _c, _d;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _e = _useResolvePluginCall(Plugin.OPEN_SEA, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.opensea) === null || _b === void 0 ? void 0 : _b.getOrders, null, {
    network: (_c = params.network) !== null && _c !== void 0 ? _c : DEFAULT_OPEN_SEA_NETWORK,
    tokenAddress: params.tokenAddress,
    tokenId: params.tokenId,
    orderSide: params.orderSide,
    page: (_d = params.page) !== null && _d !== void 0 ? _d : 1
  }, options, false), fetch2 = _e.fetch, data = _e.data, isFetching = _e.isFetching, isLoading = _e.isLoading, error = _e.error;
  return { getOrders: fetch2, data, isFetching, isLoading, error };
};
var useOpenSeaSellOrder = function(params, options) {
  var _a, _b, _c;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _d = _useResolvePluginCall(Plugin.OPEN_SEA, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.opensea) === null || _b === void 0 ? void 0 : _b.createSellOrder, null, {
    network: (_c = params.network) !== null && _c !== void 0 ? _c : DEFAULT_OPEN_SEA_NETWORK,
    tokenAddress: params.tokenAddress,
    tokenId: params.tokenId,
    tokenType: params.tokenType,
    userAddress: params.userAddress,
    startAmount: params.startAmount,
    endAmount: params.endAmount,
    expirationTime: params.expirationTime
  }, options, false), fetch2 = _d.fetch, data = _d.data, isFetching = _d.isFetching, isLoading = _d.isLoading, error = _d.error;
  return { createSellOrder: fetch2, data, isFetching, isLoading, error };
};
var useOpenSeaBuyOrder = function(params, options) {
  var _a, _b, _c;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _d = _useResolvePluginCall(Plugin.OPEN_SEA, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.opensea) === null || _b === void 0 ? void 0 : _b.createBuyOrder, null, {
    network: (_c = params.network) !== null && _c !== void 0 ? _c : DEFAULT_OPEN_SEA_NETWORK,
    tokenAddress: params.tokenAddress,
    tokenId: params.tokenId,
    tokenType: params.tokenType,
    amount: params.amount,
    userAddress: params.userAddress,
    paymentTokenAddress: params.paymentTokenAddress
  }, options, false), fetch2 = _d.fetch, data = _d.data, isFetching = _d.isFetching, isLoading = _d.isLoading, error = _d.error;
  return { createBuyOrder: fetch2, data, isFetching, isLoading, error };
};
var useFiatBuy = function(params, _a) {
  if (params === void 0) {
    params = {};
  }
  if (_a === void 0) {
    _a = {};
  }
  var disableTriggers = _a.disableTriggers, options = __rest(_a, ["disableTriggers"]);
  var Moralis = useMoralis().Moralis;
  var doBuyCall = (0, import_react2.useCallback)(function(params2) {
    var _a2, _b2;
    return (_b2 = (_a2 = Moralis.Plugins) === null || _a2 === void 0 ? void 0 : _a2.fiat) === null || _b2 === void 0 ? void 0 : _b2.buy(params2, { disableTriggers });
  }, [disableTriggers]);
  var _b = _useResolvePluginCall(Plugin.FIAT, doBuyCall, null, {
    coin: params.coin,
    receiver: params.receiver
  }, options, false), fetch2 = _b.fetch, data = _b.data, isFetching = _b.isFetching, isLoading = _b.isLoading, error = _b.error;
  return { buy: fetch2, data, isFetching, isLoading, error };
};
var DEFAULT_RARIBLE_NETWORK = "eth";
var useRaribleLazyMint = function(params, options) {
  var _a, _b, _c;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _d = _useResolvePluginCall(Plugin.RARIBLE, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.rarible) === null || _b === void 0 ? void 0 : _b.lazyMint, null, {
    chain: (_c = params.chain) !== null && _c !== void 0 ? _c : DEFAULT_RARIBLE_NETWORK,
    userAddress: params.userAddress,
    tokenType: params.tokenType,
    tokenUri: params.tokenUri,
    supply: params.supply,
    royaltiesAmount: params.royaltiesAmount
  }, options, false), fetch2 = _d.fetch, data = _d.data, isFetching = _d.isFetching, isLoading = _d.isLoading, error = _d.error;
  return { lazyMint: fetch2, data, isFetching, isLoading, error };
};
var useRaribleSellOrder = function(params, options) {
  var _a, _b, _c;
  if (options === void 0) {
    options = {};
  }
  var Moralis = useMoralis().Moralis;
  var _d = _useResolvePluginCall(Plugin.RARIBLE, (_b = (_a = Moralis.Plugins) === null || _a === void 0 ? void 0 : _a.rarible) === null || _b === void 0 ? void 0 : _b.createSellOrder, null, {
    chain: (_c = params.chain) !== null && _c !== void 0 ? _c : DEFAULT_RARIBLE_NETWORK,
    userAddress: params.userAddress,
    makeTokenId: params.makeTokenId,
    makeTokenAddress: params.makeTokenAddress,
    makeAssetClass: params.makeAssetClass,
    makeValue: params.makeValue,
    takeAssetClass: params.takeAssetClass,
    takeValue: params.takeValue
  }, options, false), fetch2 = _d.fetch, data = _d.data, isFetching = _d.isFetching, isLoading = _d.isLoading, error = _d.error;
  return { createSellOrder: fetch2, data, isFetching, isLoading, error };
};
var useApiContract = function(_a, options) {
  var _b;
  var functionName = _a.functionName, address = _a.address, abi = _a.abi, chain = _a.chain, params = _a.params;
  if (options === void 0) {
    options = {};
  }
  var native = useMoralisWeb3Api().native;
  var payload = {
    abi,
    chain,
    function_name: functionName,
    address,
    params
  };
  var _c = useMoralisWeb3ApiCall(native.runContractFunction, payload, __assign({ autoFetch: (_b = options.autoFetch) !== null && _b !== void 0 ? _b : false }, options)), runContractFunction = _c.fetch, data = _c.data, error = _c.error, isFetching = _c.isFetching, isLoading = _c.isLoading;
  return { runContractFunction, data, error, isLoading, isFetching };
};
var isValidApiChain = function(chain) {
  if (!chain) {
    return null;
  }
  return chain;
};
var useERC20Balances = function(params, options) {
  var _a, _b, _c, _d, _e;
  var getTokenBalances = useMoralisWeb3Api().account.getTokenBalances;
  var _f = useMoralis(), account = _f.account, chainId = _f.chainId;
  var _g = useMoralisWeb3ApiCall(getTokenBalances, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN, address: (_d = (_c = params === null || params === void 0 ? void 0 : params.address) !== null && _c !== void 0 ? _c : account) !== null && _d !== void 0 ? _d : "" }, params), __assign({ autoFetch: (_e = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _e !== void 0 ? _e : !!account }, options)), fetch2 = _g.fetch, data = _g.data, isLoading = _g.isLoading, isFetching = _g.isFetching, error = _g.error;
  return {
    fetchERC20Balances: fetch2,
    data,
    isLoading,
    isFetching,
    error
  };
};
var useERC20Transfers = function(params, options) {
  var _a, _b, _c, _d, _e;
  var getTokenTransfers = useMoralisWeb3Api().account.getTokenTransfers;
  var _f = useMoralis(), account = _f.account, chainId = _f.chainId;
  var _g = useMoralisWeb3ApiCall(getTokenTransfers, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN, address: (_d = (_c = params === null || params === void 0 ? void 0 : params.address) !== null && _c !== void 0 ? _c : account) !== null && _d !== void 0 ? _d : "" }, params), __assign({ autoFetch: (_e = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _e !== void 0 ? _e : !!account }, options)), fetch2 = _g.fetch, data = _g.data, isLoading = _g.isLoading, isFetching = _g.isFetching, error = _g.error;
  return {
    fetchERC20Transfers: fetch2,
    data,
    error,
    isLoading,
    isFetching
  };
};
var IPFS_ROOT = "https://gateway.ipfs.io/ipfs/";
var resolveIPFS = function(url) {
  if (!url) {
    return url;
  }
  if (!url.includes("ipfs://") || !url) {
    return url;
  }
  return url.replace("ipfs://", IPFS_ROOT);
};
var useNFTBalances = function(params, options) {
  var _a, _b, _c, _d, _e;
  var getNFTs = useMoralisWeb3Api().account.getNFTs;
  var _f = useMoralis(), chainId = _f.chainId, account = _f.account;
  var _g = useMoralisWeb3ApiCall(getNFTs, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN, address: (_d = (_c = params === null || params === void 0 ? void 0 : params.address) !== null && _c !== void 0 ? _c : account) !== null && _d !== void 0 ? _d : "" }, params), __assign({ autoFetch: (_e = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _e !== void 0 ? _e : !!account }, options)), getNFTBalances = _g.fetch, data = _g.data, error = _g.error, isLoading = _g.isLoading, isFetching = _g.isFetching;
  var balances = (0, import_react2.useMemo)(function() {
    if (!(data === null || data === void 0 ? void 0 : data.result) || !(data === null || data === void 0 ? void 0 : data.result.length)) {
      return data;
    }
    var formattedResult = data.result.map(function(nft) {
      try {
        if (nft.metadata) {
          var metadata = JSON.parse(nft.metadata);
          var image = resolveIPFS(metadata === null || metadata === void 0 ? void 0 : metadata.image);
          return __assign(__assign({}, nft), { image, metadata });
        }
      } catch (error2) {
        return nft;
      }
      return nft;
    });
    return __assign(__assign({}, data), { result: formattedResult });
  }, [data]);
  return { getNFTBalances, data: balances, error, isLoading, isFetching };
};
var useNFTTransfers = function(params, options) {
  var _a, _b, _c, _d, _e;
  var getNFTTransfers = useMoralisWeb3Api().account.getNFTTransfers;
  var _f = useMoralis(), chainId = _f.chainId, account = _f.account;
  var _g = useMoralisWeb3ApiCall(getNFTTransfers, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN, address: (_d = (_c = params === null || params === void 0 ? void 0 : params.address) !== null && _c !== void 0 ? _c : account) !== null && _d !== void 0 ? _d : "" }, params), __assign({ autoFetch: (_e = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _e !== void 0 ? _e : !!account }, options)), fetch2 = _g.fetch, data = _g.data, error = _g.error, isLoading = _g.isLoading, isFetching = _g.isFetching;
  return { getNFTTransfers: fetch2, data, error, isLoading, isFetching };
};
var useNativeBalance = function(params, options) {
  var _a, _b, _c, _d, _e;
  var getNativeBalance = useMoralisWeb3Api().account.getNativeBalance;
  var _f = useMoralis(), chainId = _f.chainId, account = _f.account;
  var nativeToken = (0, import_react2.useMemo)(function() {
    var _a2, _b2;
    var chainData = getChain((_b2 = (_a2 = params === null || params === void 0 ? void 0 : params.chain) !== null && _a2 !== void 0 ? _a2 : isValidApiChain(chainId)) !== null && _b2 !== void 0 ? _b2 : DEFAULT_API_CHAIN);
    if (!chainData) {
      return null;
    }
    return chainData.nativeCurrency;
  }, [params, chainId]);
  var _g = useMoralisWeb3ApiCall(getNativeBalance, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN, address: (_d = (_c = params === null || params === void 0 ? void 0 : params.address) !== null && _c !== void 0 ? _c : account) !== null && _d !== void 0 ? _d : "" }, params), __assign({ autoFetch: (_e = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _e !== void 0 ? _e : !!account }, options)), fetch2 = _g.fetch, data = _g.data, error = _g.error, isLoading = _g.isLoading, isFetching = _g.isFetching;
  var formatted = (0, import_react2.useMemo)(function() {
    if (!nativeToken || !data) {
      return null;
    }
    return tokenValueTxt(data.balance, nativeToken.decimals, nativeToken.symbol);
  }, [data, nativeToken]);
  return {
    getBalances: fetch2,
    data: {
      balance: data === null || data === void 0 ? void 0 : data.balance,
      formatted
    },
    nativeToken,
    error,
    isLoading,
    isFetching
  };
};
var useNativeTransactions = function(params, options) {
  var _a, _b, _c, _d, _e;
  var getTransactions = useMoralisWeb3Api().account.getTransactions;
  var _f = useMoralis(), chainId = _f.chainId, account = _f.account;
  var _g = useMoralisWeb3ApiCall(getTransactions, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN, address: (_d = (_c = params === null || params === void 0 ? void 0 : params.address) !== null && _c !== void 0 ? _c : account) !== null && _d !== void 0 ? _d : "" }, params), __assign({ autoFetch: (_e = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _e !== void 0 ? _e : !!account }, options)), getNativeTransations = _g.fetch, data = _g.data, error = _g.error, isLoading = _g.isLoading, isFetching = _g.isFetching;
  return {
    getNativeTransations,
    data,
    chainId,
    error,
    isLoading,
    isFetching
  };
};
var useTokenPrice = function(params, options) {
  var _a, _b, _c;
  var getTokenPrice = useMoralisWeb3Api().token.getTokenPrice;
  var chainId = useMoralis().chainId;
  var _d = useMoralisWeb3ApiCall(getTokenPrice, __assign({ chain: (_b = (_a = params === null || params === void 0 ? void 0 : params.chain) !== null && _a !== void 0 ? _a : isValidApiChain(chainId)) !== null && _b !== void 0 ? _b : DEFAULT_API_CHAIN }, params), __assign({ autoFetch: (_c = options === null || options === void 0 ? void 0 : options.autoFetch) !== null && _c !== void 0 ? _c : true }, options)), fetch2 = _d.fetch, data = _d.data, error = _d.error, isFetching = _d.isFetching, isLoading = _d.isLoading;
  var formattedData = (0, import_react2.useMemo)(function() {
    var _a2;
    if (!data) {
      return null;
    }
    var _b2 = (_a2 = data.nativePrice) !== null && _a2 !== void 0 ? _a2 : {}, value = _b2.value, decimals = _b2.decimals, symbol = _b2.symbol;
    var formatted = __assign(__assign({}, data), { formattedUsd: toUsd(data.usdPrice), formattedNative: value ? tokenValueTxt(value, decimals !== null && decimals !== void 0 ? decimals : 0, symbol !== null && symbol !== void 0 ? symbol : "") : null });
    return formatted;
  }, [data]);
  return {
    fetchTokenPrice: fetch2,
    data: formattedData,
    error,
    isLoading,
    isFetching
  };
};
var useEnsAddress = function(ensAddress) {
  var web3 = useMoralis().web3;
  var _a = (0, import_react2.useState)(null), resolved = _a[0], setResolved = _a[1];
  var _b = (0, import_react2.useState)(false), isLoading = _b[0], setIsLoading = _b[1];
  var _c = (0, import_react2.useState)(null), error = _c[0], setError = _c[1];
  (0, import_react2.useEffect)(function() {
    if (web3) {
      setIsLoading(true);
      setError(null);
      web3.lookupAddress(ensAddress).then(function(result) {
        setResolved(result);
      }).catch(setError).finally(function() {
        setIsLoading(false);
      });
    }
  }, [ensAddress, web3]);
  return { name: resolved, isLoading, error };
};
var useEnsName = function(ensName) {
  var web3 = useMoralis().web3;
  var _a = (0, import_react2.useState)(null), address = _a[0], setAddress = _a[1];
  var _b = (0, import_react2.useState)(null), avatar = _b[0], setAvatar = _b[1];
  var _c = (0, import_react2.useState)(null), url = _c[0], setUrl = _c[1];
  var _d = (0, import_react2.useState)(null), email = _d[0], setEmail = _d[1];
  var _e = (0, import_react2.useState)(false), isLoading = _e[0], setIsLoading = _e[1];
  var _f = (0, import_react2.useState)(null), error = _f[0], setError = _f[1];
  (0, import_react2.useEffect)(function() {
    if (web3) {
      setIsLoading(true);
      setError(null);
      web3.getResolver(ensName).then(function(resolver) {
        if (!resolver) {
          return;
        }
        Promise.all([
          resolver.getAddress().catch(function() {
            return null;
          }),
          resolver.getAvatar().catch(function() {
            return null;
          }),
          resolver.getText("email").catch(function() {
            return null;
          }),
          resolver.getText("url").catch(function() {
            return null;
          })
        ]).then(function(_a2) {
          var _b2;
          var resolvedAddress = _a2[0], resolvedAvatar = _a2[1], resolvedEmail = _a2[2], resolvedUrl = _a2[3];
          setAddress(resolvedAddress);
          setAvatar((_b2 = resolvedAvatar === null || resolvedAvatar === void 0 ? void 0 : resolvedAvatar.url) !== null && _b2 !== void 0 ? _b2 : null);
          setEmail(resolvedEmail);
          setUrl(resolvedUrl);
        });
      }).catch(setError).finally(function() {
        setIsLoading(false);
      });
    }
  }, [ensName, web3]);
  return { address, avatar, email, url, isLoading, error };
};
var white = "#fff";
var brand = "#b7e803";
var PoweredByColour = function(_a) {
  var style = _a.style;
  return (0, import_jsx_runtime2.jsxs)("svg", __assign({ style, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 192 45" }, { children: [(0, import_jsx_runtime2.jsx)("path", { style: { fill: brand }, d: "M0 22.5A21.51 21.51 0 0121.5 1h149a21.5 21.5 0 010 43h-149A21.51 21.51 0 010 22.5z" }, void 0), (0, import_jsx_runtime2.jsx)("circle", { cx: "25.5", cy: "22.5", r: "17.5" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: white }, d: "M36.6 30.9l-.12.16s.08-.06.12-.16zM40 20.94A8.23 8.23 0 0031.7 13a8.38 8.38 0 00-5.7 2.25A8.3 8.3 0 0012 21v.06a17.82 17.82 0 002.41 8.48A23.4 23.4 0 0016 32.09c.22.3.41.54.55.71l.17.21.05.06a2.67 2.67 0 003.75.25 2.62 2.62 0 00.25-3.71l-.1-.11c-.08-.12-.22-.29-.39-.52A17.51 17.51 0 0119.07 27a12.74 12.74 0 01-1.76-5.9 3 3 0 016 0 2.72 2.72 0 00.3 1.14 2.66 2.66 0 005.13-.91V21a3 3 0 016 0 11.6 11.6 0 01-1.2 4.74c-.32.65-.62 1.18-.85 1.55-.11.19-.2.32-.26.41l-.06.08a2.66 2.66 0 012.08-1A2.63 2.63 0 0137 29.49a2.55 2.55 0 01-.43 1.41.1.1 0 000-.05l.12-.17c.1-.14.23-.35.39-.6A21.81 21.81 0 0038.31 28 16.56 16.56 0 0040 21v-.06z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: brand }, d: "M34.36 26.89a2.71 2.71 0 00-2.08 1 2.56 2.56 0 00-.57 1.62 2.63 2.63 0 002.65 2.6 2.69 2.69 0 002.11-1l.12-.16a2.6 2.6 0 00-2.23-4z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { d: "M55.61 21.43a2.4 2.4 0 01-.89 2 4 4 0 01-2.54.7h-1v3.37h-1v-8.57h2.22c2.14 0 3.21.84 3.21 2.5zm-4.44 1.84h.9a3.41 3.41 0 001.93-.42 1.6 1.6 0 00.59-1.37 1.49 1.49 0 00-.59-1.27 2.88 2.88 0 00-1.73-.42h-1.1zm11.64 1a3.55 3.55 0 01-.8 2.46 2.79 2.79 0 01-2.18.88 2.87 2.87 0 01-1.53-.41 2.59 2.59 0 01-1-1.16 4.05 4.05 0 01-.37-1.77 3.54 3.54 0 01.79-2.44 2.75 2.75 0 012.15-.83 2.71 2.71 0 012.14.9 3.51 3.51 0 01.8 2.38zm-4.9 0a3.12 3.12 0 00.49 1.88 2 2 0 002.9 0 3 3 0 00.5-1.88 3 3 0 00-.5-1.85 2 2 0 00-2.9 0 3 3 0 00-.49 1.86zm11.85 3.23l-1.18-3.77c-.07-.23-.21-.75-.41-1.57-.16.69-.29 1.21-.41 1.58L66.5 27.5h-1.13l-1.75-6.42h1c.41 1.61.73 2.84.94 3.68a15 15 0 01.44 1.71c0-.22.11-.51.21-.86s.18-.64.25-.85l1.18-3.68h1l1.15 3.68a12.91 12.91 0 01.45 1.7c0-.14.06-.36.13-.65s.48-1.87 1.22-4.73h1l-1.68 6.42zm6.81.12a3 3 0 01-2.25-.87 3.35 3.35 0 01-.82-2.41 3.69 3.69 0 01.76-2.46 2.55 2.55 0 012.06-.88 2.43 2.43 0 011.91.8 3.07 3.07 0 01.7 2.09v.61h-4.42a2.55 2.55 0 00.56 1.72 2 2 0 001.53.59 5.15 5.15 0 002.05-.44v.87a4.77 4.77 0 01-1 .32 5.85 5.85 0 01-1.08.06zm-.26-5.85a1.59 1.59 0 00-1.24.51 2.28 2.28 0 00-.54 1.39h3.36a2.13 2.13 0 00-.41-1.4 1.45 1.45 0 00-1.17-.5zm7.21-.77a3.61 3.61 0 01.77.07l-.13.9a4 4 0 00-.71-.08 1.71 1.71 0 00-1.33.63 2.3 2.3 0 00-.55 1.57v3.41h-1v-6.42h.81l.11 1.19a2.72 2.72 0 01.86-1 1.88 1.88 0 011.17-.27zm4.69 6.66a3 3 0 01-2.21-.91 3.35 3.35 0 01-.82-2.41 3.69 3.69 0 01.76-2.46A2.53 2.53 0 0188 21a2.4 2.4 0 011.91.8 3 3 0 01.71 2.09v.61h-4.48a2.55 2.55 0 00.57 1.72 2 2 0 001.53.59 5.15 5.15 0 002.05-.44v.87a4.65 4.65 0 01-1 .32 5.66 5.66 0 01-1.08.06zm-.27-5.85a1.57 1.57 0 00-1.23.51 2.28 2.28 0 00-.54 1.39h3.35a2.07 2.07 0 00-.41-1.4 1.43 1.43 0 00-1.17-.54zm8.66 4.87a2.29 2.29 0 01-2 1 2.4 2.4 0 01-2-.86 3.78 3.78 0 01-.7-2.45 3.86 3.86 0 01.71-2.47 2.6 2.6 0 014 .07h.07V18.38h1v9.12h-.79zm-1.94.16a1.77 1.77 0 001.44-.54 2.72 2.72 0 00.45-1.75v-.2a3.18 3.18 0 00-.46-1.95 1.7 1.7 0 00-1.44-.59 1.52 1.52 0 00-1.32.67 3.33 3.33 0 00-.45 1.88 3.19 3.19 0 00.45 1.86 1.54 1.54 0 001.33.58zm11-5.83a2.38 2.38 0 012 .87 3.75 3.75 0 01.7 2.44 3.81 3.81 0 01-.71 2.46 2.35 2.35 0 01-2 .88 2.88 2.88 0 01-1.15-.23 2.17 2.17 0 01-.87-.72h-.07l-.21.83h-.69v-9.16h1v2.22c0 .49 0 .94-.05 1.33h.05a2.3 2.3 0 012.04-.93zm-.15.82a1.69 1.69 0 00-1.43.57 3.23 3.23 0 00-.44 1.92 3.22 3.22 0 00.45 1.94 1.71 1.71 0 001.45.58 1.47 1.47 0 001.33-.65 3.31 3.31 0 00.44-1.88 3.19 3.19 0 00-.44-1.87 1.54 1.54 0 00-1.32-.65zm3.5-.71h1l1.41 3.66a14.72 14.72 0 01.57 1.81h.05c0-.2.15-.54.31-1s.7-2 1.6-4.45h1l-2.76 7.31a3.64 3.64 0 01-1 1.54 2 2 0 01-1.34.45 3.71 3.71 0 01-.88-.1v-.84a3.14 3.14 0 00.72.07 1.48 1.48 0 001.43-1.12l.36-.91zm13.89 6.38l-2.06-6.72c.07 1.37.11 2.28.11 2.74v4h-1.62v-8.59h2.47l2 6.55 2.2-6.55h2.48v8.57h-1.7v-4.05-.67c0-.25 0-.91.08-2l-2.21 6.71zm9-3.29a2.76 2.76 0 00.32 1.47 1.33 1.33 0 002.07 0 2.79 2.79 0 00.31-1.48 2.73 2.73 0 00-.31-1.46 1.17 1.17 0 00-1-.48 1.14 1.14 0 00-1 .48 2.7 2.7 0 00-.41 1.47zm4.53 0a3.52 3.52 0 01-.84 2.5 3.05 3.05 0 01-2.35.91 3.36 3.36 0 01-1.67-.41 2.75 2.75 0 01-1.1-1.19 4 4 0 01-.39-1.81 3.47 3.47 0 01.84-2.49 3 3 0 012.35-.89 3.26 3.26 0 011.67.41 2.65 2.65 0 011.1 1.17 3.94 3.94 0 01.37 1.8zm5.13-3.38a2.62 2.62 0 01.61.05l-.17 1.67a2.58 2.58 0 00-.53-.05 1.86 1.86 0 00-1.33.44 1.58 1.58 0 00-.48 1.23v3.33h-1.78V21h1.35l.26 1.1h.09a2.39 2.39 0 01.82-.88 2 2 0 011.14-.39zm6 6.67l-.35-.89h-.05a2.65 2.65 0 01-.93.79 3.09 3.09 0 01-1.24.22 2 2 0 01-1.49-.54 2.08 2.08 0 01-.54-1.54 1.73 1.73 0 01.73-1.53 4.19 4.19 0 012.2-.55h1.14v-.29a.89.89 0 00-1-1 4.79 4.79 0 00-1.85.47l-.59-1.2a5.29 5.29 0 012.51-.6 3.14 3.14 0 012 .58 2.1 2.1 0 01.7 1.74v4.34zm-.53-3h-.69a2.17 2.17 0 00-1.16.28.86.86 0 00-.38.78c0 .51.28.76.86.76a1.34 1.34 0 001-.36A1.25 1.25 0 00147 25zm5.41 3h-1.79v-9.12h1.79zm1.8-8.24c0-.59.33-.88 1-.88s1 .29 1 .88a.89.89 0 01-.25.65 1 1 0 01-.73.22c-.75 0-1.08-.29-1.08-.87zM156 27.5h-1.78V21H156zm6.46-1.95a1.8 1.8 0 01-.71 1.54 3.44 3.44 0 01-2.09.53 7.06 7.06 0 01-1.22-.1 4.66 4.66 0 01-.94-.28v-1.48a5.44 5.44 0 001.12.39 4.35 4.35 0 001.1.16c.65 0 1-.19 1-.56a.44.44 0 00-.13-.34 1.63 1.63 0 00-.44-.3c-.21-.11-.49-.24-.85-.39a5.42 5.42 0 01-1.11-.59 1.62 1.62 0 01-.51-.61 2.08 2.08 0 01-.16-.87 1.53 1.53 0 01.67-1.34 3.28 3.28 0 011.92-.48 5.54 5.54 0 012.31.51l-.54 1.29c-.33-.14-.64-.25-.92-.34a2.94 2.94 0 00-.88-.14c-.52 0-.79.14-.79.43a.5.5 0 00.25.41 7.16 7.16 0 001.12.53 4.79 4.79 0 011.13.58 1.65 1.65 0 01.53.62 1.92 1.92 0 01.18.83zm1.14 1.11a1 1 0 01.26-.74 1.07 1.07 0 01.77-.25 1 1 0 01.75.25 1 1 0 01.27.74 1 1 0 01-.27.74 1.23 1.23 0 01-1.51 0 1 1 0 01-.23-.74zm3.6-7.4c0-.59.32-.88 1-.88s1 .29 1 .88a.88.88 0 01-.24.65 1.06 1.06 0 01-.73.22c-.67 0-.99-.29-.99-.87zm1.86 8.24h-1.79V21h1.79zm3.3-3.29a2.76 2.76 0 00.32 1.47 1.13 1.13 0 001 .5 1.12 1.12 0 001-.49 2.79 2.79 0 00.31-1.48 2.73 2.73 0 00-.31-1.46 1.15 1.15 0 00-1-.48 1.14 1.14 0 00-1 .48 2.7 2.7 0 00-.28 1.46zm4.53 0a3.52 3.52 0 01-.84 2.5 3 3 0 01-2.35.91 3.32 3.32 0 01-1.66-.41A2.84 2.84 0 01171 26a4 4 0 01-.39-1.81 3.47 3.47 0 01.84-2.49 3 3 0 012.35-.89 3.26 3.26 0 011.67.41 2.73 2.73 0 011.11 1.17 4.08 4.08 0 01.35 1.82z" }, void 0)] }), void 0);
};
var PoweredByLight = function(_a) {
  var style = _a.style;
  return (0, import_jsx_runtime2.jsxs)("svg", __assign({ style, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 192 45" }, { children: [(0, import_jsx_runtime2.jsx)("path", { style: { fill: white }, d: "M1,22.5A21.51,21.51,0,0,1,22.5,1h147a21.5,21.5,0,0,1,0,43H22.5A21.51,21.51,0,0,1,1,22.5Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { d: "M37.6,30.9h0l-.12.16S37.56,31,37.6,30.9Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { d: "M41,20.94A8.23,8.23,0,0,0,32.7,13,8.38,8.38,0,0,0,27,15.25,8.3,8.3,0,0,0,13,21v.06a17.79,17.79,0,0,0,2.41,8.48A22.43,22.43,0,0,0,17,32.09c.22.3.41.54.55.71l.17.21.05.06,0,0h0a2.67,2.67,0,0,0,3.75.25,2.62,2.62,0,0,0,.25-3.71h0l0,0-.1-.11L21.31,29A17.51,17.51,0,0,1,20.07,27a12.74,12.74,0,0,1-1.76-5.9,3,3,0,0,1,6,0,2.72,2.72,0,0,0,.3,1.14,2.66,2.66,0,0,0,5.13-.91V21a3,3,0,0,1,6,0,11.6,11.6,0,0,1-1.2,4.74c-.32.65-.62,1.18-.85,1.55-.11.19-.2.32-.26.41l-.06.08h0l0,0a2.66,2.66,0,0,1,2.08-1A2.63,2.63,0,0,1,38,29.49a2.55,2.55,0,0,1-.43,1.41h0s0,0,0,0a.1.1,0,0,0,0-.05l.12-.17c.1-.14.23-.35.39-.6A21.81,21.81,0,0,0,39.31,28,16.56,16.56,0,0,0,41,21v-.06Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: brand }, d: "M35.36,26.89a2.71,2.71,0,0,0-2.08,1,2.56,2.56,0,0,0-.57,1.62,2.63,2.63,0,0,0,2.65,2.6,2.69,2.69,0,0,0,2.11-1l.12-.16a2.6,2.6,0,0,0-2.23-4Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { d: "M54.61,21.43a2.4,2.4,0,0,1-.89,2,4,4,0,0,1-2.54.7h-1V27.5h-1V18.93H51.4C53.54,18.93,54.61,19.77,54.61,21.43Zm-4.44,1.85h.9A3.4,3.4,0,0,0,53,22.85a1.59,1.59,0,0,0,.59-1.37A1.49,1.49,0,0,0,53,20.21a2.88,2.88,0,0,0-1.73-.42H50.17Zm11.64,1a3.55,3.55,0,0,1-.8,2.46,2.79,2.79,0,0,1-2.18.88,2.87,2.87,0,0,1-1.53-.41,2.59,2.59,0,0,1-1-1.16,4.05,4.05,0,0,1-.37-1.77,3.54,3.54,0,0,1,.79-2.44A2.75,2.75,0,0,1,58.87,21a2.71,2.71,0,0,1,2.14.9A3.51,3.51,0,0,1,61.81,24.28Zm-4.9,0a3.12,3.12,0,0,0,.49,1.88,2,2,0,0,0,2.9,0,3,3,0,0,0,.5-1.88,3,3,0,0,0-.5-1.85,2,2,0,0,0-2.9,0A3,3,0,0,0,56.91,24.28ZM68.76,27.5l-1.18-3.77c-.07-.23-.21-.75-.41-1.57h0c-.16.69-.29,1.21-.41,1.58L65.5,27.5H64.37l-1.75-6.42h1c.41,1.61.73,2.84.94,3.68A15,15,0,0,1,65,26.47h0c0-.22.11-.51.21-.86s.18-.64.25-.85l1.18-3.68h1l1.15,3.68a12.91,12.91,0,0,1,.45,1.7h0c0-.14.06-.36.13-.65s.48-1.87,1.22-4.73h1L69.91,27.5Zm6.81.12a3,3,0,0,1-2.25-.87,3.35,3.35,0,0,1-.82-2.41,3.69,3.69,0,0,1,.76-2.46A2.55,2.55,0,0,1,75.32,21a2.43,2.43,0,0,1,1.91.8,3.07,3.07,0,0,1,.7,2.09v.61H73.51a2.55,2.55,0,0,0,.56,1.72,2,2,0,0,0,1.53.59,5.15,5.15,0,0,0,2.05-.44v.87a4.77,4.77,0,0,1-1,.32A5.85,5.85,0,0,1,75.57,27.62Zm-.26-5.84a1.58,1.58,0,0,0-1.24.5,2.28,2.28,0,0,0-.54,1.39h3.36a2.13,2.13,0,0,0-.41-1.4A1.45,1.45,0,0,0,75.31,21.78ZM82.52,21a3.61,3.61,0,0,1,.77.07l-.13.9a4,4,0,0,0-.71-.08,1.71,1.71,0,0,0-1.33.63,2.3,2.3,0,0,0-.55,1.57V27.5h-1V21.08h.81l.11,1.19h0a2.72,2.72,0,0,1,.86-1A1.88,1.88,0,0,1,82.52,21Zm4.69,6.66A3,3,0,0,1,85,26.75a3.35,3.35,0,0,1-.82-2.41,3.69,3.69,0,0,1,.76-2.46A2.53,2.53,0,0,1,87,21a2.4,2.4,0,0,1,1.91.8,3,3,0,0,1,.71,2.09v.61H85.14a2.55,2.55,0,0,0,.57,1.72,2,2,0,0,0,1.53.59,5.15,5.15,0,0,0,2.05-.44v.87a4.65,4.65,0,0,1-1,.32A5.66,5.66,0,0,1,87.21,27.62Zm-.27-5.84a1.56,1.56,0,0,0-1.23.5,2.28,2.28,0,0,0-.54,1.39h3.35a2.07,2.07,0,0,0-.41-1.4A1.42,1.42,0,0,0,86.94,21.78Zm8.66,4.86h0a2.29,2.29,0,0,1-2,1,2.4,2.4,0,0,1-2-.86,3.78,3.78,0,0,1-.7-2.45,3.86,3.86,0,0,1,.71-2.47,2.6,2.6,0,0,1,4,.07h.07l0-.46,0-.45V18.38h1V27.5h-.79Zm-1.94.16a1.77,1.77,0,0,0,1.44-.54,2.72,2.72,0,0,0,.45-1.75v-.2a3.18,3.18,0,0,0-.46-1.95,1.7,1.7,0,0,0-1.44-.58,1.51,1.51,0,0,0-1.32.66,3.33,3.33,0,0,0-.45,1.88,3.19,3.19,0,0,0,.45,1.86A1.54,1.54,0,0,0,93.66,26.8Zm11-5.83a2.38,2.38,0,0,1,2,.87,3.75,3.75,0,0,1,.7,2.44,3.81,3.81,0,0,1-.71,2.46,2.35,2.35,0,0,1-2,.88,2.88,2.88,0,0,1-1.15-.23,2.17,2.17,0,0,1-.87-.72h-.07l-.21.83h-.69V18.38h1V20.6c0,.49,0,.94-.05,1.33h.05A2.3,2.3,0,0,1,104.7,21Zm-.15.82a1.69,1.69,0,0,0-1.43.57,3.23,3.23,0,0,0-.44,1.92,3.22,3.22,0,0,0,.45,1.94,1.71,1.71,0,0,0,1.45.58,1.47,1.47,0,0,0,1.33-.65,3.31,3.31,0,0,0,.44-1.88,3.19,3.19,0,0,0-.44-1.87A1.54,1.54,0,0,0,104.55,21.79Zm3.5-.71h1l1.41,3.66a14.72,14.72,0,0,1,.57,1.81h.05c0-.2.15-.54.31-1s.7-2,1.6-4.45h1l-2.76,7.31a3.64,3.64,0,0,1-1,1.54,2,2,0,0,1-1.34.45,3.71,3.71,0,0,1-.88-.1V29.5a3.14,3.14,0,0,0,.72.07,1.48,1.48,0,0,0,1.43-1.12l.36-.91ZM121.9,27.5l-2.06-6.72h0c.07,1.37.11,2.28.11,2.74v4h-1.62V18.93h2.47l2,6.55h0L125,18.93h2.48V27.5h-1.7V23.45c0-.2,0-.42,0-.67s0-.91.08-2h0l-2.21,6.71Zm9-3.29a2.76,2.76,0,0,0,.32,1.47,1.33,1.33,0,0,0,2.07,0,2.79,2.79,0,0,0,.31-1.48,2.73,2.73,0,0,0-.31-1.46,1.17,1.17,0,0,0-1-.48,1.14,1.14,0,0,0-1,.48A2.7,2.7,0,0,0,130.88,24.21Zm4.53,0a3.52,3.52,0,0,1-.84,2.5,3.05,3.05,0,0,1-2.35.91,3.36,3.36,0,0,1-1.67-.41,2.75,2.75,0,0,1-1.1-1.19,4,4,0,0,1-.39-1.81,3.47,3.47,0,0,1,.84-2.49,3,3,0,0,1,2.35-.89,3.26,3.26,0,0,1,1.67.41,2.65,2.65,0,0,1,1.1,1.17A4,4,0,0,1,135.41,24.21Zm5.13-3.38a2.62,2.62,0,0,1,.61.05L141,22.55a2.58,2.58,0,0,0-.53-.05,1.86,1.86,0,0,0-1.33.44,1.58,1.58,0,0,0-.48,1.23V27.5h-1.78V21h1.35l.26,1.1h.09a2.39,2.39,0,0,1,.82-.88A2,2,0,0,1,140.54,20.83Zm6,6.67-.35-.89h-.05a2.65,2.65,0,0,1-.93.79,3.09,3.09,0,0,1-1.24.22,2,2,0,0,1-1.49-.54,2.08,2.08,0,0,1-.54-1.54,1.73,1.73,0,0,1,.73-1.53,4.19,4.19,0,0,1,2.2-.55l1.14,0v-.29a.89.89,0,0,0-1-1,4.79,4.79,0,0,0-1.85.47l-.59-1.2a5.29,5.29,0,0,1,2.51-.6,3.14,3.14,0,0,1,2,.58,2.1,2.1,0,0,1,.7,1.74V27.5Zm-.53-3-.69,0a2.17,2.17,0,0,0-1.16.28.86.86,0,0,0-.38.78c0,.51.28.76.86.76a1.34,1.34,0,0,0,1-.36A1.25,1.25,0,0,0,146,25Zm5.41,3h-1.79V18.38h1.79Zm1.8-8.24c0-.59.33-.88,1-.88s1,.29,1,.88a.89.89,0,0,1-.25.65,1,1,0,0,1-.73.22C153.51,20.13,153.18,19.84,153.18,19.26ZM155,27.5h-1.78V21H155Zm6.46-1.95a1.8,1.8,0,0,1-.71,1.54,3.44,3.44,0,0,1-2.09.53,7.06,7.06,0,0,1-1.22-.1,4.66,4.66,0,0,1-.94-.28V25.76a5.44,5.44,0,0,0,1.12.39,4.35,4.35,0,0,0,1.1.16c.65,0,1-.19,1-.56a.44.44,0,0,0-.13-.34,1.63,1.63,0,0,0-.44-.3c-.21-.11-.49-.24-.85-.39a5.42,5.42,0,0,1-1.11-.59,1.62,1.62,0,0,1-.51-.61,2.08,2.08,0,0,1-.16-.87,1.53,1.53,0,0,1,.67-1.34,3.28,3.28,0,0,1,1.92-.48,5.54,5.54,0,0,1,2.31.51l-.54,1.29c-.33-.14-.64-.25-.92-.34a2.94,2.94,0,0,0-.88-.14c-.52,0-.79.14-.79.43a.5.5,0,0,0,.25.41,7.16,7.16,0,0,0,1.12.53,4.79,4.79,0,0,1,1.13.58,1.73,1.73,0,0,1,.53.62A1.92,1.92,0,0,1,161.5,25.55Zm1.14,1.11a1,1,0,0,1,.26-.74,1.07,1.07,0,0,1,.77-.25,1,1,0,0,1,.75.25,1.14,1.14,0,0,1,0,1.47,1,1,0,0,1-.75.27,1.06,1.06,0,0,1-.76-.26A1,1,0,0,1,162.64,26.66Zm3.6-7.4c0-.59.32-.88,1-.88s1,.29,1,.88a.88.88,0,0,1-.24.65,1.06,1.06,0,0,1-.73.22C166.56,20.13,166.24,19.84,166.24,19.26Zm1.86,8.24h-1.79V21h1.79Zm3.3-3.29a2.76,2.76,0,0,0,.32,1.47,1.13,1.13,0,0,0,1,.5,1.12,1.12,0,0,0,1-.49,2.79,2.79,0,0,0,.31-1.48,2.73,2.73,0,0,0-.31-1.46,1.15,1.15,0,0,0-1-.48,1.14,1.14,0,0,0-1,.48A2.7,2.7,0,0,0,171.4,24.21Zm4.53,0a3.52,3.52,0,0,1-.84,2.5,3,3,0,0,1-2.35.91,3.32,3.32,0,0,1-1.66-.41A2.84,2.84,0,0,1,170,26a4,4,0,0,1-.39-1.81,3.47,3.47,0,0,1,.84-2.49,3,3,0,0,1,2.35-.89,3.26,3.26,0,0,1,1.67.41,2.73,2.73,0,0,1,1.11,1.17A4.11,4.11,0,0,1,175.93,24.21Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { d: "M22.5,2h147V0H22.5Zm147,41H22.5v2h147Zm-147,0A20.5,20.5,0,0,1,2,22.5H0A22.5,22.5,0,0,0,22.5,45ZM190,22.5A20.5,20.5,0,0,1,169.5,43v2A22.5,22.5,0,0,0,192,22.5ZM169.5,2A20.5,20.5,0,0,1,190,22.5h2A22.5,22.5,0,0,0,169.5,0ZM22.5,0A22.5,22.5,0,0,0,0,22.5H2A20.5,20.5,0,0,1,22.5,2Z" }, void 0)] }), void 0);
};
var PoweredByDark = function(_a) {
  var style = _a.style;
  return (0, import_jsx_runtime2.jsxs)("svg", __assign({ style, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 192 45" }, { children: [(0, import_jsx_runtime2.jsx)("path", { d: "M1,22.5A21.51,21.51,0,0,1,22.5,1h147a21.5,21.5,0,0,1,0,43H22.5A21.51,21.51,0,0,1,1,22.5Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: white }, d: "M37.6,30.9h0l-.12.16S37.56,31,37.6,30.9Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: white }, d: "M41,20.94A8.23,8.23,0,0,0,32.7,13,8.38,8.38,0,0,0,27,15.25,8.3,8.3,0,0,0,13,21v.06a17.82,17.82,0,0,0,2.41,8.48A22.43,22.43,0,0,0,17,32.09c.22.3.41.54.55.71l.17.21.05.06,0,0h0a2.67,2.67,0,0,0,3.75.25,2.62,2.62,0,0,0,.25-3.71h0l0,0-.1-.11L21.31,29A17.51,17.51,0,0,1,20.07,27a12.74,12.74,0,0,1-1.76-5.9,3,3,0,0,1,6,0,2.72,2.72,0,0,0,.3,1.14,2.66,2.66,0,0,0,5.13-.91V21a3,3,0,0,1,6,0,11.6,11.6,0,0,1-1.2,4.74c-.32.65-.62,1.18-.85,1.55-.11.19-.2.32-.26.41l-.06.08a0,0,0,0,0,0,0l0,0a2.66,2.66,0,0,1,2.08-1A2.63,2.63,0,0,1,38,29.49a2.55,2.55,0,0,1-.43,1.41h0s0,0,0,0a.1.1,0,0,0,0-.05l.12-.17c.1-.14.23-.35.39-.6A21.81,21.81,0,0,0,39.31,28,16.56,16.56,0,0,0,41,21v-.06Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: brand }, d: "M35.36,26.89a2.71,2.71,0,0,0-2.08,1,2.56,2.56,0,0,0-.57,1.62,2.63,2.63,0,0,0,2.65,2.6,2.69,2.69,0,0,0,2.11-1l.12-.16a2.6,2.6,0,0,0-2.23-4Z" }, void 0), (0, import_jsx_runtime2.jsx)("path", { style: { fill: white }, d: "M54.61,21.43a2.4,2.4,0,0,1-.89,2,4,4,0,0,1-2.54.7h-1V27.5h-1V18.93H51.4C53.54,18.93,54.61,19.77,54.61,21.43Zm-4.44,1.84h.9A3.41,3.41,0,0,0,53,22.85a1.6,1.6,0,0,0,.59-1.37A1.49,1.49,0,0,0,53,20.21a2.88,2.88,0,0,0-1.73-.42H50.17Zm11.64,1a3.55,3.55,0,0,1-.8,2.46,2.79,2.79,0,0,1-2.18.88,2.87,2.87,0,0,1-1.53-.41,2.59,2.59,0,0,1-1-1.16,4.05,4.05,0,0,1-.37-1.77,3.54,3.54,0,0,1,.79-2.44A2.75,2.75,0,0,1,58.87,21a2.71,2.71,0,0,1,2.14.9A3.51,3.51,0,0,1,61.81,24.28Zm-4.9,0a3.12,3.12,0,0,0,.49,1.88,2,2,0,0,0,2.9,0,3,3,0,0,0,.5-1.88,3,3,0,0,0-.5-1.85,2,2,0,0,0-2.9,0A3,3,0,0,0,56.91,24.28ZM68.76,27.5l-1.18-3.77c-.07-.23-.21-.75-.41-1.57h0c-.16.69-.29,1.21-.41,1.58L65.5,27.5H64.37l-1.75-6.42h1c.41,1.61.73,2.84.94,3.68A15,15,0,0,1,65,26.47h0c0-.22.11-.51.21-.86s.18-.64.25-.85l1.18-3.68h1l1.15,3.68a12.91,12.91,0,0,1,.45,1.7h0c0-.14.06-.36.13-.65s.48-1.87,1.22-4.73h1L69.91,27.5Zm6.81.12a3,3,0,0,1-2.25-.87,3.35,3.35,0,0,1-.82-2.41,3.69,3.69,0,0,1,.76-2.46A2.55,2.55,0,0,1,75.32,21a2.43,2.43,0,0,1,1.91.8,3.07,3.07,0,0,1,.7,2.09v.61H73.51a2.55,2.55,0,0,0,.56,1.72,2,2,0,0,0,1.53.59,5.15,5.15,0,0,0,2.05-.44v.87a4.77,4.77,0,0,1-1,.32A5.85,5.85,0,0,1,75.57,27.62Zm-.26-5.85a1.59,1.59,0,0,0-1.24.51,2.28,2.28,0,0,0-.54,1.39h3.36a2.13,2.13,0,0,0-.41-1.4A1.45,1.45,0,0,0,75.31,21.77ZM82.52,21a3.61,3.61,0,0,1,.77.07l-.13.9a4,4,0,0,0-.71-.08,1.71,1.71,0,0,0-1.33.63,2.3,2.3,0,0,0-.55,1.57V27.5h-1V21.08h.81l.11,1.19h0a2.72,2.72,0,0,1,.86-1A1.88,1.88,0,0,1,82.52,21Zm4.69,6.66A3,3,0,0,1,85,26.75a3.35,3.35,0,0,1-.82-2.41,3.69,3.69,0,0,1,.76-2.46A2.53,2.53,0,0,1,87,21a2.4,2.4,0,0,1,1.91.8,3,3,0,0,1,.71,2.09v.61H85.14a2.55,2.55,0,0,0,.57,1.72,2,2,0,0,0,1.53.59,5.15,5.15,0,0,0,2.05-.44v.87a4.65,4.65,0,0,1-1,.32A5.66,5.66,0,0,1,87.21,27.62Zm-.27-5.85a1.57,1.57,0,0,0-1.23.51,2.28,2.28,0,0,0-.54,1.39h3.35a2.07,2.07,0,0,0-.41-1.4A1.43,1.43,0,0,0,86.94,21.77Zm8.66,4.87h0a2.29,2.29,0,0,1-2,1,2.4,2.4,0,0,1-2-.86,3.78,3.78,0,0,1-.7-2.45,3.86,3.86,0,0,1,.71-2.47,2.6,2.6,0,0,1,4,.07h.07l0-.46,0-.45V18.38h1V27.5h-.79Zm-1.94.16a1.77,1.77,0,0,0,1.44-.54,2.72,2.72,0,0,0,.45-1.75v-.2a3.18,3.18,0,0,0-.46-1.95,1.7,1.7,0,0,0-1.44-.59,1.52,1.52,0,0,0-1.32.67,3.33,3.33,0,0,0-.45,1.88,3.19,3.19,0,0,0,.45,1.86A1.54,1.54,0,0,0,93.66,26.8Zm11-5.83a2.38,2.38,0,0,1,2,.87,3.75,3.75,0,0,1,.7,2.44,3.81,3.81,0,0,1-.71,2.46,2.35,2.35,0,0,1-2,.88,2.88,2.88,0,0,1-1.15-.23,2.17,2.17,0,0,1-.87-.72h-.07l-.21.83h-.69V18.38h1V20.6c0,.49,0,.94-.05,1.33h.05A2.3,2.3,0,0,1,104.7,21Zm-.15.82a1.69,1.69,0,0,0-1.43.57,3.23,3.23,0,0,0-.44,1.92,3.22,3.22,0,0,0,.45,1.94,1.71,1.71,0,0,0,1.45.58,1.47,1.47,0,0,0,1.33-.65,3.31,3.31,0,0,0,.44-1.88,3.19,3.19,0,0,0-.44-1.87A1.54,1.54,0,0,0,104.55,21.79Zm3.5-.71h1l1.41,3.66a14.72,14.72,0,0,1,.57,1.81h.05c0-.2.15-.54.31-1s.7-2,1.6-4.45h1l-2.76,7.31a3.64,3.64,0,0,1-1,1.54,2,2,0,0,1-1.34.45,3.71,3.71,0,0,1-.88-.1V29.5a3.14,3.14,0,0,0,.72.07,1.48,1.48,0,0,0,1.43-1.12l.36-.91ZM121.9,27.5l-2.06-6.72h0c.07,1.37.11,2.28.11,2.74v4h-1.62V18.93h2.47l2,6.55h0L125,18.93h2.48V27.5h-1.7V23.45c0-.2,0-.42,0-.67s0-.91.08-2h0l-2.21,6.71Zm9-3.29a2.76,2.76,0,0,0,.32,1.47,1.33,1.33,0,0,0,2.07,0,2.79,2.79,0,0,0,.31-1.48,2.73,2.73,0,0,0-.31-1.46,1.17,1.17,0,0,0-1-.48,1.14,1.14,0,0,0-1,.48A2.7,2.7,0,0,0,130.88,24.21Zm4.53,0a3.52,3.52,0,0,1-.84,2.5,3.05,3.05,0,0,1-2.35.91,3.36,3.36,0,0,1-1.67-.41,2.75,2.75,0,0,1-1.1-1.19,4,4,0,0,1-.39-1.81,3.47,3.47,0,0,1,.84-2.49,3,3,0,0,1,2.35-.89,3.26,3.26,0,0,1,1.67.41,2.65,2.65,0,0,1,1.1,1.17A3.94,3.94,0,0,1,135.41,24.21Zm5.13-3.38a2.62,2.62,0,0,1,.61.05L141,22.55a2.58,2.58,0,0,0-.53-.05,1.86,1.86,0,0,0-1.33.44,1.58,1.58,0,0,0-.48,1.23V27.5h-1.78V21h1.35l.26,1.1h.09a2.39,2.39,0,0,1,.82-.88A2,2,0,0,1,140.54,20.83Zm6,6.67-.35-.89h-.05a2.65,2.65,0,0,1-.93.79,3.09,3.09,0,0,1-1.24.22,2,2,0,0,1-1.49-.54,2.08,2.08,0,0,1-.54-1.54,1.73,1.73,0,0,1,.73-1.53,4.19,4.19,0,0,1,2.2-.55l1.14,0v-.29a.89.89,0,0,0-1-1,4.79,4.79,0,0,0-1.85.47l-.59-1.2a5.29,5.29,0,0,1,2.51-.6,3.14,3.14,0,0,1,2,.58,2.1,2.1,0,0,1,.7,1.74V27.5Zm-.53-3-.69,0a2.17,2.17,0,0,0-1.16.28.86.86,0,0,0-.38.78c0,.51.28.76.86.76a1.34,1.34,0,0,0,1-.36A1.25,1.25,0,0,0,146,25Zm5.41,3h-1.79V18.38h1.79Zm1.8-8.24c0-.59.33-.88,1-.88s1,.29,1,.88a.89.89,0,0,1-.25.65,1,1,0,0,1-.73.22C153.51,20.13,153.18,19.84,153.18,19.26ZM155,27.5h-1.78V21H155Zm6.46-1.95a1.8,1.8,0,0,1-.71,1.54,3.44,3.44,0,0,1-2.09.53,7.06,7.06,0,0,1-1.22-.1,4.66,4.66,0,0,1-.94-.28V25.76a5.44,5.44,0,0,0,1.12.39,4.35,4.35,0,0,0,1.1.16c.65,0,1-.19,1-.56a.44.44,0,0,0-.13-.34,1.63,1.63,0,0,0-.44-.3c-.21-.11-.49-.24-.85-.39a5.42,5.42,0,0,1-1.11-.59,1.62,1.62,0,0,1-.51-.61,2.08,2.08,0,0,1-.16-.87,1.53,1.53,0,0,1,.67-1.34,3.28,3.28,0,0,1,1.92-.48,5.54,5.54,0,0,1,2.31.51l-.54,1.29c-.33-.14-.64-.25-.92-.34a2.94,2.94,0,0,0-.88-.14c-.52,0-.79.14-.79.43a.5.5,0,0,0,.25.41,7.16,7.16,0,0,0,1.12.53,4.79,4.79,0,0,1,1.13.58,1.65,1.65,0,0,1,.53.62A1.92,1.92,0,0,1,161.5,25.55Zm1.14,1.11a1,1,0,0,1,.26-.74,1.07,1.07,0,0,1,.77-.25,1,1,0,0,1,.75.25,1,1,0,0,1,.27.74,1,1,0,0,1-.27.74,1.23,1.23,0,0,1-1.51,0A1,1,0,0,1,162.64,26.66Zm3.6-7.4c0-.59.32-.88,1-.88s1,.29,1,.88a.88.88,0,0,1-.24.65,1.06,1.06,0,0,1-.73.22C166.56,20.13,166.24,19.84,166.24,19.26Zm1.86,8.24h-1.79V21h1.79Zm3.3-3.29a2.76,2.76,0,0,0,.32,1.47,1.13,1.13,0,0,0,1,.5,1.12,1.12,0,0,0,1-.49,2.79,2.79,0,0,0,.31-1.48,2.73,2.73,0,0,0-.31-1.46,1.15,1.15,0,0,0-1-.48,1.14,1.14,0,0,0-1,.48A2.7,2.7,0,0,0,171.4,24.21Zm4.53,0a3.52,3.52,0,0,1-.84,2.5,3,3,0,0,1-2.35.91,3.32,3.32,0,0,1-1.66-.41A2.84,2.84,0,0,1,170,26a4,4,0,0,1-.39-1.81,3.47,3.47,0,0,1,.84-2.49,3,3,0,0,1,2.35-.89,3.26,3.26,0,0,1,1.67.41,2.73,2.73,0,0,1,1.11,1.17A4.08,4.08,0,0,1,175.93,24.21Z" }, void 0)] }), void 0);
};
var ByMoralis = function(_a) {
  var _b = _a.variant, variant = _b === void 0 ? "colour" : _b, _c = _a.width, width = _c === void 0 ? 250 : _c, style = _a.style;
  if (variant === "light") {
    return (0, import_jsx_runtime2.jsx)(PoweredByLight, { style: __assign({ width }, style) }, void 0);
  }
  if (variant === "dark") {
    return (0, import_jsx_runtime2.jsx)(PoweredByDark, { style: __assign({ width }, style) }, void 0);
  }
  return (0, import_jsx_runtime2.jsx)(PoweredByColour, { style: __assign({ width }, style) }, void 0);
};

export {
  getSupportedChains,
  getChain,
  MoralisContext,
  ReactMoralisError,
  NoMoralisContextProviderError,
  NotAuthenticatedError,
  ValidationError,
  useMoralis,
  useChain,
  useMoralisCloudFunction,
  useMoralisFile,
  useNewMoralisObject,
  MoralisProvider,
  useMoralisSubscription,
  useMoralisQuery,
  useMoralisWeb3ApiCall,
  useMoralisWeb3Api,
  useMoralisSolanaCall,
  useMoralisSolanaApi,
  useWeb3ExecuteFunction,
  useWeb3Contract,
  useWeb3Transfer,
  useOneInchTokens,
  useOneInchQuote,
  useOneInchSwap,
  useOpenSeaAsset,
  useOpenSeaOrders,
  useOpenSeaSellOrder,
  useOpenSeaBuyOrder,
  useFiatBuy,
  useRaribleLazyMint,
  useRaribleSellOrder,
  useApiContract,
  useERC20Balances,
  useERC20Transfers,
  resolveIPFS,
  useNFTBalances,
  useNFTTransfers,
  useNativeBalance,
  useNativeTransactions,
  useTokenPrice,
  useEnsAddress,
  useEnsName,
  ByMoralis
};
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=chunk-APIAVO5B.js.map
